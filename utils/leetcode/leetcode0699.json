{"leetcode": [{"question_id": "0600", "frontend_question_id": "0600", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones", "url_en": "https://leetcode.com/problems/non-negative-integers-without-consecutive-ones", "relative_path_cn": "/leetcode/0600-0699/0600.Non-negative%20Integers%20without%20Consecutive%20Ones/README.md", "relative_path_en": "/leetcode/0600-0699/0600.Non-negative%20Integers%20without%20Consecutive%20Ones/README_EN.md", "title_cn": "\u4e0d\u542b\u8fde\u7eed1\u7684\u975e\u8d1f\u6574\u6570", "title_en": "Non-negative Integers without Consecutive Ones", "question_title_slug": "non-negative-integers-without-consecutive-ones", "content_en": "<p>Given a positive integer n, find the number of <b>non-negative</b> integers less than or equal to n, whose binary representations do NOT contain <b>consecutive ones</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> \r\nHere are the non-negative integers <= 5 with their corresponding binary representations:\r\n0 : 0\r\n1 : 1\r\n2 : 10\r\n3 : 11\r\n4 : 100\r\n5 : 101\r\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n1 <= n <= 10<sup>9</sup>\r\n</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u975e\u8d1f\u6574\u6570\u4e2d\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0d\u5305\u542b&nbsp;<strong>\u8fde\u7eed\u76841&nbsp;</strong>\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u4e0b\u9762\u662f\u5e26\u6709\u76f8\u5e94\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&lt;= 5\uff1a\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\n\u5176\u4e2d\uff0c\u53ea\u6709\u6574\u65703\u8fdd\u53cd\u89c4\u5219\uff08\u6709\u4e24\u4e2a\u8fde\u7eed\u76841\uff09\uff0c\u5176\u4ed65\u4e2a\u6ee1\u8db3\u89c4\u5219\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong> 1 &lt;= n &lt;= 10<sup>9</sup></p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findIntegers(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findIntegers(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findIntegers(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findIntegers(self, num: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findIntegers(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindIntegers(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar findIntegers = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef find_integers(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findIntegers(_ num: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findIntegers(num int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findIntegers(num: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findIntegers(num: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_integers(num: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function findIntegers($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findIntegers(num: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0601", "frontend_question_id": "0601", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/human-traffic-of-stadium", "url_en": "https://leetcode.com/problems/human-traffic-of-stadium", "relative_path_cn": "/leetcode/0600-0699/0601.Human%20Traffic%20of%20Stadium/README.md", "relative_path_en": "/leetcode/0600-0699/0601.Human%20Traffic%20of%20Stadium/README_EN.md", "title_cn": "\u4f53\u80b2\u9986\u7684\u4eba\u6d41\u91cf", "title_en": "Human Traffic of Stadium", "question_title_slug": "human-traffic-of-stadium", "content_en": "<p>Table: <code>Stadium</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the primary key for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nNo two rows will have the same visit_date, and as the id increases, the dates increase as well.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to display the records with three or more rows with <strong>consecutive</strong> <code>id</code>&#39;s, and the number of people is greater than or equal to 100 for each.</p>\n\n<p>Return the result table ordered by <code>visit_date</code> in <strong>ascending order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<code>Stadium</code> table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n\nResult table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has &gt;= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.</pre>\n", "content_cn": "\u8868\uff1a<code>Stadium</code>\n<div class=\"original__bRMd\">\n<div>\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date \u662f\u8868\u7684\u4e3b\u952e\n\u6bcf\u65e5\u4eba\u6d41\u91cf\u4fe1\u606f\u88ab\u8bb0\u5f55\u5728\u8fd9\u4e09\u5217\u4fe1\u606f\u4e2d\uff1a<strong>\u5e8f\u53f7</strong> (id)\u3001<strong>\u65e5\u671f</strong> (visit_date)\u3001\u00a0<strong>\u4eba\u6d41\u91cf</strong> (people)\n\u6bcf\u5929\u53ea\u6709\u4e00\u884c\u8bb0\u5f55\uff0c\u65e5\u671f\u968f\u7740 id \u7684\u589e\u52a0\u800c\u589e\u52a0\n</pre>\n\n<p>\u00a0</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\u4ee5\u627e\u51fa\u6bcf\u884c\u7684\u4eba\u6570\u5927\u4e8e\u6216\u7b49\u4e8e <code>100</code> \u4e14 <code>id</code> \u8fde\u7eed\u7684\u4e09\u884c\u6216\u66f4\u591a\u884c\u8bb0\u5f55\u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u8fd4\u56de\u6309 <code>visit_date</code> \u5347\u5e8f\u6392\u5217\u7684\u7ed3\u679c\u8868\u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u67e5\u8be2\u7ed3\u679c\u683c\u5f0f\u5982\u4e0b\u6240\u793a\u3002</p>\n\n<pre>\n<code>Stadium</code> table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n\nResult table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>id</strong> \u4e3a 5\u30016\u30017\u30018 \u7684\u56db\u884c id \u8fde\u7eed\uff0c\u5e76\u4e14\u6bcf\u884c\u90fd\u6709 >= 100 \u7684\u4eba\u6570\u8bb0\u5f55\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u7b2c 7 \u884c\u548c\u7b2c 8 \u884c\u7684 visit_date \u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u8f93\u51fa\u4e5f\u5e94\u5f53\u5305\u542b\u7b2c 8 \u884c\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 id \u8fde\u7eed\u7684\u8bb0\u5f55\u3002\n\u4e0d\u8f93\u51fa id \u4e3a 2 \u548c 3 \u7684\u884c\uff0c\u56e0\u4e3a\u81f3\u5c11\u9700\u8981\u4e09\u6761 id \u8fde\u7eed\u7684\u8bb0\u5f55\u3002\n</pre>\n</div>\n</div>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0602", "frontend_question_id": "0602", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/friend-requests-ii-who-has-the-most-friends", "url_en": "https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends", "relative_path_cn": "/leetcode/0600-0699/0602.Friend%20Requests%20II%3A%20Who%20Has%20the%20Most%20Friends/README.md", "relative_path_en": "/leetcode/0600-0699/0602.Friend%20Requests%20II%3A%20Who%20Has%20the%20Most%20Friends/README_EN.md", "title_cn": "\u597d\u53cb\u7533\u8bf7 II \uff1a\u8c01\u6709\u6700\u591a\u7684\u597d\u53cb", "title_en": "Friend Requests II: Who Has the Most Friends", "question_title_slug": "friend-requests-ii-who-has-the-most-friends", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0603", "frontend_question_id": "0603", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/consecutive-available-seats", "url_en": "https://leetcode.com/problems/consecutive-available-seats", "relative_path_cn": "/leetcode/0600-0699/0603.Consecutive%20Available%20Seats/README.md", "relative_path_en": "/leetcode/0600-0699/0603.Consecutive%20Available%20Seats/README_EN.md", "title_cn": "\u8fde\u7eed\u7a7a\u4f59\u5ea7\u4f4d", "title_en": "Consecutive Available Seats", "question_title_slug": "consecutive-available-seats", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0604", "frontend_question_id": "0604", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-compressed-string-iterator", "url_en": "https://leetcode.com/problems/design-compressed-string-iterator", "relative_path_cn": "/leetcode/0600-0699/0604.Design%20Compressed%20String%20Iterator/README.md", "relative_path_en": "/leetcode/0600-0699/0604.Design%20Compressed%20String%20Iterator/README_EN.md", "title_cn": "\u8fed\u4ee3\u538b\u7f29\u5b57\u7b26\u4e32", "title_en": "Design Compressed String Iterator", "question_title_slug": "design-compressed-string-iterator", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0605", "frontend_question_id": "0605", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/can-place-flowers", "url_en": "https://leetcode.com/problems/can-place-flowers", "relative_path_cn": "/leetcode/0600-0699/0605.Can%20Place%20Flowers/README.md", "relative_path_en": "/leetcode/0600-0699/0605.Can%20Place%20Flowers/README_EN.md", "title_cn": "\u79cd\u82b1\u95ee\u9898", "title_en": "Can Place Flowers", "question_title_slug": "can-place-flowers", "content_en": "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p>\n\n<p>Given an integer array&nbsp;<code>flowerbed</code>&nbsp;containing <code>0</code>&#39;s and <code>1</code>&#39;s, where <code>0</code> means empty and <code>1</code> means not empty,&nbsp;and an integer <code>n</code>, return <em>if</em> <code>n</code> new flowers can be planted in the <code>flowerbed</code>&nbsp;without violating the no-adjacent-flowers rule.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There are no two adjacent flowers in <code>flowerbed</code>.</li>\n\t<li><code>0 &lt;= n &lt;= flowerbed.length</code></li>\n</ul>\n", "content_cn": "<p>\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u5349\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u82b1\u575b\uff08\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5305\u542b0\u548c1\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1\u8868\u793a\u79cd\u690d\u4e86\u82b1\uff09\uff0c\u548c\u4e00\u4e2a\u6570&nbsp;<strong>n&nbsp;</strong>\u3002\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165&nbsp;<strong>n&nbsp;</strong>\u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56deTrue\uff0c\u4e0d\u80fd\u5219\u8fd4\u56deFalse\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u5185\u5df2\u79cd\u597d\u7684\u82b1\u4e0d\u4f1a\u8fdd\u53cd\u79cd\u690d\u89c4\u5219\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 20000]\u3002</li>\n\t<li><strong>n</strong> \u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ol>\n", "tags_en": ["Greedy", "Array"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canPlaceFlowers(self, flowerbed, n):\n        \"\"\"\n        :type flowerbed: List[int]\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} flowerbed\n * @param {number} n\n * @return {boolean}\n */\nvar canPlaceFlowers = function(flowerbed, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} flowerbed\n# @param {Integer} n\n# @return {Boolean}\ndef can_place_flowers(flowerbed, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canPlaceFlowers(flowerbed []int, n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_place_flowers(flowerbed: Vec<i32>, n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $flowerbed\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canPlaceFlowers($flowerbed, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canPlaceFlowers(flowerbed: number[], n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0606", "frontend_question_id": "0606", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/construct-string-from-binary-tree", "url_en": "https://leetcode.com/problems/construct-string-from-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0606.Construct%20String%20from%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0606.Construct%20String%20from%20Binary%20Tree/README_EN.md", "title_cn": "\u6839\u636e\u4e8c\u53c9\u6811\u521b\u5efa\u5b57\u7b26\u4e32", "title_en": "Construct String from Binary Tree", "question_title_slug": "construct-string-from-binary-tree", "content_en": "<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\r\n\r\n<p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\n<b>Output:</b> \"1(2(4))(3)\"\r\n<br/><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br/>but you need to omit all the unnecessary empty parenthesis pairs. <br/>And it will be \"1(2(4))(3)\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\n<b>Output:</b> \"1(2()(4))(3)\"\r\n<br/><b>Explanation:</b> Almost the same as the first example, <br/>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n</pre>\r\n</p>", "content_cn": "<p>\u4f60\u9700\u8981\u91c7\u7528\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u5c06\u4e00\u4e2a\u4e8c\u53c9\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u7531\u62ec\u53f7\u548c\u6574\u6570\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7a7a\u8282\u70b9\u5219\u7528\u4e00\u5bf9\u7a7a\u62ec\u53f7 &quot;()&quot; \u8868\u793a\u3002\u800c\u4e14\u4f60\u9700\u8981\u7701\u7565\u6240\u6709\u4e0d\u5f71\u54cd\u5b57\u7b26\u4e32\u4e0e\u539f\u59cb\u4e8c\u53c9\u6811\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u7684\u7a7a\u62ec\u53f7\u5bf9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u539f\u672c\u5c06\u662f&ldquo;1(2(4)())(3())&rdquo;\uff0c\n\u5728\u4f60\u7701\u7565\u6240\u6709\u4e0d\u5fc5\u8981\u7684\u7a7a\u62ec\u53f7\u5bf9\u4e4b\u540e\uff0c\n\u5b83\u5c06\u662f&ldquo;1(2(4))(3)&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2()(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u548c\u7b2c\u4e00\u4e2a\u793a\u4f8b\u76f8\u4f3c\uff0c\n\u9664\u4e86\u6211\u4eec\u4e0d\u80fd\u7701\u7565\u7b2c\u4e00\u4e2a\u5bf9\u62ec\u53f7\u6765\u4e2d\u65ad\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u3002\n</pre>\n", "tags_en": ["Tree", "String"], "tags_cn": ["\u6811", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    string tree2str(TreeNode* t) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public String tree2str(TreeNode t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def tree2str(self, t):\n        \"\"\"\n        :type t: TreeNode\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def tree2str(self, t: TreeNode) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nchar * tree2str(struct TreeNode* t){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public string Tree2str(TreeNode t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} t\n * @return {string}\n */\nvar tree2str = function(t) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} t\n# @return {String}\ndef tree2str(t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func tree2str(_ t: TreeNode?) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc tree2str(t *TreeNode) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def tree2str(t: TreeNode): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun tree2str(t: TreeNode?): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn tree2str(t: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $t\n     * @return String\n     */\n    function tree2str($t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction tree2str(t: TreeNode | null): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0607", "frontend_question_id": "0607", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sales-person", "url_en": "https://leetcode.com/problems/sales-person", "relative_path_cn": "/leetcode/0600-0699/0607.Sales%20Person/README.md", "relative_path_en": "/leetcode/0600-0699/0607.Sales%20Person/README_EN.md", "title_cn": "\u9500\u552e\u5458", "title_en": "Sales Person", "question_title_slug": "sales-person", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0608", "frontend_question_id": "0608", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/tree-node", "url_en": "https://leetcode.com/problems/tree-node", "relative_path_cn": "/leetcode/0600-0699/0608.Tree%20Node/README.md", "relative_path_en": "/leetcode/0600-0699/0608.Tree%20Node/README_EN.md", "title_cn": "\u6811\u8282\u70b9", "title_en": "Tree Node", "question_title_slug": "tree-node", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0609", "frontend_question_id": "0609", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-duplicate-file-in-system", "url_en": "https://leetcode.com/problems/find-duplicate-file-in-system", "relative_path_cn": "/leetcode/0600-0699/0609.Find%20Duplicate%20File%20in%20System/README.md", "relative_path_en": "/leetcode/0600-0699/0609.Find%20Duplicate%20File%20in%20System/README_EN.md", "title_cn": "\u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6", "title_en": "Find Duplicate File in System", "question_title_slug": "find-duplicate-file-in-system", "content_en": "<p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p>\r\n\r\n<p>A group of duplicate files consists of at least <b>two</b> files that have exactly the same content.</p>\r\n\r\n<p>A single directory info string in the <b>input</b> list has the following format:</p>\r\n\r\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\r\n\r\n<p>It means there are <b>n</b> files (<code>f1.txt</code>, <code>f2.txt</code> ... <code>fn.txt</code> with content <code>f1_content</code>, <code>f2_content</code> ... <code>fn_content</code>, respectively) in directory <code>root/d1/d2/.../dm</code>. Note that n &gt;= 1 and m &gt;= 0. If m = 0, it means the directory is just the root directory.</p>\r\n\r\n<p>The <b>output</b> is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>\r\n\r\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\r\n<b>Output:</b>  \r\n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>No order is required for the final output.</li>\r\n\t<li>You may assume the directory name, file name and file content only has letters and digits, and the length of file content is in the range of [1,50].</li>\r\n\t<li>The number of files given is in the range of [1,20000].</li>\r\n\t<li>You may assume no files or directories share the same name in the same directory.</li>\r\n\t<li>You may assume each given directory info represents a unique directory. Directory path and file info are separated by a single blank space.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n<b>Follow-up beyond contest:</b>\r\n\r\n<ol>\r\n\t<li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\r\n\t<li>If the file content is very large (GB level), how will you modify your solution?</li>\r\n\t<li>If you can only read the file by 1kb each time, how will you modify your solution?</li>\r\n\t<li>What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?</li>\r\n\t<li>How to make sure the duplicated files you find are not false positive?</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4fe1\u606f\u5217\u8868\uff0c\u5305\u62ec\u76ee\u5f55\u8def\u5f84\uff0c\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5305\u542b\u5185\u5bb9\u7684\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u627e\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u91cd\u590d\u6587\u4ef6\u7ec4\u7684\u8def\u5f84\u3002\u4e00\u7ec4\u91cd\u590d\u7684\u6587\u4ef6\u81f3\u5c11\u5305\u62ec<strong>\u4e8c\u4e2a</strong>\u5177\u6709\u5b8c\u5168\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u3002</p>\n\n<p><strong>\u8f93\u5165</strong>\u5217\u8868\u4e2d\u7684\u5355\u4e2a\u76ee\u5f55\u4fe1\u606f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\n\n<p>\u8fd9\u610f\u5473\u7740\u6709 n \u4e2a\u6587\u4ef6\uff08<code>f1.txt</code>,&nbsp;<code>f2.txt</code>&nbsp;...&nbsp;<code>fn.txt</code> \u7684\u5185\u5bb9\u5206\u522b\u662f <code>f1_content</code>,&nbsp;<code>f2_content</code>&nbsp;...&nbsp;<code>fn_content</code>\uff09\u5728\u76ee\u5f55&nbsp;<code>root/d1/d2/.../dm</code>&nbsp;\u4e0b\u3002\u6ce8\u610f\uff1an&gt;=1 \u4e14 m&gt;=0\u3002\u5982\u679c m=0\uff0c\u5219\u8868\u793a\u8be5\u76ee\u5f55\u662f\u6839\u76ee\u5f55\u3002</p>\n\n<p>\u8be5<strong>\u8f93\u51fa</strong>\u662f\u91cd\u590d\u6587\u4ef6\u8def\u5f84\u7ec4\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5b83\u5305\u542b\u5177\u6709\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u8def\u5f84\u3002\u6587\u4ef6\u8def\u5f84\u662f\u5177\u6709\u4e0b\u5217\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a</p>\n\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>  \n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\uff1a</strong></p>\n\n<ol>\n\t<li>\u6700\u7ec8\u8f93\u51fa\u4e0d\u9700\u8981\u987a\u5e8f\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u76ee\u5f55\u540d\u3001\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u5185\u5bb9\u53ea\u6709\u5b57\u6bcd\u548c\u6570\u5b57\uff0c\u5e76\u4e14\u6587\u4ef6\u5185\u5bb9\u7684\u957f\u5ea6\u5728 [1\uff0c50] \u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6587\u4ef6\u6570\u91cf\u5728 [1\uff0c20000] \u4e2a\u8303\u56f4\u5185\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u5728\u540c\u4e00\u76ee\u5f55\u4e2d\u6ca1\u6709\u4efb\u4f55\u6587\u4ef6\u6216\u76ee\u5f55\u5171\u4eab\u76f8\u540c\u7684\u540d\u79f0\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u76ee\u5f55\u4fe1\u606f\u4ee3\u8868\u4e00\u4e2a\u552f\u4e00\u7684\u76ee\u5f55\u3002\u76ee\u5f55\u8def\u5f84\u548c\u6587\u4ef6\u4fe1\u606f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8d85\u8d8a\u7ade\u8d5b\u7684\u540e\u7eed\u884c\u52a8\uff1a</strong></p>\n\n<ol>\n\t<li>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u60a8\u5c06\u5982\u4f55\u641c\u7d22\u6587\u4ef6\uff1f\u5e7f\u5ea6\u641c\u7d22\u8fd8\u662f\u5bbd\u5ea6\u641c\u7d22\uff1f</li>\n\t<li>\u5982\u679c\u6587\u4ef6\u5185\u5bb9\u975e\u5e38\u5927\uff08GB\u7ea7\u522b\uff09\uff0c\u60a8\u5c06\u5982\u4f55\u4fee\u6539\u60a8\u7684\u89e3\u51b3\u65b9\u6848\uff1f</li>\n\t<li>\u5982\u679c\u6bcf\u6b21\u53ea\u80fd\u8bfb\u53d6 1 kb \u7684\u6587\u4ef6\uff0c\u60a8\u5c06\u5982\u4f55\u4fee\u6539\u89e3\u51b3\u65b9\u6848\uff1f</li>\n\t<li>\u4fee\u6539\u540e\u7684\u89e3\u51b3\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u5176\u4e2d\u6700\u8017\u65f6\u7684\u90e8\u5206\u548c\u6d88\u8017\u5185\u5b58\u7684\u90e8\u5206\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u4f18\u5316\uff1f</li>\n\t<li>\u5982\u4f55\u786e\u4fdd\u60a8\u53d1\u73b0\u7684\u91cd\u590d\u6587\u4ef6\u4e0d\u662f\u8bef\u62a5\uff1f</li>\n</ol>\n", "tags_en": ["Hash Table", "String"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> findDuplicate(vector<string>& paths) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<String>> findDuplicate(String[] paths) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDuplicate(self, paths):\n        \"\"\"\n        :type paths: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDuplicate(self, paths: List[str]) -> List[List[str]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** findDuplicate(char ** paths, int pathsSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> FindDuplicate(string[] paths) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} paths\n * @return {string[][]}\n */\nvar findDuplicate = function(paths) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} paths\n# @return {String[][]}\ndef find_duplicate(paths)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDuplicate(_ paths: [String]) -> [[String]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findDuplicate(paths []string) [][]string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDuplicate(paths: Array[String]): List[List[String]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDuplicate(paths: Array<String>): List<List<String>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_duplicate(paths: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $paths\n     * @return String[][]\n     */\n    function findDuplicate($paths) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDuplicate(paths: string[]): string[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0610", "frontend_question_id": "0610", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/triangle-judgement", "url_en": "https://leetcode.com/problems/triangle-judgement", "relative_path_cn": "/leetcode/0600-0699/0610.Triangle%20Judgement/README.md", "relative_path_en": "/leetcode/0600-0699/0610.Triangle%20Judgement/README_EN.md", "title_cn": "\u5224\u65ad\u4e09\u89d2\u5f62", "title_en": "Triangle Judgement", "question_title_slug": "triangle-judgement", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0611", "frontend_question_id": "0611", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-triangle-number", "url_en": "https://leetcode.com/problems/valid-triangle-number", "relative_path_cn": "/leetcode/0600-0699/0611.Valid%20Triangle%20Number/README.md", "relative_path_en": "/leetcode/0600-0699/0611.Valid%20Triangle%20Number/README_EN.md", "title_cn": "\u6709\u6548\u4e09\u89d2\u5f62\u7684\u4e2a\u6570", "title_en": "Valid Triangle Number", "question_title_slug": "valid-triangle-number", "content_en": "Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,3,4]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nValid combinations are: \r\n2,3,4 (using the first 2)\r\n2,3,4 (using the second 2)\r\n2,2,3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array won't exceed 1000.</li>\r\n<li>The integers in the given array are in the range of [0, 1000].</li>\r\n</ol>\r\n</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684\u6570\u7ec4\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u7edf\u8ba1\u5176\u4e2d\u53ef\u4ee5\u7ec4\u6210\u4e09\u89d2\u5f62\u4e09\u6761\u8fb9\u7684\u4e09\u5143\u7ec4\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,2,3,4]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u6709\u6548\u7684\u7ec4\u5408\u662f: \n2,3,4 (\u4f7f\u7528\u7b2c\u4e00\u4e2a 2)\n2,3,4 (\u4f7f\u7528\u7b2c\u4e8c\u4e2a 2)\n2,2,3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002</li>\n\t<li>\u6570\u7ec4\u91cc\u6574\u6570\u7684\u8303\u56f4\u4e3a [0, 1000]\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int triangleNumber(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int triangleNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def triangleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint triangleNumber(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int TriangleNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar triangleNumber = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef triangle_number(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func triangleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func triangleNumber(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def triangleNumber(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun triangleNumber(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn triangle_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function triangleNumber($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function triangleNumber(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0612", "frontend_question_id": "0612", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-distance-in-a-plane", "url_en": "https://leetcode.com/problems/shortest-distance-in-a-plane", "relative_path_cn": "/leetcode/0600-0699/0612.Shortest%20Distance%20in%20a%20Plane/README.md", "relative_path_en": "/leetcode/0600-0699/0612.Shortest%20Distance%20in%20a%20Plane/README_EN.md", "title_cn": "\u5e73\u9762\u4e0a\u7684\u6700\u8fd1\u8ddd\u79bb", "title_en": "Shortest Distance in a Plane", "question_title_slug": "shortest-distance-in-a-plane", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0613", "frontend_question_id": "0613", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-distance-in-a-line", "url_en": "https://leetcode.com/problems/shortest-distance-in-a-line", "relative_path_cn": "/leetcode/0600-0699/0613.Shortest%20Distance%20in%20a%20Line/README.md", "relative_path_en": "/leetcode/0600-0699/0613.Shortest%20Distance%20in%20a%20Line/README_EN.md", "title_cn": "\u76f4\u7ebf\u4e0a\u7684\u6700\u8fd1\u8ddd\u79bb", "title_en": "Shortest Distance in a Line", "question_title_slug": "shortest-distance-in-a-line", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0614", "frontend_question_id": "0614", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/second-degree-follower", "url_en": "https://leetcode.com/problems/second-degree-follower", "relative_path_cn": "/leetcode/0600-0699/0614.Second%20Degree%20Follower/README.md", "relative_path_en": "/leetcode/0600-0699/0614.Second%20Degree%20Follower/README_EN.md", "title_cn": "\u4e8c\u7ea7\u5173\u6ce8\u8005", "title_en": "Second Degree Follower", "question_title_slug": "second-degree-follower", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0615", "frontend_question_id": "0615", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/average-salary-departments-vs-company", "url_en": "https://leetcode.com/problems/average-salary-departments-vs-company", "relative_path_cn": "/leetcode/0600-0699/0615.Average%20Salary%3A%20Departments%20VS%20Company/README.md", "relative_path_en": "/leetcode/0600-0699/0615.Average%20Salary%3A%20Departments%20VS%20Company/README_EN.md", "title_cn": "\u5e73\u5747\u5de5\u8d44\uff1a\u90e8\u95e8\u4e0e\u516c\u53f8\u6bd4\u8f83", "title_en": "Average Salary: Departments VS Company", "question_title_slug": "average-salary-departments-vs-company", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0616", "frontend_question_id": "0616", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/add-bold-tag-in-string", "url_en": "https://leetcode.com/problems/add-bold-tag-in-string", "relative_path_cn": "/leetcode/0600-0699/0616.Add%20Bold%20Tag%20in%20String/README.md", "relative_path_en": "/leetcode/0600-0699/0616.Add%20Bold%20Tag%20in%20String/README_EN.md", "title_cn": "\u7ed9\u5b57\u7b26\u4e32\u6dfb\u52a0\u52a0\u7c97\u6807\u7b7e", "title_en": "Add Bold Tag in String", "question_title_slug": "add-bold-tag-in-string", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0617", "frontend_question_id": "0617", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/merge-two-binary-trees", "url_en": "https://leetcode.com/problems/merge-two-binary-trees", "relative_path_cn": "/leetcode/0600-0699/0617.Merge%20Two%20Binary%20Trees/README.md", "relative_path_en": "/leetcode/0600-0699/0617.Merge%20Two%20Binary%20Trees/README_EN.md", "title_cn": "\u5408\u5e76\u4e8c\u53c9\u6811", "title_en": "Merge Two Binary Trees", "question_title_slug": "merge-two-binary-trees", "content_en": "<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>\r\n\r\n<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\tTree 1                     Tree 2                  \r\n          1                         2                             \r\n         / \\                       / \\                            \r\n        3   2                     1   3                        \r\n       /                           \\   \\                      \r\n      5                             4   7                  \r\n<b>Output:</b> \r\nMerged tree:\r\n\t     3\r\n\t    / \\\r\n\t   4   5\r\n\t  / \\   \\ \r\n\t 5   4   7\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> The merging process must start from the root nodes of both trees.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002</p>\n\n<p>\u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219<strong>\u4e0d\u4e3a&nbsp;</strong>NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\tTree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n<strong>\u8f93\u51fa:</strong> \n\u5408\u5e76\u540e\u7684\u6811:\n\t     3\n\t    / \\\n\t   4   5\n\t  / \\   \\ \n\t 5   4   7\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u5408\u5e76\u5fc5\u987b\u4ece\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} t1\n * @param {TreeNode} t2\n * @return {TreeNode}\n */\nvar mergeTrees = function(t1, t2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} t1\n# @param {TreeNode} t2\n# @return {TreeNode}\ndef merge_trees(t1, t2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func mergeTrees(_ t1: TreeNode?, _ t2: TreeNode?) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def mergeTrees(t1: TreeNode, t2: TreeNode): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun mergeTrees(t1: TreeNode?, t2: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn merge_trees(t1: Option<Rc<RefCell<TreeNode>>>, t2: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $t1\n     * @param TreeNode $t2\n     * @return TreeNode\n     */\n    function mergeTrees($t1, $t2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction mergeTrees(t1: TreeNode | null, t2: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0618", "frontend_question_id": "0618", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/students-report-by-geography", "url_en": "https://leetcode.com/problems/students-report-by-geography", "relative_path_cn": "/leetcode/0600-0699/0618.Students%20Report%20By%20Geography/README.md", "relative_path_en": "/leetcode/0600-0699/0618.Students%20Report%20By%20Geography/README_EN.md", "title_cn": "\u5b66\u751f\u5730\u7406\u4fe1\u606f\u62a5\u544a", "title_en": "Students Report By Geography", "question_title_slug": "students-report-by-geography", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0619", "frontend_question_id": "0619", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/biggest-single-number", "url_en": "https://leetcode.com/problems/biggest-single-number", "relative_path_cn": "/leetcode/0600-0699/0619.Biggest%20Single%20Number/README.md", "relative_path_en": "/leetcode/0600-0699/0619.Biggest%20Single%20Number/README_EN.md", "title_cn": "\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6700\u5927\u6570\u5b57", "title_en": "Biggest Single Number", "question_title_slug": "biggest-single-number", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0620", "frontend_question_id": "0620", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/not-boring-movies", "url_en": "https://leetcode.com/problems/not-boring-movies", "relative_path_cn": "/leetcode/0600-0699/0620.Not%20Boring%20Movies/README.md", "relative_path_en": "/leetcode/0600-0699/0620.Not%20Boring%20Movies/README_EN.md", "title_cn": "\u6709\u8da3\u7684\u7535\u5f71", "title_en": "Not Boring Movies", "question_title_slug": "not-boring-movies", "content_en": "X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies&rsquo; ratings and descriptions.\r\n<p>Please write a SQL query to output movies with an odd numbered ID and a description that is not &#39;boring&#39;. Order the result by rating.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example, table <code>cinema</code>:</p>\r\n\r\n<pre>\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   1     | War       |   great 3D   |   8.9     |\r\n|   2     | Science   |   fiction    |   8.5     |\r\n|   3     | irish     |   boring     |   6.2     |\r\n|   4     | Ice song  |   Fantacy    |   8.6     |\r\n|   5     | House card|   Interesting|   9.1     |\r\n+---------+-----------+--------------+-----------+\r\n</pre>\r\nFor the example above, the output should be:\r\n\r\n<pre>\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   5     | House card|   Interesting|   9.1     |\r\n|   1     | War       |   great 3D   |   8.9     |\r\n+---------+-----------+--------------+-----------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002</p>\n\n<p>\u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a<strong>\u975e</strong>&nbsp;<code>boring</code>&nbsp;(\u4e0d\u65e0\u804a)&nbsp;\u7684\u5e76\u4e14<strong> id \u4e3a\u5947\u6570&nbsp;</strong>\u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7 <code>rating</code> \u6392\u5217\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f8b\u5982\uff0c\u4e0b\u8868 <code>cinema</code>:</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n", "__typename": "CodeSnippetNode"}]}, {"question_id": "0621", "frontend_question_id": "0621", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/task-scheduler", "url_en": "https://leetcode.com/problems/task-scheduler", "relative_path_cn": "/leetcode/0600-0699/0621.Task%20Scheduler/README.md", "relative_path_en": "/leetcode/0600-0699/0621.Task%20Scheduler/README_EN.md", "title_cn": "\u4efb\u52a1\u8c03\u5ea6\u5668", "title_en": "Task Scheduler", "question_title_slug": "task-scheduler", "content_en": "<p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n\n<p>However, there is a non-negative integer&nbsp;<code>n</code> that represents the cooldown period between&nbsp;two <b>same tasks</b>&nbsp;(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p>\n\n<p>Return <em>the least number of units of times that the CPU will take to finish all the given tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.\n[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]\n[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]\n[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]\n...\nAnd so on.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> is upper-case English letter.</li>\n\t<li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u00a0<code>tasks</code> \u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u8868\u793a\u4e00\u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002\u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0cCPU \u53ef\u4ee5\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5904\u4e8e\u5f85\u547d\u72b6\u6001\u3002</p>\n\n<p>\u7136\u800c\uff0c\u4e24\u4e2a<strong> \u76f8\u540c\u79cd\u7c7b</strong> \u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a\u6574\u6570<strong> </strong><code>n</code><strong> </strong>\u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed <code>n</code> \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684<strong> \u6700\u77ed\u65f6\u95f4</strong> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n<strong>\u8f93\u51fa\uff1a</strong>8\n<strong>\u89e3\u91ca\uff1a</strong>A -> B -> (\u5f85\u547d) -> A -> B -> (\u5f85\u547d) -> A -> B\n     \u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u95f4\u9694\u957f\u5ea6\u4e3a n = 2 \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u800c\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u6240\u4ee5\u4e2d\u95f4\u51fa\u73b0\u4e86\uff08\u5f85\u547d\uff09\u72b6\u6001\u3002 </pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u5927\u5c0f\u4e3a 6 \u7684\u6392\u5217\u90fd\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\uff0c\u56e0\u4e3a n = 0\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\n\u8bf8\u5982\u6b64\u7c7b\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n<strong>\u8f93\u51fa\uff1a</strong>16\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\n     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (\u5f85\u547d) -> (\u5f85\u547d) -> A -> (\u5f85\u547d) -> (\u5f85\u547d) -> A\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= task.length <= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> \u662f\u5927\u5199\u82f1\u6587\u5b57\u6bcd</li>\n\t<li><code>n</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a <code>[0, 100]</code></li>\n</ul>\n", "tags_en": ["Greedy", "Queue", "Array"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u961f\u5217", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int leastInterval(vector<char>& tasks, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int leastInterval(char[] tasks, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def leastInterval(self, tasks, n):\n        \"\"\"\n        :type tasks: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint leastInterval(char* tasks, int tasksSize, int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LeastInterval(char[] tasks, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[]} tasks\n * @param {number} n\n * @return {number}\n */\nvar leastInterval = function(tasks, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[]} tasks\n# @param {Integer} n\n# @return {Integer}\ndef least_interval(tasks, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func leastInterval(_ tasks: [Character], _ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func leastInterval(tasks []byte, n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun leastInterval(tasks: CharArray, n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn least_interval(tasks: Vec<char>, n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $tasks\n     * @param Integer $n\n     * @return Integer\n     */\n    function leastInterval($tasks, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function leastInterval(tasks: string[], n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0860", "frontend_question_id": "0622", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-circular-queue", "url_en": "https://leetcode.com/problems/design-circular-queue", "relative_path_cn": "/leetcode/0600-0699/0622.Design%20Circular%20Queue/README.md", "relative_path_en": "/leetcode/0600-0699/0622.Design%20Circular%20Queue/README_EN.md", "title_cn": "\u8bbe\u8ba1\u5faa\u73af\u961f\u5217", "title_en": "Design Circular Queue", "question_title_slug": "design-circular-queue", "content_en": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\n\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n\n<p>Implementation the <code>MyCircularQueue</code> class:</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li>\n\t<li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li>\n\t<li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCircularQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;, &quot;isFull&quot;, &quot;deQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\n<strong>Output</strong>\n[null, true, true, true, false, 3, true, true, true, 4]\n\n<strong>Explanation</strong>\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= value &lt;= 1000</code></li>\n\t<li>At most <code>3000</code> calls will be made to&nbsp;<code>enQueue</code>, <code>deQueue</code>,&nbsp;<code>Front</code>,&nbsp;<code>Rear</code>,&nbsp;<code>isEmpty</code>, and&nbsp;<code>isFull</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong>&nbsp;Could you solve the problem without using the built-in queue?&nbsp;", "content_cn": "<p>\u8bbe\u8ba1\u4f60\u7684\u5faa\u73af\u961f\u5217\u5b9e\u73b0\u3002 \u5faa\u73af\u961f\u5217\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u8868\u73b0\u57fa\u4e8e FIFO\uff08\u5148\u8fdb\u5148\u51fa\uff09\u539f\u5219\u5e76\u4e14\u961f\u5c3e\u88ab\u8fde\u63a5\u5728\u961f\u9996\u4e4b\u540e\u4ee5\u5f62\u6210\u4e00\u4e2a\u5faa\u73af\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a&ldquo;\u73af\u5f62\u7f13\u51b2\u5668&rdquo;\u3002</p>\n\n<p>\u5faa\u73af\u961f\u5217\u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u961f\u5217\u4e4b\u524d\u7528\u8fc7\u7684\u7a7a\u95f4\u3002\u5728\u4e00\u4e2a\u666e\u901a\u961f\u5217\u91cc\uff0c\u4e00\u65e6\u4e00\u4e2a\u961f\u5217\u6ee1\u4e86\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u63d2\u5165\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u4f7f\u5728\u961f\u5217\u524d\u9762\u4ecd\u6709\u7a7a\u95f4\u3002\u4f46\u662f\u4f7f\u7528\u5faa\u73af\u961f\u5217\uff0c\u6211\u4eec\u80fd\u4f7f\u7528\u8fd9\u4e9b\u7a7a\u95f4\u53bb\u5b58\u50a8\u65b0\u7684\u503c\u3002</p>\n\n<p>\u4f60\u7684\u5b9e\u73b0\u5e94\u8be5\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: \u6784\u9020\u5668\uff0c\u8bbe\u7f6e\u961f\u5217\u957f\u5ea6\u4e3a k \u3002</li>\n\t<li><code>Front</code>: \u4ece\u961f\u9996\u83b7\u53d6\u5143\u7d20\u3002\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1 \u3002</li>\n\t<li><code>Rear</code>: \u83b7\u53d6\u961f\u5c3e\u5143\u7d20\u3002\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1 \u3002</li>\n\t<li><code>enQueue(value)</code>: \u5411\u5faa\u73af\u961f\u5217\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6210\u529f\u63d2\u5165\u5219\u8fd4\u56de\u771f\u3002</li>\n\t<li><code>deQueue()</code>: \u4ece\u5faa\u73af\u961f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6210\u529f\u5220\u9664\u5219\u8fd4\u56de\u771f\u3002</li>\n\t<li><code>isEmpty()</code>: \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002</li>\n\t<li><code>isFull()</code>: \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u5df2\u6ee1\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MyCircularQueue(3); // \u8bbe\u7f6e\u957f\u5ea6\u4e3a 3\ncircularQueue.enQueue(1); &nbsp;// \u8fd4\u56de true\ncircularQueue.enQueue(2); &nbsp;// \u8fd4\u56de true\ncircularQueue.enQueue(3); &nbsp;// \u8fd4\u56de true\ncircularQueue.enQueue(4); &nbsp;// \u8fd4\u56de false\uff0c\u961f\u5217\u5df2\u6ee1\ncircularQueue.Rear(); &nbsp;// \u8fd4\u56de 3\ncircularQueue.isFull(); &nbsp;// \u8fd4\u56de true\ncircularQueue.deQueue(); &nbsp;// \u8fd4\u56de true\ncircularQueue.enQueue(4); &nbsp;// \u8fd4\u56de true\ncircularQueue.Rear(); &nbsp;// \u8fd4\u56de 4</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728 0&nbsp;\u81f3 1000 \u7684\u8303\u56f4\u5185\uff1b</li>\n\t<li>\u64cd\u4f5c\u6570\u5c06\u5728 1 \u81f3 1000 \u7684\u8303\u56f4\u5185\uff1b</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u961f\u5217\u5e93\u3002</li>\n</ul>\n", "tags_en": ["Design", "Queue"], "tags_cn": ["\u8bbe\u8ba1", "\u961f\u5217"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCircularQueue {\npublic:\n    MyCircularQueue(int k) {\n\n    }\n    \n    bool enQueue(int value) {\n\n    }\n    \n    bool deQueue() {\n\n    }\n    \n    int Front() {\n\n    }\n    \n    int Rear() {\n\n    }\n    \n    bool isEmpty() {\n\n    }\n    \n    bool isFull() {\n\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyCircularQueue {\n\n    public MyCircularQueue(int k) {\n\n    }\n    \n    public boolean enQueue(int value) {\n\n    }\n    \n    public boolean deQueue() {\n\n    }\n    \n    public int Front() {\n\n    }\n    \n    public int Rear() {\n\n    }\n    \n    public boolean isEmpty() {\n\n    }\n    \n    public boolean isFull() {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyCircularQueue(object):\n\n    def __init__(self, k):\n        \"\"\"\n        :type k: int\n        \"\"\"\n\n\n    def enQueue(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: bool\n        \"\"\"\n\n\n    def deQueue(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n\n    def Front(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def Rear(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def isEmpty(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n\n    def isFull(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCircularQueue:\n\n    def __init__(self, k: int):\n\n\n    def enQueue(self, value: int) -> bool:\n\n\n    def deQueue(self) -> bool:\n\n\n    def Front(self) -> int:\n\n\n    def Rear(self) -> int:\n\n\n    def isEmpty(self) -> bool:\n\n\n    def isFull(self) -> bool:\n\n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} MyCircularQueue;\n\n\nMyCircularQueue* myCircularQueueCreate(int k) {\n\n}\n\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\n\n}\n\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\n\n}\n\nint myCircularQueueFront(MyCircularQueue* obj) {\n\n}\n\nint myCircularQueueRear(MyCircularQueue* obj) {\n\n}\n\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\n\n}\n\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\n\n}\n\nvoid myCircularQueueFree(MyCircularQueue* obj) {\n\n}\n\n/**\n * Your MyCircularQueue struct will be instantiated and called as such:\n * MyCircularQueue* obj = myCircularQueueCreate(k);\n * bool param_1 = myCircularQueueEnQueue(obj, value);\n \n * bool param_2 = myCircularQueueDeQueue(obj);\n \n * int param_3 = myCircularQueueFront(obj);\n \n * int param_4 = myCircularQueueRear(obj);\n \n * bool param_5 = myCircularQueueIsEmpty(obj);\n \n * bool param_6 = myCircularQueueIsFull(obj);\n \n * myCircularQueueFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCircularQueue {\n\n    public MyCircularQueue(int k) {\n\n    }\n    \n    public bool EnQueue(int value) {\n\n    }\n    \n    public bool DeQueue() {\n\n    }\n    \n    public int Front() {\n\n    }\n    \n    public int Rear() {\n\n    }\n    \n    public bool IsEmpty() {\n\n    }\n    \n    public bool IsFull() {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * bool param_1 = obj.EnQueue(value);\n * bool param_2 = obj.DeQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * bool param_5 = obj.IsEmpty();\n * bool param_6 = obj.IsFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n\n};\n\n/** \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n\n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n\n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Front = function() {\n\n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Rear = function() {\n\n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isEmpty = function() {\n\n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isFull = function() {\n\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCircularQueue\n\n=begin\n    :type k: Integer\n=end\n    def initialize(k)\n\n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def en_queue(value)\n\n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def de_queue()\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def front()\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def rear()\n\n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def is_empty()\n\n    end\n\n\n=begin\n    :rtype: Boolean\n=end\n    def is_full()\n\n    end\n\n\nend\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue.new(k)\n# param_1 = obj.en_queue(value)\n# param_2 = obj.de_queue()\n# param_3 = obj.front()\n# param_4 = obj.rear()\n# param_5 = obj.is_empty()\n# param_6 = obj.is_full()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyCircularQueue {\n\n    init(_ k: Int) {\n\n    }\n    \n    func enQueue(_ value: Int) -> Bool {\n\n    }\n    \n    func deQueue() -> Bool {\n\n    }\n    \n    func Front() -> Int {\n\n    }\n    \n    func Rear() -> Int {\n\n    }\n    \n    func isEmpty() -> Bool {\n\n    }\n    \n    func isFull() -> Bool {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue(k)\n * let ret_1: Bool = obj.enQueue(value)\n * let ret_2: Bool = obj.deQueue()\n * let ret_3: Int = obj.Front()\n * let ret_4: Int = obj.Rear()\n * let ret_5: Bool = obj.isEmpty()\n * let ret_6: Bool = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCircularQueue struct {\n\n}\n\n\nfunc Constructor(k int) MyCircularQueue {\n\n}\n\n\nfunc (this *MyCircularQueue) EnQueue(value int) bool {\n\n}\n\n\nfunc (this *MyCircularQueue) DeQueue() bool {\n\n}\n\n\nfunc (this *MyCircularQueue) Front() int {\n\n}\n\n\nfunc (this *MyCircularQueue) Rear() int {\n\n}\n\n\nfunc (this *MyCircularQueue) IsEmpty() bool {\n\n}\n\n\nfunc (this *MyCircularQueue) IsFull() bool {\n\n}\n\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.EnQueue(value);\n * param_2 := obj.DeQueue();\n * param_3 := obj.Front();\n * param_4 := obj.Rear();\n * param_5 := obj.IsEmpty();\n * param_6 := obj.IsFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCircularQueue(_k: Int) {\n\n    def enQueue(value: Int): Boolean = {\n\n    }\n\n    def deQueue(): Boolean = {\n\n    }\n\n    def Front(): Int = {\n\n    }\n\n    def Rear(): Int = {\n\n    }\n\n    def isEmpty(): Boolean = {\n\n    }\n\n    def isFull(): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCircularQueue(k: Int) {\n\n    fun enQueue(value: Int): Boolean {\n\n    }\n\n    fun deQueue(): Boolean {\n\n    }\n\n    fun Front(): Int {\n\n    }\n\n    fun Rear(): Int {\n\n    }\n\n    fun isEmpty(): Boolean {\n\n    }\n\n    fun isFull(): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCircularQueue {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCircularQueue {\n\n    fn new(k: i32) -> Self {\n\n    }\n    \n    fn en_queue(&self, value: i32) -> bool {\n\n    }\n    \n    fn de_queue(&self) -> bool {\n\n    }\n    \n    fn front(&self) -> i32 {\n\n    }\n    \n    fn rear(&self) -> i32 {\n\n    }\n    \n    fn is_empty(&self) -> bool {\n\n    }\n    \n    fn is_full(&self) -> bool {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * let obj = MyCircularQueue::new(k);\n * let ret_1: bool = obj.en_queue(value);\n * let ret_2: bool = obj.de_queue();\n * let ret_3: i32 = obj.front();\n * let ret_4: i32 = obj.rear();\n * let ret_5: bool = obj.is_empty();\n * let ret_6: bool = obj.is_full();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCircularQueue {\n    /**\n     * @param Integer $k\n     */\n    function __construct($k) {\n\n    }\n\n    /**\n     * @param Integer $value\n     * @return Boolean\n     */\n    function enQueue($value) {\n\n    }\n\n    /**\n     * @return Boolean\n     */\n    function deQueue() {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function Front() {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function Rear() {\n\n    }\n\n    /**\n     * @return Boolean\n     */\n    function isEmpty() {\n\n    }\n\n    /**\n     * @return Boolean\n     */\n    function isFull() {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * $obj = MyCircularQueue($k);\n * $ret_1 = $obj->enQueue($value);\n * $ret_2 = $obj->deQueue();\n * $ret_3 = $obj->Front();\n * $ret_4 = $obj->Rear();\n * $ret_5 = $obj->isEmpty();\n * $ret_6 = $obj->isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCircularQueue {\n    constructor(k: number) {\n\n    }\n\n    enQueue(value: number): boolean {\n\n    }\n\n    deQueue(): boolean {\n\n    }\n\n    Front(): number {\n\n    }\n\n    Rear(): number {\n\n    }\n\n    isEmpty(): boolean {\n\n    }\n\n    isFull(): boolean {\n\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0623", "frontend_question_id": "0623", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/add-one-row-to-tree", "url_en": "https://leetcode.com/problems/add-one-row-to-tree", "relative_path_cn": "/leetcode/0600-0699/0623.Add%20One%20Row%20to%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0623.Add%20One%20Row%20to%20Tree/README_EN.md", "title_cn": "\u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c", "title_en": "Add One Row to Tree", "question_title_slug": "add-one-row-to-tree", "content_en": "<p>Given the root of a binary tree, then value <code>v</code> and depth <code>d</code>, you need to add a row of nodes with value <code>v</code> at the given depth <code>d</code>. The root node is at depth 1. </p>\r\n\r\n<p>The adding rule is: given a positive integer depth <code>d</code>, for each NOT null tree nodes <code>N</code> in depth <code>d-1</code>, create two tree nodes with value <code>v</code> as <code>N's</code> left subtree root and right subtree root. And <code>N's</code> <b>original left subtree</b> should be the left subtree of the new left subtree root, its <b>original right subtree</b> should be the right subtree of the new right subtree root. If depth <code>d</code> is 1 that means there is no depth d-1 at all, then create a tree node with value <b>v</b> as the new root of the whole original tree, and the original tree is the new root's left subtree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nA binary tree as following:\r\n       4\r\n     /   \\\r\n    2     6\r\n   / \\   / \r\n  3   1 5   \r\n\r\n<b>v = 1</b>\r\n\r\n<b>d = 2</b>\r\n\r\n<b>Output:</b> \r\n       4\r\n      / \\\r\n     1   1\r\n    /     \\\r\n   2       6\r\n  / \\     / \r\n 3   1   5   \r\n\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nA binary tree as following:\r\n      4\r\n     /   \r\n    2    \r\n   / \\   \r\n  3   1    \r\n\r\n<b>v = 1</b>\r\n\r\n<b>d = 3</b>\r\n\r\n<b>Output:</b> \r\n      4\r\n     /   \r\n    2\r\n   / \\    \r\n  1   1\r\n /     \\  \r\n3       1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given d is in range [1, maximum depth of the given tree + 1].</li>\r\n<li>The given binary tree has at least one tree node.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6839\u8282\u70b9\u4e3a\u7b2c1\u5c42\uff0c\u6df1\u5ea6\u4e3a 1\u3002\u5728\u5176\u7b2c&nbsp;<code>d</code>&nbsp;\u5c42\u8ffd\u52a0\u4e00\u884c\u503c\u4e3a&nbsp;<code>v</code>&nbsp;\u7684\u8282\u70b9\u3002</p>\n\n<p>\u6dfb\u52a0\u89c4\u5219\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6df1\u5ea6\u503c <code>d</code> \uff08\u6b63\u6574\u6570\uff09\uff0c\u9488\u5bf9\u6df1\u5ea6\u4e3a <code>d-1</code> \u5c42\u7684\u6bcf\u4e00<strong>\u975e\u7a7a</strong>\u8282\u70b9 <code>N</code>\uff0c\u4e3a <code>N</code> \u521b\u5efa\u4e24\u4e2a\u503c\u4e3a&nbsp;<code>v</code>&nbsp;\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u5c06&nbsp;<code>N</code> \u539f\u5148\u7684\u5de6\u5b50\u6811\uff0c\u8fde\u63a5\u4e3a\u65b0\u8282\u70b9&nbsp;<code>v</code> \u7684\u5de6\u5b50\u6811\uff1b\u5c06&nbsp;<code>N</code> \u539f\u5148\u7684\u53f3\u5b50\u6811\uff0c\u8fde\u63a5\u4e3a\u65b0\u8282\u70b9&nbsp;<code>v</code> \u7684\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u5982\u679c <code>d</code> \u7684\u503c\u4e3a 1\uff0c\u6df1\u5ea6 d - 1 \u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6839\u8282\u70b9 <code>v</code>\uff0c\u539f\u5148\u7684\u6574\u68f5\u6811\u5c06\u4f5c\u4e3a <code>v</code> \u7684\u5de6\u5b50\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<strong>v = 1</strong>\n\n<strong>d = 2</strong>\n\n<strong>\u8f93\u51fa:</strong> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<strong>v = 1</strong>\n\n<strong>d = 3</strong>\n\n<strong>\u8f93\u51fa:</strong> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u6df1\u5ea6\u503c d \u7684\u8303\u56f4\u662f\uff1a[1\uff0c\u4e8c\u53c9\u6811\u6700\u5927\u6df1\u5ea6 + 1]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u4e8c\u53c9\u6811\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u3002</li>\n</ol>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* addOneRow(TreeNode* root, int v, int d) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode addOneRow(TreeNode root, int v, int d) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def addOneRow(self, root, v, d):\n        \"\"\"\n        :type root: TreeNode\n        :type v: int\n        :type d: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def addOneRow(self, root: TreeNode, v: int, d: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* addOneRow(struct TreeNode* root, int v, int d){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode AddOneRow(TreeNode root, int v, int d) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} v\n * @param {number} d\n * @return {TreeNode}\n */\nvar addOneRow = function(root, v, d) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} v\n# @param {Integer} d\n# @return {TreeNode}\ndef add_one_row(root, v, d)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func addOneRow(_ root: TreeNode?, _ v: Int, _ d: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc addOneRow(root *TreeNode, v int, d int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def addOneRow(root: TreeNode, v: Int, d: Int): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun addOneRow(root: TreeNode?, v: Int, d: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn add_one_row(root: Option<Rc<RefCell<TreeNode>>>, v: i32, d: i32) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $v\n     * @param Integer $d\n     * @return TreeNode\n     */\n    function addOneRow($root, $v, $d) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction addOneRow(root: TreeNode | null, v: number, d: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0624", "frontend_question_id": "0624", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/maximum-distance-in-arrays", "url_en": "https://leetcode.com/problems/maximum-distance-in-arrays", "relative_path_cn": "/leetcode/0600-0699/0624.Maximum%20Distance%20in%20Arrays/README.md", "relative_path_en": "/leetcode/0600-0699/0624.Maximum%20Distance%20in%20Arrays/README_EN.md", "title_cn": "\u6570\u7ec4\u5217\u8868\u4e2d\u7684\u6700\u5927\u8ddd\u79bb", "title_en": "Maximum Distance in Arrays", "question_title_slug": "maximum-distance-in-arrays", "content_en": null, "content_cn": null, "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0625", "frontend_question_id": "0625", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/minimum-factorization", "url_en": "https://leetcode.com/problems/minimum-factorization", "relative_path_cn": "/leetcode/0600-0699/0625.Minimum%20Factorization/README.md", "relative_path_en": "/leetcode/0600-0699/0625.Minimum%20Factorization/README_EN.md", "title_cn": "\u6700\u5c0f\u56e0\u5f0f\u5206\u89e3", "title_en": "Minimum Factorization", "question_title_slug": "minimum-factorization", "content_en": null, "content_cn": null, "tags_en": ["Recursion", "Math"], "tags_cn": ["\u9012\u5f52", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0626", "frontend_question_id": "0626", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/exchange-seats", "url_en": "https://leetcode.com/problems/exchange-seats", "relative_path_cn": "/leetcode/0600-0699/0626.Exchange%20Seats/README.md", "relative_path_en": "/leetcode/0600-0699/0626.Exchange%20Seats/README_EN.md", "title_cn": "\u6362\u5ea7\u4f4d", "title_en": "Exchange Seats", "question_title_slug": "exchange-seats", "content_en": "<p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students&#39; names and their corresponding seat ids.</p>\n\n<p>The column <b>id</b> is continuous increment.</p>\n\n<p>Mary wants to change seats for the adjacent students.</p>\n\n<p>Can you write a SQL query to output the result for Mary?</p>\n\n<p>&nbsp;</p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\n\n<p>For the sample input, the output is:</p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\n\n<p><b>Note:</b></p>\n\n<p>If the number of students is odd, there is no need to change the last one&#39;s seat.</p>\n", "content_cn": "<p>\u5c0f\u7f8e\u662f\u4e00\u6240\u4e2d\u5b66\u7684\u4fe1\u606f\u79d1\u6280\u8001\u5e08\uff0c\u5979\u6709\u4e00\u5f20 <code>seat</code>&nbsp;\u5ea7\u4f4d\u8868\uff0c\u5e73\u65f6\u7528\u6765\u50a8\u5b58\u5b66\u751f\u540d\u5b57\u548c\u4e0e\u4ed6\u4eec\u76f8\u5bf9\u5e94\u7684\u5ea7\u4f4d id\u3002</p>\n\n<p>\u5176\u4e2d\u7eb5\u5217\u7684&nbsp;<strong>id&nbsp;</strong>\u662f\u8fde\u7eed\u9012\u589e\u7684</p>\n\n<p>\u5c0f\u7f8e\u60f3\u6539\u53d8\u76f8\u90bb\u4fe9\u5b66\u751f\u7684\u5ea7\u4f4d\u3002</p>\n\n<p>\u4f60\u80fd\u4e0d\u80fd\u5e2e\u5979\u5199\u4e00\u4e2a SQL query&nbsp;\u6765\u8f93\u51fa\u5c0f\u7f8e\u60f3\u8981\u7684\u7ed3\u679c\u5462\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\n\n<p>\u5047\u5982\u6570\u636e\u8f93\u5165\u7684\u662f\u4e0a\u8868\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a</p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u5982\u679c\u5b66\u751f\u4eba\u6570\u662f\u5947\u6570\uff0c\u5219\u4e0d\u9700\u8981\u6539\u53d8\u6700\u540e\u4e00\u4e2a\u540c\u5b66\u7684\u5ea7\u4f4d\u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0627", "frontend_question_id": "0627", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/swap-salary", "url_en": "https://leetcode.com/problems/swap-salary", "relative_path_cn": "/leetcode/0600-0699/0627.Swap%20Salary/README.md", "relative_path_en": "/leetcode/0600-0699/0627.Swap%20Salary/README_EN.md", "title_cn": "\u53d8\u66f4\u6027\u522b", "title_en": "Swap Salary", "question_title_slug": "swap-salary", "content_en": "<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p>\r\n\r\n<p>Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | m   | 2500   |\r\n| 2  | B    | f   | 1500   |\r\n| 3  | C    | m   | 5500   |\r\n| 4  | D    | f   | 500    |\r\n</pre>\r\nAfter running your <strong>update</strong> statement, the above salary table should have the following rows:\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | f   | 2500   |\r\n| 2  | B    | m   | 1500   |\r\n| 3  | C    | f   | 5500   |\r\n| 4  | D    | m   | 500    |\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>salary</code>&nbsp;\u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709 m = \u7537\u6027 \u548c f = \u5973\u6027 \u7684\u503c\u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c\uff08\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u8981\u6c42\u53ea\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\uff08Update\uff09\u8bed\u53e5\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u7684\u4e34\u65f6\u8868\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u60a8\u5fc5\u53ea\u80fd\u5199\u4e00\u4e2a Update \u8bed\u53e5\uff0c\u8bf7\u4e0d\u8981\u7f16\u5199\u4efb\u4f55 Select \u8bed\u53e5\u3002</p>\n\n<p><strong>\u4f8b\u5982\uff1a</strong></p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n</pre>\n\n<p>\u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u66f4\u65b0\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868:</p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\r\n", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\r\n", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\r\n", "__typename": "CodeSnippetNode"}]}, {"question_id": "0628", "frontend_question_id": "0628", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-product-of-three-numbers", "url_en": "https://leetcode.com/problems/maximum-product-of-three-numbers", "relative_path_cn": "/leetcode/0600-0699/0628.Maximum%20Product%20of%20Three%20Numbers/README.md", "relative_path_en": "/leetcode/0600-0699/0628.Maximum%20Product%20of%20Three%20Numbers/README_EN.md", "title_cn": "\u4e09\u4e2a\u6570\u7684\u6700\u5927\u4e58\u79ef", "title_en": "Maximum Product of Three Numbers", "question_title_slug": "maximum-product-of-three-numbers", "content_en": "<p>Given an integer array <code>nums</code>, <em>find three numbers whose product is maximum and return the maximum product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 6\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 24\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,-2,-3]\n<strong>Output:</strong> -6\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u51fa\u7531\u4e09\u4e2a\u6570\u7ec4\u6210\u7684\u6700\u5927\u4e58\u79ef\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u4e58\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4]\n<strong>\u8f93\u51fa:</strong> 24\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6574\u578b\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u662f[3,10<sup>4</sup>]\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u8303\u56f4\u662f[-1000, 1000]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u4efb\u610f\u4e09\u4e2a\u6570\u7684\u4e58\u79ef\u4e0d\u4f1a\u8d85\u51fa32\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u3002</li>\n</ol>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumProduct(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumProduct(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maximumProduct(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumProduct(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumProduct = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_product(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumProduct(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumProduct(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumProduct(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumProduct(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_product(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumProduct($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumProduct(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0629", "frontend_question_id": "0629", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-inverse-pairs-array", "url_en": "https://leetcode.com/problems/k-inverse-pairs-array", "relative_path_cn": "/leetcode/0600-0699/0629.K%20Inverse%20Pairs%20Array/README.md", "relative_path_en": "/leetcode/0600-0699/0629.K%20Inverse%20Pairs%20Array/README_EN.md", "title_cn": "K\u4e2a\u9006\u5e8f\u5bf9\u6570\u7ec4", "title_en": "K Inverse Pairs Array", "question_title_slug": "k-inverse-pairs-array", "content_en": "<p>Given two integers <code>n</code> and <code>k</code>, find how many different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> inverse pairs.</p>\r\n\r\n<p>We define an inverse pair as following: For <code>i<sub>th</sub></code> and <code>j<sub>th</sub></code> element in the array, if <code>i</code> &lt; <code>j</code> and <code>a[i]</code> &gt; <code>a[j]</code> then it&#39;s an inverse pair; Otherwise, it&#39;s not.</p>\r\n\r\n<p>Since the answer may be very large, the answer should be modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, k = 0\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> \r\nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, k = 1\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> \r\nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The integer <code>n</code> is in the range [1, 1000] and <code>k</code> is in the range [0, 1000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u627e\u51fa\u6240\u6709\u5305\u542b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u7684\u6570\u5b57\uff0c\u4e14\u6070\u597d\u62e5\u6709&nbsp;<code>k</code>&nbsp;\u4e2a\u9006\u5e8f\u5bf9\u7684\u4e0d\u540c\u7684\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u9006\u5e8f\u5bf9\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5bf9\u4e8e\u6570\u7ec4\u7684\u7b2c<code>i</code>\u4e2a\u548c\u7b2c&nbsp;<code>j</code>\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ee1<code>i</code>&nbsp;&lt;&nbsp;<code>j</code>\u4e14&nbsp;<code>a[i]</code>&nbsp;&gt;&nbsp;<code>a[j]</code>\uff0c\u5219\u5176\u4e3a\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff1b\u5426\u5219\u4e0d\u662f\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u9700\u8981\u8fd4\u56de \u7b54\u6848 mod 10<sup>9</sup>&nbsp;+ 7 \u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 0\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \n\u53ea\u6709\u6570\u7ec4 [1,2,3] \u5305\u542b\u4e86\u4ece1\u52303\u7684\u6574\u6570\u5e76\u4e14\u6b63\u597d\u62e5\u6709 0 \u4e2a\u9006\u5e8f\u5bf9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 1\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u6570\u7ec4 [1,3,2] \u548c [2,1,3] \u90fd\u6709 1 \u4e2a\u9006\u5e8f\u5bf9\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;\u7684\u8303\u56f4\u662f [1, 1000] \u5e76\u4e14 <code>k</code> \u7684\u8303\u56f4\u662f [0, 1000]\u3002</li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int kInversePairs(int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int kInversePairs(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint kInversePairs(int n, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KInversePairs(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kInversePairs = function(n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef k_inverse_pairs(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kInversePairs(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kInversePairs(n int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kInversePairs(n: Int, k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kInversePairs(n: Int, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn k_inverse_pairs(n: i32, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function kInversePairs($n, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kInversePairs(n: number, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0630", "frontend_question_id": "0630", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/course-schedule-iii", "url_en": "https://leetcode.com/problems/course-schedule-iii", "relative_path_cn": "/leetcode/0600-0699/0630.Course%20Schedule%20III/README.md", "relative_path_en": "/leetcode/0600-0699/0630.Course%20Schedule%20III/README_EN.md", "title_cn": "\u8bfe\u7a0b\u8868 III", "title_en": "Course Schedule III", "question_title_slug": "course-schedule-iii", "content_en": "<p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. Each course has some duration(course length) <code>t</code> and closed on <code>d<sub>th</sub></code> day. A course should be taken <b>continuously</b> for <code>t</code> days and must be finished before or on the <code>d<sub>th</sub></code> day. You will start at the <code>1<sub>st</sub></code> day.</p>\r\n\r\n<p>Given <code>n</code> online courses represented by pairs <code>(t,d)</code>, your task is to find the maximal number of courses that can be taken.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThere&#39;re totally 4 courses, but you can take 3 courses at most:\r\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\r\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \r\nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \r\nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The integer 1 &lt;= d, t, n &lt;= 10,000.</li>\r\n\t<li>You can&#39;t take two courses simultaneously.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u8fd9\u91cc\u6709 <code>n</code> \u95e8\u4e0d\u540c\u7684\u5728\u7ebf\u8bfe\u7a0b\uff0c\u4ed6\u4eec\u6309\u4ece <code>1</code> \u5230 <code>n</code>&nbsp;\u7f16\u53f7\u3002\u6bcf\u4e00\u95e8\u8bfe\u7a0b\u6709\u4e00\u5b9a\u7684\u6301\u7eed\u4e0a\u8bfe\u65f6\u95f4\uff08\u8bfe\u7a0b\u65f6\u95f4\uff09<code>t</code> \u4ee5\u53ca\u5173\u95ed\u65f6\u95f4\u7b2c d<sub>&nbsp;</sub>\u5929\u3002\u4e00\u95e8\u8bfe\u8981\u6301\u7eed\u5b66\u4e60 <code>t</code> \u5929\u76f4\u5230\u7b2c d<span style=\"font-size:10.5px\"> </span>\u5929\u65f6\u8981\u5b8c\u6210\uff0c\u4f60\u5c06\u4f1a\u4ece\u7b2c 1 \u5929\u5f00\u59cb\u3002</p>\n\n<p>\u7ed9\u51fa <code>n</code> \u4e2a\u5728\u7ebf\u8bfe\u7a0b\u7528 <code>(t, d)</code> \u5bf9\u8868\u793a\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u6700\u591a\u53ef\u4ee5\u4fee\u51e0\u95e8\u8bfe\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u8fd9\u91cc\u4e00\u5171\u6709 4 \u95e8\u8bfe\u7a0b, \u4f46\u662f\u4f60\u6700\u591a\u53ef\u4ee5\u4fee 3 \u95e8:\n\u9996\u5148, \u4fee\u7b2c\u4e00\u95e8\u8bfe\u65f6, \u5b83\u8981\u8017\u8d39 100 \u5929\uff0c\u4f60\u4f1a\u5728\u7b2c 100 \u5929\u5b8c\u6210, \u5728\u7b2c 101 \u5929\u51c6\u5907\u4e0b\u95e8\u8bfe\u3002\n\u7b2c\u4e8c, \u4fee\u7b2c\u4e09\u95e8\u8bfe\u65f6, \u5b83\u4f1a\u8017\u8d39 1000 \u5929\uff0c\u6240\u4ee5\u4f60\u5c06\u5728\u7b2c 1100 \u5929\u7684\u65f6\u5019\u5b8c\u6210\u5b83, \u4ee5\u53ca\u5728\u7b2c 1101 \u5929\u5f00\u59cb\u51c6\u5907\u4e0b\u95e8\u8bfe\u7a0b\u3002\n\u7b2c\u4e09, \u4fee\u7b2c\u4e8c\u95e8\u8bfe\u65f6, \u5b83\u4f1a\u8017\u65f6 200 \u5929\uff0c\u6240\u4ee5\u4f60\u5c06\u4f1a\u5728\u7b2c 1300 \u5929\u65f6\u5b8c\u6210\u5b83\u3002\n\u7b2c\u56db\u95e8\u8bfe\u73b0\u5728\u4e0d\u80fd\u4fee\uff0c\u56e0\u4e3a\u4f60\u5c06\u4f1a\u5728\u7b2c 3300 \u5929\u5b8c\u6210\u5b83\uff0c\u8fd9\u5df2\u7ecf\u8d85\u51fa\u4e86\u5173\u95ed\u65e5\u671f\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u6574\u6570 1 &lt;= d, t, n &lt;= 10,000 \u3002</li>\n\t<li>\u4f60\u4e0d\u80fd\u540c\u65f6\u4fee\u4e24\u95e8\u8bfe\u7a0b\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int scheduleCourse(vector<vector<int>>& courses) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int scheduleCourse(int[][] courses) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint scheduleCourse(int** courses, int coursesSize, int* coursesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ScheduleCourse(int[][] courses) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} courses\n * @return {number}\n */\nvar scheduleCourse = function(courses) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} courses\n# @return {Integer}\ndef schedule_course(courses)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func scheduleCourse(_ courses: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func scheduleCourse(courses [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def scheduleCourse(courses: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun scheduleCourse(courses: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn schedule_course(courses: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $courses\n     * @return Integer\n     */\n    function scheduleCourse($courses) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function scheduleCourse(courses: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0631", "frontend_question_id": "0631", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-excel-sum-formula", "url_en": "https://leetcode.com/problems/design-excel-sum-formula", "relative_path_cn": "/leetcode/0600-0699/0631.Design%20Excel%20Sum%20Formula/README.md", "relative_path_en": "/leetcode/0600-0699/0631.Design%20Excel%20Sum%20Formula/README_EN.md", "title_cn": "\u8bbe\u8ba1 Excel \u6c42\u548c\u516c\u5f0f", "title_en": "Design Excel Sum Formula", "question_title_slug": "design-excel-sum-formula", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0632", "frontend_question_id": "0632", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-range-covering-elements-from-k-lists", "url_en": "https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists", "relative_path_cn": "/leetcode/0600-0699/0632.Smallest%20Range%20Covering%20Elements%20from%20K%20Lists/README.md", "relative_path_en": "/leetcode/0600-0699/0632.Smallest%20Range%20Covering%20Elements%20from%20K%20Lists/README_EN.md", "title_cn": "\u6700\u5c0f\u533a\u95f4", "title_en": "Smallest Range Covering Elements from K Lists", "question_title_slug": "smallest-range-covering-elements-from-k-lists", "content_en": "<p>You have <code>k</code> lists of sorted integers in <strong>non-decreasing&nbsp;order</strong>. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists.</p>\n\n<p>We define the range <code>[a, b]</code> is smaller than range <code>[c, d]</code> if <code>b - a &lt; d - c</code> <strong>or</strong> <code>a &lt; c</code> if <code>b - a == d - c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n<strong>Output:</strong> [20,24]\n<strong>Explanation: </strong>\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[10,10],[11,11]]\n<strong>Output:</strong> [10,11]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[10],[11]]\n<strong>Output:</strong> [10,11]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1],[2],[3],[4],[5],[6],[7]]\n<strong>Output:</strong> [1,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == k</code></li>\n\t<li><code>1 &lt;= k &lt;= 3500</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 50</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code>&nbsp;is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u6709\u00a0<code>k</code>\u00a0\u4e2a <strong>\u975e\u9012\u51cf\u6392\u5217</strong> \u7684\u6574\u6570\u5217\u8868\u3002\u627e\u5230\u4e00\u4e2a <strong>\u6700\u5c0f </strong>\u533a\u95f4\uff0c\u4f7f\u5f97\u00a0<code>k</code>\u00a0\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5217\u8868\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5305\u542b\u5728\u5176\u4e2d\u3002</p>\n\n<p>\u6211\u4eec\u5b9a\u4e49\u5982\u679c\u00a0<code>b-a < d-c</code>\u00a0\u6216\u8005\u5728\u00a0<code>b-a == d-c</code>\u00a0\u65f6\u00a0<code>a < c</code>\uff0c\u5219\u533a\u95f4 <code>[a,b]</code> \u6bd4 <code>[c,d]</code> \u5c0f\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<strong>\u8f93\u51fa\uff1a</strong>[20,24]\n<strong>\u89e3\u91ca\uff1a</strong> \n\u5217\u8868 1\uff1a[4, 10, 15, 24, 26]\uff0c24 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n\u5217\u8868 2\uff1a[0, 9, 12, 20]\uff0c20 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n\u5217\u8868 3\uff1a[5, 18, 22, 30]\uff0c22 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>[1,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [[10,10],[11,11]]\n<strong>\u8f93\u51fa\uff1a</strong>[10,11]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [[10],[11]]\n<strong>\u8f93\u51fa\uff1a</strong>[10,11]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [[1],[2],[3],[4],[5],[6],[7]]\n<strong>\u8f93\u51fa\uff1a</strong>[1,7]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>nums.length == k</code></li>\n\t<li><code>1 <= k <= 3500</code></li>\n\t<li><code>1 <= nums[i].length <= 50</code></li>\n\t<li><code>-10<sup>5</sup> <= nums[i][j] <= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> \u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217</li>\n</ul>\n", "tags_en": ["Hash Table", "Two Pointers", "String"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* smallestRange(int** nums, int numsSize, int* numsColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SmallestRange(IList<IList<int>> nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} nums\n * @return {number[]}\n */\nvar smallestRange = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} nums\n# @return {Integer[]}\ndef smallest_range(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestRange(_ nums: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestRange(nums [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestRange(nums: List[List[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestRange(nums: List<List<Int>>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_range(nums: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $nums\n     * @return Integer[]\n     */\n    function smallestRange($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestRange(nums: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0633", "frontend_question_id": "0633", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-square-numbers", "url_en": "https://leetcode.com/problems/sum-of-square-numbers", "relative_path_cn": "/leetcode/0600-0699/0633.Sum%20of%20Square%20Numbers/README.md", "relative_path_en": "/leetcode/0600-0699/0633.Sum%20of%20Square%20Numbers/README_EN.md", "title_cn": "\u5e73\u65b9\u6570\u4e4b\u548c", "title_en": "Sum of Square Numbers", "question_title_slug": "sum-of-square-numbers", "content_en": "<p>Given a non-negative integer <code>c</code>, decide whether there&#39;re two integers <code>a</code> and <code>b</code> such that <code>a<sup>2</sup> + b<sup>2</sup> = c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 1 * 1 + 2 * 2 = 5\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 3\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 2\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 1\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<code>c</code>&nbsp;\uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 <code>a</code> \u548c <code>b</code>\uff0c\u4f7f\u5f97&nbsp;<code>a<sup>2</sup> + b<sup>2</sup> = c</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>c = 5\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>1 * 1 + 2 * 2 = 5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>c = 3\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>c = 4\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>c = 2\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>c = 1\n<strong>\u8f93\u51fa\uff1a</strong>true</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool judgeSquareSum(int c) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean judgeSquareSum(int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def judgeSquareSum(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def judgeSquareSum(self, c: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool judgeSquareSum(int c){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool JudgeSquareSum(int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} c\n * @return {boolean}\n */\nvar judgeSquareSum = function(c) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} c\n# @return {Boolean}\ndef judge_square_sum(c)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func judgeSquareSum(_ c: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func judgeSquareSum(c int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def judgeSquareSum(c: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun judgeSquareSum(c: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn judge_square_sum(c: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $c\n     * @return Boolean\n     */\n    function judgeSquareSum($c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function judgeSquareSum(c: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0634", "frontend_question_id": "0634", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-the-derangement-of-an-array", "url_en": "https://leetcode.com/problems/find-the-derangement-of-an-array", "relative_path_cn": "/leetcode/0600-0699/0634.Find%20the%20Derangement%20of%20An%20Array/README.md", "relative_path_en": "/leetcode/0600-0699/0634.Find%20the%20Derangement%20of%20An%20Array/README_EN.md", "title_cn": "\u5bfb\u627e\u6570\u7ec4\u7684\u9519\u4f4d\u6392\u5217", "title_en": "Find the Derangement of An Array", "question_title_slug": "find-the-derangement-of-an-array", "content_en": null, "content_cn": null, "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0635", "frontend_question_id": "0635", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-log-storage-system", "url_en": "https://leetcode.com/problems/design-log-storage-system", "relative_path_cn": "/leetcode/0600-0699/0635.Design%20Log%20Storage%20System/README.md", "relative_path_en": "/leetcode/0600-0699/0635.Design%20Log%20Storage%20System/README_EN.md", "title_cn": "\u8bbe\u8ba1\u65e5\u5fd7\u5b58\u50a8\u7cfb\u7edf", "title_en": "Design Log Storage System", "question_title_slug": "design-log-storage-system", "content_en": null, "content_cn": null, "tags_en": ["Design", "String"], "tags_cn": ["\u8bbe\u8ba1", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0636", "frontend_question_id": "0636", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/exclusive-time-of-functions", "url_en": "https://leetcode.com/problems/exclusive-time-of-functions", "relative_path_cn": "/leetcode/0600-0699/0636.Exclusive%20Time%20of%20Functions/README.md", "relative_path_en": "/leetcode/0600-0699/0636.Exclusive%20Time%20of%20Functions/README_EN.md", "title_cn": "\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4", "title_en": "Exclusive Time of Functions", "question_title_slug": "exclusive-time-of-functions", "content_en": "<p>On a <strong>single-threaded</strong> CPU, we execute a program containing <code>n</code> functions. Each function has a unique ID between <code>0</code> and <code>n-1</code>.</p>\n\n<p>Function calls are <strong>stored in a <a href=\"https://en.wikipedia.org/wiki/Call_stack\">call stack</a></strong>: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is <strong>the current function being executed</strong>. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p>\n\n<p>You are given a list <code>logs</code>, where <code>logs[i]</code> represents the <code>i<sup>th</sup></code> log message formatted as a string <code>&quot;{function_id}:{&quot;start&quot; | &quot;end&quot;}:{timestamp}&quot;</code>. For example, <code>&quot;0:start:3&quot;</code> means a function call with function ID <code>0</code> <strong>started at the beginning</strong> of timestamp <code>3</code>, and <code>&quot;1:end:2&quot;</code> means a function call with function ID <code>1</code> <strong>ended at the end</strong> of timestamp <code>2</code>. Note that a function can be called <b>multiple times, possibly recursively</b>.</p>\n\n<p>A function&#39;s <strong>exclusive time</strong> is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for <code>2</code> time units and another call executing for <code>1</code> time unit, the <strong>exclusive time</strong> is <code>2 + 1 = 3</code>.</p>\n\n<p>Return <em>the <strong>exclusive time</strong> of each function in an array, where the value at the </em><code>i<sup>th</sup></code><em> index represents the exclusive time for the function with ID </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/05/diag1b.png\" style=\"width: 550px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]\n<strong>Output:</strong> [3,4]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [8]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [7,1]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:7&quot;,&quot;1:end:7&quot;,&quot;0:end:8&quot;]\n<strong>Output:</strong> [8,1]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:end:0&quot;]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= function_id &lt; n</code></li>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>No two start events will happen at the same timestamp.</li>\n\t<li>No two end events will happen at the same timestamp.</li>\n\t<li>Each function has an <code>&quot;end&quot;</code> log for each <code>&quot;start&quot;</code> log.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u975e\u62a2\u5360\u5355\u7ebf\u7a0bCPU\u7684 <strong>n </strong>\u4e2a\u51fd\u6570\u8fd0\u884c\u65e5\u5fd7\uff0c\u627e\u5230\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002</p>\n\n<p>\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 Id\uff0c\u4ece <strong>0</strong> \u5230<strong> n-1</strong>\uff0c\u51fd\u6570\u53ef\u80fd\u4f1a\u9012\u5f52\u8c03\u7528\u6216\u8005\u88ab\u5176\u4ed6\u51fd\u6570\u8c03\u7528\u3002</p>\n\n<p>\u65e5\u5fd7\u662f\u5177\u6709\u4ee5\u4e0b\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a<code>function_id\uff1astart_or_end\uff1atimestamp</code>\u3002\u4f8b\u5982\uff1a<code>&quot;0:start:0&quot;</code>&nbsp;\u8868\u793a\u51fd\u6570 0 \u4ece 0 \u65f6\u523b\u5f00\u59cb\u8fd0\u884c\u3002<code>&quot;0:end:0&quot;</code>&nbsp;\u8868\u793a\u51fd\u6570 0 \u5728 0 \u65f6\u523b\u7ed3\u675f\u3002</p>\n\n<p>\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u5b9a\u4e49\u662f\u5728\u8be5\u65b9\u6cd5\u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u82b1\u8d39\u7684\u65f6\u95f4\u4e0d\u7b97\u8be5\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002\u4f60\u9700\u8981\u6839\u636e\u51fd\u6570\u7684 Id \u6709\u5e8f\u5730\u8fd4\u56de\u6bcf\u4e2a\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nn = 2\nlogs = \n[&quot;0:start:0&quot;,\n &quot;1:start:2&quot;,\n &quot;1:end:5&quot;,\n &quot;0:end:6&quot;]\n<strong>\u8f93\u51fa:</strong>[3, 4]\n<strong>\u8bf4\u660e\uff1a</strong>\n\u51fd\u6570 0 \u5728\u65f6\u523b 0 \u5f00\u59cb\uff0c\u5728\u6267\u884c\u4e86  2\u4e2a\u65f6\u95f4\u5355\u4f4d\u7ed3\u675f\u4e8e\u65f6\u523b 1\u3002\n\u73b0\u5728\u51fd\u6570 0 \u8c03\u7528\u51fd\u6570 1\uff0c\u51fd\u6570 1 \u5728\u65f6\u523b 2 \u5f00\u59cb\uff0c\u6267\u884c 4 \u4e2a\u65f6\u95f4\u5355\u4f4d\u540e\u7ed3\u675f\u4e8e\u65f6\u523b 5\u3002\n\u51fd\u6570 0 \u518d\u6b21\u5728\u65f6\u523b 6 \u5f00\u59cb\u6267\u884c\uff0c\u5e76\u5728\u65f6\u523b 6 \u7ed3\u675f\u8fd0\u884c\uff0c\u4ece\u800c\u6267\u884c\u4e86 1 \u4e2a\u65f6\u95f4\u5355\u4f4d\u3002\n\u6240\u4ee5\u51fd\u6570 0 \u603b\u5171\u7684\u6267\u884c\u4e86 2 +1 =3 \u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u51fd\u6570 1 \u603b\u5171\u6267\u884c\u4e86 4 \u4e2a\u65f6\u95f4\u5355\u4f4d\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u65e5\u5fd7\u4f1a\u6839\u636e\u65f6\u95f4\u6233\u6392\u5e8f\uff0c\u800c\u4e0d\u662f\u6839\u636e\u65e5\u5fd7Id\u6392\u5e8f\u3002</li>\n\t<li>\u4f60\u7684\u8f93\u51fa\u4f1a\u6839\u636e\u51fd\u6570Id\u6392\u5e8f\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u7684\u8f93\u51fa\u6570\u7ec4\u4e2d\u5e8f\u53f7\u4e3a 0 \u7684\u5143\u7d20\u76f8\u5f53\u4e8e\u51fd\u6570 0 \u7684\u6267\u884c\u65f6\u95f4\u3002</li>\n\t<li>\u4e24\u4e2a\u51fd\u6570\u4e0d\u4f1a\u5728\u540c\u65f6\u5f00\u59cb\u6216\u7ed3\u675f\u3002</li>\n\t<li>\u51fd\u6570\u5141\u8bb8\u88ab\u9012\u5f52\u8c03\u7528\uff0c\u76f4\u5230\u8fd0\u884c\u7ed3\u675f\u3002</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n</ol>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> exclusiveTime(int n, vector<string>& logs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] exclusiveTime(int n, List<String> logs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def exclusiveTime(self, n, logs):\n        \"\"\"\n        :type n: int\n        :type logs: List[str]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* exclusiveTime(int n, char ** logs, int logsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ExclusiveTime(int n, IList<string> logs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {string[]} logs\n * @return {number[]}\n */\nvar exclusiveTime = function(n, logs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {String[]} logs\n# @return {Integer[]}\ndef exclusive_time(n, logs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func exclusiveTime(_ n: Int, _ logs: [String]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func exclusiveTime(n int, logs []string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def exclusiveTime(n: Int, logs: List[String]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun exclusiveTime(n: Int, logs: List<String>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn exclusive_time(n: i32, logs: Vec<String>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param String[] $logs\n     * @return Integer[]\n     */\n    function exclusiveTime($n, $logs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function exclusiveTime(n: number, logs: string[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0637", "frontend_question_id": "0637", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/average-of-levels-in-binary-tree", "url_en": "https://leetcode.com/problems/average-of-levels-in-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0637.Average%20of%20Levels%20in%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0637.Average%20of%20Levels%20in%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c", "title_en": "Average of Levels in Binary Tree", "question_title_slug": "average-of-levels-in-binary-tree", "content_en": "Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n<b>Output:</b> [3, 14.5, 11]\r\n<b>Explanation:</b>\r\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of node's value is in the range of 32-bit signed integer.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811, \u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u5e73\u5747\u503c\u7ec4\u6210\u7684\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>\u8f93\u51fa\uff1a</strong>[3, 14.5, 11]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7b2c 0 \u5c42\u7684\u5e73\u5747\u503c\u662f 3 ,  \u7b2c1\u5c42\u662f 14.5 , \u7b2c2\u5c42\u662f 11 \u3002\u56e0\u6b64\u8fd4\u56de [3, 14.5, 11] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8282\u70b9\u503c\u7684\u8303\u56f4\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> List[float]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<double> AverageOfLevels(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Float[]}\ndef average_of_levels(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func averageOfLevels(_ root: TreeNode?) -> [Double] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfLevels(root *TreeNode) []float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def averageOfLevels(root: TreeNode): Array[Double] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun averageOfLevels(root: TreeNode?): DoubleArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn average_of_levels(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<f64> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Float[]\n     */\n    function averageOfLevels($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction averageOfLevels(root: TreeNode | null): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0638", "frontend_question_id": "0638", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shopping-offers", "url_en": "https://leetcode.com/problems/shopping-offers", "relative_path_cn": "/leetcode/0600-0699/0638.Shopping%20Offers/README.md", "relative_path_en": "/leetcode/0600-0699/0638.Shopping%20Offers/README_EN.md", "title_cn": "\u5927\u793c\u5305", "title_en": "Shopping Offers", "question_title_slug": "shopping-offers", "content_en": "<p>\r\nIn LeetCode Store, there are some kinds of items to sell. Each item has a price.\r\n</p>\r\n\r\n<p>\r\nHowever, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\r\n</p>\r\n\r\n<p>\r\nYou are given the each item's price, a set of special offers, and the number we need to buy for each item.\r\nThe job is to output the lowest price you have to pay for <b>exactly</b> certain items as given, where you could make optimal use of the special offers.\r\n</p>\r\n\r\n<p>\r\nEach special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.\r\n</p>\r\n\r\n<p>You could use any of special offers as many times as you want.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,5], [[3,0,5],[1,2,10]], [3,2]\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> \r\nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \r\nIn special offer 1, you can pay $5 for 3A and 0B\r\nIn special offer 2, you can pay $10 for 1A and 2B. \r\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\r\n<b>Output:</b> 11\r\n<b>Explanation:</b> \r\nThe price of A is $2, and $3 for B, $4 for C. \r\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \r\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \r\nYou cannot add more items, though only $9 for 2A ,2B and 1C.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>There are at most 6 kinds of items, 100 special offers.</li>\r\n<li>For each item, you need to buy at most 6 of them.</li>\r\n<li>You are <b>not</b> allowed to buy more items than you want, even if that would lower the overall price.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u5728LeetCode\u5546\u5e97\u4e2d\uff0c \u6709\u8bb8\u591a\u5728\u552e\u7684\u7269\u54c1\u3002</p>\n\n<p>\u7136\u800c\uff0c\u4e5f\u6709\u4e00\u4e9b\u5927\u793c\u5305\uff0c\u6bcf\u4e2a\u5927\u793c\u5305\u4ee5\u4f18\u60e0\u7684\u4ef7\u683c\u6346\u7ed1\u9500\u552e\u4e00\u7ec4\u7269\u54c1\u3002</p>\n\n<p>\u73b0\u7ed9\u5b9a\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u683c\uff0c\u6bcf\u4e2a\u5927\u793c\u5305\u5305\u542b\u7269\u54c1\u7684\u6e05\u5355\uff0c\u4ee5\u53ca\u5f85\u8d2d\u7269\u54c1\u6e05\u5355\u3002\u8bf7\u8f93\u51fa<strong>\u786e\u5207</strong>\u5b8c\u6210\u5f85\u8d2d\u6e05\u5355\u7684\u6700\u4f4e\u82b1\u8d39\u3002</p>\n\n<p>\u6bcf\u4e2a\u5927\u793c\u5305\u7684\u7531\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e00\u7ec4\u6570\u636e\u63cf\u8ff0\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4ee3\u8868\u5927\u793c\u5305\u7684\u4ef7\u683c\uff0c\u5176\u4ed6\u6570\u5b57\u5206\u522b\u8868\u793a\u5185\u542b\u7684\u5176\u4ed6\u79cd\u7c7b\u7269\u54c1\u7684\u6570\u91cf\u3002</p>\n\n<p>\u4efb\u610f\u5927\u793c\u5305\u53ef\u65e0\u9650\u6b21\u8d2d\u4e70\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,5], [[3,0,5],[1,2,10]], [3,2]\n<strong>\u8f93\u51fa:</strong> 14\n<strong>\u89e3\u91ca:</strong> \n\u6709A\u548cB\u4e24\u79cd\u7269\u54c1\uff0c\u4ef7\u683c\u5206\u522b\u4e3a&yen;2\u548c&yen;5\u3002\n\u5927\u793c\u53051\uff0c\u4f60\u53ef\u4ee5\u4ee5&yen;5\u7684\u4ef7\u683c\u8d2d\u4e703A\u548c0B\u3002\n\u5927\u793c\u53052\uff0c \u4f60\u53ef\u4ee5\u4ee5&yen;10\u7684\u4ef7\u683c\u8d2d\u4e701A\u548c2B\u3002\n\u4f60\u9700\u8981\u8d2d\u4e703\u4e2aA\u548c2\u4e2aB\uff0c \u6240\u4ee5\u4f60\u4ed8\u4e86&yen;10\u8d2d\u4e70\u4e861A\u548c2B\uff08\u5927\u793c\u53052\uff09\uff0c\u4ee5\u53ca&yen;4\u8d2d\u4e702A\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n<strong>\u8f93\u51fa:</strong> 11\n<strong>\u89e3\u91ca:</strong> \nA\uff0cB\uff0cC\u7684\u4ef7\u683c\u5206\u522b\u4e3a&yen;2\uff0c&yen;3\uff0c&yen;4.\n\u4f60\u53ef\u4ee5\u7528&yen;4\u8d2d\u4e701A\u548c1B\uff0c\u4e5f\u53ef\u4ee5\u7528&yen;9\u8d2d\u4e702A\uff0c2B\u548c1C\u3002\n\u4f60\u9700\u8981\u4e701A\uff0c2B\u548c1C\uff0c\u6240\u4ee5\u4f60\u4ed8\u4e86&yen;4\u4e70\u4e861A\u548c1B\uff08\u5927\u793c\u53051\uff09\uff0c\u4ee5\u53ca&yen;3\u8d2d\u4e701B\uff0c &yen;4\u8d2d\u4e701C\u3002\n\u4f60\u4e0d\u53ef\u4ee5\u8d2d\u4e70\u8d85\u51fa\u5f85\u8d2d\u6e05\u5355\u7684\u7269\u54c1\uff0c\u5c3d\u7ba1\u8d2d\u4e70\u5927\u793c\u53052\u66f4\u52a0\u4fbf\u5b9c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6700\u591a6\u79cd\u7269\u54c1\uff0c 100\u79cd\u5927\u793c\u5305\u3002</li>\n\t<li>\u6bcf\u79cd\u7269\u54c1\uff0c\u4f60\u6700\u591a\u53ea\u9700\u8981\u8d2d\u4e706\u4e2a\u3002</li>\n\t<li>\u4f60\u4e0d\u53ef\u4ee5\u8d2d\u4e70\u8d85\u51fa\u5f85\u8d2d\u6e05\u5355\u7684\u7269\u54c1\uff0c\u5373\u4f7f\u66f4\u4fbf\u5b9c\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shoppingOffers(self, price, special, needs):\n        \"\"\"\n        :type price: List[int]\n        :type special: List[List[int]]\n        :type needs: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint shoppingOffers(int* price, int priceSize, int** special, int specialSize, int* specialColSize, int* needs, int needsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShoppingOffers(IList<int> price, IList<IList<int>> special, IList<int> needs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} price\n * @param {number[][]} special\n * @param {number[]} needs\n * @return {number}\n */\nvar shoppingOffers = function(price, special, needs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} price\n# @param {Integer[][]} special\n# @param {Integer[]} needs\n# @return {Integer}\ndef shopping_offers(price, special, needs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shoppingOffers(_ price: [Int], _ special: [[Int]], _ needs: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shoppingOffers(price []int, special [][]int, needs []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shoppingOffers(price: List[Int], special: List[List[Int]], needs: List[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shoppingOffers(price: List<Int>, special: List<List<Int>>, needs: List<Int>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shopping_offers(price: Vec<i32>, special: Vec<Vec<i32>>, needs: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $price\n     * @param Integer[][] $special\n     * @param Integer[] $needs\n     * @return Integer\n     */\n    function shoppingOffers($price, $special, $needs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shoppingOffers(price: number[], special: number[][], needs: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0639", "frontend_question_id": "0639", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/decode-ways-ii", "url_en": "https://leetcode.com/problems/decode-ways-ii", "relative_path_cn": "/leetcode/0600-0699/0639.Decode%20Ways%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0639.Decode%20Ways%20II/README_EN.md", "title_cn": "\u89e3\u7801\u65b9\u6cd5 2", "title_en": "Decode Ways II", "question_title_slug": "decode-ways-ii", "content_en": "<p>\r\nA message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping way:\r\n</p>\r\n\r\n<pre>\r\n'A' -> 1\r\n'B' -> 2\r\n...\r\n'Z' -> 26\r\n</pre>\r\n\r\n<p>\r\nBeyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.\r\n</p>\r\n\r\n\r\n<p>\r\nGiven the encoded message containing digits and the character '*', return the total number of ways to decode it.\r\n</p>\r\n\r\n<p>\r\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"*\"\r\n<b>Output:</b> 9\r\n<b>Explanation:</b> The encoded message can be decoded to the string: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1*\"\r\n<b>Output:</b> 9 + 9 = 18\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the input string will fit in range [1, 10<sup>5</sup>].</li>\r\n<li>The input string will only contain the character '*' and digits '0' - '9'.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd&nbsp;<code>A-Z</code> \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>\u9664\u4e86\u4e0a\u8ff0\u7684\u6761\u4ef6\u4ee5\u5916\uff0c\u73b0\u5728\u52a0\u5bc6\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u5b57\u7b26 &#39;*&#39;\u4e86\uff0c\u5b57\u7b26&#39;*&#39;\u53ef\u4ee5\u88ab\u5f53\u505a1\u52309\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u6761\u5305\u542b\u6570\u5b57\u548c\u5b57\u7b26&#39;*&#39;\u7684\u52a0\u5bc6\u4fe1\u606f\uff0c\u8bf7\u786e\u5b9a\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p>\n\n<p>\u540c\u65f6\uff0c\u7531\u4e8e\u7ed3\u679c\u503c\u53ef\u80fd\u4f1a\u76f8\u5f53\u7684\u5927\uff0c\u6240\u4ee5\u4f60\u5e94\u5f53\u5bf910<sup>9</sup>&nbsp;+ 7\u53d6\u6a21\u3002\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u6b64\u5904\u53d6\u6a21\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff09</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;*&quot;\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong> \u52a0\u5bc6\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u89e3\u5bc6\u4e3a: &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;1*&quot;\n<strong>\u8f93\u51fa:</strong> 9 + 9 = 18\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u8fd9\u91cc1*\u53ef\u4ee5\u5206\u89e3\u4e3a1,* \u6216\u8005\u5f53\u505a1*\u6765\u5904\u7406\uff0c\u6240\u4ee5\u7ed3\u679c\u662f9+9=18\uff09\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u662f [1, 10<sup>5</sup>]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u5305\u542b\u5b57\u7b26 &#39;*&#39; \u548c \u6570\u5b57&#39;0&#39; - &#39;9&#39;\u3002</li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numDecodings(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numDecodings(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numDecodings(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumDecodings(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numDecodings(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numDecodings(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numDecodings(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numDecodings(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0640", "frontend_question_id": "0640", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/solve-the-equation", "url_en": "https://leetcode.com/problems/solve-the-equation", "relative_path_cn": "/leetcode/0600-0699/0640.Solve%20the%20Equation/README.md", "relative_path_en": "/leetcode/0600-0699/0640.Solve%20the%20Equation/README_EN.md", "title_cn": "\u6c42\u89e3\u65b9\u7a0b", "title_en": "Solve the Equation", "question_title_slug": "solve-the-equation", "content_en": "<p>\r\nSolve a given equation and return the value of <code>x</code> in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable <code>x</code> and its coefficient.\r\n</p>\r\n\r\n<p>\r\nIf there is no solution for the equation, return \"No solution\".\r\n</p>\r\n<p>\r\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\r\n</p>\r\n<p>\r\nIf there is exactly one solution for the equation, we ensure that the value of <code>x</code> is an integer.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x+5-3+x=6+x-2\"\r\n<b>Output:</b> \"x=2\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x\"\r\n<b>Output:</b> \"Infinite solutions\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x=x\"\r\n<b>Output:</b> \"x=0\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x+3x-6x=x+2\"\r\n<b>Output:</b> \"x=-1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 5:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x+2\"\r\n<b>Output:</b> \"No solution\"\r\n</pre>\r\n</p>", "content_cn": "<p>\u6c42\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65b9\u7a0b\uff0c\u5c06<code>x</code>\u4ee5\u5b57\u7b26\u4e32&quot;x=#value&quot;\u7684\u5f62\u5f0f\u8fd4\u56de\u3002\u8be5\u65b9\u7a0b\u4ec5\u5305\u542b&#39;+&#39;\uff0c&#39; - &#39;\u64cd\u4f5c\uff0c\u53d8\u91cf&nbsp;<code>x</code>&nbsp;\u548c\u5176\u5bf9\u5e94\u7cfb\u6570\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u6ca1\u6709\u89e3\uff0c\u8bf7\u8fd4\u56de&ldquo;No solution&rdquo;\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u6709\u65e0\u9650\u89e3\uff0c\u5219\u8fd4\u56de&ldquo;Infinite solutions&rdquo;\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u4e2d\u53ea\u6709\u4e00\u4e2a\u89e3\uff0c\u8981\u4fdd\u8bc1\u8fd4\u56de\u503c&nbsp;<code>x</code>&nbsp;\u662f\u4e00\u4e2a\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x+5-3+x=6+x-2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=2&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x=x&quot;\n<strong>\u8f93\u51fa:</strong> &quot;Infinite solutions&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;2x=x&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=0&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;2x+3x-6x=x+2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=-1&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x=x+2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;No solution&quot;\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string solveEquation(string equation) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String solveEquation(String equation) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def solveEquation(self, equation):\n        \"\"\"\n        :type equation: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def solveEquation(self, equation: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * solveEquation(char * equation){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string SolveEquation(string equation) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} equation\n * @return {string}\n */\nvar solveEquation = function(equation) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} equation\n# @return {String}\ndef solve_equation(equation)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func solveEquation(_ equation: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func solveEquation(equation string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def solveEquation(equation: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun solveEquation(equation: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn solve_equation(equation: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $equation\n     * @return String\n     */\n    function solveEquation($equation) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function solveEquation(equation: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0859", "frontend_question_id": "0641", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-circular-deque", "url_en": "https://leetcode.com/problems/design-circular-deque", "relative_path_cn": "/leetcode/0600-0699/0641.Design%20Circular%20Deque/README.md", "relative_path_en": "/leetcode/0600-0699/0641.Design%20Circular%20Deque/README_EN.md", "title_cn": "\u8bbe\u8ba1\u5faa\u73af\u53cc\u7aef\u961f\u5217", "title_en": "Design Circular Deque", "question_title_slug": "design-circular-deque", "content_en": "<p>Design your implementation of the circular double-ended queue (deque).</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularDeque(k)</code>: Constructor, set the size of the deque to be k.</li>\r\n\t<li><code>insertFront()</code>: Adds an item at the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>insertLast()</code>: Adds an item at the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteFront()</code>: Deletes an item from the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteLast()</code>: Deletes an item from the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>getFront()</code>: Gets the front item from the Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>getRear()</code>: Gets the last item from Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether Deque is empty or not.&nbsp;</li>\r\n\t<li><code>isFull()</code>: Checks whether Deque is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 2\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Deque library.</li>\r\n</ul>\r\n", "content_cn": "<p>\u8bbe\u8ba1\u5b9e\u73b0\u53cc\u7aef\u961f\u5217\u3002<br>\n\u4f60\u7684\u5b9e\u73b0\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>MyCircularDeque(k)\uff1a\u6784\u9020\u51fd\u6570,\u53cc\u7aef\u961f\u5217\u7684\u5927\u5c0f\u4e3ak\u3002</li>\n\t<li>insertFront()\uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u53cc\u7aef\u961f\u5217\u5934\u90e8\u3002 \u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>insertLast()\uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u53cc\u7aef\u961f\u5217\u5c3e\u90e8\u3002\u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>deleteFront()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5934\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>deleteLast()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>getFront()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5934\u90e8\u83b7\u5f97\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u53cc\u7aef\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\u3002</li>\n\t<li>getRear()\uff1a\u83b7\u5f97\u53cc\u7aef\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002&nbsp;\u5982\u679c\u53cc\u7aef\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\u3002</li>\n\t<li>isEmpty()\uff1a\u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002</li>\n\t<li>isFull()\uff1a\u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u6ee1\u4e86\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // \u8bbe\u7f6e\u5bb9\u91cf\u5927\u5c0f\u4e3a3\ncircularDeque.insertLast(1);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertLast(2);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(3);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(4);\t\t\t        // \u5df2\u7ecf\u6ee1\u4e86\uff0c\u8fd4\u56de false\ncircularDeque.getRear();  \t\t\t\t// \u8fd4\u56de 2\ncircularDeque.isFull();\t\t\t\t        // \u8fd4\u56de true\ncircularDeque.deleteLast();\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(4);\t\t\t        // \u8fd4\u56de true\ncircularDeque.getFront();\t\t\t\t// \u8fd4\u56de 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u503c\u7684\u8303\u56f4\u4e3a [1, 1000]</li>\n\t<li>\u64cd\u4f5c\u6b21\u6570\u7684\u8303\u56f4\u4e3a [1, 1000]</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u53cc\u7aef\u961f\u5217\u5e93\u3002</li>\n</ul>\n", "tags_en": ["Design", "Queue"], "tags_cn": ["\u8bbe\u8ba1", "\u961f\u5217"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCircularDeque {\npublic:\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    MyCircularDeque(int k) {\n\n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    bool insertFront(int value) {\n\n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    bool insertLast(int value) {\n\n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    bool deleteFront() {\n\n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    bool deleteLast() {\n\n    }\n    \n    /** Get the front item from the deque. */\n    int getFront() {\n\n    }\n    \n    /** Get the last item from the deque. */\n    int getRear() {\n\n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    bool isEmpty() {\n\n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    bool isFull() {\n\n    }\n};\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque* obj = new MyCircularDeque(k);\n * bool param_1 = obj->insertFront(value);\n * bool param_2 = obj->insertLast(value);\n * bool param_3 = obj->deleteFront();\n * bool param_4 = obj->deleteLast();\n * int param_5 = obj->getFront();\n * int param_6 = obj->getRear();\n * bool param_7 = obj->isEmpty();\n * bool param_8 = obj->isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    public MyCircularDeque(int k) {\n\n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    public boolean insertFront(int value) {\n\n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    public boolean insertLast(int value) {\n\n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    public boolean deleteFront() {\n\n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    public boolean deleteLast() {\n\n    }\n    \n    /** Get the front item from the deque. */\n    public int getFront() {\n\n    }\n    \n    /** Get the last item from the deque. */\n    public int getRear() {\n\n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    public boolean isEmpty() {\n\n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    public boolean isFull() {\n\n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * boolean param_1 = obj.insertFront(value);\n * boolean param_2 = obj.insertLast(value);\n * boolean param_3 = obj.deleteFront();\n * boolean param_4 = obj.deleteLast();\n * int param_5 = obj.getFront();\n * int param_6 = obj.getRear();\n * boolean param_7 = obj.isEmpty();\n * boolean param_8 = obj.isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyCircularDeque(object):\n\n    def __init__(self, k):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        :type k: int\n        \"\"\"\n        \n\n    def insertFront(self, value):\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def insertLast(self, value):\n        \"\"\"\n        Adds an item at the rear of Deque. Return true if the operation is successful.\n        :type value: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def deleteFront(self):\n        \"\"\"\n        Deletes an item from the front of Deque. Return true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        \n\n    def deleteLast(self):\n        \"\"\"\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\n        :rtype: bool\n        \"\"\"\n        \n\n    def getFront(self):\n        \"\"\"\n        Get the front item from the deque.\n        :rtype: int\n        \"\"\"\n        \n\n    def getRear(self):\n        \"\"\"\n        Get the last item from the deque.\n        :rtype: int\n        \"\"\"\n        \n\n    def isEmpty(self):\n        \"\"\"\n        Checks whether the circular deque is empty or not.\n        :rtype: bool\n        \"\"\"\n        \n\n    def isFull(self):\n        \"\"\"\n        Checks whether the circular deque is full or not.\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCircularDeque:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        \n\n    def insertFront(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def insertLast(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def deleteFront(self) -> bool:\n        \"\"\"\n        Deletes an item from the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def deleteLast(self) -> bool:\n        \"\"\"\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        \n\n    def getFront(self) -> int:\n        \"\"\"\n        Get the front item from the deque.\n        \"\"\"\n        \n\n    def getRear(self) -> int:\n        \"\"\"\n        Get the last item from the deque.\n        \"\"\"\n        \n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular deque is empty or not.\n        \"\"\"\n        \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular deque is full or not.\n        \"\"\"\n        \n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyCircularDeque;\n\n/** Initialize your data structure here. Set the size of the deque to be k. */\n\nMyCircularDeque* myCircularDequeCreate(int k) {\n    \n}\n\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\nbool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {\n  \n}\n\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\nbool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {\n  \n}\n\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\nbool myCircularDequeDeleteFront(MyCircularDeque* obj) {\n  \n}\n\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\nbool myCircularDequeDeleteLast(MyCircularDeque* obj) {\n  \n}\n\n/** Get the front item from the deque. */\nint myCircularDequeGetFront(MyCircularDeque* obj) {\n  \n}\n\n/** Get the last item from the deque. */\nint myCircularDequeGetRear(MyCircularDeque* obj) {\n  \n}\n\n/** Checks whether the circular deque is empty or not. */\nbool myCircularDequeIsEmpty(MyCircularDeque* obj) {\n  \n}\n\n/** Checks whether the circular deque is full or not. */\nbool myCircularDequeIsFull(MyCircularDeque* obj) {\n  \n}\n\nvoid myCircularDequeFree(MyCircularDeque* obj) {\n    \n}\n\n/**\n * Your MyCircularDeque struct will be instantiated and called as such:\n * MyCircularDeque* obj = myCircularDequeCreate(k);\n * bool param_1 = myCircularDequeInsertFront(obj, value);\n \n * bool param_2 = myCircularDequeInsertLast(obj, value);\n \n * bool param_3 = myCircularDequeDeleteFront(obj);\n \n * bool param_4 = myCircularDequeDeleteLast(obj);\n \n * int param_5 = myCircularDequeGetFront(obj);\n \n * int param_6 = myCircularDequeGetRear(obj);\n \n * bool param_7 = myCircularDequeIsEmpty(obj);\n \n * bool param_8 = myCircularDequeIsFull(obj);\n \n * myCircularDequeFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    public MyCircularDeque(int k) {\n\n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    public bool InsertFront(int value) {\n\n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    public bool InsertLast(int value) {\n\n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    public bool DeleteFront() {\n\n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    public bool DeleteLast() {\n\n    }\n    \n    /** Get the front item from the deque. */\n    public int GetFront() {\n\n    }\n    \n    /** Get the last item from the deque. */\n    public int GetRear() {\n\n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    public bool IsEmpty() {\n\n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    public bool IsFull() {\n\n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * bool param_1 = obj.InsertFront(value);\n * bool param_2 = obj.InsertLast(value);\n * bool param_3 = obj.DeleteFront();\n * bool param_4 = obj.DeleteLast();\n * int param_5 = obj.GetFront();\n * int param_6 = obj.GetRear();\n * bool param_7 = obj.IsEmpty();\n * bool param_8 = obj.IsFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here. Set the size of the deque to be k.\n * @param {number} k\n */\nvar MyCircularDeque = function(k) {\n\n};\n\n/**\n * Adds an item at the front of Deque. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertFront = function(value) {\n\n};\n\n/**\n * Adds an item at the rear of Deque. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */\nMyCircularDeque.prototype.insertLast = function(value) {\n\n};\n\n/**\n * Deletes an item from the front of Deque. Return true if the operation is successful.\n * @return {boolean}\n */\nMyCircularDeque.prototype.deleteFront = function() {\n\n};\n\n/**\n * Deletes an item from the rear of Deque. Return true if the operation is successful.\n * @return {boolean}\n */\nMyCircularDeque.prototype.deleteLast = function() {\n\n};\n\n/**\n * Get the front item from the deque.\n * @return {number}\n */\nMyCircularDeque.prototype.getFront = function() {\n\n};\n\n/**\n * Get the last item from the deque.\n * @return {number}\n */\nMyCircularDeque.prototype.getRear = function() {\n\n};\n\n/**\n * Checks whether the circular deque is empty or not.\n * @return {boolean}\n */\nMyCircularDeque.prototype.isEmpty = function() {\n\n};\n\n/**\n * Checks whether the circular deque is full or not.\n * @return {boolean}\n */\nMyCircularDeque.prototype.isFull = function() {\n\n};\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = new MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCircularDeque\n\n=begin\n    Initialize your data structure here. Set the size of the deque to be k.\n    :type k: Integer\n=end\n    def initialize(k)\n\n    end\n\n\n=begin\n    Adds an item at the front of Deque. Return true if the operation is successful.\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def insert_front(value)\n\n    end\n\n\n=begin\n    Adds an item at the rear of Deque. Return true if the operation is successful.\n    :type value: Integer\n    :rtype: Boolean\n=end\n    def insert_last(value)\n\n    end\n\n\n=begin\n    Deletes an item from the front of Deque. Return true if the operation is successful.\n    :rtype: Boolean\n=end\n    def delete_front()\n\n    end\n\n\n=begin\n    Deletes an item from the rear of Deque. Return true if the operation is successful.\n    :rtype: Boolean\n=end\n    def delete_last()\n\n    end\n\n\n=begin\n    Get the front item from the deque.\n    :rtype: Integer\n=end\n    def get_front()\n\n    end\n\n\n=begin\n    Get the last item from the deque.\n    :rtype: Integer\n=end\n    def get_rear()\n\n    end\n\n\n=begin\n    Checks whether the circular deque is empty or not.\n    :rtype: Boolean\n=end\n    def is_empty()\n\n    end\n\n\n=begin\n    Checks whether the circular deque is full or not.\n    :rtype: Boolean\n=end\n    def is_full()\n\n    end\n\n\nend\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque.new(k)\n# param_1 = obj.insert_front(value)\n# param_2 = obj.insert_last(value)\n# param_3 = obj.delete_front()\n# param_4 = obj.delete_last()\n# param_5 = obj.get_front()\n# param_6 = obj.get_rear()\n# param_7 = obj.is_empty()\n# param_8 = obj.is_full()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    init(_ k: Int) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    func insertFront(_ value: Int) -> Bool {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    func insertLast(_ value: Int) -> Bool {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    func deleteFront() -> Bool {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    func deleteLast() -> Bool {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    func getFront() -> Int {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    func getRear() -> Int {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    func isEmpty() -> Bool {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    func isFull() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * let obj = MyCircularDeque(k)\n * let ret_1: Bool = obj.insertFront(value)\n * let ret_2: Bool = obj.insertLast(value)\n * let ret_3: Bool = obj.deleteFront()\n * let ret_4: Bool = obj.deleteLast()\n * let ret_5: Int = obj.getFront()\n * let ret_6: Int = obj.getRear()\n * let ret_7: Bool = obj.isEmpty()\n * let ret_8: Bool = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCircularDeque struct {\n\n}\n\n\n/** Initialize your data structure here. Set the size of the deque to be k. */\nfunc Constructor(k int) MyCircularDeque {\n\n}\n\n\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n\n}\n\n\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n\n}\n\n\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) DeleteFront() bool {\n\n}\n\n\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\nfunc (this *MyCircularDeque) DeleteLast() bool {\n\n}\n\n\n/** Get the front item from the deque. */\nfunc (this *MyCircularDeque) GetFront() int {\n\n}\n\n\n/** Get the last item from the deque. */\nfunc (this *MyCircularDeque) GetRear() int {\n\n}\n\n\n/** Checks whether the circular deque is empty or not. */\nfunc (this *MyCircularDeque) IsEmpty() bool {\n\n}\n\n\n/** Checks whether the circular deque is full or not. */\nfunc (this *MyCircularDeque) IsFull() bool {\n\n}\n\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * obj := Constructor(k);\n * param_1 := obj.InsertFront(value);\n * param_2 := obj.InsertLast(value);\n * param_3 := obj.DeleteFront();\n * param_4 := obj.DeleteLast();\n * param_5 := obj.GetFront();\n * param_6 := obj.GetRear();\n * param_7 := obj.IsEmpty();\n * param_8 := obj.IsFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCircularDeque(_k: Int) {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n\n\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    def insertFront(value: Int): Boolean = {\n\n    }\n\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    def insertLast(value: Int): Boolean = {\n\n    }\n\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    def deleteFront(): Boolean = {\n\n    }\n\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    def deleteLast(): Boolean = {\n\n    }\n\n    /** Get the front item from the deque. */\n    def getFront(): Int = {\n\n    }\n\n    /** Get the last item from the deque. */\n    def getRear(): Int = {\n\n    }\n\n    /** Checks whether the circular deque is empty or not. */\n    def isEmpty(): Boolean = {\n\n    }\n\n    /** Checks whether the circular deque is full or not. */\n    def isFull(): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = new MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCircularDeque(k: Int) {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n\n\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    fun insertFront(value: Int): Boolean {\n\n    }\n\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    fun insertLast(value: Int): Boolean {\n\n    }\n\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    fun deleteFront(): Boolean {\n\n    }\n\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    fun deleteLast(): Boolean {\n\n    }\n\n    /** Get the front item from the deque. */\n    fun getFront(): Int {\n\n    }\n\n    /** Get the last item from the deque. */\n    fun getRear(): Int {\n\n    }\n\n    /** Checks whether the circular deque is empty or not. */\n    fun isEmpty(): Boolean {\n\n    }\n\n    /** Checks whether the circular deque is full or not. */\n    fun isFull(): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCircularDeque {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    fn new(k: i32) -> Self {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    fn insert_front(&self, value: i32) -> bool {\n        \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    fn insert_last(&self, value: i32) -> bool {\n        \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    fn delete_front(&self) -> bool {\n        \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    fn delete_last(&self) -> bool {\n        \n    }\n    \n    /** Get the front item from the deque. */\n    fn get_front(&self) -> i32 {\n        \n    }\n    \n    /** Get the last item from the deque. */\n    fn get_rear(&self) -> i32 {\n        \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    fn is_empty(&self) -> bool {\n        \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    fn is_full(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * let obj = MyCircularDeque::new(k);\n * let ret_1: bool = obj.insert_front(value);\n * let ret_2: bool = obj.insert_last(value);\n * let ret_3: bool = obj.delete_front();\n * let ret_4: bool = obj.delete_last();\n * let ret_5: i32 = obj.get_front();\n * let ret_6: i32 = obj.get_rear();\n * let ret_7: bool = obj.is_empty();\n * let ret_8: bool = obj.is_full();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCircularDeque {\n    /**\n     * Initialize your data structure here. Set the size of the deque to be k.\n     * @param Integer $k\n     */\n    function __construct($k) {\n        \n    }\n  \n    /**\n     * Adds an item at the front of Deque. Return true if the operation is successful.\n     * @param Integer $value\n     * @return Boolean\n     */\n    function insertFront($value) {\n        \n    }\n  \n    /**\n     * Adds an item at the rear of Deque. Return true if the operation is successful.\n     * @param Integer $value\n     * @return Boolean\n     */\n    function insertLast($value) {\n        \n    }\n  \n    /**\n     * Deletes an item from the front of Deque. Return true if the operation is successful.\n     * @return Boolean\n     */\n    function deleteFront() {\n        \n    }\n  \n    /**\n     * Deletes an item from the rear of Deque. Return true if the operation is successful.\n     * @return Boolean\n     */\n    function deleteLast() {\n        \n    }\n  \n    /**\n     * Get the front item from the deque.\n     * @return Integer\n     */\n    function getFront() {\n        \n    }\n  \n    /**\n     * Get the last item from the deque.\n     * @return Integer\n     */\n    function getRear() {\n        \n    }\n  \n    /**\n     * Checks whether the circular deque is empty or not.\n     * @return Boolean\n     */\n    function isEmpty() {\n        \n    }\n  \n    /**\n     * Checks whether the circular deque is full or not.\n     * @return Boolean\n     */\n    function isFull() {\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * $obj = MyCircularDeque($k);\n * $ret_1 = $obj->insertFront($value);\n * $ret_2 = $obj->insertLast($value);\n * $ret_3 = $obj->deleteFront();\n * $ret_4 = $obj->deleteLast();\n * $ret_5 = $obj->getFront();\n * $ret_6 = $obj->getRear();\n * $ret_7 = $obj->isEmpty();\n * $ret_8 = $obj->isFull();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCircularDeque {\n    constructor(k: number) {\n\n    }\n\n    insertFront(value: number): boolean {\n\n    }\n\n    insertLast(value: number): boolean {\n\n    }\n\n    deleteFront(): boolean {\n\n    }\n\n    deleteLast(): boolean {\n\n    }\n\n    getFront(): number {\n\n    }\n\n    getRear(): number {\n\n    }\n\n    isEmpty(): boolean {\n\n    }\n\n    isFull(): boolean {\n\n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * var obj = new MyCircularDeque(k)\n * var param_1 = obj.insertFront(value)\n * var param_2 = obj.insertLast(value)\n * var param_3 = obj.deleteFront()\n * var param_4 = obj.deleteLast()\n * var param_5 = obj.getFront()\n * var param_6 = obj.getRear()\n * var param_7 = obj.isEmpty()\n * var param_8 = obj.isFull()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0642", "frontend_question_id": "0642", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-search-autocomplete-system", "url_en": "https://leetcode.com/problems/design-search-autocomplete-system", "relative_path_cn": "/leetcode/0600-0699/0642.Design%20Search%20Autocomplete%20System/README.md", "relative_path_en": "/leetcode/0600-0699/0642.Design%20Search%20Autocomplete%20System/README_EN.md", "title_cn": "\u8bbe\u8ba1\u641c\u7d22\u81ea\u52a8\u8865\u5168\u7cfb\u7edf", "title_en": "Design Search Autocomplete System", "question_title_slug": "design-search-autocomplete-system", "content_en": null, "content_cn": null, "tags_en": ["Design", "Trie"], "tags_cn": ["\u8bbe\u8ba1", "\u5b57\u5178\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0643", "frontend_question_id": "0643", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-average-subarray-i", "url_en": "https://leetcode.com/problems/maximum-average-subarray-i", "relative_path_cn": "/leetcode/0600-0699/0643.Maximum%20Average%20Subarray%20I/README.md", "relative_path_en": "/leetcode/0600-0699/0643.Maximum%20Average%20Subarray%20I/README_EN.md", "title_cn": "\u5b50\u6570\u7ec4\u6700\u5927\u5e73\u5747\u6570 I", "title_en": "Maximum Average Subarray I", "question_title_slug": "maximum-average-subarray-i", "content_en": "<p>Given an array consisting of <code>n</code> integers, find the contiguous subarray of given length <code>k</code> that has the maximum average value. And you need to output the maximum average value.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,12,-5,-6,50,3], k = 4\r\n<b>Output:</b> 12.75\r\n<b>Explanation:</b> Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000.</li>\r\n\t<li>Elements of the given array will be in the range [-10,000, 10,000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a <code>n</code> \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5e73\u5747\u6570\u6700\u5927\u4e14\u957f\u5ea6\u4e3a <code>k</code> \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8f93\u51fa\u8be5\u6700\u5927\u5e73\u5747\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,12,-5,-6,50,3], k = 4\n<strong>\u8f93\u51fa:</strong> 12.75\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u5e73\u5747\u6570 (12-5-6+50)/4 = 51/4 = 12.75\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000\u3002</li>\n\t<li>\u6240\u7ed9\u6570\u636e\u8303\u56f4 [-10,000\uff0c10,000]\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble findMaxAverage(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaxAverage(nums []int, k int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaxAverage(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0644", "frontend_question_id": "0644", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/maximum-average-subarray-ii", "url_en": "https://leetcode.com/problems/maximum-average-subarray-ii", "relative_path_cn": "/leetcode/0600-0699/0644.Maximum%20Average%20Subarray%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0644.Maximum%20Average%20Subarray%20II/README_EN.md", "title_cn": "\u6700\u5927\u5e73\u5747\u5b50\u6bb5\u548c II", "title_en": "Maximum Average Subarray II", "question_title_slug": "maximum-average-subarray-ii", "content_en": null, "content_cn": null, "tags_en": ["Array", "Binary Search"], "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0645", "frontend_question_id": "0645", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/set-mismatch", "url_en": "https://leetcode.com/problems/set-mismatch", "relative_path_cn": "/leetcode/0600-0699/0645.Set%20Mismatch/README.md", "relative_path_en": "/leetcode/0600-0699/0645.Set%20Mismatch/README_EN.md", "title_cn": "\u9519\u8bef\u7684\u96c6\u5408", "title_en": "Set Mismatch", "question_title_slug": "set-mismatch", "content_en": "<p>\r\nThe set <code>S</code> originally contains numbers from 1 to <code>n</code>. But unfortunately, due to the data error, one of the numbers in the set got duplicated to <b>another</b> number in the set, which results in repetition of one number and loss of another number. \r\n</p>\r\n\r\n<p>\r\nGiven an array <code>nums</code> representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums = [1,2,2,4]\r\n<b>Output:</b> [2,3]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given array size will in the range [2, 10000].</li>\r\n<li>The given array's numbers won't have any order.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u96c6\u5408 <code>S</code> \u5305\u542b\u4ece1\u5230&nbsp;<code>n</code>&nbsp;\u7684\u6574\u6570\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u56e0\u4e3a\u6570\u636e\u9519\u8bef\uff0c\u5bfc\u81f4\u96c6\u5408\u91cc\u9762\u67d0\u4e00\u4e2a\u5143\u7d20\u590d\u5236\u4e86\u6210\u4e86\u96c6\u5408\u91cc\u9762\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5bfc\u81f4\u96c6\u5408\u4e22\u5931\u4e86\u4e00\u4e2a\u6574\u6570\u5e76\u4e14\u6709\u4e00\u4e2a\u5143\u7d20\u91cd\u590d\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code> \u4ee3\u8868\u4e86\u96c6\u5408 <code>S</code> \u53d1\u751f\u9519\u8bef\u540e\u7684\u7ed3\u679c\u3002\u4f60\u7684\u4efb\u52a1\u662f\u9996\u5148\u5bfb\u627e\u5230\u91cd\u590d\u51fa\u73b0\u7684\u6574\u6570\uff0c\u518d\u627e\u5230\u4e22\u5931\u7684\u6574\u6570\uff0c\u5c06\u5b83\u4eec\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [1,2,2,4]\n<strong>\u8f93\u51fa:</strong> [2,3]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u8303\u56f4\u662f&nbsp;[2, 10000]\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\u3002</li>\n</ol>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findErrorNums(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findErrorNums(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findErrorNums(self, nums: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findErrorNums(int* nums, int numsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindErrorNums(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findErrorNums = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_error_nums(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findErrorNums(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findErrorNums(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findErrorNums(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findErrorNums(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_error_nums(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findErrorNums($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findErrorNums(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0646", "frontend_question_id": "0646", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-length-of-pair-chain", "url_en": "https://leetcode.com/problems/maximum-length-of-pair-chain", "relative_path_cn": "/leetcode/0600-0699/0646.Maximum%20Length%20of%20Pair%20Chain/README.md", "relative_path_en": "/leetcode/0600-0699/0646.Maximum%20Length%20of%20Pair%20Chain/README_EN.md", "title_cn": "\u6700\u957f\u6570\u5bf9\u94fe", "title_en": "Maximum Length of Pair Chain", "question_title_slug": "maximum-length-of-pair-chain", "content_en": "<p>\r\nYou are given <code>n</code> pairs of numbers. In every pair, the first number is always smaller than the second number.\r\n</p>\r\n\r\n<p>\r\nNow, we define a pair <code>(c, d)</code> can follow another pair <code>(a, b)</code> if and only if <code>b < c</code>. Chain of pairs can be formed in this fashion. \r\n</p>\r\n\r\n<p>\r\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The longest chain is [1,2] -> [3,4]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of given pairs will be in the range [1, 1000].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u51fa\u00a0<code>n</code>\u00a0\u4e2a\u6570\u5bf9\u3002\u00a0\u5728\u6bcf\u4e00\u4e2a\u6570\u5bf9\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6bd4\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5c0f\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u8ddf\u968f\u5173\u7cfb\uff0c\u5f53\u4e14\u4ec5\u5f53\u00a0<code>b < c</code>\u00a0\u65f6\uff0c\u6570\u5bf9<code>(c, d)</code>\u00a0\u624d\u53ef\u4ee5\u8ddf\u5728\u00a0<code>(a, b)</code>\u00a0\u540e\u9762\u3002\u6211\u4eec\u7528\u8fd9\u79cd\u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u6570\u5bf9\u94fe\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5bf9\u96c6\u5408\uff0c\u627e\u51fa\u80fd\u591f\u5f62\u6210\u7684\u6700\u957f\u6570\u5bf9\u94fe\u7684\u957f\u5ea6\u3002\u4f60\u4e0d\u9700\u8981\u7528\u5230\u6240\u6709\u7684\u6570\u5bf9\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e9b\u6570\u5bf9\u6765\u6784\u9020\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[[1,2], [2,3], [3,4]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u7684\u6570\u5bf9\u94fe\u662f [1,2] -> [3,4]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u51fa\u6570\u5bf9\u7684\u4e2a\u6570\u5728\u00a0<code>[1, 1000]</code> \u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLongestChain(vector<vector<int>>& pairs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLongestChain(int[][] pairs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLongestChain(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLongestChain(int** pairs, int pairsSize, int* pairsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLongestChain(int[][] pairs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function(pairs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} pairs\n# @return {Integer}\ndef find_longest_chain(pairs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLongestChain(_ pairs: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLongestChain(pairs [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLongestChain(pairs: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLongestChain(pairs: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_longest_chain(pairs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $pairs\n     * @return Integer\n     */\n    function findLongestChain($pairs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLongestChain(pairs: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0647", "frontend_question_id": "0647", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/palindromic-substrings", "url_en": "https://leetcode.com/problems/palindromic-substrings", "relative_path_cn": "/leetcode/0600-0699/0647.Palindromic%20Substrings/README.md", "relative_path_en": "/leetcode/0600-0699/0647.Palindromic%20Substrings/README_EN.md", "title_cn": "\u56de\u6587\u5b50\u4e32", "title_en": "Palindromic Substrings", "question_title_slug": "palindromic-substrings", "content_en": "<p>Given a string, your task is to count how many palindromic substrings in this string.</p>\r\n\r\n<p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abc&quot;\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;aaa&quot;\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The input string length won&#39;t exceed 1000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002</p>\n\n<p>\u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4e09\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aaa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>6\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1000 \u3002</li>\n</ul>\n", "tags_en": ["String", "Dynamic Programming"], "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSubstrings(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countSubstrings(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countSubstrings(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountSubstrings(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countSubstrings = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_substrings(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countSubstrings(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countSubstrings(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countSubstrings(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countSubstrings(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_substrings(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countSubstrings($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countSubstrings(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0648", "frontend_question_id": "0648", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/replace-words", "url_en": "https://leetcode.com/problems/replace-words", "relative_path_cn": "/leetcode/0600-0699/0648.Replace%20Words/README.md", "relative_path_en": "/leetcode/0600-0699/0648.Replace%20Words/README_EN.md", "title_cn": "\u5355\u8bcd\u66ff\u6362", "title_en": "Replace Words", "question_title_slug": "replace-words", "content_en": "<p>In English, we have a concept called <strong>root</strong>, which can be followed by some other word&nbsp;to form another longer word - let&#39;s call this word <strong>successor</strong>. For example, when the <strong>root</strong> <code>&quot;an&quot;</code> is&nbsp;followed by the <strong>successor</strong>&nbsp;word&nbsp;<code>&quot;other&quot;</code>, we&nbsp;can form a new word <code>&quot;another&quot;</code>.</p>\n\n<p>Given a <code>dictionary</code> consisting of many <strong>roots</strong> and a <code>sentence</code>&nbsp;consisting of words separated by spaces, replace all the <strong>successors</strong> in the sentence with the <strong>root</strong> forming it. If a <strong>successor</strong> can be replaced by more than one <strong>root</strong>,&nbsp;replace it with the <strong>root</strong> that has&nbsp;<strong>the shortest length</strong>.</p>\n\n<p>Return <em>the <code>sentence</code></em> after the replacement.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>Output:</strong> \"the cat was rat by the bat\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\n<strong>Output:</strong> \"a a b c\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"\n<strong>Output:</strong> \"a a a a a a a a bbb baba a\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n<strong>Output:</strong> \"the cat was rat by the bat\"\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"\n<strong>Output:</strong> \"it is ab that this solution is ac\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dictionary.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code>&nbsp;consists of only lower-case letters.</li>\n\t<li><code>1 &lt;= sentence.length &lt;= 10^6</code></li>\n\t<li><code>sentence</code>&nbsp;consists of only lower-case letters and spaces.</li>\n\t<li>The number of words in&nbsp;<code>sentence</code>&nbsp;is in the range <code>[1, 1000]</code></li>\n\t<li>The length of each word in&nbsp;<code>sentence</code>&nbsp;is in the range <code>[1, 1000]</code></li>\n\t<li>Each two consecutive words in&nbsp;<code>sentence</code>&nbsp;will be separated by exactly one space.</li>\n\t<li><code>sentence</code>&nbsp;does not have leading or trailing spaces.</li>\n</ul>\n", "content_cn": "<p>\u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a&nbsp;<code>\u8bcd\u6839</code>(root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd&mdash;&mdash;\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a&nbsp;<code>\u7ee7\u627f\u8bcd</code>(successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839<code>an</code>\uff0c\u8ddf\u968f\u7740\u5355\u8bcd&nbsp;<code>other</code>(\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd&nbsp;<code>another</code>(\u53e6\u4e00\u4e2a)\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709<code>\u7ee7\u627f\u8bcd</code>\u7528<code>\u8bcd\u6839</code>\u66ff\u6362\u6389\u3002\u5982\u679c<code>\u7ee7\u627f\u8bcd</code>\u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684<code>\u8bcd\u6839</code>\uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], sentence = &quot;aadsfasf absbs bbab cadsfafs&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a a b c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>dictionary = [&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;], sentence = &quot;a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a a a a a a a a bbb baba a&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>dictionary = [&quot;catt&quot;,&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>dictionary = [&quot;ac&quot;,&quot;ab&quot;], sentence = &quot;it is abnormal that this solution is accepted&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;it is ab that this solution is ac&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dictionary.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code>&nbsp;\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li><code>1 &lt;= sentence.length &lt;= 10^6</code></li>\n\t<li><code>sentence</code>&nbsp;\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u7ec4\u6210\u3002</li>\n\t<li><code>sentence</code> \u4e2d\u5355\u8bcd\u7684\u603b\u91cf\u5728\u8303\u56f4 <code>[1, 1000]</code> \u5185\u3002</li>\n\t<li><code>sentence</code> \u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5728\u8303\u56f4 <code>[1, 1000]</code> \u5185\u3002</li>\n\t<li><code>sentence</code> \u4e2d\u5355\u8bcd\u4e4b\u95f4\u7531\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</li>\n\t<li><code>sentence</code>&nbsp;\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u968f\u7a7a\u683c\u3002</li>\n</ul>\n", "tags_en": ["Trie", "Hash Table"], "tags_cn": ["\u5b57\u5178\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string replaceWords(vector<string>& dictionary, string sentence) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String replaceWords(List<String> dictionary, String sentence) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def replaceWords(self, dictionary, sentence):\n        \"\"\"\n        :type dictionary: List[str]\n        :type sentence: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * replaceWords(char ** dictionary, int dictionarySize, char * sentence){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReplaceWords(IList<string> dictionary, string sentence) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} dictionary\n * @param {string} sentence\n * @return {string}\n */\nvar replaceWords = function(dictionary, sentence) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} dictionary\n# @param {String} sentence\n# @return {String}\ndef replace_words(dictionary, sentence)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func replaceWords(_ dictionary: [String], _ sentence: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func replaceWords(dictionary []string, sentence string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def replaceWords(dictionary: List[String], sentence: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun replaceWords(dictionary: List<String>, sentence: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn replace_words(dictionary: Vec<String>, sentence: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $dictionary\n     * @param String $sentence\n     * @return String\n     */\n    function replaceWords($dictionary, $sentence) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function replaceWords(dictionary: string[], sentence: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0649", "frontend_question_id": "0649", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/dota2-senate", "url_en": "https://leetcode.com/problems/dota2-senate", "relative_path_cn": "/leetcode/0600-0699/0649.Dota2%20Senate/README.md", "relative_path_en": "/leetcode/0600-0699/0649.Dota2%20Senate/README_EN.md", "title_cn": "Dota2 \u53c2\u8bae\u9662", "title_en": "Dota2 Senate", "question_title_slug": "dota2-senate", "content_en": "<p>In the world of Dota2, there are two parties: the <code>Radiant</code> and the <code>Dire</code>.</p>\r\n\r\n<p>The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <code>one</code> of the two rights:</p>\r\n\r\n<ol>\r\n\t<li><code>Ban one senator&#39;s right</code>:<br />\r\n\tA senator can make another senator lose <b>all his rights</b> in this and all the following rounds.</li>\r\n\t<li><code>Announce the victory</code>:<br />\r\n\tIf this senator found the senators who still have rights to vote are all from <b>the same party</b>, he can announce the victory and make the decision about the change in the game.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a string representing each senator&#39;s party belonging. The character &#39;R&#39; and &#39;D&#39; represent the <code>Radiant</code> party and the <code>Dire</code> party respectively. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p>\r\n\r\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\r\n\r\n<p>Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be <code>Radiant</code> or <code>Dire</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;RD&quot;\r\n<b>Output:</b> &quot;Radiant&quot;\r\n<b>Explanation:</b> The first senator comes from Radiant and he can just ban the next senator&#39;s right in the round 1. \r\nAnd the second senator can&#39;t exercise any rights any more since his right has been banned. \r\nAnd in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;RDD&quot;\r\n<b>Output:</b> &quot;Dire&quot;\r\n<b>Explanation:</b> \r\nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in the round 1. \r\nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \r\nAnd the third senator comes from Dire and he can ban the first senator&#39;s right in the round 1. \r\nAnd in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The length of the given string will in the range [1, 10,000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>Dota2 \u7684\u4e16\u754c\u91cc\u6709\u4e24\u4e2a\u9635\u8425\uff1a<code>Radiant</code>(\u5929\u8f89)\u548c\u00a0<code>Dire</code>(\u591c\u9b47)</p>\n\n<p>Dota2 \u53c2\u8bae\u9662\u7531\u6765\u81ea\u4e24\u6d3e\u7684\u53c2\u8bae\u5458\u7ec4\u6210\u3002\u73b0\u5728\u53c2\u8bae\u9662\u5e0c\u671b\u5bf9\u4e00\u4e2a Dota2 \u6e38\u620f\u91cc\u7684\u6539\u53d8\u4f5c\u51fa\u51b3\u5b9a\u3002\u4ed6\u4eec\u4ee5\u4e00\u4e2a\u57fa\u4e8e\u8f6e\u4e3a\u8fc7\u7a0b\u7684\u6295\u7968\u8fdb\u884c\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u6bcf\u4e00\u4f4d\u53c2\u8bae\u5458\u90fd\u53ef\u4ee5\u884c\u4f7f\u4e24\u9879\u6743\u5229\u4e2d\u7684<code><strong>\u4e00</strong></code>\u9879\uff1a</p>\n\n<ol>\n\t<li>\n\t<p><code>\u7981\u6b62\u4e00\u540d\u53c2\u8bae\u5458\u7684\u6743\u5229</code>\uff1a</p>\n\n\t<p>\u53c2\u8bae\u5458\u53ef\u4ee5\u8ba9\u53e6\u4e00\u4f4d\u53c2\u8bae\u5458\u5728\u8fd9\u4e00\u8f6e\u548c\u968f\u540e\u7684\u51e0\u8f6e\u4e2d\u4e27\u5931<strong>\u6240\u6709\u7684\u6743\u5229</strong>\u3002</p>\n\t</li>\n\t<li>\n\t<p><code>\u5ba3\u5e03\u80dc\u5229</code>\uff1a</p>\n\t</li>\n</ol>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u5982\u679c\u53c2\u8bae\u5458\u53d1\u73b0\u6709\u6743\u5229\u6295\u7968\u7684\u53c2\u8bae\u5458\u90fd\u662f<strong>\u540c\u4e00\u4e2a\u9635\u8425\u7684</strong>\uff0c\u4ed6\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\u5e76\u51b3\u5b9a\u5728\u6e38\u620f\u4e2d\u7684\u6709\u5173\u53d8\u5316\u3002</p>\n\n<p>\u00a0</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u6bcf\u4e2a\u53c2\u8bae\u5458\u7684\u9635\u8425\u3002\u5b57\u6bcd \u201cR\u201d \u548c \u201cD\u201d \u5206\u522b\u4ee3\u8868\u4e86\u00a0<code>Radiant</code>\uff08\u5929\u8f89\uff09\u548c\u00a0<code>Dire</code>\uff08\u591c\u9b47\uff09\u3002\u7136\u540e\uff0c\u5982\u679c\u6709 <code>n</code> \u4e2a\u53c2\u8bae\u5458\uff0c\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u5c06\u662f\u00a0<code>n</code>\u3002</p>\n\n<p>\u4ee5\u8f6e\u4e3a\u57fa\u7840\u7684\u8fc7\u7a0b\u4ece\u7ed9\u5b9a\u987a\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u5f00\u59cb\u5230\u6700\u540e\u4e00\u4e2a\u53c2\u8bae\u5458\u7ed3\u675f\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5c06\u6301\u7eed\u5230\u6295\u7968\u7ed3\u675f\u3002\u6240\u6709\u5931\u53bb\u6743\u5229\u7684\u53c2\u8bae\u5458\u5c06\u5728\u8fc7\u7a0b\u4e2d\u88ab\u8df3\u8fc7\u3002</p>\n\n<p>\u5047\u8bbe\u6bcf\u4e00\u4f4d\u53c2\u8bae\u5458\u90fd\u8db3\u591f\u806a\u660e\uff0c\u4f1a\u4e3a\u81ea\u5df1\u7684\u653f\u515a\u505a\u51fa\u6700\u597d\u7684\u7b56\u7565\uff0c\u4f60\u9700\u8981\u9884\u6d4b\u54ea\u4e00\u65b9\u6700\u7ec8\u4f1a\u5ba3\u5e03\u80dc\u5229\u5e76\u5728 Dota2 \u6e38\u620f\u4e2d\u51b3\u5b9a\u6539\u53d8\u3002\u8f93\u51fa\u5e94\u8be5\u662f\u00a0<code>Radiant</code>\u00a0\u6216\u00a0<code>Dire</code>\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\"RD\"\n<strong>\u8f93\u51fa\uff1a</strong>\"Radiant\"\n<strong>\u89e3\u91ca\uff1a</strong><code>\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u6765\u81ea Radiant \u9635\u8425\u5e76\u4e14\u4ed6\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e00\u9879\u6743\u5229\u8ba9\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u5931\u53bb\u6743\u529b\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u5c06\u88ab\u8df3\u8fc7\u56e0\u4e3a\u4ed6\u6ca1\u6709\u4efb\u4f55\u6743\u5229\u3002\u7136\u540e\u5728\u7b2c\u4e8c\u8f6e\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\uff0c\u56e0\u4e3a\u4ed6\u662f\u552f\u4e00\u4e00\u4e2a\u6709\u6295\u7968\u6743\u7684\u4eba</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\"RDD\"\n<strong>\u8f93\u51fa\uff1a</strong>\"Dire\"\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7b2c\u4e00\u8f6e\u4e2d,\u7b2c\u4e00\u4e2a<code>\u6765\u81ea Radiant \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e00\u9879\u6743\u5229\u7981\u6b62\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u7684\u6743\u5229\n\u7b2c\u4e8c\u4e2a<code>\u6765\u81ea Dire \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u4f1a\u88ab\u8df3\u8fc7\u56e0\u4e3a\u4ed6\u7684\u6743\u5229\u88ab\u7981\u6b62\n\u7b2c\u4e09\u4e2a<code>\u6765\u81ea Dire \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u53ef\u4ee5\u4f7f\u7528\u4ed6\u7684\u7b2c\u4e00\u9879\u6743\u5229\u7981\u6b62\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u7684\u6743\u5229\n\u56e0\u6b64\u5728\u7b2c\u4e8c\u8f6e\u53ea\u5269\u4e0b\u7b2c\u4e09\u4e2a\u53c2\u8bae\u5458\u62e5\u6709\u6295\u7968\u7684\u6743\u5229,\u4e8e\u662f\u4ed6\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5728 <code>[1, 10,000]</code> \u4e4b\u95f4.</li>\n</ul>\n\n<p>\u00a0</p>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string predictPartyVictory(string senate) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String predictPartyVictory(String senate) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def predictPartyVictory(self, senate):\n        \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * predictPartyVictory(char * senate){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string PredictPartyVictory(string senate) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} senate\n * @return {string}\n */\nvar predictPartyVictory = function(senate) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} senate\n# @return {String}\ndef predict_party_victory(senate)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func predictPartyVictory(_ senate: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func predictPartyVictory(senate string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def predictPartyVictory(senate: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun predictPartyVictory(senate: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn predict_party_victory(senate: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $senate\n     * @return String\n     */\n    function predictPartyVictory($senate) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function predictPartyVictory(senate: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0650", "frontend_question_id": "0650", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/2-keys-keyboard", "url_en": "https://leetcode.com/problems/2-keys-keyboard", "relative_path_cn": "/leetcode/0600-0699/0650.2%20Keys%20Keyboard/README.md", "relative_path_en": "/leetcode/0600-0699/0650.2%20Keys%20Keyboard/README_EN.md", "title_cn": "\u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8", "title_en": "2 Keys Keyboard", "question_title_slug": "2-keys-keyboard", "content_en": "<p>Initially on a notepad only one character &#39;A&#39; is present. You can perform two operations on this notepad for each step:</p>\r\n\r\n<ol>\r\n\t<li><code>Copy All</code>: You can copy all the characters present on the notepad (partial copy is not allowed).</li>\r\n\t<li><code>Paste</code>: You can paste the characters which are copied <b>last time</b>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a number <code>n</code>. You have to get <b>exactly</b> <code>n</code> &#39;A&#39; on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get <code>n</code> &#39;A&#39;.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nIntitally, we have one character &#39;A&#39;.\r\nIn step 1, we use <b>Copy All</b> operation.\r\nIn step 2, we use <b>Paste</b> operation to get &#39;AA&#39;.\r\nIn step 3, we use <b>Paste</b> operation to get &#39;AAA&#39;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The <code>n</code> will be in the range [1, 1000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u6700\u521d\u5728\u4e00\u4e2a\u8bb0\u4e8b\u672c\u4e0a\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26 &#39;A&#39;\u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li><code>Copy All</code> (\u590d\u5236\u5168\u90e8) : \u4f60\u53ef\u4ee5\u590d\u5236\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u4e2d\u7684\u6240\u6709\u5b57\u7b26(\u90e8\u5206\u7684\u590d\u5236\u662f\u4e0d\u5141\u8bb8\u7684)\u3002</li>\n\t<li><code>Paste</code> (\u7c98\u8d34) : \u4f60\u53ef\u4ee5\u7c98\u8d34\u4f60<strong>\u4e0a\u4e00\u6b21</strong>\u590d\u5236\u7684\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57&nbsp;<code>n</code>&nbsp;\u3002\u4f60\u9700\u8981\u4f7f\u7528\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5728\u8bb0\u4e8b\u672c\u4e2d\u6253\u5370\u51fa<strong>\u6070\u597d</strong>&nbsp;<code>n</code>&nbsp;\u4e2a &#39;A&#39;\u3002\u8f93\u51fa\u80fd\u591f\u6253\u5370\u51fa&nbsp;<code>n</code>&nbsp;\u4e2a &#39;A&#39; \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u6700\u521d, \u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26 &#39;A&#39;\u3002\n\u7b2c 1 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Copy All</strong> \u64cd\u4f5c\u3002\n\u7b2c 2 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Paste </strong>\u64cd\u4f5c\u6765\u83b7\u5f97 &#39;AA&#39;\u3002\n\u7b2c 3 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Paste</strong> \u64cd\u4f5c\u6765\u83b7\u5f97 &#39;AAA&#39;\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>n</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u662f [1, 1000] \u3002</li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSteps(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSteps(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSteps(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSteps(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minSteps(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSteps(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar minSteps = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef min_steps(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSteps(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minSteps(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSteps(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSteps(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_steps(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minSteps($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSteps(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0651", "frontend_question_id": "0651", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/4-keys-keyboard", "url_en": "https://leetcode.com/problems/4-keys-keyboard", "relative_path_cn": "/leetcode/0600-0699/0651.4%20Keys%20Keyboard/README.md", "relative_path_en": "/leetcode/0600-0699/0651.4%20Keys%20Keyboard/README_EN.md", "title_cn": "4\u952e\u952e\u76d8", "title_en": "4 Keys Keyboard", "question_title_slug": "4-keys-keyboard", "content_en": null, "content_cn": null, "tags_en": ["Greedy", "Math", "Dynamic Programming"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0652", "frontend_question_id": "0652", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-duplicate-subtrees", "url_en": "https://leetcode.com/problems/find-duplicate-subtrees", "relative_path_cn": "/leetcode/0600-0699/0652.Find%20Duplicate%20Subtrees/README.md", "relative_path_en": "/leetcode/0600-0699/0652.Find%20Duplicate%20Subtrees/README_EN.md", "title_cn": "\u5bfb\u627e\u91cd\u590d\u7684\u5b50\u6811", "title_en": "Find Duplicate Subtrees", "question_title_slug": "find-duplicate-subtrees", "content_en": "<p>Given the <code>root</code>&nbsp;of a binary tree, return all <strong>duplicate subtrees</strong>.</p>\n\n<p>For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them.</p>\n\n<p>Two trees are <strong>duplicate</strong> if they have the <strong>same structure</strong> with the <strong>same node values</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e1.jpg\" style=\"width: 450px; height: 354px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,null,2,4,null,null,4]\n<strong>Output:</strong> [[2,4],[4]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e2.jpg\" style=\"width: 321px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e33.jpg\" style=\"width: 450px; height: 303px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2,3,null,3,null]\n<strong>Output:</strong> [[2,3],[3]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the tree will be in the range <code>[1, 10^4]</code></li>\n\t<li><code>-200 &lt;= Node.val &lt;= 200</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u91cd\u590d\u7684\u5b50\u6811\u3002\u5bf9\u4e8e\u540c\u4e00\u7c7b\u7684\u91cd\u590d\u5b50\u6811\uff0c\u4f60\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4efb\u610f<strong>\u4e00\u68f5</strong>\u7684\u6839\u7ed3\u70b9\u5373\u53ef\u3002</p>\n\n<p>\u4e24\u68f5\u6811\u91cd\u590d\u662f\u6307\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u7ed3\u6784\u4ee5\u53ca\u76f8\u540c\u7684\u7ed3\u70b9\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre>\n\n<p>\u4e0b\u9762\u662f\u4e24\u4e2a\u91cd\u590d\u7684\u5b50\u6811\uff1a</p>\n\n<pre>      2\n     /\n    4\n</pre>\n\n<p>\u548c</p>\n\n<pre>    4\n</pre>\n\n<p>\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u4e0a\u8ff0\u91cd\u590d\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findDuplicateSubtrees(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[TreeNode]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** findDuplicateSubtrees(struct TreeNode* root, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> FindDuplicateSubtrees(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode[]}\n */\nvar findDuplicateSubtrees = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {TreeNode[]}\ndef find_duplicate_subtrees(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findDuplicateSubtrees(_ root: TreeNode?) -> [TreeNode?] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findDuplicateSubtrees(root *TreeNode) []*TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findDuplicateSubtrees(root: TreeNode): List[TreeNode] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findDuplicateSubtrees(root: TreeNode?): List<TreeNode?> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_duplicate_subtrees(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode[]\n     */\n    function findDuplicateSubtrees($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findDuplicateSubtrees(root: TreeNode | null): Array<TreeNode | null> {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0653", "frontend_question_id": "0653", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst", "url_en": "https://leetcode.com/problems/two-sum-iv-input-is-a-bst", "relative_path_cn": "/leetcode/0600-0699/0653.Two%20Sum%20IV%20-%20Input%20is%20a%20BST/README.md", "relative_path_en": "/leetcode/0600-0699/0653.Two%20Sum%20IV%20-%20Input%20is%20a%20BST/README_EN.md", "title_cn": "\u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST", "title_en": "Two Sum IV - Input is a BST", "question_title_slug": "two-sum-iv-input-is-a-bst", "content_en": "<p>Given the <code>root</code> of a Binary Search Tree and a target number <code>k</code>, return <em><code>true</code> if there exist two elements in the BST such that their sum is equal to the given target</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg\" style=\"width: 562px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 9\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg\" style=\"width: 562px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 28\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1,3], k = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1,3], k = 1\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1,3], k = 3\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>root</code> is guaranteed to be a <strong>valid</strong> binary search tree.</li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002</p>\n\n<p><strong>\u6848\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6848\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool findTarget(TreeNode* root, int k) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTarget(self, root: TreeNode, k: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool findTarget(struct TreeNode* root, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool FindTarget(TreeNode root, int k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {boolean}\n */\nvar findTarget = function(root, k) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} k\n# @return {Boolean}\ndef find_target(root, k)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findTarget(_ root: TreeNode?, _ k: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findTarget(root *TreeNode, k int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findTarget(root: TreeNode, k: Int): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findTarget(root: TreeNode?, k: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_target(root: Option<Rc<RefCell<TreeNode>>>, k: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $k\n     * @return Boolean\n     */\n    function findTarget($root, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findTarget(root: TreeNode | null, k: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0654", "frontend_question_id": "0654", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-binary-tree", "url_en": "https://leetcode.com/problems/maximum-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0654.Maximum%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0654.Maximum%20Binary%20Tree/README_EN.md", "title_cn": "\u6700\u5927\u4e8c\u53c9\u6811", "title_en": "Maximum Binary Tree", "question_title_slug": "maximum-binary-tree", "content_en": "<p>\r\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\r\n<ol>\r\n<li>The root is the maximum number in the array. </li>\r\n<li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li>\r\n<li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li> \r\n</ol>\r\n</p>\r\n\r\n<p>\r\nConstruct the maximum tree by the given array and output the root node of this tree.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,2,1,6,0,5]\r\n<b>Output:</b> return the tree root node representing the following tree:\r\n\r\n      6\r\n    /   \\\r\n   3     5\r\n    \\    / \r\n     2  0   \r\n       \\\r\n        1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The size of the given array will be in the range [1,1000].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002</li>\n\t<li>\u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n\t<li>\u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n</ol>\n\n<p>\u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b \uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,1,6,0,5]\n<strong>\u8f93\u51fa\uff1a</strong>\u8fd4\u56de\u4e0b\u9762\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\uff1a\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u7ec4\u7684\u5927\u5c0f\u5728 [1, 1000] \u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def constructMaximumBinaryTree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* constructMaximumBinaryTree(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConstructMaximumBinaryTree(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar constructMaximumBinaryTree = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer[]} nums\n# @return {TreeNode}\ndef construct_maximum_binary_tree(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func constructMaximumBinaryTree(_ nums: [Int]) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def constructMaximumBinaryTree(nums: Array[Int]): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun constructMaximumBinaryTree(nums: IntArray): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn construct_maximum_binary_tree(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return TreeNode\n     */\n    function constructMaximumBinaryTree($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction constructMaximumBinaryTree(nums: number[]): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0655", "frontend_question_id": "0655", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/print-binary-tree", "url_en": "https://leetcode.com/problems/print-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0655.Print%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0655.Print%20Binary%20Tree/README_EN.md", "title_cn": "\u8f93\u51fa\u4e8c\u53c9\u6811", "title_en": "Print Binary Tree", "question_title_slug": "print-binary-tree", "content_en": "<p>Print a binary tree in an m*n 2D string array following these rules: </p>\r\n\r\n<ol>\r\n<li>The row number <code>m</code> should be equal to the height of the given binary tree.</li>\r\n<li>The column number <code>n</code> should always be an odd number.</li>\r\n<li>The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (<b>left-bottom part and right-bottom part</b>). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. </li>\r\n<li>Each unused space should contain an empty string <code>\"\"</code>.</li>\r\n<li>Print the subtrees following the same rules.</li>\r\n</ol>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n     1\r\n    /\r\n   2\r\n<b>Output:</b>\r\n[[\"\", \"1\", \"\"],\r\n [\"2\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n     1\r\n    / \\\r\n   2   3\r\n    \\\r\n     4\r\n<b>Output:</b>\r\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\r\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\r\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n      1\r\n     / \\\r\n    2   5\r\n   / \r\n  3 \r\n / \r\n4 \r\n<b>Output:</b>\r\n\r\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\r\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe height of binary tree is in the range of [1, 10].\r\n</p>", "content_cn": "<p>\u5728\u4e00\u4e2a m*n \u7684\u4e8c\u7ef4\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u8f93\u51fa\u4e8c\u53c9\u6811\uff0c\u5e76\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u884c\u6570&nbsp;<code>m</code>&nbsp;\u5e94\u5f53\u7b49\u4e8e\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u3002</li>\n\t<li>\u5217\u6570&nbsp;<code>n</code>&nbsp;\u5e94\u5f53\u603b\u662f\u5947\u6570\u3002</li>\n\t<li>\u6839\u8282\u70b9\u7684\u503c\uff08\u4ee5\u5b57\u7b26\u4e32\u683c\u5f0f\u7ed9\u51fa\uff09\u5e94\u5f53\u653e\u5728\u53ef\u653e\u7f6e\u7684\u7b2c\u4e00\u884c\u6b63\u4e2d\u95f4\u3002\u6839\u8282\u70b9\u6240\u5728\u7684\u884c\u4e0e\u5217\u4f1a\u5c06\u5269\u4f59\u7a7a\u95f4\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08<strong>\u5de6\u4e0b\u90e8\u5206\u548c\u53f3\u4e0b\u90e8\u5206</strong>\uff09\u3002\u4f60\u5e94\u8be5\u5c06\u5de6\u5b50\u6811\u8f93\u51fa\u5728\u5de6\u4e0b\u90e8\u5206\uff0c\u53f3\u5b50\u6811\u8f93\u51fa\u5728\u53f3\u4e0b\u90e8\u5206\u3002\u5de6\u4e0b\u548c\u53f3\u4e0b\u90e8\u5206\u5e94\u5f53\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002\u5373\u4f7f\u4e00\u4e2a\u5b50\u6811\u4e3a\u7a7a\u800c\u53e6\u4e00\u4e2a\u975e\u7a7a\uff0c\u4f60\u4e0d\u9700\u8981\u4e3a\u7a7a\u7684\u5b50\u6811\u8f93\u51fa\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u4ecd\u9700\u8981\u4e3a\u53e6\u4e00\u4e2a\u5b50\u6811\u7559\u51fa\u8db3\u591f\u7684\u7a7a\u95f4\u3002\u7136\u800c\uff0c\u5982\u679c\u4e24\u4e2a\u5b50\u6811\u90fd\u4e3a\u7a7a\u5219\u4e0d\u9700\u8981\u4e3a\u5b83\u4eec\u7559\u51fa\u4efb\u4f55\u7a7a\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u672a\u4f7f\u7528\u7684\u7a7a\u95f4\u5e94\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n\t<li>\u4f7f\u7528\u76f8\u540c\u7684\u89c4\u5219\u8f93\u51fa\u5b50\u6811\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n     1\n    /\n   2\n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;, &quot;1&quot;, &quot;&quot;],\n [&quot;2&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n     1\n    / \\\n   2   3\n    \\\n     4\n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;5&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;3&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;4&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u5728\u8303\u56f4 [1, 10] \u4e2d\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<string>> printTree(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<String>> printTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def printTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[str]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def printTree(self, root: TreeNode) -> List[List[str]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** printTree(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<IList<string>> PrintTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[][]}\n */\nvar printTree = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {String[][]}\ndef print_tree(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func printTree(_ root: TreeNode?) -> [[String]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc printTree(root *TreeNode) [][]string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def printTree(root: TreeNode): List[List[String]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun printTree(root: TreeNode?): List<List<String>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn print_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<String>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return String[][]\n     */\n    function printTree($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction printTree(root: TreeNode | null): string[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0656", "frontend_question_id": "0656", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/coin-path", "url_en": "https://leetcode.com/problems/coin-path", "relative_path_cn": "/leetcode/0600-0699/0656.Coin%20Path/README.md", "relative_path_en": "/leetcode/0600-0699/0656.Coin%20Path/README_EN.md", "title_cn": "\u91d1\u5e01\u8def\u5f84", "title_en": "Coin Path", "question_title_slug": "coin-path", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0657", "frontend_question_id": "0657", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/robot-return-to-origin", "url_en": "https://leetcode.com/problems/robot-return-to-origin", "relative_path_cn": "/leetcode/0600-0699/0657.Robot%20Return%20to%20Origin/README.md", "relative_path_en": "/leetcode/0600-0699/0657.Robot%20Return%20to%20Origin/README_EN.md", "title_cn": "\u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9", "title_en": "Robot Return to Origin", "question_title_slug": "robot-return-to-origin", "content_en": "<p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.</p>\n\n<p>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\n\n<p><strong>Note</strong>: The way that the robot is &quot;facing&quot; is irrelevant. &quot;R&quot; will always make the robot move to the right once, &quot;L&quot; will always make it move left, etc. Also, assume that the magnitude of the robot&#39;s movement is the same for each move.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;UD&quot;\n<strong>Output:</strong> true\n<strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;LL&quot;\n<strong>Output:</strong> false\n<strong>Explanation</strong>: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;RRDD&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;LDRRLRUULR&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= moves.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>moves</code> only contains the characters <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code> and <code>&#39;R&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u539f\u70b9 (0, 0) \u5f00\u59cb\u3002\u7ed9\u51fa\u5b83\u7684\u79fb\u52a8\u987a\u5e8f\uff0c\u5224\u65ad\u8fd9\u4e2a\u673a\u5668\u4eba\u5728\u5b8c\u6210\u79fb\u52a8\u540e\u662f\u5426\u5728<strong>&nbsp;(0, 0) \u5904\u7ed3\u675f</strong>\u3002</p>\n\n<p>\u79fb\u52a8\u987a\u5e8f\u7531\u5b57\u7b26\u4e32\u8868\u793a\u3002\u5b57\u7b26 move[i] \u8868\u793a\u5176\u7b2c i \u6b21\u79fb\u52a8\u3002\u673a\u5668\u4eba\u7684\u6709\u6548\u52a8\u4f5c\u6709&nbsp;<code>R</code>\uff08\u53f3\uff09\uff0c<code>L</code>\uff08\u5de6\uff09\uff0c<code>U</code>\uff08\u4e0a\uff09\u548c <code>D</code>\uff08\u4e0b\uff09\u3002\u5982\u679c\u673a\u5668\u4eba\u5728\u5b8c\u6210\u6240\u6709\u52a8\u4f5c\u540e\u8fd4\u56de\u539f\u70b9\uff0c\u5219\u8fd4\u56de true\u3002\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u673a\u5668\u4eba&ldquo;\u9762\u671d&rdquo;\u7684\u65b9\u5411\u65e0\u5173\u7d27\u8981\u3002 &ldquo;R&rdquo; \u5c06\u59cb\u7ec8\u4f7f\u673a\u5668\u4eba\u5411\u53f3\u79fb\u52a8\u4e00\u6b21\uff0c&ldquo;L&rdquo; \u5c06\u59cb\u7ec8\u5411\u5de6\u79fb\u52a8\u7b49\u3002\u6b64\u5916\uff0c\u5047\u8bbe\u6bcf\u6b21\u79fb\u52a8\u673a\u5668\u4eba\u7684\u79fb\u52a8\u5e45\u5ea6\u76f8\u540c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;UD&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca\uff1a</strong>\u673a\u5668\u4eba\u5411\u4e0a\u79fb\u52a8\u4e00\u6b21\uff0c\u7136\u540e\u5411\u4e0b\u79fb\u52a8\u4e00\u6b21\u3002\u6240\u6709\u52a8\u4f5c\u90fd\u5177\u6709\u76f8\u540c\u7684\u5e45\u5ea6\uff0c\u56e0\u6b64\u5b83\u6700\u7ec8\u56de\u5230\u5b83\u5f00\u59cb\u7684\u539f\u70b9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd4\u56de true\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;LL&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca\uff1a</strong>\u673a\u5668\u4eba\u5411\u5de6\u79fb\u52a8\u4e24\u6b21\u3002\u5b83\u6700\u7ec8\u4f4d\u4e8e\u539f\u70b9\u7684\u5de6\u4fa7\uff0c\u8ddd\u539f\u70b9\u6709\u4e24\u6b21 &ldquo;\u79fb\u52a8&rdquo; \u7684\u8ddd\u79bb\u3002\u6211\u4eec\u8fd4\u56de false\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u7ed3\u675f\u65f6\u6ca1\u6709\u8fd4\u56de\u539f\u70b9\u3002</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool judgeCircle(string moves) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean judgeCircle(String moves) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def judgeCircle(self, moves: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool judgeCircle(char * moves){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool JudgeCircle(string moves) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} moves\n * @return {boolean}\n */\nvar judgeCircle = function(moves) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} moves\n# @return {Boolean}\ndef judge_circle(moves)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func judgeCircle(_ moves: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func judgeCircle(moves string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def judgeCircle(moves: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun judgeCircle(moves: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn judge_circle(moves: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $moves\n     * @return Boolean\n     */\n    function judgeCircle($moves) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function judgeCircle(moves: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0658", "frontend_question_id": "0658", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-k-closest-elements", "url_en": "https://leetcode.com/problems/find-k-closest-elements", "relative_path_cn": "/leetcode/0600-0699/0658.Find%20K%20Closest%20Elements/README.md", "relative_path_en": "/leetcode/0600-0699/0658.Find%20K%20Closest%20Elements/README_EN.md", "title_cn": "\u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20", "title_en": "Find K Closest Elements", "question_title_slug": "find-k-closest-elements", "content_en": "<p>Given a <strong>sorted</strong> integer&nbsp;array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p>\n\n<p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p>\n\n<ul>\n\t<li><code>|a - x| &lt; |b - x|</code>, or</li>\n\t<li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = 3\n<strong>Output:</strong> [1,2,3,4]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = -1\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= arr.length</code></li>\n\t<li><code>1 &lt;= arr.length&nbsp;&lt;= 10<sup>4</sup></code></li>\n\t<li>Absolute value of elements in the array and <code>x</code> will not exceed <code>10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\u00a0<code>arr</code> \uff0c\u4e24\u4e2a\u6574\u6570 <code>k</code> \u548c <code>x</code> \uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 <code>x</code>\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 <code>k</code> \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684\u3002</p>\n\n<p>\u6574\u6570 <code>a</code> \u6bd4\u6574\u6570 <code>b</code> \u66f4\u63a5\u8fd1 <code>x</code> \u9700\u8981\u6ee1\u8db3\uff1a</p>\n\n<ul>\n\t<li><code>|a - x| < |b - x|</code> \u6216\u8005</li>\n\t<li><code>|a - x| == |b - x|</code> \u4e14 <code>a < b</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [1,2,3,4,5], k = 4, x = 3\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [1,2,3,4,5], k = 4, x = -1\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= k <= arr.length</code></li>\n\t<li><code>1 <= arr.length\u00a0<= 10<sup>4</sup></code></li>\n\t<li>\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e\u00a0<code>x</code> \u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 <code>10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findClosestElements(vector<int>& arr, int k, int x) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> findClosestElements(int[] arr, int k, int x) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findClosestElements(self, arr, k, x):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type x: int\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindClosestElements(int[] arr, int k, int x) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @param {number} k\n * @param {number} x\n * @return {number[]}\n */\nvar findClosestElements = function(arr, k, x) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @param {Integer} k\n# @param {Integer} x\n# @return {Integer[]}\ndef find_closest_elements(arr, k, x)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findClosestElements(_ arr: [Int], _ k: Int, _ x: Int) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findClosestElements(arr []int, k int, x int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findClosestElements(arr: Array[Int], k: Int, x: Int): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findClosestElements(arr: IntArray, k: Int, x: Int): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_closest_elements(arr: Vec<i32>, k: i32, x: i32) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer[]\n     */\n    function findClosestElements($arr, $k, $x) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findClosestElements(arr: number[], k: number, x: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0659", "frontend_question_id": "0659", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences", "url_en": "https://leetcode.com/problems/split-array-into-consecutive-subsequences", "relative_path_cn": "/leetcode/0600-0699/0659.Split%20Array%20into%20Consecutive%20Subsequences/README.md", "relative_path_en": "/leetcode/0600-0699/0659.Split%20Array%20into%20Consecutive%20Subsequences/README_EN.md", "title_cn": "\u5206\u5272\u6570\u7ec4\u4e3a\u8fde\u7eed\u5b50\u5e8f\u5217", "title_en": "Split Array into Consecutive Subsequences", "question_title_slug": "split-array-into-consecutive-subsequences", "content_en": "<p>Given an array <code>nums</code>&nbsp;sorted in ascending order, return <code>true</code> if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers&nbsp;and has length at least 3.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> [1,2,3,3,4,5]\n<b>Output:</b> True\n<b>Explanation:</b>\nYou can split them into two consecutive subsequences : \n1, 2, 3\n3, 4, 5\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> [1,2,3,3,4,4,5,5]\n<b>Output:</b> True\n<b>Explanation:</b>\nYou can split them into two consecutive subsequences : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre>\n\n<p><b>Example 3:</b></p>\n\n<pre>\n<b>Input:</b> [1,2,3,4,4,5]\n<b>Output:</b> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Constraints:</b></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>num</code>\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u8bf7\u4f60\u5c06\u5b83\u4eec\u5206\u5272\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u957f\u5ea6\u81f3\u5c11\u4e3a 3 \u7684\u5b50\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b50\u5e8f\u5217\u90fd\u7531\u8fde\u7eed\u6574\u6570\u7ec4\u6210\u3002</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u5b8c\u6210\u4e0a\u8ff0\u5206\u5272\uff0c\u5219\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,3,4,5]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u4f60\u53ef\u4ee5\u5206\u5272\u51fa\u8fd9\u6837\u4e24\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217 : \n1, 2, 3\n3, 4, 5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,3,4,4,5,5]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u4f60\u53ef\u4ee5\u5206\u5272\u51fa\u8fd9\u6837\u4e24\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217 : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4,4,5]\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>\u00a0</p>\n\n<p><b>\u63d0\u793a\uff1a</b></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10000</code></li>\n</ul>\n", "tags_en": ["Heap", "Greedy"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPossible(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPossible(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPossible(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPossible(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isPossible(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPossible(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossible = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPossible(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isPossible(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPossible(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPossible(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_possible(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossible($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPossible(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0660", "frontend_question_id": "0660", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/remove-9", "url_en": "https://leetcode.com/problems/remove-9", "relative_path_cn": "/leetcode/0600-0699/0660.Remove%209/README.md", "relative_path_en": "/leetcode/0600-0699/0660.Remove%209/README_EN.md", "title_cn": "\u79fb\u9664 9", "title_en": "Remove 9", "question_title_slug": "remove-9", "content_en": null, "content_cn": null, "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0661", "frontend_question_id": "0661", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/image-smoother", "url_en": "https://leetcode.com/problems/image-smoother", "relative_path_cn": "/leetcode/0600-0699/0661.Image%20Smoother/README.md", "relative_path_en": "/leetcode/0600-0699/0661.Image%20Smoother/README_EN.md", "title_cn": "\u56fe\u7247\u5e73\u6ed1\u5668", "title_en": "Image Smoother", "question_title_slug": "image-smoother", "content_en": "<p>Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\n<b>Output:</b>\r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n<b>Explanation:</b>\r\nFor the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\r\nFor the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\r\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The value in the given matrix is in the range of [0, 255].</li>\r\n<li>The length and width of the given matrix are in the range of [1, 150].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u5305\u542b\u6574\u6570\u7684\u4e8c\u7ef4\u77e9\u9635 M \u8868\u793a\u4e00\u4e2a\u56fe\u7247\u7684\u7070\u5ea6\u3002\u4f60\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u5e73\u6ed1\u5668\u6765\u8ba9\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u7070\u5ea6\u6210\u4e3a\u5e73\u5747\u7070\u5ea6&nbsp;(\u5411\u4e0b\u820d\u5165) \uff0c\u5e73\u5747\u7070\u5ea6\u7684\u8ba1\u7b97\u662f\u5468\u56f4\u76848\u4e2a\u5355\u5143\u548c\u5b83\u672c\u8eab\u7684\u503c\u6c42\u5e73\u5747\uff0c\u5982\u679c\u5468\u56f4\u7684\u5355\u5143\u683c\u4e0d\u8db3\u516b\u4e2a\uff0c\u5219\u5c3d\u53ef\u80fd\u591a\u7684\u5229\u7528\u5b83\u4eec\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>\u8f93\u51fa:</strong>\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n<strong>\u89e3\u91ca:</strong>\n\u5bf9\u4e8e\u70b9 (0,0), (0,2), (2,0), (2,2): \u5e73\u5747(3/4) = \u5e73\u5747(0.75) = 0\n\u5bf9\u4e8e\u70b9 (0,1), (1,0), (1,2), (2,1): \u5e73\u5747(5/6) = \u5e73\u5747(0.83333333) = 0\n\u5bf9\u4e8e\u70b9 (1,1): \u5e73\u5747(8/9) = \u5e73\u5747(0.88888889) = 0\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u7684\u6574\u6570\u8303\u56f4\u4e3a [0, 255]\u3002</li>\n\t<li>\u77e9\u9635\u7684\u957f\u548c\u5bbd\u7684\u8303\u56f4\u5747\u4e3a&nbsp;[1, 150]\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] imageSmoother(int[][] M) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def imageSmoother(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def imageSmoother(self, M: List[List[int]]) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** imageSmoother(int** M, int MSize, int* MColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] ImageSmoother(int[][] M) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} M\n * @return {number[][]}\n */\nvar imageSmoother = function(M) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} m\n# @return {Integer[][]}\ndef image_smoother(m)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func imageSmoother(_ M: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func imageSmoother(M [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def imageSmoother(M: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun imageSmoother(M: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn image_smoother(m: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $M\n     * @return Integer[][]\n     */\n    function imageSmoother($M) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function imageSmoother(M: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0662", "frontend_question_id": "0662", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-width-of-binary-tree", "url_en": "https://leetcode.com/problems/maximum-width-of-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0662.Maximum%20Width%20of%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0662.Maximum%20Width%20of%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6", "title_en": "Maximum Width of Binary Tree", "question_title_slug": "maximum-width-of-binary-tree", "content_en": "<p>Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.</p>\n\n<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the <code>null</code> nodes between the end-nodes are also counted into the length calculation.</p>\n\n<p>It is <strong>guaranteed</strong> that the answer will in the range of 32-bit signed integer.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<b>Output:</b> 4\n<b>Explanation:</b> The maximum width existing in the third level with the length 4 (5,3,null,9).\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<b>Output:</b> 2\n<b>Explanation:</b> The maximum width existing in the third level with the length 2 (5,3).\n</pre>\n\n<p><b>Example 3:</b></p>\n\n<pre>\n<b>Input:</b> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<b>Output:</b> 2\n<b>Explanation:</b> The maximum width existing in the second level with the length 2 (3,2).\n</pre>\n\n<p><b>Example 4:</b></p>\n\n<pre>\n<b>Input:</b> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<b>Output:</b> 8\n<b>Explanation:</b>The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The&nbsp;given binary tree will have between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>3000</code>&nbsp;nodes.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u8fd9\u4e2a\u6811\u7684\u6700\u5927\u5bbd\u5ea6\u3002\u6811\u7684\u5bbd\u5ea6\u662f\u6240\u6709\u5c42\u4e2d\u7684\u6700\u5927\u5bbd\u5ea6\u3002\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e0e<strong>\u6ee1\u4e8c\u53c9\u6811\uff08full binary tree\uff09</strong>\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u4e00\u4e9b\u8282\u70b9\u4e3a\u7a7a\u3002</p>\n\n<p>\u6bcf\u4e00\u5c42\u7684\u5bbd\u5ea6\u88ab\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u7aef\u70b9\uff08\u8be5\u5c42\u6700\u5de6\u548c\u6700\u53f3\u7684\u975e\u7a7a\u8282\u70b9\uff0c\u4e24\u7aef\u70b9\u95f4\u7684<code>null</code>\u8282\u70b9\u4e5f\u8ba1\u5165\u957f\u5ea6\uff09\u4e4b\u95f4\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 3 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 4 (5,3,null,9)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 3 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 2 (5,3)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 2 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 2 (3,2)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 4 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 8 (6,null,null,null,null,null,null,7)\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u7b54\u6848\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5185\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def widthOfBinaryTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint widthOfBinaryTree(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int WidthOfBinaryTree(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar widthOfBinaryTree = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef width_of_binary_tree(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func widthOfBinaryTree(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc widthOfBinaryTree(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def widthOfBinaryTree(root: TreeNode): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun widthOfBinaryTree(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn width_of_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function widthOfBinaryTree($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction widthOfBinaryTree(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0663", "frontend_question_id": "0663", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/equal-tree-partition", "url_en": "https://leetcode.com/problems/equal-tree-partition", "relative_path_cn": "/leetcode/0600-0699/0663.Equal%20Tree%20Partition/README.md", "relative_path_en": "/leetcode/0600-0699/0663.Equal%20Tree%20Partition/README_EN.md", "title_cn": "\u5747\u5300\u6811\u5212\u5206", "title_en": "Equal Tree Partition", "question_title_slug": "equal-tree-partition", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0664", "frontend_question_id": "0664", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/strange-printer", "url_en": "https://leetcode.com/problems/strange-printer", "relative_path_cn": "/leetcode/0600-0699/0664.Strange%20Printer/README.md", "relative_path_en": "/leetcode/0600-0699/0664.Strange%20Printer/README_EN.md", "title_cn": "\u5947\u602a\u7684\u6253\u5370\u673a", "title_en": "Strange Printer", "question_title_slug": "strange-printer", "content_en": "<p>\r\nThere is a strange printer with the following two special requirements:\r\n\r\n<ol>\r\n<li>The printer can only print a sequence of the same character each time.</li>\r\n<li>At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.</li>\r\n</ol>\r\n\r\n</p>\r\n\r\n<p>\r\nGiven a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aaabbb\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Print \"aaa\" first and then print \"bbb\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Hint</b>: Length of the given string will not exceed 100.</p>", "content_cn": "<p>\u6709\u53f0\u5947\u602a\u7684\u6253\u5370\u673a\u6709\u4ee5\u4e0b\u4e24\u4e2a\u7279\u6b8a\u8981\u6c42\uff1a</p>\n\n<ol>\n\t<li>\u6253\u5370\u673a\u6bcf\u6b21\u53ea\u80fd\u6253\u5370\u540c\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u3002</li>\n\t<li>\u6bcf\u6b21\u53ef\u4ee5\u5728\u4efb\u610f\u8d77\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u6253\u5370\u65b0\u5b57\u7b26\uff0c\u5e76\u4e14\u4f1a\u8986\u76d6\u6389\u539f\u6765\u5df2\u6709\u7684\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u6253\u5370\u673a\u6253\u5370\u5b83\u9700\u8981\u7684\u6700\u5c11\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aaabbb&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u6253\u5370 &quot;aaa&quot; \u7136\u540e\u6253\u5370 &quot;bbb&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u6253\u5370 &quot;aaa&quot; \u7136\u540e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u6253\u5370 &quot;b&quot; \u8986\u76d6\u6389\u539f\u6765\u7684\u5b57\u7b26 &#39;a&#39;\u3002</pre>\n\n<p><strong>\u63d0\u793a</strong>: \u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 100\u3002</p>\n", "tags_en": ["Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int strangePrinter(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int strangePrinter(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def strangePrinter(self, s: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint strangePrinter(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int StrangePrinter(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar strangePrinter = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef strange_printer(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func strangePrinter(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func strangePrinter(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def strangePrinter(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun strangePrinter(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn strange_printer(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function strangePrinter($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function strangePrinter(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0665", "frontend_question_id": "0665", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/non-decreasing-array", "url_en": "https://leetcode.com/problems/non-decreasing-array", "relative_path_cn": "/leetcode/0600-0699/0665.Non-decreasing%20Array/README.md", "relative_path_en": "/leetcode/0600-0699/0665.Non-decreasing%20Array/README_EN.md", "title_cn": "\u975e\u9012\u51cf\u6570\u5217", "title_en": "Non-decreasing Array", "question_title_slug": "non-decreasing-array", "content_en": "<p>Given an array <code>nums</code> with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <b>at most</b> <code>1</code> element.</p>\n\n<p>We define an array is non-decreasing if <code>nums[i] &lt;= nums</code><code>[i + 1]</code> holds for every <code>i</code>&nbsp;(0-based) such that <code>(0&nbsp;&lt;= i &lt;= n - 2)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You could modify the first <code>4</code> to <code>1</code> to get a non-decreasing array.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You can&#39;t get a non-decreasing array by modify at most one element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10 ^ 4</code></li>\n\t<li><code>- 10 ^ 5&nbsp;&lt;= nums[i] &lt;= 10 ^ 5</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a&nbsp;<code>n</code>&nbsp;\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u4f60\u5224\u65ad\u5728 <strong>\u6700\u591a </strong>\u6539\u53d8&nbsp;<code>1</code> \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6570\u7ec4\u80fd\u5426\u53d8\u6210\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u3002</p>\n\n<p>\u6211\u4eec\u662f\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u7684\uff1a&nbsp;\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u6240\u6709\u7684&nbsp;<code>i</code> <code>(0 &lt;= i &lt;= n-2)</code>\uff0c\u603b\u6ee1\u8db3 <code>nums[i] &lt;= nums[i + 1]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [4,2,3]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u901a\u8fc7\u628a\u7b2c\u4e00\u4e2a4\u53d8\u62101\u6765\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [4,2,1]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u4f60\u4e0d\u80fd\u5728\u53ea\u6539\u53d8\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\u5c06\u5176\u53d8\u4e3a\u975e\u9012\u51cf\u6570\u5217\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10 ^ 4</code></li>\n\t<li><code>- 10 ^ 5&nbsp;&lt;= nums[i] &lt;= 10 ^ 5</code></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkPossibility(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkPossibility(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkPossibility(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkPossibility(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckPossibility(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar checkPossibility = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef check_possibility(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkPossibility(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkPossibility(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkPossibility(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkPossibility(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_possibility(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function checkPossibility($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkPossibility(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0666", "frontend_question_id": "0666", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/path-sum-iv", "url_en": "https://leetcode.com/problems/path-sum-iv", "relative_path_cn": "/leetcode/0600-0699/0666.Path%20Sum%20IV/README.md", "relative_path_en": "/leetcode/0600-0699/0666.Path%20Sum%20IV/README_EN.md", "title_cn": "\u8def\u5f84\u548c IV", "title_en": "Path Sum IV", "question_title_slug": "path-sum-iv", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0667", "frontend_question_id": "0667", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/beautiful-arrangement-ii", "url_en": "https://leetcode.com/problems/beautiful-arrangement-ii", "relative_path_cn": "/leetcode/0600-0699/0667.Beautiful%20Arrangement%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0667.Beautiful%20Arrangement%20II/README_EN.md", "title_cn": "\u4f18\u7f8e\u7684\u6392\u5217 II", "title_en": "Beautiful Arrangement II", "question_title_slug": "beautiful-arrangement-ii", "content_en": "<p>\r\nGiven two integers <code>n</code> and <code>k</code>, you need to construct a list which contains <code>n</code> different positive integers ranging from <code>1</code> to <code>n</code> and obeys the following requirement: <br/>\r\n\r\nSuppose this list is [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>], then the list [|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|] has exactly <code>k</code> distinct integers.\r\n</p>\r\n\r\n<p>\r\nIf there are multiple answers, print any of them.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> n = 3, k = 1\r\n<b>Output:</b> [1, 2, 3]\r\n<b>Explanation:</b> The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 3, k = 2\r\n<b>Output:</b> [1, 3, 2]\r\n<b>Explanation:</b> The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The <code>n</code> and <code>k</code> are in the range 1 <= k < n <= 10<sup>4</sup>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5305\u542b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u7684 <code>n</code>&nbsp;\u4e2a\u4e0d\u540c\u6574\u6570\uff0c\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p>\n\n<p>\u2460 \u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u662f [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>] \uff0c\u90a3\u4e48\u6570\u7ec4&nbsp;[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|] \u4e2d\u5e94\u8be5\u6709\u4e14\u4ec5\u6709&nbsp;k \u4e2a\u4e0d\u540c\u6574\u6570\uff1b.</p>\n\n<p>\u2461 \u5982\u679c\u5b58\u5728\u591a\u79cd\u7b54\u6848\uff0c\u4f60\u53ea\u9700\u5b9e\u73b0\u5e76\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u79cd.</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 1\n<strong>\u8f93\u51fa:</strong> [1, 2, 3]\n<strong>\u89e3\u91ca:</strong> [1, 2, 3] \u5305\u542b 3 \u4e2a\u8303\u56f4\u5728 1-3 \u7684\u4e0d\u540c\u6574\u6570\uff0c \u5e76\u4e14 [1, 1] \u4e2d\u6709\u4e14\u4ec5\u6709 1 \u4e2a\u4e0d\u540c\u6574\u6570 : 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 2\n<strong>\u8f93\u51fa:</strong> [1, 3, 2]\n<strong>\u89e3\u91ca:</strong> [1, 3, 2] \u5305\u542b 3 \u4e2a\u8303\u56f4\u5728 1-3 \u7684\u4e0d\u540c\u6574\u6570\uff0c \u5e76\u4e14 [2, 1] \u4e2d\u6709\u4e14\u4ec5\u6709 2 \u4e2a\u4e0d\u540c\u6574\u6570: 1 \u548c 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>&nbsp;\u6ee1\u8db3\u6761\u4ef6&nbsp;1 &lt;= k &lt; n &lt;= 10<sup>4</sup>.</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> constructArray(int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] constructArray(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def constructArray(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def constructArray(self, n: int, k: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* constructArray(int n, int k, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ConstructArray(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[]}\n */\nvar constructArray = function(n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[]}\ndef construct_array(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func constructArray(_ n: Int, _ k: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func constructArray(n int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def constructArray(n: Int, k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun constructArray(n: Int, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn construct_array(n: i32, k: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function constructArray($n, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function constructArray(n: number, k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0668", "frontend_question_id": "0668", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/kth-smallest-number-in-multiplication-table", "url_en": "https://leetcode.com/problems/kth-smallest-number-in-multiplication-table", "relative_path_cn": "/leetcode/0600-0699/0668.Kth%20Smallest%20Number%20in%20Multiplication%20Table/README.md", "relative_path_en": "/leetcode/0600-0699/0668.Kth%20Smallest%20Number%20in%20Multiplication%20Table/README_EN.md", "title_cn": "\u4e58\u6cd5\u8868\u4e2d\u7b2ck\u5c0f\u7684\u6570", "title_en": "Kth Smallest Number in Multiplication Table", "question_title_slug": "kth-smallest-number-in-multiplication-table", "content_en": "<p>\r\nNearly every one have used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table?\r\n</p>\r\n\r\n<p>\r\nGiven the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> m = 3, n = 3, k = 5\r\n<b>Output:</b> \r\n<b>Explanation:</b> \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n3\t6\t9\r\n\r\nThe 5-th smallest number is 3 (1, 2, 2, 3, 3).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> m = 2, n = 3, k = 6\r\n<b>Output:</b> \r\n<b>Explanation:</b> \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n\r\nThe 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The <code>m</code> and <code>n</code> will be in the range [1, 30000].</li>\r\n<li>The <code>k</code> will be in the range [1, m * n]</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u4eba\u90fd\u7528&nbsp;<a href=\"https://baike.baidu.com/item/%E4%B9%98%E6%B3%95%E8%A1%A8\">\u4e58\u6cd5\u8868</a>\u3002\u4f46\u662f\u4f60\u80fd\u5728\u4e58\u6cd5\u8868\u4e2d\u5feb\u901f\u627e\u5230\u7b2c<code>k</code>\u5c0f\u7684\u6570\u5b57\u5417\uff1f</p>\n\n<p>\u7ed9\u5b9a\u9ad8\u5ea6<code>m</code>&nbsp;\u3001\u5bbd\u5ea6<code>n</code> \u7684\u4e00\u5f20&nbsp;<code>m * n</code>\u7684\u4e58\u6cd5\u8868\uff0c\u4ee5\u53ca\u6b63\u6574\u6570<code>k</code>\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u8868\u4e2d\u7b2c<code>k</code>&nbsp;\u5c0f\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> m = 3, n = 3, k = 5\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u4e58\u6cd5\u8868:\n1\t2\t3\n2\t4\t6\n3\t6\t9\n\n\u7b2c5\u5c0f\u7684\u6570\u5b57\u662f 3 (1, 2, 2, 3, 3).\n</pre>\n\n<p><strong>\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> m = 2, n = 3, k = 6\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n\u4e58\u6cd5\u8868:\n1\t2\t3\n2\t4\t6\n\n\u7b2c6\u5c0f\u7684\u6570\u5b57\u662f 6 (1, 2, 2, 3, 4, 6).\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>m</code> \u548c&nbsp;<code>n</code>&nbsp;\u7684\u8303\u56f4\u5728 [1, 30000] \u4e4b\u95f4\u3002</li>\n\t<li><code>k</code> \u7684\u8303\u56f4\u5728 [1, m * n] \u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findKthNumber(int m, int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findKthNumber(int m, int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findKthNumber(int m, int n, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindKthNumber(int m, int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findKthNumber = function(m, n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_number(m, n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findKthNumber(_ m: Int, _ n: Int, _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findKthNumber(m int, n int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findKthNumber(m: Int, n: Int, k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findKthNumber(m: Int, n: Int, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_kth_number(m: i32, n: i32, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthNumber($m, $n, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findKthNumber(m: number, n: number, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0669", "frontend_question_id": "0669", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/trim-a-binary-search-tree", "url_en": "https://leetcode.com/problems/trim-a-binary-search-tree", "relative_path_cn": "/leetcode/0600-0699/0669.Trim%20a%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0669.Trim%20a%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811", "title_en": "Trim a Binary Search Tree", "question_title_slug": "trim-a-binary-search-tree", "content_en": "<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node&#39;s descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p>\n\n<p>Return <em>the root of the trimmed binary search tree</em>. Note that the root may change depending on the given bounds.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\" style=\"width: 450px; height: 126px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,2], low = 1, high = 2\n<strong>Output:</strong> [1,null,2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\" style=\"width: 450px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n<strong>Output:</strong> [3,2,null,1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1], low = 1, high = 2\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2], low = 1, high = 3\n<strong>Output:</strong> [1,null,2]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2], low = 2, high = 4\n<strong>Output:</strong> [2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The value of each node in the tree is <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n\t<li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u540c\u65f6\u7ed9\u5b9a\u6700\u5c0f\u8fb9\u754c<code>low</code> \u548c\u6700\u5927\u8fb9\u754c <code>high</code>\u3002\u901a\u8fc7\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u503c\u5728<code>[low, high]</code>\u4e2d\u3002\u4fee\u526a\u6811\u4e0d\u5e94\u8be5\u6539\u53d8\u4fdd\u7559\u5728\u6811\u4e2d\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u7ed3\u6784\uff08\u5373\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u79fb\u9664\uff0c\u539f\u6709\u7684\u7236\u4ee3\u5b50\u4ee3\u5173\u7cfb\u90fd\u5e94\u5f53\u4fdd\u7559\uff09\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5b58\u5728\u552f\u4e00\u7684\u7b54\u6848\u3002</p>\n\n<p>\u6240\u4ee5\u7ed3\u679c\u5e94\u5f53\u8fd4\u56de\u4fee\u526a\u597d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b0\u7684\u6839\u8282\u70b9\u3002\u6ce8\u610f\uff0c\u6839\u8282\u70b9\u53ef\u80fd\u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u8fb9\u754c\u53d1\u751f\u6539\u53d8\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\" style=\"width: 450px; height: 126px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,0,2], low = 1, high = 2\n<strong>\u8f93\u51fa\uff1a</strong>[1,null,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\" style=\"width: 450px; height: 277px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n<strong>\u8f93\u51fa\uff1a</strong>[3,2,null,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1], low = 1, high = 2\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2], low = 1, high = 3\n<strong>\u8f93\u51fa\uff1a</strong>[1,null,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2], low = 2, high = 4\n<strong>\u8f93\u51fa\uff1a</strong>[2]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u5728\u8303\u56f4 <code>[1, 10<sup>4</sup>]</code> \u5185</li>\n\t<li><code>0 <= Node.val <= 10<sup>4</sup></code></li>\n\t<li>\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684</li>\n\t<li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8f93\u5165\u662f\u4e00\u68f5\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811</li>\n\t<li><code>0 <= low <= high <= 10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def trimBST(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def trimBST(self, root: TreeNode, low: int, high: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* trimBST(struct TreeNode* root, int low, int high){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode TrimBST(TreeNode root, int low, int high) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {TreeNode}\n */\nvar trimBST = function(root, low, high) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} low\n# @param {Integer} high\n# @return {TreeNode}\ndef trim_bst(root, low, high)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func trimBST(_ root: TreeNode?, _ low: Int, _ high: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc trimBST(root *TreeNode, low int, high int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def trimBST(root: TreeNode, low: Int, high: Int): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun trimBST(root: TreeNode?, low: Int, high: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn trim_bst(root: Option<Rc<RefCell<TreeNode>>>, low: i32, high: i32) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $low\n     * @param Integer $high\n     * @return TreeNode\n     */\n    function trimBST($root, $low, $high) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction trimBST(root: TreeNode | null, low: number, high: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0670", "frontend_question_id": "0670", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-swap", "url_en": "https://leetcode.com/problems/maximum-swap", "relative_path_cn": "/leetcode/0600-0699/0670.Maximum%20Swap/README.md", "relative_path_en": "/leetcode/0600-0699/0670.Maximum%20Swap/README_EN.md", "title_cn": "\u6700\u5927\u4ea4\u6362", "title_en": "Maximum Swap", "question_title_slug": "maximum-swap", "content_en": "<p>\r\nGiven a non-negative integer, you could swap two digits <b>at most</b> once to get the maximum valued number. Return the maximum valued number you could get.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 2736\r\n<b>Output:</b> 7236\r\n<b>Explanation:</b> Swap the number 2 and the number 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> 9973\r\n<b>Output:</b> 9973\r\n<b>Explanation:</b> No swap.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given number is in the range [0, 10<sup>8</sup>]</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4f60<strong>\u81f3\u591a</strong>\u53ef\u4ee5\u4ea4\u6362\u4e00\u6b21\u6570\u5b57\u4e2d\u7684\u4efb\u610f\u4e24\u4f4d\u3002\u8fd4\u56de\u4f60\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 2736\n<strong>\u8f93\u51fa:</strong> 7236\n<strong>\u89e3\u91ca:</strong> \u4ea4\u6362\u6570\u5b572\u548c\u6570\u5b577\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 9973\n<strong>\u8f93\u51fa:</strong> 9973\n<strong>\u89e3\u91ca:</strong> \u4e0d\u9700\u8981\u4ea4\u6362\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u5b57\u7684\u8303\u56f4\u662f&nbsp;[0, 10<sup>8</sup>]</li>\n</ol>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximumSwap(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximumSwap(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximumSwap(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maximumSwap(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximumSwap(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar maximumSwap = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef maximum_swap(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximumSwap(_ num: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maximumSwap(num int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximumSwap(num: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximumSwap(num: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximum_swap(num: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function maximumSwap($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximumSwap(num: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0671", "frontend_question_id": "0671", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree", "url_en": "https://leetcode.com/problems/second-minimum-node-in-a-binary-tree", "relative_path_cn": "/leetcode/0600-0699/0671.Second%20Minimum%20Node%20In%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0600-0699/0671.Second%20Minimum%20Node%20In%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u4e2d\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9", "title_en": "Second Minimum Node In a Binary Tree", "question_title_slug": "second-minimum-node-in-a-binary-tree", "content_en": "<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node&#39;s value is the smaller value among its two sub-nodes. More formally, the property&nbsp;<code>root.val = min(root.left.val, root.right.val)</code>&nbsp;always holds.</p>\n\n<p>Given such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes&#39; value in the whole tree.</p>\n\n<p>If no such second minimum value exists, output -1 instead.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" style=\"width: 431px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,5,null,null,5,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The smallest value is 2, the second smallest value is 5.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" style=\"width: 321px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The smallest value is 2, but there isn&#39;t any second smallest value.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>root.val == min(root.left.val, root.right.val)</code>&nbsp;for each internal node of the tree.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u6b63\u6570\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u53ea\u80fd\u4e3a\u00a0<code>2</code>\u00a0\u6216\u00a0<code>0</code>\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u503c\u7b49\u4e8e\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u3002</p>\n\n<p>\u66f4\u6b63\u5f0f\u5730\u8bf4\uff0c<code>root.val = min(root.left.val, root.right.val)</code> \u603b\u6210\u7acb\u3002</p>\n\n<p>\u7ed9\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6240\u6709\u8282\u70b9\u4e2d\u7684<strong>\u7b2c\u4e8c\u5c0f\u7684\u503c\u3002</strong>\u5982\u679c\u7b2c\u4e8c\u5c0f\u7684\u503c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u8f93\u51fa -1 <strong>\u3002</strong></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" style=\"width: 431px; height: 302px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [2,2,5,null,null,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u7684\u503c\u662f 2 \uff0c\u7b2c\u4e8c\u5c0f\u7684\u503c\u662f 5 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" style=\"width: 321px; height: 182px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u7684\u503c\u662f 2, \u4f46\u662f\u4e0d\u5b58\u5728\u7b2c\u4e8c\u5c0f\u7684\u503c\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[1, 25]</code> \u5185</li>\n\t<li><code>1 <= Node.val <= 2<sup>31</sup> - 1</code></li>\n\t<li>\u5bf9\u4e8e\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9 <code>root.val == min(root.left.val, root.right.val)</code></li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findSecondMinimumValue(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int findSecondMinimumValue(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findSecondMinimumValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findSecondMinimumValue(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint findSecondMinimumValue(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int FindSecondMinimumValue(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findSecondMinimumValue = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef find_second_minimum_value(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findSecondMinimumValue(_ root: TreeNode?) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findSecondMinimumValue(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findSecondMinimumValue(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findSecondMinimumValue(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_second_minimum_value(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function findSecondMinimumValue($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findSecondMinimumValue(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0672", "frontend_question_id": "0672", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bulb-switcher-ii", "url_en": "https://leetcode.com/problems/bulb-switcher-ii", "relative_path_cn": "/leetcode/0600-0699/0672.Bulb%20Switcher%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0672.Bulb%20Switcher%20II/README_EN.md", "title_cn": "\u706f\u6ce1\u5f00\u5173 \u2161", "title_en": "Bulb Switcher II", "question_title_slug": "bulb-switcher-ii", "content_en": "<p>There is a room with <code>n</code> lights which are turned on initially and 4 buttons on the wall. After performing exactly <code>m</code> unknown operations towards buttons, you need to return how many different kinds of status of the <code>n</code> lights could be.</p>\r\n\r\n<p>Suppose <code>n</code> lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:</p>\r\n\r\n<ol>\r\n\t<li>Flip all the lights.</li>\r\n\t<li>Flip lights with even numbers.</li>\r\n\t<li>Flip lights with odd numbers.</li>\r\n\t<li>Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 1, m = 1.\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Status can be: [on], [off]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 2, m = 1.\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> Status can be: [on, off], [off, on], [off, off]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, m = 1.\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> <code>n</code> and <code>m</code> both fit in range [0, 1000].</p>\r\n", "content_cn": "<p>\u73b0\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u5899\u4e0a\u6302\u6709&nbsp;<code>n</code>&nbsp;\u53ea\u5df2\u7ecf\u6253\u5f00\u7684\u706f\u6ce1\u548c 4 \u4e2a\u6309\u94ae\u3002\u5728\u8fdb\u884c\u4e86&nbsp;<code>m</code>&nbsp;\u6b21\u672a\u77e5\u64cd\u4f5c\u540e\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u8fd9&nbsp;<code>n</code>&nbsp;\u53ea\u706f\u6ce1\u53ef\u80fd\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u3002</p>\n\n<p>\u5047\u8bbe\u8fd9 <code>n</code> \u53ea\u706f\u6ce1\u88ab\u7f16\u53f7\u4e3a [1, 2, 3 ..., n]\uff0c\u8fd9 4 \u4e2a\u6309\u94ae\u7684\u529f\u80fd\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u5c06\u6240\u6709\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c\uff08\u5373\u5f00\u53d8\u4e3a\u5173\uff0c\u5173\u53d8\u4e3a\u5f00\uff09</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a\u5076\u6570\u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a <code>3k+1</code> \u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c\uff08k = 0, 1, 2, ...)</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 1, m = 1.\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5f00], [\u5173]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 2, m = 1.\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5f00, \u5173], [\u5173, \u5f00], [\u5173, \u5173]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 3, m = 1.\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5173, \u5f00, \u5173], [\u5f00, \u5173, \u5f00], [\u5173, \u5173, \u5173], [\u5173, \u5f00, \u5f00].\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>m</code> \u90fd\u5c5e\u4e8e [0, 1000].</p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int flipLights(int n, int m) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int flipLights(int n, int m) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def flipLights(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def flipLights(self, n: int, m: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint flipLights(int n, int m){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FlipLights(int n, int m) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flipLights = function(n, m) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flip_lights(n, m)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func flipLights(_ n: Int, _ m: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func flipLights(n int, m int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def flipLights(n: Int, m: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun flipLights(n: Int, m: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn flip_lights(n: i32, m: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function flipLights($n, $m) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function flipLights(n: number, m: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0673", "frontend_question_id": "0673", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence", "url_en": "https://leetcode.com/problems/number-of-longest-increasing-subsequence", "relative_path_cn": "/leetcode/0600-0699/0673.Number%20of%20Longest%20Increasing%20Subsequence/README.md", "relative_path_en": "/leetcode/0600-0699/0673.Number%20of%20Longest%20Increasing%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u4e2a\u6570", "title_en": "Number of Longest Increasing Subsequence", "question_title_slug": "number-of-longest-increasing-subsequence", "content_en": "<p>Given an integer array&nbsp;<code>nums</code>, return <em>the number of longest increasing subsequences.</em></p>\n\n<p><strong>Notice</strong> that the sequence has to be <strong>strictly</strong> increasing.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,4,7]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The length of longest continuous increasing subsequence is 1, and there are 5 subsequences&#39; length is 1, so output 5.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,3,5,4,7]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6709\u4e24\u4e2a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u5206\u522b\u662f [1, 3, 4, 7] \u548c[1, 3, 5, 7]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,2,2,2,2]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u662f1\uff0c\u5e76\u4e14\u5b58\u57285\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a1\uff0c\u56e0\u6b64\u8f93\u51fa5\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u4e0d\u8d85\u8fc7 2000 \u5e76\u4e14\u7ed3\u679c\u4e00\u5b9a\u662f32\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findNumberOfLIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findNumberOfLIS(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindNumberOfLIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumberOfLIS = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_number_of_lis(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findNumberOfLIS(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findNumberOfLIS(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findNumberOfLIS(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findNumberOfLIS(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_number_of_lis(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findNumberOfLIS($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findNumberOfLIS(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0674", "frontend_question_id": "0674", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence", "url_en": "https://leetcode.com/problems/longest-continuous-increasing-subsequence", "relative_path_cn": "/leetcode/0600-0699/0674.Longest%20Continuous%20Increasing%20Subsequence/README.md", "relative_path_en": "/leetcode/0600-0699/0674.Longest%20Continuous%20Increasing%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217", "title_en": "Longest Continuous Increasing Subsequence", "question_title_slug": "longest-continuous-increasing-subsequence", "content_en": "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest <strong>continuous increasing subsequence</strong> (i.e. subarray)</em>. The subsequence must be <strong>strictly</strong> increasing.</p>\n\n<p>A <strong>continuous increasing subsequence</strong> is defined by two indices <code>l</code> and <code>r</code> (<code>l &lt; r</code>) such that it is <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> and for each <code>l &lt;= i &lt; r</code>, <code>nums[i] &lt; nums[i + 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,4,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u7ecf\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u4e14<strong> \u8fde\u7eed\u9012\u589e\u7684\u5b50\u5e8f\u5217</strong>\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u8fde\u7eed\u9012\u589e\u7684\u5b50\u5e8f\u5217</strong> \u53ef\u4ee5\u7531\u4e24\u4e2a\u4e0b\u6807 <code>l</code> \u548c <code>r</code>\uff08<code>l < r</code>\uff09\u786e\u5b9a\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a <code>l <= i < r</code>\uff0c\u90fd\u6709 <code>nums[i] < nums[i + 1]</code> \uff0c\u90a3\u4e48\u5b50\u5e8f\u5217 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> \u5c31\u662f\u8fde\u7eed\u9012\u589e\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,3,5,4,7]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217\u662f [1,3,5], \u957f\u5ea6\u4e3a3\u3002\n\u5c3d\u7ba1 [1,3,5,7] \u4e5f\u662f\u5347\u5e8f\u7684\u5b50\u5e8f\u5217, \u4f46\u5b83\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u4e3a 5 \u548c 7 \u5728\u539f\u6570\u7ec4\u91cc\u88ab 4 \u9694\u5f00\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [2,2,2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217\u662f [2], \u957f\u5ea6\u4e3a1\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLengthOfLCIS(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLengthOfLCIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLengthOfLCIS(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLengthOfLCIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_length_of_lcis(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLengthOfLCIS(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLengthOfLCIS(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLengthOfLCIS(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLengthOfLCIS(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_length_of_lcis(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findLengthOfLCIS($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLengthOfLCIS(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0675", "frontend_question_id": "0675", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cut-off-trees-for-golf-event", "url_en": "https://leetcode.com/problems/cut-off-trees-for-golf-event", "relative_path_cn": "/leetcode/0600-0699/0675.Cut%20Off%20Trees%20for%20Golf%20Event/README.md", "relative_path_en": "/leetcode/0600-0699/0675.Cut%20Off%20Trees%20for%20Golf%20Event/README_EN.md", "title_cn": "\u4e3a\u9ad8\u5c14\u592b\u6bd4\u8d5b\u780d\u6811", "title_en": "Cut Off Trees for Golf Event", "question_title_slug": "cut-off-trees-for-golf-event", "content_en": "<p>You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an <code>m x n</code> matrix. In this matrix:</p>\n\n<ul>\n\t<li><code>0</code> means the cell cannot be walked through.</li>\n\t<li><code>1</code> represents an empty cell that can be walked through.</li>\n\t<li>A number greater than <code>1</code> represents a tree in a cell that can be walked through, and this number is the tree&#39;s height.</li>\n</ul>\n\n<p>In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.</p>\n\n<p>You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes <code>1</code> (an empty cell).</p>\n\n<p>Starting from the point <code>(0, 0)</code>, return <em>the minimum steps you need to walk to cut off all the trees</em>. If you cannot cut off all the trees, return <code>-1</code>.</p>\n\n<p>You are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,4],[7,6,5]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,0],[7,6,5]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The trees in the bottom row cannot be accessed as the middle row is blocked.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> forest = [[2,3,4],[0,0,5],[8,7,6]]\n<strong>Output:</strong> 6\n<b>Explanation:</b> You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == forest.length</code></li>\n\t<li><code>n == forest[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u88ab\u8bf7\u6765\u7ed9\u4e00\u4e2a\u8981\u4e3e\u529e\u9ad8\u5c14\u592b\u6bd4\u8d5b\u7684\u6811\u6797\u780d\u6811\u3002\u6811\u6797\u7531\u4e00\u4e2a\u00a0<code>m x n</code> \u7684\u77e9\u9635\u8868\u793a\uff0c \u5728\u8fd9\u4e2a\u77e9\u9635\u4e2d\uff1a</p>\n\n<ul>\n\t<li><code>0</code> \u8868\u793a\u969c\u788d\uff0c\u65e0\u6cd5\u89e6\u78b0</li>\n\t<li><code>1</code>\u00a0\u8868\u793a\u5730\u9762\uff0c\u53ef\u4ee5\u884c\u8d70</li>\n\t<li><code>\u6bd4 1 \u5927\u7684\u6570</code>\u00a0\u8868\u793a\u6709\u6811\u7684\u5355\u5143\u683c\uff0c\u53ef\u4ee5\u884c\u8d70\uff0c\u6570\u503c\u8868\u793a\u6811\u7684\u9ad8\u5ea6</li>\n</ul>\n\n<p>\u6bcf\u4e00\u6b65\uff0c\u4f60\u90fd\u53ef\u4ee5\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u4e4b\u4e00\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u5982\u679c\u4f60\u7ad9\u7684\u5730\u65b9\u6709\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u8981\u780d\u5012\u5b83\u3002</p>\n\n<p>\u4f60\u9700\u8981\u6309\u7167\u6811\u7684\u9ad8\u5ea6\u4ece\u4f4e\u5411\u9ad8\u780d\u6389\u6240\u6709\u7684\u6811\uff0c\u6bcf\u780d\u8fc7\u4e00\u9897\u6811\uff0c\u8be5\u5355\u5143\u683c\u7684\u503c\u53d8\u4e3a <code>1</code>\uff08\u5373\u53d8\u4e3a\u5730\u9762\uff09\u3002</p>\n\n<p>\u4f60\u5c06\u4ece <code>(0, 0)</code> \u70b9\u5f00\u59cb\u5de5\u4f5c\uff0c\u8fd4\u56de\u4f60\u780d\u5b8c\u6240\u6709\u6811\u9700\u8981\u8d70\u7684\u6700\u5c0f\u6b65\u6570\u3002 \u5982\u679c\u4f60\u65e0\u6cd5\u780d\u5b8c\u6240\u6709\u7684\u6811\uff0c\u8fd4\u56de <code>-1</code> \u3002</p>\n\n<p>\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u6ca1\u6709\u4e24\u68f5\u6811\u7684\u9ad8\u5ea6\u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14\u4f60\u81f3\u5c11\u9700\u8981\u780d\u5012\u4e00\u68f5\u6811\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>forest = [[1,2,3],[0,0,4],[7,6,5]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6cbf\u7740\u4e0a\u9762\u7684\u8def\u5f84\uff0c\u4f60\u53ef\u4ee5\u7528 6 \u6b65\uff0c\u6309\u4ece\u6700\u77ee\u5230\u6700\u9ad8\u7684\u987a\u5e8f\u780d\u6389\u8fd9\u4e9b\u6811\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>forest = [[1,2,3],[0,0,0],[7,6,5]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u7531\u4e8e\u4e2d\u95f4\u4e00\u884c\u88ab\u969c\u788d\u963b\u585e\uff0c\u65e0\u6cd5\u8bbf\u95ee\u6700\u4e0b\u9762\u4e00\u884c\u4e2d\u7684\u6811\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>forest = [[2,3,4],[0,0,5],[8,7,6]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u4ee5\u6309\u4e0e\u793a\u4f8b 1 \u76f8\u540c\u7684\u8def\u5f84\u6765\u780d\u6389\u6240\u6709\u7684\u6811\u3002\n(0,0) \u4f4d\u7f6e\u7684\u6811\uff0c\u53ef\u4ee5\u76f4\u63a5\u780d\u53bb\uff0c\u4e0d\u7528\u7b97\u6b65\u6570\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == forest.length</code></li>\n\t<li><code>n == forest[i].length</code></li>\n\t<li><code>1 <= m, n <= 50</code></li>\n\t<li><code>0 <= forest[i][j] <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int cutOffTree(vector<vector<int>>& forest) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int cutOffTree(List<List<Integer>> forest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint cutOffTree(int** forest, int forestSize, int* forestColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CutOffTree(IList<IList<int>> forest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} forest\n * @return {number}\n */\nvar cutOffTree = function(forest) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} forest\n# @return {Integer}\ndef cut_off_tree(forest)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func cutOffTree(_ forest: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func cutOffTree(forest [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def cutOffTree(forest: List[List[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun cutOffTree(forest: List<List<Int>>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn cut_off_tree(forest: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $forest\n     * @return Integer\n     */\n    function cutOffTree($forest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function cutOffTree(forest: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0676", "frontend_question_id": "0676", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/implement-magic-dictionary", "url_en": "https://leetcode.com/problems/implement-magic-dictionary", "relative_path_cn": "/leetcode/0600-0699/0676.Implement%20Magic%20Dictionary/README.md", "relative_path_en": "/leetcode/0600-0699/0676.Implement%20Magic%20Dictionary/README_EN.md", "title_cn": "\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178", "title_en": "Implement Magic Dictionary", "question_title_slug": "implement-magic-dictionary", "content_en": "<p>Design a data structure that is initialized with a list of <strong>different</strong> words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.</p>\n\n<p>Implement the&nbsp;<code>MagicDictionary</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>MagicDictionary()</code>&nbsp;Initializes the object.</li>\n\t<li><code>void buildDict(String[]&nbsp;dictionary)</code>&nbsp;Sets the data structure&nbsp;with an array of distinct strings <code>dictionary</code>.</li>\n\t<li><code>bool search(String searchWord)</code> Returns <code>true</code> if you can change <strong>exactly one character</strong> in <code>searchWord</code> to match any string in the data structure, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MagicDictionary&quot;, &quot;buildDict&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;]\n[[], [[&quot;hello&quot;, &quot;leetcode&quot;]], [&quot;hello&quot;], [&quot;hhllo&quot;], [&quot;hell&quot;], [&quot;leetcoded&quot;]]\n<strong>Output</strong>\n[null, null, false, true, false, false]\n\n<strong>Explanation</strong>\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([&quot;hello&quot;, &quot;leetcode&quot;]);\nmagicDictionary.search(&quot;hello&quot;); // return False\nmagicDictionary.search(&quot;hhllo&quot;); // We can change the second &#39;h&#39; to &#39;e&#39; to match &quot;hello&quot; so we return True\nmagicDictionary.search(&quot;hell&quot;); // return False\nmagicDictionary.search(&quot;leetcoded&quot;); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;dictionary.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code> consists of only lower-case English letters.</li>\n\t<li>All the strings in&nbsp;<code>dictionary</code>&nbsp;are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;=&nbsp;searchWord.length &lt;= 100</code></li>\n\t<li><code>searchWord</code>&nbsp;consists of only lower-case English letters.</li>\n\t<li><code>buildDict</code>&nbsp;will be called only once before <code>search</code>.</li>\n\t<li>At most <code>100</code> calls will be made to <code>search</code>.</li>\n</ul>\n", "content_cn": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u4f7f\u7528\u5355\u8bcd\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5355\u8bcd <strong>\u4e92\u4e0d\u76f8\u540c</strong> \u3002 \u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u8fd9\u4e2a\u5355\u8bcd\u4e2d<strong>\u4e00\u4e2a</strong>\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5355\u8bcd\u5b58\u5728\u4e8e\u4f60\u6784\u5efa\u7684\u5b57\u5178\u4e2d\u3002</p>\n\n<p>\u5b9e\u73b0 <code>MagicDictionary</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>MagicDictionary()</code> \u521d\u59cb\u5316\u5bf9\u8c61</li>\n\t<li><code>void buildDict(String[]\u00a0dictionary)</code> \u4f7f\u7528\u5b57\u7b26\u4e32\u6570\u7ec4\u00a0<code>dictionary</code> \u8bbe\u5b9a\u8be5\u6570\u636e\u7ed3\u6784\uff0c<code>dictionary</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u4e92\u4e0d\u76f8\u540c</li>\n\t<li><code>bool search(String searchWord)</code> \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>searchWord</code> \uff0c\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u5b57\u7b26\u4e32\u4e2d<strong> \u4e00\u4e2a </strong>\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u80fd\u591f\u4e0e\u5b57\u5178\u4e2d\u7684\u4efb\u4e00\u5b57\u7b26\u4e32\u5339\u914d\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<div class=\"top-view__1vxA\">\n<div class=\"original__bRMd\">\n<div>\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\n<strong>\u8f93\u51fa</strong>\n[null, null, false, true, false, false]\n\n<strong>\u89e3\u91ca</strong>\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // \u8fd4\u56de False\nmagicDictionary.search(\"hhllo\"); // \u5c06\u7b2c\u4e8c\u4e2a 'h' \u66ff\u6362\u4e3a 'e' \u53ef\u4ee5\u5339\u914d \"hello\" \uff0c\u6240\u4ee5\u8fd4\u56de True\nmagicDictionary.search(\"hell\"); // \u8fd4\u56de False\nmagicDictionary.search(\"leetcoded\"); // \u8fd4\u56de False\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <=\u00a0dictionary.length <= 100</code></li>\n\t<li><code>1 <=\u00a0dictionary[i].length <= 100</code></li>\n\t<li><code>dictionary[i]</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>dictionary</code> \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 <strong>\u4e92\u4e0d\u76f8\u540c</strong></li>\n\t<li><code>1 <=\u00a0searchWord.length <= 100</code></li>\n\t<li><code>searchWord</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>buildDict</code> \u4ec5\u5728 <code>search</code> \u4e4b\u524d\u8c03\u7528\u4e00\u6b21</li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>100</code> \u6b21 <code>search</code></li>\n</ul>\n</div>\n</div>\n</div>\n", "tags_en": ["Trie", "Hash Table"], "tags_cn": ["\u5b57\u5178\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MagicDictionary {\npublic:\n    /** Initialize your data structure here. */\n    MagicDictionary() {\n\n    }\n    \n    void buildDict(vector<string> dictionary) {\n\n    }\n    \n    bool search(string searchWord) {\n\n    }\n};\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary* obj = new MagicDictionary();\n * obj->buildDict(dictionary);\n * bool param_2 = obj->search(searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MagicDictionary {\n\n    /** Initialize your data structure here. */\n    public MagicDictionary() {\n\n    }\n    \n    public void buildDict(String[] dictionary) {\n\n    }\n    \n    public boolean search(String searchWord) {\n\n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.buildDict(dictionary);\n * boolean param_2 = obj.search(searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MagicDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def buildDict(self, dictionary):\n        \"\"\"\n        :type dictionary: List[str]\n        :rtype: None\n        \"\"\"\n\n\n    def search(self, searchWord):\n        \"\"\"\n        :type searchWord: str\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MagicDictionary:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def buildDict(self, dictionary: List[str]) -> None:\n\n\n    def search(self, searchWord: str) -> bool:\n\n\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MagicDictionary;\n\n/** Initialize your data structure here. */\n\nMagicDictionary* magicDictionaryCreate() {\n    \n}\n\nvoid magicDictionaryBuildDict(MagicDictionary* obj, char ** dictionary, int dictionarySize) {\n  \n}\n\nbool magicDictionarySearch(MagicDictionary* obj, char * searchWord) {\n  \n}\n\nvoid magicDictionaryFree(MagicDictionary* obj) {\n    \n}\n\n/**\n * Your MagicDictionary struct will be instantiated and called as such:\n * MagicDictionary* obj = magicDictionaryCreate();\n * magicDictionaryBuildDict(obj, dictionary, dictionarySize);\n \n * bool param_2 = magicDictionarySearch(obj, searchWord);\n \n * magicDictionaryFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MagicDictionary {\n\n    /** Initialize your data structure here. */\n    public MagicDictionary() {\n\n    }\n    \n    public void BuildDict(string[] dictionary) {\n\n    }\n    \n    public bool Search(string searchWord) {\n\n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.BuildDict(dictionary);\n * bool param_2 = obj.Search(searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MagicDictionary = function() {\n\n};\n\n/** \n * @param {string[]} dictionary\n * @return {void}\n */\nMagicDictionary.prototype.buildDict = function(dictionary) {\n\n};\n\n/** \n * @param {string} searchWord\n * @return {boolean}\n */\nMagicDictionary.prototype.search = function(searchWord) {\n\n};\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MagicDictionary\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type dictionary: String[]\n    :rtype: Void\n=end\n    def build_dict(dictionary)\n\n    end\n\n\n=begin\n    :type search_word: String\n    :rtype: Boolean\n=end\n    def search(search_word)\n\n    end\n\n\nend\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary.new()\n# obj.build_dict(dictionary)\n# param_2 = obj.search(search_word)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MagicDictionary {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func buildDict(_ dictionary: [String]) {\n        \n    }\n    \n    func search(_ searchWord: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * let obj = MagicDictionary()\n * obj.buildDict(dictionary)\n * let ret_2: Bool = obj.search(searchWord)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MagicDictionary struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MagicDictionary {\n\n}\n\n\nfunc (this *MagicDictionary) BuildDict(dictionary []string)  {\n\n}\n\n\nfunc (this *MagicDictionary) Search(searchWord string) bool {\n\n}\n\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * obj := Constructor();\n * obj.BuildDict(dictionary);\n * param_2 := obj.Search(searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MagicDictionary() {\n\n    /** Initialize your data structure here. */\n\n\n    def buildDict(dictionary: Array[String]) {\n\n    }\n\n    def search(searchWord: String): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MagicDictionary() {\n\n    /** Initialize your data structure here. */\n\n\n    fun buildDict(dictionary: Array<String>) {\n\n    }\n\n    fun search(searchWord: String): Boolean {\n\n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MagicDictionary {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MagicDictionary {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    fn build_dict(&self, dictionary: Vec<String>) {\n\n    }\n    \n    fn search(&self, search_word: String) -> bool {\n\n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * let obj = MagicDictionary::new();\n * obj.build_dict(dictionary);\n * let ret_2: bool = obj.search(searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MagicDictionary {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param String[] $dictionary\n     * @return NULL\n     */\n    function buildDict($dictionary) {\n\n    }\n\n    /**\n     * @param String $searchWord\n     * @return Boolean\n     */\n    function search($searchWord) {\n\n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * $obj = MagicDictionary();\n * $obj->buildDict($dictionary);\n * $ret_2 = $obj->search($searchWord);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MagicDictionary {\n    constructor() {\n\n    }\n\n    buildDict(dictionary: string[]): void {\n\n    }\n\n    search(searchWord: string): boolean {\n\n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0677", "frontend_question_id": "0677", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/map-sum-pairs", "url_en": "https://leetcode.com/problems/map-sum-pairs", "relative_path_cn": "/leetcode/0600-0699/0677.Map%20Sum%20Pairs/README.md", "relative_path_en": "/leetcode/0600-0699/0677.Map%20Sum%20Pairs/README_EN.md", "title_cn": "\u952e\u503c\u6620\u5c04", "title_en": "Map Sum Pairs", "question_title_slug": "map-sum-pairs", "content_en": "<p>Implement the <code>MapSum</code> class:</p>\n\n<ul>\n\t<li><code>MapSum()</code> Initializes the&nbsp;<code>MapSum</code> object.</li>\n\t<li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li>\n\t<li><code>int sum(string prefix)</code> Returns&nbsp;the sum of all the pairs&#39; value whose <code>key</code> starts with the <code>prefix</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MapSum&quot;, &quot;insert&quot;, &quot;sum&quot;, &quot;insert&quot;, &quot;sum&quot;]\n[[], [&quot;apple&quot;, 3], [&quot;ap&quot;], [&quot;app&quot;, 2], [&quot;ap&quot;]]\n<strong>Output</strong>\n[null, null, 3, null, 5]\n\n<strong>Explanation</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(&quot;apple&quot;, 3);  \nmapSum.sum(&quot;ap&quot;);           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(&quot;app&quot;, 2);    \nmapSum.sum(&quot;ap&quot;);           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li>\n\t<li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li>\n\t<li><code>1 &lt;= val &lt;= 1000</code></li>\n\t<li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li>\n</ul>\n", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MapSum</code> \u7c7b\uff0c\u652f\u6301\u4e24\u4e2a\u65b9\u6cd5\uff0c<code>insert</code>\u00a0\u548c\u00a0<code>sum</code>\uff1a</p>\n\n<ul>\n\t<li><code>MapSum()</code> \u521d\u59cb\u5316 <code>MapSum</code> \u5bf9\u8c61</li>\n\t<li><code>void insert(String key, int val)</code> \u63d2\u5165 <code>key-val</code> \u952e\u503c\u5bf9\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u952e <code>key</code> \uff0c\u6574\u6570\u8868\u793a\u503c <code>val</code> \u3002\u5982\u679c\u952e <code>key</code> \u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002</li>\n\t<li><code>int sum(string prefix)</code> \u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00 <code>prefix</code> \u5f00\u5934\u7684\u952e <code>key</code> \u7684\u503c\u7684\u603b\u548c\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null, null, 3, null, 5]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= key.length, prefix.length <= 50</code></li>\n\t<li><code>key</code> \u548c <code>prefix</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>1 <= val <= 1000</code></li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>50</code> \u6b21 <code>insert</code> \u548c <code>sum</code></li>\n</ul>\n", "tags_en": ["Trie"], "tags_cn": ["\u5b57\u5178\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MapSum {\npublic:\n    /** Initialize your data structure here. */\n    MapSum() {\n\n    }\n    \n    void insert(string key, int val) {\n\n    }\n    \n    int sum(string prefix) {\n\n    }\n};\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum* obj = new MapSum();\n * obj->insert(key,val);\n * int param_2 = obj->sum(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MapSum {\n\n    /** Initialize your data structure here. */\n    public MapSum() {\n\n    }\n    \n    public void insert(String key, int val) {\n\n    }\n    \n    public int sum(String prefix) {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum obj = new MapSum();\n * obj.insert(key,val);\n * int param_2 = obj.sum(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MapSum(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n\n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MapSum:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, key: str, val: int) -> None:\n\n\n    def sum(self, prefix: str) -> int:\n\n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MapSum;\n\n/** Initialize your data structure here. */\n\nMapSum* mapSumCreate() {\n    \n}\n\nvoid mapSumInsert(MapSum* obj, char * key, int val) {\n  \n}\n\nint mapSumSum(MapSum* obj, char * prefix) {\n  \n}\n\nvoid mapSumFree(MapSum* obj) {\n    \n}\n\n/**\n * Your MapSum struct will be instantiated and called as such:\n * MapSum* obj = mapSumCreate();\n * mapSumInsert(obj, key, val);\n \n * int param_2 = mapSumSum(obj, prefix);\n \n * mapSumFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MapSum {\n\n    /** Initialize your data structure here. */\n    public MapSum() {\n\n    }\n    \n    public void Insert(string key, int val) {\n\n    }\n    \n    public int Sum(string prefix) {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum obj = new MapSum();\n * obj.Insert(key,val);\n * int param_2 = obj.Sum(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MapSum = function() {\n\n};\n\n/** \n * @param {string} key \n * @param {number} val\n * @return {void}\n */\nMapSum.prototype.insert = function(key, val) {\n\n};\n\n/** \n * @param {string} prefix\n * @return {number}\n */\nMapSum.prototype.sum = function(prefix) {\n\n};\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = new MapSum()\n * obj.insert(key,val)\n * var param_2 = obj.sum(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MapSum\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type key: String\n    :type val: Integer\n    :rtype: Void\n=end\n    def insert(key, val)\n\n    end\n\n\n=begin\n    :type prefix: String\n    :rtype: Integer\n=end\n    def sum(prefix)\n\n    end\n\n\nend\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum.new()\n# obj.insert(key, val)\n# param_2 = obj.sum(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MapSum {\n\n    /** Initialize your data structure here. */\n    init() {\n\n    }\n    \n    func insert(_ key: String, _ val: Int) {\n\n    }\n    \n    func sum(_ prefix: String) -> Int {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * let obj = MapSum()\n * obj.insert(key, val)\n * let ret_2: Int = obj.sum(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MapSum struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MapSum {\n\n}\n\n\nfunc (this *MapSum) Insert(key string, val int)  {\n\n}\n\n\nfunc (this *MapSum) Sum(prefix string) int {\n\n}\n\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(key,val);\n * param_2 := obj.Sum(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MapSum() {\n\n    /** Initialize your data structure here. */\n\n\n    def insert(key: String, `val`: Int) {\n\n    }\n\n    def sum(prefix: String): Int = {\n\n    }\n\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = new MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MapSum() {\n\n    /** Initialize your data structure here. */\n\n\n    fun insert(key: String, `val`: Int) {\n\n    }\n\n    fun sum(prefix: String): Int {\n\n    }\n\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MapSum {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MapSum {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    fn insert(&self, key: String, val: i32) {\n\n    }\n    \n    fn sum(&self, prefix: String) -> i32 {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * let obj = MapSum::new();\n * obj.insert(key, val);\n * let ret_2: i32 = obj.sum(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MapSum {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param String $key\n     * @param Integer $val\n     * @return NULL\n     */\n    function insert($key, $val) {\n\n    }\n\n    /**\n     * @param String $prefix\n     * @return Integer\n     */\n    function sum($prefix) {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * $obj = MapSum();\n * $obj->insert($key, $val);\n * $ret_2 = $obj->sum($prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MapSum {\n    constructor() {\n\n    }\n\n    insert(key: string, val: number): void {\n\n    }\n\n    sum(prefix: string): number {\n\n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = new MapSum()\n * obj.insert(key,val)\n * var param_2 = obj.sum(prefix)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0678", "frontend_question_id": "0678", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-parenthesis-string", "url_en": "https://leetcode.com/problems/valid-parenthesis-string", "relative_path_cn": "/leetcode/0600-0699/0678.Valid%20Parenthesis%20String/README.md", "relative_path_en": "/leetcode/0600-0699/0678.Valid%20Parenthesis%20String/README_EN.md", "title_cn": "\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32", "title_en": "Valid Parenthesis String", "question_title_slug": "valid-parenthesis-string", "content_en": "<p>\r\nGiven a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:\r\n<ol>\r\n<li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li>\r\n<li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li>\r\n<li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li>\r\n<li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string.</li>\r\n<li>An empty string is also valid.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"()\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"(*)\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \"(*))\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The string size will be in the range [1, 100].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u79cd\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff1a<code>\uff08&nbsp;</code>\uff0c<code>\uff09</code>&nbsp;\u548c <code>*</code>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002\u6709\u6548\u5b57\u7b26\u4e32\u5177\u6709\u5982\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u4efb\u4f55\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u53f3\u62ec\u53f7 <code>)</code>\u3002</li>\n\t<li>\u4efb\u4f55\u53f3\u62ec\u53f7 <code>)</code>&nbsp;\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\u3002</li>\n\t<li>\u5de6\u62ec\u53f7 <code>(</code> \u5fc5\u987b\u5728\u5bf9\u5e94\u7684\u53f3\u62ec\u53f7\u4e4b\u524d <code>)</code>\u3002</li>\n\t<li><code>*</code>&nbsp;\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5355\u4e2a\u53f3\u62ec\u53f7 <code>)</code>&nbsp;\uff0c\u6216\u5355\u4e2a\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\uff0c\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u4e5f\u88ab\u89c6\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;()&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;(*)&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;(*))&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32\u5927\u5c0f\u5c06\u5728 [1\uff0c100] \u8303\u56f4\u5185\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkValidString(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkValidString(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkValidString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkValidString(self, s: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkValidString(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckValidString(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkValidString = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef check_valid_string(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkValidString(_ s: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkValidString(s string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkValidString(s: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkValidString(s: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_valid_string(s: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkValidString($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkValidString(s: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0679", "frontend_question_id": "0679", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/24-game", "url_en": "https://leetcode.com/problems/24-game", "relative_path_cn": "/leetcode/0600-0699/0679.24%20Game/README.md", "relative_path_en": "/leetcode/0600-0699/0679.24%20Game/README_EN.md", "title_cn": "24 \u70b9\u6e38\u620f", "title_en": "24 Game", "question_title_slug": "24-game", "content_en": "<p>\r\nYou have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through <code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, <code>(</code>, <code>)</code> to get the value of 24.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [4, 1, 8, 7]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> (8-4) * (7-1) = 24\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 1, 2]\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The division operator <code>/</code> represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.</li>\r\n<li>Every operation done is between two numbers.  In particular, we cannot use <code>-</code> as a unary operator.  For example, with <code>[1, 1, 1, 1]</code> as input, the expression <code>-1 - 1 - 1 - 1</code> is not allowed.</li>\r\n<li>You cannot concatenate numbers together.  For example, if the input is <code>[1, 2, 1, 2]</code>, we cannot write this as 12 + 12.</li>\r\n</ol>\r\n</p>\r\n</p>", "content_cn": "<p>\u4f60\u6709 4 \u5f20\u5199\u6709 1 \u5230 9 \u6570\u5b57\u7684\u724c\u3002\u4f60\u9700\u8981\u5224\u65ad\u662f\u5426\u80fd\u901a\u8fc7&nbsp;<code>*</code>\uff0c<code>/</code>\uff0c<code>+</code>\uff0c<code>-</code>\uff0c<code>(</code>\uff0c<code>)</code>&nbsp;\u7684\u8fd0\u7b97\u5f97\u5230 24\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [4, 1, 8, 7]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1, 2, 1, 2]\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u9664\u6cd5\u8fd0\u7b97\u7b26&nbsp;<code>/</code>&nbsp;\u8868\u793a\u5b9e\u6570\u9664\u6cd5\uff0c\u800c\u4e0d\u662f\u6574\u6570\u9664\u6cd5\u3002\u4f8b\u5982 4 / (1 - 2/3) = 12 \u3002</li>\n\t<li>\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u8fd0\u7b97\u3002\u7279\u522b\u662f\u6211\u4eec\u4e0d\u80fd\u7528&nbsp;<code>-</code>&nbsp;\u4f5c\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u3002\u4f8b\u5982\uff0c<code>[1, 1, 1, 1]</code>&nbsp;\u4f5c\u4e3a\u8f93\u5165\u65f6\uff0c\u8868\u8fbe\u5f0f&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;\u662f\u4e0d\u5141\u8bb8\u7684\u3002</li>\n\t<li>\u4f60\u4e0d\u80fd\u5c06\u6570\u5b57\u8fde\u63a5\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u4e3a&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;\u65f6\uff0c\u4e0d\u80fd\u5199\u6210 12 + 12 \u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool judgePoint24(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean judgePoint24(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def judgePoint24(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def judgePoint24(self, nums: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool judgePoint24(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool JudgePoint24(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar judgePoint24 = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef judge_point24(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func judgePoint24(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func judgePoint24(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def judgePoint24(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun judgePoint24(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn judge_point24(nums: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function judgePoint24($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function judgePoint24(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0680", "frontend_question_id": "0680", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-palindrome-ii", "url_en": "https://leetcode.com/problems/valid-palindrome-ii", "relative_path_cn": "/leetcode/0600-0699/0680.Valid%20Palindrome%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0680.Valid%20Palindrome%20II/README_EN.md", "title_cn": "\u9a8c\u8bc1\u56de\u6587\u5b57\u7b26\u4e32 \u2161", "title_en": "Valid Palindrome II", "question_title_slug": "valid-palindrome-ii", "content_en": "<p>\r\nGiven a non-empty string <code>s</code>, you may delete <b>at most</b> one character.  Judge whether you can make it a palindrome.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"abca\"\r\n<b>Output:</b> True\r\n<b>Explanation:</b> You could delete the character 'c'.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The string will only contain lowercase characters a-z.\r\nThe maximum length of the string is 50000.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32&nbsp;<code>s</code>\uff0c<strong>\u6700\u591a</strong>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3002\u5224\u65ad\u662f\u5426\u80fd\u6210\u4e3a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abca&quot;\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u5220\u9664c\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u662f50000\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validPalindrome(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validPalindrome(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validPalindrome(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidPalindrome(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar validPalindrome = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef valid_palindrome(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validPalindrome(_ s: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validPalindrome(s string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validPalindrome(s: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validPalindrome(s: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_palindrome(s: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function validPalindrome($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validPalindrome(s: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0681", "frontend_question_id": "0681", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/next-closest-time", "url_en": "https://leetcode.com/problems/next-closest-time", "relative_path_cn": "/leetcode/0600-0699/0681.Next%20Closest%20Time/README.md", "relative_path_en": "/leetcode/0600-0699/0681.Next%20Closest%20Time/README_EN.md", "title_cn": "\u6700\u8fd1\u65f6\u523b", "title_en": "Next Closest Time", "question_title_slug": "next-closest-time", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0682", "frontend_question_id": "0682", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/baseball-game", "url_en": "https://leetcode.com/problems/baseball-game", "relative_path_cn": "/leetcode/0600-0699/0682.Baseball%20Game/README.md", "relative_path_en": "/leetcode/0600-0699/0682.Baseball%20Game/README_EN.md", "title_cn": "\u68d2\u7403\u6bd4\u8d5b", "title_en": "Baseball Game", "question_title_slug": "baseball-game", "content_en": "<p>You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds&#39; scores.</p>\n\n<p>At the beginning of the game, you start with an empty record. You are given a list of strings <code>ops</code>, where <code>ops[i]</code> is the <code>i<sup>th</sup></code> operation you must apply to the record and is one of the following:</p>\n\n<ol>\n\t<li>An integer <code>x</code> - Record a new score of <code>x</code>.</li>\n\t<li><code>&quot;+&quot;</code> - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.</li>\n\t<li><code>&quot;D&quot;</code> - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.</li>\n\t<li><code>&quot;C&quot;</code> - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.</li>\n</ol>\n\n<p>Return <em>the sum of all the scores on the record</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;2&quot; - Add 2 to the record, record is now [5, 2].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5].\n&quot;D&quot; - Add 2 * 5 = 10 to the record, record is now [5, 10].\n&quot;+&quot; - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;-2&quot; - Add -2 to the record, record is now [5, -2].\n&quot;4&quot; - Add 4 to the record, record is now [5, -2, 4].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5, -2].\n&quot;D&quot; - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n&quot;9&quot; - Add 9 to the record, record is now [5, -2, -4, 9].\n&quot;+&quot; - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n&quot;+&quot; - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;1&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ops.length &lt;= 1000</code></li>\n\t<li><code>ops[i]</code> is <code>&quot;C&quot;</code>, <code>&quot;D&quot;</code>, <code>&quot;+&quot;</code>, or a string representing an integer in the range <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li>For operation <code>&quot;+&quot;</code>, there will always be at least two previous scores on the record.</li>\n\t<li>For operations <code>&quot;C&quot;</code> and <code>&quot;D&quot;</code>, there will always be at least one previous score on the record.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u73b0\u5728\u662f\u4e00\u573a\u91c7\u7279\u6b8a\u8d5b\u5236\u68d2\u7403\u6bd4\u8d5b\u7684\u8bb0\u5f55\u5458\u3002\u8fd9\u573a\u6bd4\u8d5b\u7531\u82e5\u5e72\u56de\u5408\u7ec4\u6210\uff0c\u8fc7\u53bb\u51e0\u56de\u5408\u7684\u5f97\u5206\u53ef\u80fd\u4f1a\u5f71\u54cd\u4ee5\u540e\u51e0\u56de\u5408\u7684\u5f97\u5206\u3002</p>\n\n<p>\u6bd4\u8d5b\u5f00\u59cb\u65f6\uff0c\u8bb0\u5f55\u662f\u7a7a\u767d\u7684\u3002\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u8bb0\u5f55\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u5217\u8868 <code>ops</code>\uff0c\u5176\u4e2d <code>ops[i]</code> \u662f\u4f60\u9700\u8981\u8bb0\u5f55\u7684\u7b2c <code>i</code> \u9879\u64cd\u4f5c\uff0c<code>ops</code> \u9075\u5faa\u4e0b\u8ff0\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u6574\u6570 <code>x</code> - \u8868\u793a\u672c\u56de\u5408\u65b0\u83b7\u5f97\u5206\u6570 <code>x</code></li>\n\t<li><code>\"+\"</code> - \u8868\u793a\u672c\u56de\u5408\u65b0\u83b7\u5f97\u7684\u5f97\u5206\u662f\u524d\u4e24\u6b21\u5f97\u5206\u7684\u603b\u548c\u3002\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8bb0\u5f55\u6b64\u64cd\u4f5c\u65f6\u524d\u9762\u603b\u662f\u5b58\u5728\u4e24\u4e2a\u6709\u6548\u7684\u5206\u6570\u3002</li>\n\t<li><code>\"D\"</code> - \u8868\u793a\u672c\u56de\u5408\u65b0\u83b7\u5f97\u7684\u5f97\u5206\u662f\u524d\u4e00\u6b21\u5f97\u5206\u7684\u4e24\u500d\u3002\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8bb0\u5f55\u6b64\u64cd\u4f5c\u65f6\u524d\u9762\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7684\u5206\u6570\u3002</li>\n\t<li><code>\"C\"</code> - \u8868\u793a\u524d\u4e00\u6b21\u5f97\u5206\u65e0\u6548\uff0c\u5c06\u5176\u4ece\u8bb0\u5f55\u4e2d\u79fb\u9664\u3002\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8bb0\u5f55\u6b64\u64cd\u4f5c\u65f6\u524d\u9762\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7684\u5206\u6570\u3002</li>\n</ol>\n\n<p>\u8bf7\u4f60\u8fd4\u56de\u8bb0\u5f55\u4e2d\u6240\u6709\u5f97\u5206\u7684\u603b\u548c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\n<strong>\u8f93\u51fa\uff1a</strong>30\n<strong>\u89e3\u91ca\uff1a</strong>\n\"5\" - \u8bb0\u5f55\u52a0 5 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5]\n\"2\" - \u8bb0\u5f55\u52a0 2 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, 2]\n\"C\" - \u4f7f\u524d\u4e00\u6b21\u5f97\u5206\u7684\u8bb0\u5f55\u65e0\u6548\u5e76\u5c06\u5176\u79fb\u9664\uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5].\n\"D\" - \u8bb0\u5f55\u52a0 2 * 5 = 10 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, 10].\n\"+\" - \u8bb0\u5f55\u52a0 5 + 10 = 15 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, 10, 15].\n\u6240\u6709\u5f97\u5206\u7684\u603b\u548c 5 + 10 + 15 = 30\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\n<strong>\u8f93\u51fa\uff1a</strong>27\n<strong>\u89e3\u91ca\uff1a</strong>\n\"5\" - \u8bb0\u5f55\u52a0 5 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5]\n\"-2\" - \u8bb0\u5f55\u52a0 -2 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2]\n\"4\" - \u8bb0\u5f55\u52a0 4 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2, 4]\n\"C\" - \u4f7f\u524d\u4e00\u6b21\u5f97\u5206\u7684\u8bb0\u5f55\u65e0\u6548\u5e76\u5c06\u5176\u79fb\u9664\uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2]\n\"D\" - \u8bb0\u5f55\u52a0 2 * -2 = -4 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2, -4]\n\"9\" - \u8bb0\u5f55\u52a0 9 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2, -4, 9]\n\"+\" - \u8bb0\u5f55\u52a0 -4 + 9 = 5 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2, -4, 9, 5]\n\"+\" - \u8bb0\u5f55\u52a0 9 + 5 = 14 \uff0c\u8bb0\u5f55\u73b0\u5728\u662f [5, -2, -4, 9, 5, 14]\n\u6240\u6709\u5f97\u5206\u7684\u603b\u548c 5 + -2 + -4 + 9 + 5 + 14 = 27\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ops = [\"1\"]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= ops.length <= 1000</code></li>\n\t<li><code>ops[i]</code> \u4e3a <code>\"C\"</code>\u3001<code>\"D\"</code>\u3001<code>\"+\"</code>\uff0c\u6216\u8005\u4e00\u4e2a\u8868\u793a\u6574\u6570\u7684\u5b57\u7b26\u4e32\u3002\u6574\u6570\u8303\u56f4\u662f <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code></li>\n\t<li>\u5bf9\u4e8e <code>\"+\"</code> \u64cd\u4f5c\uff0c\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8bb0\u5f55\u6b64\u64cd\u4f5c\u65f6\u524d\u9762\u603b\u662f\u5b58\u5728\u4e24\u4e2a\u6709\u6548\u7684\u5206\u6570</li>\n\t<li>\u5bf9\u4e8e <code>\"C\"</code> \u548c <code>\"D\"</code> \u64cd\u4f5c\uff0c\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u8bb0\u5f55\u6b64\u64cd\u4f5c\u65f6\u524d\u9762\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7684\u5206\u6570</li>\n</ul>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int calPoints(String[] ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def calPoints(self, ops):\n        \"\"\"\n        :type ops: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def calPoints(self, ops: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint calPoints(char ** ops, int opsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CalPoints(string[] ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} ops\n * @return {number}\n */\nvar calPoints = function(ops) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} ops\n# @return {Integer}\ndef cal_points(ops)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func calPoints(_ ops: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func calPoints(ops []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def calPoints(ops: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun calPoints(ops: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn cal_points(ops: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $ops\n     * @return Integer\n     */\n    function calPoints($ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function calPoints(ops: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0683", "frontend_question_id": "0683", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/k-empty-slots", "url_en": "https://leetcode.com/problems/k-empty-slots", "relative_path_cn": "/leetcode/0600-0699/0683.K%20Empty%20Slots/README.md", "relative_path_en": "/leetcode/0600-0699/0683.K%20Empty%20Slots/README_EN.md", "title_cn": "K \u4e2a\u5173\u95ed\u7684\u706f\u6ce1", "title_en": "K Empty Slots", "question_title_slug": "k-empty-slots", "content_en": null, "content_cn": null, "tags_en": ["Ordered Map"], "tags_cn": [null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0684", "frontend_question_id": "0684", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/redundant-connection", "url_en": "https://leetcode.com/problems/redundant-connection", "relative_path_cn": "/leetcode/0600-0699/0684.Redundant%20Connection/README.md", "relative_path_en": "/leetcode/0600-0699/0684.Redundant%20Connection/README_EN.md", "title_cn": "\u5197\u4f59\u8fde\u63a5", "title_en": "Redundant Connection", "question_title_slug": "redundant-connection", "content_en": "<p>\r\nIn this problem, a tree is an <b>undirected</b> graph that is connected and has no cycles.\r\n</p><p>\r\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n</p><p>\r\nThe resulting graph is given as a 2D-array of <code>edges</code>.  Each element of <code>edges</code> is a pair <code>[u, v]</code> with <code>u < v</code>, that represents an <b>undirected</b> edge connecting nodes <code>u</code> and <code>v</code>.\r\n</p><p>\r\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge <code>[u, v]</code> should be in the same format, with <code>u < v</code>.\r\n</p><p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [1,3], [2,3]]\r\n<b>Output:</b> [2,3]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n  1\r\n / \\\r\n2 - 3\r\n</pre>\r\n</p>\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4], [1,4], [1,5]]\r\n<b>Output:</b> [1,4]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n5 - 1 - 2\r\n    |   |\r\n    4 - 3\r\n</pre>\r\n</p>\r\n<p><b>Note:</b><br />\r\n<li>The size of the input 2D-array will be between 3 and 1000.</li>\r\n<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>\r\n</p>\r\n\r\n<br />\r\n\r\n<p>\r\n<b><font color=\"red\">Update (2017-09-26):</font></b><br>\r\nWe have overhauled the problem description + test cases and specified clearly the graph is an <b><i>undirected</i></b> graph. For the <b><i>directed</i></b> graph follow up please see <b><a href=\"https://leetcode.com/problems/redundant-connection-ii/description/\">Redundant Connection II</a></b>). We apologize for any inconvenience caused.\r\n</p>", "content_cn": "<p>\u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684<strong>\u65e0\u5411</strong>\u56fe\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p>\n\n<p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5<code>\u8fb9</code>\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a<code>\u8fb9</code>\u7684\u5143\u7d20\u662f\u4e00\u5bf9<code>[u, v]</code>&nbsp;\uff0c\u6ee1\u8db3&nbsp;<code>u &lt; v</code>\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9<code>u</code>&nbsp;\u548c<code>v</code>\u7684<strong>\u65e0\u5411</strong>\u56fe\u7684\u8fb9\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9&nbsp;<code>[u, v]</code> \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f&nbsp;<code>u &lt; v</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [1,3], [2,3]]\n<strong>\u8f93\u51fa:</strong> [2,3]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n  1\n / \\\n2 - 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4], [1,4], [1,5]]\n<strong>\u8f93\u51fa:</strong> [1,4]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n5 - 1 - 2\n    |   |\n    4 - 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002</li>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ul>\n\n<p><strong>\u66f4\u65b0(2017-09-26):</strong><br>\n\u6211\u4eec\u5df2\u7ecf\u91cd\u65b0\u68c0\u67e5\u4e86\u95ee\u9898\u63cf\u8ff0\u53ca\u6d4b\u8bd5\u7528\u4f8b\uff0c\u660e\u786e\u56fe\u662f<em><strong>\u65e0\u5411&nbsp;</strong></em>\u56fe\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\u8be6\u89c1<strong><a href=\"https://leetcodechina.com/problems/redundant-connection-ii/description/\">\u5197\u4f59\u8fde\u63a5II</a>\u3002</strong>\u5bf9\u4e8e\u9020\u6210\u4efb\u4f55\u4e0d\u4fbf\uff0c\u6211\u4eec\u6df1\u611f\u6b49\u610f\u3002</p>\n", "tags_en": ["Tree", "Union Find", "Graph"], "tags_cn": ["\u6811", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findRedundantConnection(int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRedundantConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findRedundantConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindRedundantConnection(int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantConnection = function(edges) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_redundant_connection(edges)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRedundantConnection(_ edges: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRedundantConnection(edges [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRedundantConnection(edges: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRedundantConnection(edges: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_redundant_connection(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findRedundantConnection($edges) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRedundantConnection(edges: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0685", "frontend_question_id": "0685", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/redundant-connection-ii", "url_en": "https://leetcode.com/problems/redundant-connection-ii", "relative_path_cn": "/leetcode/0600-0699/0685.Redundant%20Connection%20II/README.md", "relative_path_en": "/leetcode/0600-0699/0685.Redundant%20Connection%20II/README_EN.md", "title_cn": "\u5197\u4f59\u8fde\u63a5 II", "title_en": "Redundant Connection II", "question_title_slug": "redundant-connection-ii", "content_en": "<p>\r\nIn this problem, a rooted tree is a <b>directed</b> graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\r\n</p><p>\r\nThe given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n</p><p>\r\nThe resulting graph is given as a 2D-array of <code>edges</code>.  Each element of <code>edges</code> is a pair <code>[u, v]</code> that represents a <b>directed</b> edge connecting nodes <code>u</code> and <code>v</code>, where <code>u</code> is a parent of child <code>v</code>.\r\n</p><p>\r\nReturn an edge that can be removed so that the resulting graph is a rooted tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.\r\n</p><p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [1,3], [2,3]]\r\n<b>Output:</b> [2,3]\r\n<b>Explanation:</b> The given directed graph will be like this:\r\n  1\r\n / \\\r\nv   v\r\n2-->3\r\n</pre>\r\n</p>\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4], [4,1], [1,5]]\r\n<b>Output:</b> [4,1]\r\n<b>Explanation:</b> The given directed graph will be like this:\r\n5 <- 1 -> 2\r\n     ^    |\r\n     |    v\r\n     4 <- 3\r\n</pre>\r\n</p>\r\n<p><b>Note:</b><br />\r\n<li>The size of the input 2D-array will be between 3 and 1000.</li>\r\n<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>\r\n</p>", "content_cn": "<p>\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684<strong>\u6709\u5411</strong>\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p>\n\n<p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5<code>\u8fb9</code>\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a<code>\u8fb9</code> \u7684\u5143\u7d20\u662f\u4e00\u5bf9 <code>[u, v]</code>\uff0c\u7528\u4ee5\u8868\u793a<strong>\u6709\u5411</strong>\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 <code>u</code> \u548c\u9876\u70b9 <code>v</code> \u7684\u8fb9\uff0c\u5176\u4e2d <code>u</code> \u662f <code>v</code> \u7684\u4e00\u4e2a\u7236\u8282\u70b9\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u6761\u80fd\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u662f\u6709N\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [1,3], [2,3]]\n<strong>\u8f93\u51fa:</strong> [2,3]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n  1\n / \\\nv   v\n2--&gt;3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4], [4,1], [1,5]]\n<strong>\u8f93\u51fa:</strong> [4,1]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2d N \u662f\u4e8c\u7ef4\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findRedundantDirectedConnection(int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findRedundantDirectedConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindRedundantDirectedConnection(int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantDirectedConnection = function(edges) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_redundant_directed_connection(edges)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRedundantDirectedConnection(_ edges: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRedundantDirectedConnection(edges [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRedundantDirectedConnection(edges: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRedundantDirectedConnection(edges: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_redundant_directed_connection(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findRedundantDirectedConnection($edges) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRedundantDirectedConnection(edges: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0686", "frontend_question_id": "0686", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/repeated-string-match", "url_en": "https://leetcode.com/problems/repeated-string-match", "relative_path_cn": "/leetcode/0600-0699/0686.Repeated%20String%20Match/README.md", "relative_path_en": "/leetcode/0600-0699/0686.Repeated%20String%20Match/README_EN.md", "title_cn": "\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d", "title_en": "Repeated String Match", "question_title_slug": "repeated-string-match", "content_en": "<p>Given two strings&nbsp;<code>a</code> and <code>b</code>, return the minimum number of times you should repeat string&nbsp;<code>a</code>&nbsp;so that string&nbsp;<code>b</code>&nbsp;is a substring of it. If it is&nbsp;impossible for&nbsp;<code>b</code>\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of&nbsp;<code>a</code> after repeating it, return&nbsp;<code>-1</code>.</p>\n\n<p><strong>Notice:</strong>&nbsp;string&nbsp;<code>&quot;abc&quot;</code>&nbsp;repeated 0 times is&nbsp;<code>&quot;&quot;</code>,&nbsp; repeated 1 time is&nbsp;<code>&quot;abc&quot;</code>&nbsp;and repeated 2 times is&nbsp;<code>&quot;abcabc&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;abcd&quot;, b = &quot;cdabcdab&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We return 3 because by repeating a three times &quot;ab<strong>cdabcdab</strong>cd&quot;, b is a substring of it.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;a&quot;, b = &quot;aa&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;a&quot;, b = &quot;a&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;abc&quot;, b = &quot;wxyz&quot;\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;consist of lower-case English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>a</code> \u548c <code>b</code>\uff0c\u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32 <code>a</code> \u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32 <code>b</code> \u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32 <code>a</code> \u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u5b57\u7b26\u4e32 <code>&quot;abc&quot;</code>&nbsp;\u91cd\u590d\u53e0\u52a0 0 \u6b21\u662f <code>&quot;&quot;</code>\uff0c\u91cd\u590d\u53e0\u52a0 1 \u6b21\u662f&nbsp;<code>&quot;abc&quot;</code>\uff0c\u91cd\u590d\u53e0\u52a0 2 \u6b21\u662f&nbsp;<code>&quot;abcabc&quot;</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;abcd&quot;, b = &quot;cdabcdab&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>a \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a &quot;ab<strong>cdabcdab</strong>cd&quot;, \u6b64\u65f6 b \u662f\u5176\u5b50\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;a&quot;, b = &quot;aa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;a&quot;, b = &quot;a&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;abc&quot;, b = &quot;wxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> \u548c <code>b</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int repeatedStringMatch(String a, String b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def repeatedStringMatch(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def repeatedStringMatch(self, a: str, b: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint repeatedStringMatch(char * a, char * b){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RepeatedStringMatch(string a, string b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar repeatedStringMatch = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef repeated_string_match(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func repeatedStringMatch(_ a: String, _ b: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func repeatedStringMatch(a string, b string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def repeatedStringMatch(a: String, b: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun repeatedStringMatch(a: String, b: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn repeated_string_match(a: String, b: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return Integer\n     */\n    function repeatedStringMatch($a, $b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function repeatedStringMatch(a: string, b: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0687", "frontend_question_id": "0687", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-univalue-path", "url_en": "https://leetcode.com/problems/longest-univalue-path", "relative_path_cn": "/leetcode/0600-0699/0687.Longest%20Univalue%20Path/README.md", "relative_path_en": "/leetcode/0600-0699/0687.Longest%20Univalue%20Path/README_EN.md", "title_cn": "\u6700\u957f\u540c\u503c\u8def\u5f84", "title_en": "Longest Univalue Path", "question_title_slug": "longest-univalue-path", "content_en": "<p>Given the <code>root</code> of a binary tree, return <em>the length of the longest path, where each node in the path has the same value</em>. This path may or may not pass through the root.</p>\n\n<p><strong>The length of the path</strong> between two nodes is represented by the number of edges between them.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg\" style=\"width: 571px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,5,1,1,5]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg\" style=\"width: 571px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,4,5,4,4,5]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The depth of the tree will not exceed <code>1000</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>\u6ce8\u610f</strong>\uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<p>\u8f93\u5165:</p>\n\n<pre>\n              5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<p>\u8f93\u5165:</p>\n\n<pre>\n              1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002&nbsp;\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002</p>\n", "tags_en": ["Tree", "Recursion"], "tags_cn": ["\u6811", "\u9012\u5f52"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int longestUnivaluePath(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int longestUnivaluePath(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def longestUnivaluePath(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestUnivaluePath(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint longestUnivaluePath(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int LongestUnivaluePath(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar longestUnivaluePath = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef longest_univalue_path(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func longestUnivaluePath(_ root: TreeNode?) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc longestUnivaluePath(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def longestUnivaluePath(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun longestUnivaluePath(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn longest_univalue_path(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function longestUnivaluePath($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction longestUnivaluePath(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0688", "frontend_question_id": "0688", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/knight-probability-in-chessboard", "url_en": "https://leetcode.com/problems/knight-probability-in-chessboard", "relative_path_cn": "/leetcode/0600-0699/0688.Knight%20Probability%20in%20Chessboard/README.md", "relative_path_en": "/leetcode/0600-0699/0688.Knight%20Probability%20in%20Chessboard/README_EN.md", "title_cn": "\u201c\u9a6c\u201d\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387", "title_en": "Knight Probability in Chessboard", "question_title_slug": "knight-probability-in-chessboard", "content_en": "<p>On an <code>N</code>x<code>N</code> chessboard, a knight starts at the <code>r</code>-th row and <code>c</code>-th column and attempts to make exactly <code>K</code> moves. The rows and columns are 0 indexed, so the top-left square is <code>(0, 0)</code>, and the bottom-right square is <code>(N-1, N-1)</code>.</p>\r\n\r\n<p>A chess knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 200px; height: 200px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p>\r\n\r\n<p>The knight continues moving until it has made exactly <code>K</code> moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3, 2, 0, 0\r\n<b>Output:</b> 0.0625\r\n<b>Explanation:</b> There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\r\nFrom each of those positions, there are also two moves that will keep the knight on the board.\r\nThe total probability the knight stays on the board is 0.0625.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>N</code> will be between 1 and 25.</li>\r\n\t<li><code>K</code> will be between 0 and 100.</li>\r\n\t<li>The knight always initially starts on the board.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5df2\u77e5\u4e00\u4e2a&nbsp;<code>N</code>x<code>N</code>&nbsp;\u7684\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\uff0c\u68cb\u76d8\u7684\u884c\u53f7\u548c\u5217\u53f7\u90fd\u662f\u4ece 0 \u5f00\u59cb\u3002\u5373\u6700\u5de6\u4e0a\u89d2\u7684\u683c\u5b50\u8bb0\u4e3a&nbsp;<code>(0, 0)</code>\uff0c\u6700\u53f3\u4e0b\u89d2\u7684\u8bb0\u4e3a&nbsp;<code>(N-1, N-1)</code>\u3002&nbsp;</p>\n\n<p>\u73b0\u6709\u4e00\u4e2a &ldquo;\u9a6c&rdquo;\uff08\u4e5f\u8bd1\u4f5c &ldquo;\u9a91\u58eb&rdquo;\uff09\u4f4d\u4e8e&nbsp;<code>(r, c)</code>&nbsp;\uff0c\u5e76\u6253\u7b97\u8fdb\u884c&nbsp;<code>K</code> \u6b21\u79fb\u52a8\u3002&nbsp;</p>\n\n<p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u56fd\u9645\u8c61\u68cb\u7684 &ldquo;\u9a6c&rdquo; \u6bcf\u4e00\u6b65\u5148\u6cbf\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u79fb\u52a8 2 \u4e2a\u683c\u5b50\uff0c\u7136\u540e\u5411\u4e0e\u4e4b\u76f8\u5782\u76f4\u7684\u65b9\u5411\u518d\u79fb\u52a8 1 \u4e2a\u683c\u5b50\uff0c\u5171\u6709 8 \u4e2a\u53ef\u9009\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png\" style=\"height: 200px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p>\u73b0\u5728 &ldquo;\u9a6c&rdquo; \u6bcf\u4e00\u6b65\u90fd\u4ece\u53ef\u9009\u7684\u4f4d\u7f6e\uff08\u5305\u62ec\u68cb\u76d8\u5916\u90e8\u7684\uff09\u4e2d\u72ec\u7acb\u968f\u673a\u5730\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u4e86&nbsp;<code>K</code>&nbsp;\u6b21\u6216\u8df3\u5230\u4e86\u68cb\u76d8\u5916\u9762\u3002</p>\n\n<p>\u6c42\u79fb\u52a8\u7ed3\u675f\u540e\uff0c&ldquo;\u9a6c&rdquo; \u4ecd\u7559\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3, 2, 0, 0\n<strong>\u8f93\u51fa:</strong> 0.0625\n<strong>\u89e3\u91ca:</strong> \n\u8f93\u5165\u7684\u6570\u636e\u4f9d\u6b21\u4e3a N, K, r, c\n\u7b2c 1 \u6b65\u65f6\uff0c\u6709\u4e14\u53ea\u6709 2 \u79cd\u8d70\u6cd5\u4ee4 &ldquo;\u9a6c&rdquo; \u53ef\u4ee5\u7559\u5728\u68cb\u76d8\u4e0a\uff08\u8df3\u5230\uff081,2\uff09\u6216\uff082,1\uff09\uff09\u3002\u5bf9\u4e8e\u4ee5\u4e0a\u7684\u4e24\u79cd\u60c5\u51b5\uff0c\u5404\u81ea\u5728\u7b2c2\u6b65\u5747\u6709\u4e14\u53ea\u67092\u79cd\u8d70\u6cd5\u4ee4 &ldquo;\u9a6c&rdquo; \u4ecd\u7136\u7559\u5728\u68cb\u76d8\u4e0a\u3002\n\u6240\u4ee5 &ldquo;\u9a6c&rdquo; \u5728\u7ed3\u675f\u540e\u4ecd\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387\u4e3a 0.0625\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>N</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a [1, 25]</li>\n\t<li><code>K</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]</li>\n\t<li>\u5f00\u59cb\u65f6\uff0c&ldquo;\u9a6c&rdquo; \u603b\u662f\u4f4d\u4e8e\u68cb\u76d8\u4e0a</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double knightProbability(int N, int K, int r, int c) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double knightProbability(int N, int K, int r, int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def knightProbability(self, N, K, r, c):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :type r: int\n        :type c: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble knightProbability(int N, int K, int r, int c){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double KnightProbability(int N, int K, int r, int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number} K\n * @param {number} r\n * @param {number} c\n * @return {number}\n */\nvar knightProbability = function(N, K, r, c) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} r\n# @param {Integer} c\n# @return {Float}\ndef knight_probability(n, k, r, c)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func knightProbability(_ N: Int, _ K: Int, _ r: Int, _ c: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func knightProbability(N int, K int, r int, c int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def knightProbability(N: Int, K: Int, r: Int, c: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun knightProbability(N: Int, K: Int, r: Int, c: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn knight_probability(n: i32, k: i32, r: i32, c: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer $K\n     * @param Integer $r\n     * @param Integer $c\n     * @return Float\n     */\n    function knightProbability($N, $K, $r, $c) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function knightProbability(N: number, K: number, r: number, c: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0689", "frontend_question_id": "0689", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays", "url_en": "https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays", "relative_path_cn": "/leetcode/0600-0699/0689.Maximum%20Sum%20of%203%20Non-Overlapping%20Subarrays/README.md", "relative_path_en": "/leetcode/0600-0699/0689.Maximum%20Sum%20of%203%20Non-Overlapping%20Subarrays/README_EN.md", "title_cn": "\u4e09\u4e2a\u65e0\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c", "title_en": "Maximum Sum of 3 Non-Overlapping Subarrays", "question_title_slug": "maximum-sum-of-3-non-overlapping-subarrays", "content_en": "<p>In a given array <code>nums</code> of positive integers, find three non-overlapping subarrays with maximum sum.</p>\r\n\r\n<p>Each subarray will be of size <code>k</code>, and we want to maximize the sum of all <code>3*k</code> entries.</p>\r\n\r\n<p>Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,1,2,6,7,5,1], 2\r\n<b>Output:</b> [0, 3, 5]\r\n<b>Explanation:</b> Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\r\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>nums.length</code> will be between 1 and 20000.</li>\r\n\t<li><code>nums[i]</code> will be between 1 and 65535.</li>\r\n\t<li><code>k</code> will be between 1 and floor(nums.length / 3).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u7531\u6b63\u6574\u6570\u7ec4\u6210\uff0c\u627e\u5230\u4e09\u4e2a\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002</p>\n\n<p>\u6bcf\u4e2a\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a<code>k</code>\uff0c\u6211\u4eec\u8981\u4f7f\u8fd9<code>3*k</code>\u4e2a\u9879\u7684\u548c\u6700\u5927\u5316\u3002</p>\n\n<p>\u8fd4\u56de\u6bcf\u4e2a\u533a\u95f4\u8d77\u59cb\u7d22\u5f15\u7684\u5217\u8868\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c\u6709\u591a\u4e2a\u7ed3\u679c\uff0c\u8fd4\u56de\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u4e2a\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,1,2,6,7,5,1], 2\n<strong>\u8f93\u51fa:</strong> [0, 3, 5]\n<strong>\u89e3\u91ca:</strong> \u5b50\u6570\u7ec4 [1, 2], [2, 6], [7, 5] \u5bf9\u5e94\u7684\u8d77\u59cb\u7d22\u5f15\u4e3a [0, 3, 5]\u3002\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u53d6 [2, 1], \u4f46\u662f\u7ed3\u679c [1, 3, 5] \u5728\u5b57\u5178\u5e8f\u4e0a\u66f4\u5927\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>\u7684\u8303\u56f4\u5728<code>[1, 20000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>nums[i]</code>\u7684\u8303\u56f4\u5728<code>[1, 65535]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>k</code>\u7684\u8303\u56f4\u5728<code>[1, floor(nums.length / 3)]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Array", "Dynamic Programming"], "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSumOfThreeSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSumOfThreeSubarrays(int* nums, int numsSize, int k, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxSumOfThreeSubarrays(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSumOfThreeSubarrays = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sum_of_three_subarrays(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func maxSumOfThreeSubarrays(_ nums: [Int], _ k: Int) -> [Int] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSumOfThreeSubarrays(nums []int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSumOfThreeSubarrays(nums: Array[Int], k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSumOfThreeSubarrays(nums: IntArray, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_of_three_subarrays(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSumOfThreeSubarrays($nums, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSumOfThreeSubarrays(nums: number[], k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0690", "frontend_question_id": "0690", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/employee-importance", "url_en": "https://leetcode.com/problems/employee-importance", "relative_path_cn": "/leetcode/0600-0699/0690.Employee%20Importance/README.md", "relative_path_en": "/leetcode/0600-0699/0690.Employee%20Importance/README_EN.md", "title_cn": "\u5458\u5de5\u7684\u91cd\u8981\u6027", "title_en": "Employee Importance", "question_title_slug": "employee-importance", "content_en": "<p>You are given a data structure of employee information, which includes the employee&#39;s <b>unique id</b>, their&nbsp;<b>importance value</b> and their&nbsp;<b>direct</b> subordinates&#39; id.</p>\n\n<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is <b>not direct</b>.</p>\n\n<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their&nbsp;subordinates.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<b>Output:</b> 11\n<b>Explanation:</b>\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ol>\n\t<li>One employee has at most one <b>direct</b> leader and may have several subordinates.</li>\n\t<li>The maximum number of employees won&#39;t exceed 2000.</li>\n</ol>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5<strong>\u552f\u4e00\u7684id</strong>\uff0c<strong>\u91cd\u8981\u5ea6&nbsp;</strong>\u548c <strong>\u76f4\u7cfb\u4e0b\u5c5e\u7684id</strong>\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e<strong>\u5e76\u4e0d\u662f\u76f4\u7cfb</strong>\u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<strong>\u8f93\u51fa:</strong> 11\n<strong>\u89e3\u91ca:</strong>\n\u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a<strong>\u76f4\u7cfb</strong>\u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a<strong>\u76f4\u7cfb</strong>\u4e0b\u5c5e</li>\n\t<li>\u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Breadth-first Search", "Hash Table"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for Employee.\nclass Employee {\npublic:\n    int id;\n    int importance;\n    vector<int> subordinates;\n};\n*/\n\nclass Solution {\npublic:\n    int getImportance(vector<Employee*> employees, int id) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for Employee.\nclass Employee {\n    public int id;\n    public int importance;\n    public List<Integer> subordinates;\n};\n*/\n\nclass Solution {\n    public int getImportance(List<Employee> employees, int id) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for Employee.\nclass Employee(object):\n    def __init__(self, id, importance, subordinates):\n    \t#################\n        :type id: int\n        :type importance: int\n        :type subordinates: List[int]\n        #################\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n\"\"\"\n\nclass Solution(object):\n    def getImportance(self, employees, id):\n        \"\"\"\n        :type employees: List[Employee]\n        :type id: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for Employee.\nclass Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n\"\"\"\n\nclass Solution:\n    def getImportance(self, employees: List['Employee'], id: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for Employee.\nclass Employee {\n    public int id;\n    public int importance;\n    public IList<int> subordinates;\n}\n*/\n\nclass Solution {\n    public int GetImportance(IList<Employee> employees, int id) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for Employee.\n * function Employee(id, importance, subordinates) {\n *     this.id = id;\n *     this.importance = importance;\n *     this.subordinates = subordinates;\n * }\n */\n\n/**\n * @param {Employee[]} employees\n * @param {number} id\n * @return {number}\n */\nvar GetImportance = function(employees, id) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "=begin\n# Definition for Employee.\nclass Employee\n    attr_accessor :id, :importance, :subordinates\n    def initialize( id, importance, subordinates)\n        @id = id\n        @importance = importance\n        @subordinates = subordinates\n    end\nend\n=end\n\n# @param {Employee} employees\n# @param {Integer} id\n# @return {Integer}\ndef get_importance(employees, id)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for Employee.\n * public class Employee {\n *     public var id: Int\n *     public var importance: Int\n *     public var subordinates: [Int]\n *     public init(_ id: Int, _ importance: Int, _ subordinates: [Int]) {\n *         self.id = id\n *         self.importance = importance\n *         self.subordinates = subordinates\n *     }\n * }\n */\n\nclass Solution {\n    func getImportance(_ employees: [Employee], _ id: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for Employee.\n * type Employee struct {\n *     Id int\n *     Importance int\n *     Subordinates []int\n * }\n */\n\nfunc getImportance(employees []*Employee, id int) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/*\n// Definition for Employee.\nclass Employee() {\n    var id: Int = 0\n    var importance: Int = 0\n    var subordinates: List[Int] = List()\n};\n*/\n\nobject Solution {\n    def getImportance(employees: List[Employee], id: Int): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/*\n *\t// Definition for Employee.\n *\tclass Employee {\n *\t\tvar id:Int = 0\n *\t\tvar importance:Int = 0\n *\t\tvar subordinates:List<Int> = listOf()\n *\t}\n */\n\nclass Solution {\n    fun getImportance(employees: List<Employee?>, id: Int): Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for Employee.\n * class Employee {\n *     public $id = null;\n *     public $importance = null;\n *     public $subordinates = array();\n *     function __construct($id, $importance, $subordinates) {\n *         $this->id = $id;\n *         $this->importance = $importance;\n *         $this->subordinates = $subordinates;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Employee[] $employees\n     * @param Integer $id\n     * @return Integer\n     */\n    function getImportance($employees, $id) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for Employee.\n * class Employee {\n *     id: number\n *     importance: number\n *     subordinates: number\n *     constructor(id: number, importance: number, subordinates: number[]) {\n *         this.id = (id === undefined) ? 0 : id;\n *         this.importance = (importance === undefined) ? 0 : importance;\n *         this.subordinates = (subordinates === undefined) ? [] : subordinates;\n *     }\n * }\n */\n\nfunction getImportance(employees: Employee[], id: number): number {\n\t\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0691", "frontend_question_id": "0691", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/stickers-to-spell-word", "url_en": "https://leetcode.com/problems/stickers-to-spell-word", "relative_path_cn": "/leetcode/0600-0699/0691.Stickers%20to%20Spell%20Word/README.md", "relative_path_en": "/leetcode/0600-0699/0691.Stickers%20to%20Spell%20Word/README_EN.md", "title_cn": "\u8d34\u7eb8\u62fc\u8bcd", "title_en": "Stickers to Spell Word", "question_title_slug": "stickers-to-spell-word", "content_en": "<p>\r\nWe are given N different types of stickers.  Each sticker has a lowercase English word on it.\r\n</p><p>\r\nYou would like to spell out the given <code>target</code> string by cutting individual letters from your collection of stickers and rearranging them.\r\n</p><p>\r\nYou can use each sticker more than once if you want, and you have infinite quantities of each sticker.\r\n</p><p>\r\nWhat is the minimum number of stickers that you need to spell out the <code>target</code>?  If the task is impossible, return -1.\r\n</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n<p>Input:<pre>\r\n[\"with\", \"example\", \"science\"], \"thehat\"\r\n</pre></p>\r\n\r\n<p>Output:<pre>\r\n3\r\n</pre></p>\r\n\r\n<p>Explanation:<pre>\r\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\r\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\r\nAlso, this is the minimum number of stickers necessary to form the target string.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b></p>\r\n<p>Input:<pre>\r\n[\"notice\", \"possible\"], \"basicbasic\"\r\n</pre></p>\r\n\r\n<p>Output:<pre>\r\n-1\r\n</pre></p>\r\n\r\n<p>Explanation:<pre>\r\nWe can't form the target \"basicbasic\" from cutting letters from the given stickers.\r\n</pre></p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>stickers</code> has length in the range <code>[1, 50]</code>.</li>\r\n<li><code>stickers</code> consists of lowercase English words (without apostrophes).</li>\r\n<li><code>target</code> has length in the range <code>[1, 15]</code>, and consists of lowercase English letters.</li>\r\n<li>In all test cases, all words were chosen <u>randomly</u> from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.</li>\r\n<li>The time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average.</li>\r\n</p>", "content_cn": "<p>\u6211\u4eec\u7ed9\u51fa\u4e86 N \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8d34\u7eb8\u3002\u6bcf\u4e2a\u8d34\u7eb8\u4e0a\u90fd\u6709\u4e00\u4e2a\u5c0f\u5199\u7684\u82f1\u6587\u5355\u8bcd\u3002</p>\n\n<p>\u4f60\u5e0c\u671b\u4ece\u81ea\u5df1\u7684\u8d34\u7eb8\u96c6\u5408\u4e2d\u88c1\u526a\u5355\u4e2a\u5b57\u6bcd\u5e76\u91cd\u65b0\u6392\u5217\u5b83\u4eec\uff0c\u4ece\u800c\u62fc\u5199\u51fa\u7ed9\u5b9a\u7684\u76ee\u6807\u5b57\u7b26\u4e32 <code>target</code>\u3002</p>\n\n<p>\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4e0d\u6b62\u4e00\u6b21\u5730\u4f7f\u7528\u6bcf\u4e00\u5f20\u8d34\u7eb8\uff0c\u800c\u4e14\u6bcf\u4e00\u5f20\u8d34\u7eb8\u7684\u6570\u91cf\u90fd\u662f\u65e0\u9650\u7684\u3002</p>\n\n<p>\u62fc\u51fa\u76ee\u6807&nbsp;<code>target</code> \u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u662f\u591a\u5c11\uff1f\u5982\u679c\u4efb\u52a1\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>3\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 2 \u4e2a &quot;with&quot; \u8d34\u7eb8\uff0c\u548c 1 \u4e2a &quot;example&quot; \u8d34\u7eb8\u3002\n\u628a\u8d34\u7eb8\u4e0a\u7684\u5b57\u6bcd\u526a\u4e0b\u6765\u5e76\u91cd\u65b0\u6392\u5217\u540e\uff0c\u5c31\u53ef\u4ee5\u5f62\u6210\u76ee\u6807 &ldquo;thehat&ldquo; \u4e86\u3002\n\u6b64\u5916\uff0c\u8fd9\u662f\u5f62\u6210\u76ee\u6807\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>-1\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u526a\u5207\u7ed9\u5b9a\u8d34\u7eb8\u7684\u5b57\u6bcd\u6765\u5f62\u6210\u76ee\u6807&ldquo;basicbasic&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>stickers</code> \u957f\u5ea6\u8303\u56f4\u662f&nbsp;<code>[1, 50]</code>\u3002</li>\n\t<li><code>stickers</code> \u7531\u5c0f\u5199\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff08\u4e0d\u5e26\u6487\u53f7\uff09\u3002</li>\n\t<li><code>target</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 15]</code>&nbsp;\u8303\u56f4\u5185\uff0c\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u6848\u4f8b\u4e2d\uff0c\u6240\u6709\u7684\u5355\u8bcd\u90fd\u662f\u4ece 1000 \u4e2a\u6700\u5e38\u89c1\u7684\u7f8e\u56fd\u82f1\u8bed\u5355\u8bcd\u4e2d\u968f\u673a\u9009\u53d6\u7684\uff0c\u76ee\u6807\u662f\u4e24\u4e2a\u968f\u673a\u5355\u8bcd\u7684\u4e32\u8054\u3002</li>\n\t<li>\u65f6\u95f4\u9650\u5236\u53ef\u80fd\u6bd4\u5e73\u65f6\u66f4\u5177\u6311\u6218\u6027\u3002\u9884\u8ba1 50 \u4e2a\u8d34\u7eb8\u7684\u6d4b\u8bd5\u6848\u4f8b\u5e73\u5747\u53ef\u572835ms\u5185\u89e3\u51b3\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming", "Backtracking"], "tags_cn": ["\u52a8\u6001\u89c4\u5212", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minStickers(vector<string>& stickers, string target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minStickers(String[] stickers, String target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minStickers(char ** stickers, int stickersSize, char * target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinStickers(string[] stickers, string target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} stickers\n * @param {string} target\n * @return {number}\n */\nvar minStickers = function(stickers, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} stickers\n# @param {String} target\n# @return {Integer}\ndef min_stickers(stickers, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minStickers(_ stickers: [String], _ target: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minStickers(stickers []string, target string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minStickers(stickers: Array[String], target: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minStickers(stickers: Array<String>, target: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_stickers(stickers: Vec<String>, target: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $stickers\n     * @param String $target\n     * @return Integer\n     */\n    function minStickers($stickers, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minStickers(stickers: string[], target: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0692", "frontend_question_id": "0692", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/top-k-frequent-words", "url_en": "https://leetcode.com/problems/top-k-frequent-words", "relative_path_cn": "/leetcode/0600-0699/0692.Top%20K%20Frequent%20Words/README.md", "relative_path_en": "/leetcode/0600-0699/0692.Top%20K%20Frequent%20Words/README_EN.md", "title_cn": "\u524dK\u4e2a\u9ad8\u9891\u5355\u8bcd", "title_en": "Top K Frequent Words", "question_title_slug": "top-k-frequent-words", "content_en": "<p>Given a non-empty list of words, return the <i>k</i> most frequent elements.</p>\r\n<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\r\n<b>Output:</b> [\"i\", \"love\"]\r\n<b>Explanation:</b> \"i\" and \"love\" are the two most frequent words.\r\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\r\n<b>Output:</b> [\"the\", \"is\", \"sunny\", \"day\"]\r\n<b>Explanation:</b> \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\r\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\r\n<li>Input words contain only lowercase letters.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\n<ol>\r\n<li>Try to solve it in <i>O</i>(<i>n</i> log <i>k</i>) time and <i>O</i>(<i>n</i>) extra space.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u4e00\u975e\u7a7a\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd4\u56de\u524d&nbsp;<em>k&nbsp;</em>\u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u8be5\u6309\u5355\u8bcd\u51fa\u73b0\u9891\u7387\u7531\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c\u4e0d\u540c\u7684\u5355\u8bcd\u6709\u76f8\u540c\u51fa\u73b0\u9891\u7387\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k = 2\n<strong>\u8f93\u51fa:</strong> [&quot;i&quot;, &quot;love&quot;]\n<strong>\u89e3\u6790:</strong> &quot;i&quot; \u548c &quot;love&quot; \u4e3a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5747\u4e3a2\u6b21\u3002\n    \u6ce8\u610f\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f &quot;i&quot; \u5728 &quot;love&quot; \u4e4b\u524d\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k = 4\n<strong>\u8f93\u51fa:</strong> [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]\n<strong>\u89e3\u6790:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; \u548c &quot;day&quot; \u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u56db\u4e2a\u5355\u8bcd\uff0c\n    \u51fa\u73b0\u6b21\u6570\u4f9d\u6b21\u4e3a 4, 3, 2 \u548c 1 \u6b21\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u5047\u5b9a <em>k</em> \u603b\u4e3a\u6709\u6548\u503c\uff0c 1 &le; <em>k</em> &le; \u96c6\u5408\u5143\u7d20\u6570\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5355\u8bcd\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6269\u5c55\u7ec3\u4e60\uff1a</strong></p>\n\n<ol>\n\t<li>\u5c1d\u8bd5\u4ee5&nbsp;<em>O</em>(<em>n</em> log <em>k</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u548c&nbsp;<em>O</em>(<em>n</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u3002</li>\n</ol>\n", "tags_en": ["Heap", "Trie", "Hash Table"], "tags_cn": ["\u5806", "\u5b57\u5178\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> topKFrequent(vector<string>& words, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def topKFrequent(self, words, k):\n        \"\"\"\n        :type words: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** topKFrequent(char ** words, int wordsSize, int k, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> TopKFrequent(string[] words, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {number} k\n * @return {string[]}\n */\nvar topKFrequent = function(words, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {Integer} k\n# @return {String[]}\ndef top_k_frequent(words, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func topKFrequent(_ words: [String], _ k: Int) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func topKFrequent(words []string, k int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def topKFrequent(words: Array[String], k: Int): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun topKFrequent(words: Array<String>, k: Int): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn top_k_frequent(words: Vec<String>, k: i32) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $k\n     * @return String[]\n     */\n    function topKFrequent($words, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function topKFrequent(words: string[], k: number): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0693", "frontend_question_id": "0693", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-number-with-alternating-bits", "url_en": "https://leetcode.com/problems/binary-number-with-alternating-bits", "relative_path_cn": "/leetcode/0600-0699/0693.Binary%20Number%20with%20Alternating%20Bits/README.md", "relative_path_en": "/leetcode/0600-0699/0693.Binary%20Number%20with%20Alternating%20Bits/README_EN.md", "title_cn": "\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570", "title_en": "Binary Number with Alternating Bits", "question_title_slug": "binary-number-with-alternating-bits", "content_en": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The binary representation of 5 is: 101\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 7 is: 111.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 11 is: 1011.</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The binary representation of 10 is: 1010.</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u5b83\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\u5426\u603b\u662f 0\u30011 \u4ea4\u66ff\u51fa\u73b0\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u76f8\u90bb\u4e24\u4f4d\u7684\u6570\u5b57\u6c38\u4e0d\u76f8\u540c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 5\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\uff1a101\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 7\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>7 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\uff1a111.</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 11\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>11 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\uff1a1011.</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 10\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>10 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\uff1a1010.</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 3\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean hasAlternatingBits(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hasAlternatingBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool hasAlternatingBits(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool HasAlternatingBits(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar hasAlternatingBits = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef has_alternating_bits(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hasAlternatingBits(_ n: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hasAlternatingBits(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hasAlternatingBits(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hasAlternatingBits(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn has_alternating_bits(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function hasAlternatingBits($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hasAlternatingBits(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0694", "frontend_question_id": "0694", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/number-of-distinct-islands", "url_en": "https://leetcode.com/problems/number-of-distinct-islands", "relative_path_cn": "/leetcode/0600-0699/0694.Number%20of%20Distinct%20Islands/README.md", "relative_path_en": "/leetcode/0600-0699/0694.Number%20of%20Distinct%20Islands/README_EN.md", "title_cn": "\u4e0d\u540c\u5c9b\u5c7f\u7684\u6570\u91cf", "title_en": "Number of Distinct Islands", "question_title_slug": "number-of-distinct-islands", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Hash Table"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0695", "frontend_question_id": "0695", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-area-of-island", "url_en": "https://leetcode.com/problems/max-area-of-island", "relative_path_cn": "/leetcode/0600-0699/0695.Max%20Area%20of%20Island/README.md", "relative_path_en": "/leetcode/0600-0699/0695.Max%20Area%20of%20Island/README_EN.md", "title_cn": "\u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef", "title_en": "Max Area of Island", "question_title_slug": "max-area-of-island", "content_en": "<p>Given a non-empty 2D array <code>grid</code> of 0&#39;s and 1&#39;s, an <b>island</b> is a group of <code>1</code>&#39;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\r\n\r\n<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,0,<b>1</b>,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,<b>1</b>,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,0,0,0,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\r\n</pre>\r\nGiven the above grid, return <code>6</code>. Note the answer is not 11, because the island must be connected 4-directionally.\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n[[0,0,0,0,0,0,0,0]]</pre>\r\nGiven the above grid, return <code>0</code>.\r\n\r\n<p><b>Note:</b> The length of each dimension in the given <code>grid</code> does not exceed 50.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4e86\u4e00\u4e9b <code>0</code> \u548c <code>1</code> \u7684\u975e\u7a7a\u4e8c\u7ef4\u6570\u7ec4&nbsp;<code>grid</code> \u3002</p>\n\n<p>\u4e00\u4e2a&nbsp;<strong>\u5c9b\u5c7f</strong>&nbsp;\u662f\u7531\u4e00\u4e9b\u76f8\u90bb\u7684&nbsp;<code>1</code>&nbsp;(\u4ee3\u8868\u571f\u5730) \u6784\u6210\u7684\u7ec4\u5408\uff0c\u8fd9\u91cc\u7684\u300c\u76f8\u90bb\u300d\u8981\u6c42\u4e24\u4e2a <code>1</code> \u5fc5\u987b\u5728\u6c34\u5e73\u6216\u8005\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>grid</code> \u7684\u56db\u4e2a\u8fb9\u7f18\u90fd\u88ab <code>0</code>\uff08\u4ee3\u8868\u6c34\uff09\u5305\u56f4\u7740\u3002</p>\n\n<p>\u627e\u5230\u7ed9\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u3002(\u5982\u679c\u6ca1\u6709\u5c9b\u5c7f\uff0c\u5219\u8fd4\u56de\u9762\u79ef\u4e3a <code>0</code> \u3002)</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,0,<strong>1</strong>,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,0,0,0,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u7ed9\u5b9a\u77e9\u9635\u5e94\u8fd4\u56de&nbsp;<code>6</code>\u3002\u6ce8\u610f\u7b54\u6848\u4e0d\u5e94\u8be5\u662f <code>11</code> \uff0c\u56e0\u4e3a\u5c9b\u5c7f\u53ea\u80fd\u5305\u542b\u6c34\u5e73\u6216\u5782\u76f4\u7684\u56db\u4e2a\u65b9\u5411\u7684 <code>1</code> \u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>[[0,0,0,0,0,0,0,0]]</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u77e9\u9635, \u8fd4\u56de&nbsp;<code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:&nbsp;</strong>\u7ed9\u5b9a\u7684\u77e9\u9635<code>grid</code>&nbsp;\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u90fd\u4e0d\u8d85\u8fc7 50\u3002</p>\n", "tags_en": ["Depth-first Search", "Array"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxAreaOfIsland(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxAreaOfIsland(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_area_of_island(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxAreaOfIsland(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxAreaOfIsland(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxAreaOfIsland(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxAreaOfIsland(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_area_of_island(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxAreaOfIsland($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxAreaOfIsland(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0696", "frontend_question_id": "0696", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-binary-substrings", "url_en": "https://leetcode.com/problems/count-binary-substrings", "relative_path_cn": "/leetcode/0600-0699/0696.Count%20Binary%20Substrings/README.md", "relative_path_en": "/leetcode/0600-0699/0696.Count%20Binary%20Substrings/README_EN.md", "title_cn": "\u8ba1\u6570\u4e8c\u8fdb\u5236\u5b50\u4e32", "title_en": "Count Binary Substrings", "question_title_slug": "count-binary-substrings", "content_en": "<p>Give a string <code>s</code>, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. \r\n</p>\r\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"00110011\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\r\n<br>Notice that some of these substrings repeat and are counted the number of times they occur.\r\n<br>Also, \"00110011\" is not a valid substring because <b>all</b> the 0's (and 1's) are not grouped together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"10101\"\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>s.length</code> will be between 1 and 50,000.</li>\r\n<li><code>s</code> will only consist of \"0\" or \"1\" characters.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>s</code>\uff0c\u8ba1\u7b97\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u975e\u7a7a(\u8fde\u7eed)\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u91cf\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u67090\u548c\u6240\u67091\u90fd\u662f\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002</p>\n\n<p>\u91cd\u590d\u51fa\u73b0\u7684\u5b50\u4e32\u8981\u8ba1\u7b97\u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;00110011&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u67096\u4e2a\u5b50\u4e32\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7eed1\u548c0\uff1a&ldquo;0011&rdquo;\uff0c&ldquo;01&rdquo;\uff0c&ldquo;1100&rdquo;\uff0c&ldquo;10&rdquo;\uff0c&ldquo;0011&rdquo; \u548c &ldquo;01&rdquo;\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b\u91cd\u590d\u51fa\u73b0\u7684\u5b50\u4e32\u8981\u8ba1\u7b97\u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u53e6\u5916\uff0c&ldquo;00110011&rdquo;\u4e0d\u662f\u6709\u6548\u7684\u5b50\u4e32\uff0c\u56e0\u4e3a\u6240\u6709\u76840\uff08\u548c1\uff09\u6ca1\u6709\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;10101&quot;\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u67094\u4e2a\u5b50\u4e32\uff1a&ldquo;10&rdquo;\uff0c&ldquo;01&rdquo;\uff0c&ldquo;10&rdquo;\uff0c&ldquo;01&rdquo;\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7eed1\u548c0\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>s.length</code>&nbsp;\u57281\u523050,000\u4e4b\u95f4\u3002</li>\n\t<li><code>s</code>&nbsp;\u53ea\u5305\u542b&ldquo;0&rdquo;\u6216&ldquo;1&rdquo;\u5b57\u7b26\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countBinarySubstrings(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countBinarySubstrings(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countBinarySubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countBinarySubstrings(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountBinarySubstrings(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_binary_substrings(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countBinarySubstrings(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countBinarySubstrings(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countBinarySubstrings(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countBinarySubstrings(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_binary_substrings(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countBinarySubstrings($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countBinarySubstrings(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0697", "frontend_question_id": "0697", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/degree-of-an-array", "url_en": "https://leetcode.com/problems/degree-of-an-array", "relative_path_cn": "/leetcode/0600-0699/0697.Degree%20of%20an%20Array/README.md", "relative_path_en": "/leetcode/0600-0699/0697.Degree%20of%20an%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u7684\u5ea6", "title_en": "Degree of an Array", "question_title_slug": "degree-of-an-array", "content_en": "<p>Given a non-empty array of non-negative integers <code>nums</code>, the <b>degree</b> of this array is defined as the maximum frequency of any one of its elements.</p>\n\n<p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1,4,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code> will be between 1 and 50,000.</li>\n\t<li><code>nums[i]</code> will be an integer between 0 and 49,999.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e14\u53ea\u5305\u542b\u975e\u8d1f\u6570\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>, \u6570\u7ec4\u7684\u5ea6\u7684\u5b9a\u4e49\u662f\u6307\u6570\u7ec4\u91cc\u4efb\u4e00\u5143\u7d20\u51fa\u73b0\u9891\u6570\u7684\u6700\u5927\u503c\u3002</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u4e0e&nbsp;<code>nums</code>&nbsp;\u62e5\u6709\u76f8\u540c\u5927\u5c0f\u7684\u5ea6\u7684\u6700\u77ed\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2, 2, 3, 1]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u8f93\u5165\u6570\u7ec4\u7684\u5ea6\u662f2\uff0c\u56e0\u4e3a\u5143\u7d201\u548c2\u7684\u51fa\u73b0\u9891\u6570\u6700\u5927\uff0c\u5747\u4e3a2.\n\u8fde\u7eed\u5b50\u6570\u7ec4\u91cc\u9762\u62e5\u6709\u76f8\u540c\u5ea6\u7684\u6709\u5982\u4e0b\u6240\u793a:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n\u6700\u77ed\u8fde\u7eed\u5b50\u6570\u7ec4[2, 2]\u7684\u957f\u5ea6\u4e3a2\uff0c\u6240\u4ee5\u8fd4\u56de2.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,2,3,1,4,2]\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>&nbsp;\u57281\u523050,000\u533a\u95f4\u8303\u56f4\u5185\u3002</li>\n\t<li><code>nums[i]</code>&nbsp;\u662f\u4e00\u4e2a\u57280\u523049,999\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findShortestSubArray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findShortestSubArray(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindShortestSubArray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findShortestSubArray = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_shortest_sub_array(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findShortestSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findShortestSubArray(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findShortestSubArray(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findShortestSubArray(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_shortest_sub_array(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findShortestSubArray($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findShortestSubArray(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0698", "frontend_question_id": "0698", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets", "url_en": "https://leetcode.com/problems/partition-to-k-equal-sum-subsets", "relative_path_cn": "/leetcode/0600-0699/0698.Partition%20to%20K%20Equal%20Sum%20Subsets/README.md", "relative_path_en": "/leetcode/0600-0699/0698.Partition%20to%20K%20Equal%20Sum%20Subsets/README_EN.md", "title_cn": "\u5212\u5206\u4e3ak\u4e2a\u76f8\u7b49\u7684\u5b50\u96c6", "title_en": "Partition to K Equal Sum Subsets", "question_title_slug": "partition-to-k-equal-sum-subsets", "content_en": "<p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, find whether it&#39;s possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code>.</li>\r\n\t<li><code>0 &lt; nums[i] &lt; 10000</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;&nbsp;<code>nums</code> \u548c\u4e00\u4e2a\u6b63\u6574\u6570 <code>k</code>\uff0c\u627e\u51fa\u662f\u5426\u6709\u53ef\u80fd\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210 <code>k</code> \u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u5176\u603b\u548c\u90fd\u76f8\u7b49\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>\u8f93\u51fa\uff1a</strong> True\n<strong>\u8bf4\u660e\uff1a</strong> \u6709\u53ef\u80fd\u5c06\u5176\u5206\u6210 4 \u4e2a\u5b50\u96c6\uff085\uff09\uff0c\uff081,4\uff09\uff0c\uff082,3\uff09\uff0c\uff082,3\uff09\u7b49\u4e8e\u603b\u548c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\n</ul>\n", "tags_en": ["Recursion", "Dynamic Programming"], "tags_cn": ["\u9012\u5f52", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canPartitionKSubsets(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canPartitionKSubsets(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canPartitionKSubsets(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canPartitionKSubsets(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanPartitionKSubsets(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar canPartitionKSubsets = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef can_partition_k_subsets(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canPartitionKSubsets(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canPartitionKSubsets(nums []int, k int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canPartitionKSubsets(nums: Array[Int], k: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canPartitionKSubsets(nums: IntArray, k: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_partition_k_subsets(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canPartitionKSubsets($nums, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canPartitionKSubsets(nums: number[], k: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0699", "frontend_question_id": "0699", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/falling-squares", "url_en": "https://leetcode.com/problems/falling-squares", "relative_path_cn": "/leetcode/0600-0699/0699.Falling%20Squares/README.md", "relative_path_en": "/leetcode/0600-0699/0699.Falling%20Squares/README_EN.md", "title_cn": "\u6389\u843d\u7684\u65b9\u5757", "title_en": "Falling Squares", "question_title_slug": "falling-squares", "content_en": "<p>On an infinite number line (x-axis), we drop given squares in the order they are given.</p>\r\n\r\n<p>The <code>i</code>-th square dropped (<code>positions[i] = (left, side_length)</code>) is a square with the left-most point being <code>positions[i][0]</code> and sidelength <code>positions[i][1]</code>.</p>\r\n\r\n<p>The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.</p>\r\n\r\n<p>The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.</p>\r\n&nbsp;\r\n\r\n<p>Return a list <code>ans</code> of heights. Each height <code>ans[i]</code> represents the current highest height of any square we have dropped, after dropping squares represented by <code>positions[0], positions[1], ..., positions[i]</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1, 2], [2, 3], [6, 1]]\r\n<b>Output:</b> [2, 5, 5]\r\n<b>Explanation:</b>\r\n</pre>\r\n\r\n<p>After the first drop of <code>positions[0] = [1, 2]: _aa _aa ------- </code>The maximum height of any square is 2.</p>\r\n\r\n<p>After the second drop of <code>positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- </code>The maximum height of any square is 5. The larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge.</p>\r\n\r\n<p>After the third drop of <code>positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- </code>The maximum height of any square is still 5. Thus, we return an answer of <code>[2, 5, 5]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n&nbsp;\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[100, 100], [200, 100]]\r\n<b>Output:</b> [100, 100]\r\n<b>Explanation:</b> Adjacent squares don&#39;t get stuck prematurely - only their bottom edge can stick to surfaces.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code>.</li>\r\n\t<li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li>\r\n\t<li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5728\u65e0\u9650\u957f\u7684\u6570\u8f74\uff08\u5373 x \u8f74\uff09\u4e0a\uff0c\u6211\u4eec\u6839\u636e\u7ed9\u5b9a\u7684\u987a\u5e8f\u653e\u7f6e\u5bf9\u5e94\u7684\u6b63\u65b9\u5f62\u65b9\u5757\u3002</p>\n\n<p>\u7b2c <code>i</code> \u4e2a\u6389\u843d\u7684\u65b9\u5757\uff08<code>positions[i] = (left, side_length)</code>\uff09\u662f\u6b63\u65b9\u5f62\uff0c\u5176\u4e2d&nbsp;<code>left \u8868\u793a\u8be5\u65b9\u5757\u6700\u5de6\u8fb9\u7684\u70b9\u4f4d\u7f6e(positions[i][0])\uff0cside_length \u8868\u793a\u8be5\u65b9\u5757\u7684\u8fb9\u957f(positions[i][1])\u3002</code></p>\n\n<p>\u6bcf\u4e2a\u65b9\u5757\u7684\u5e95\u90e8\u8fb9\u7f18\u5e73\u884c\u4e8e\u6570\u8f74\uff08\u5373 x \u8f74\uff09\uff0c\u5e76\u4e14\u4ece\u4e00\u4e2a\u6bd4\u76ee\u524d\u6240\u6709\u7684\u843d\u5730\u65b9\u5757\u66f4\u9ad8\u7684\u9ad8\u5ea6\u6389\u843d\u800c\u4e0b\u3002\u5728\u4e0a\u4e00\u4e2a\u65b9\u5757\u7ed3\u675f\u6389\u843d\uff0c\u5e76\u4fdd\u6301\u9759\u6b62\u540e\uff0c\u624d\u5f00\u59cb\u6389\u843d\u65b0\u65b9\u5757\u3002</p>\n\n<p>\u65b9\u5757\u7684\u5e95\u8fb9\u5177\u6709\u975e\u5e38\u5927\u7684\u7c98\u6027\uff0c\u5e76\u5c06\u4fdd\u6301\u56fa\u5b9a\u5728\u5b83\u4eec\u6240\u63a5\u89e6\u7684\u4efb\u4f55\u957f\u5ea6\u8868\u9762\u4e0a\uff08\u65e0\u8bba\u662f\u6570\u8f74\u8fd8\u662f\u5176\u4ed6\u65b9\u5757\uff09\u3002\u90bb\u63a5\u6389\u843d\u7684\u8fb9\u4e0d\u4f1a\u8fc7\u65e9\u5730\u7c98\u5408\u5728\u4e00\u8d77\uff0c<code>\u56e0\u4e3a\u53ea\u6709\u5e95\u8fb9\u624d\u5177\u6709\u7c98\u6027\u3002</code></p>\n\n<p>&nbsp;</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u5806\u53e0\u9ad8\u5ea6\u5217\u8868&nbsp;<code>ans</code> \u3002\u6bcf\u4e00\u4e2a\u5806\u53e0\u9ad8\u5ea6&nbsp;<code>ans[i]</code>&nbsp;\u8868\u793a\u5728\u901a\u8fc7&nbsp;<code>positions[0], positions[1], ..., positions[i]</code>&nbsp;\u8868\u793a\u7684\u65b9\u5757\u6389\u843d\u7ed3\u675f\u540e\uff0c\u76ee\u524d\u6240\u6709\u5df2\u7ecf\u843d\u7a33\u7684\u65b9\u5757\u5806\u53e0\u7684\u6700\u9ad8\u9ad8\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1, 2], [2, 3], [6, 1]]\n<strong>\u8f93\u51fa:</strong> [2, 5, 5]\n<strong>\u89e3\u91ca:\n\n</strong>\u7b2c\u4e00\u4e2a\u65b9\u5757 <code>positions[0] = [1, 2] </code>\u6389\u843d\uff1a\n<code>_aa\n_aa\n-------\n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a 2 \u3002\n\n\u7b2c\u4e8c\u4e2a\u65b9\u5757 <code>positions[1] = [2, 3] </code>\u6389\u843d\uff1a\n<code>__aaa\n__aaa\n__aaa\n_aa__\n_aa__\n--------------\n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a5\u3002\n\u5927\u7684\u65b9\u5757\u4fdd\u6301\u5728\u8f83\u5c0f\u7684\u65b9\u5757\u7684\u9876\u90e8\uff0c\u4e0d\u8bba\u5b83\u7684\u91cd\u5fc3\u5728\u54ea\u91cc\uff0c\u56e0\u4e3a\u65b9\u5757\u7684\u5e95\u90e8\u8fb9\u7f18\u6709\u975e\u5e38\u5927\u7684\u7c98\u6027\u3002\n\n\u7b2c\u4e09\u4e2a\u65b9\u5757 <code>positions[1] = [6, 1] </code>\u6389\u843d\uff1a\n<code>__aaa\n__aaa\n__aaa\n_aa\n_aa___a\n-------------- \n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a5\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u8fd4\u56de\u7ed3\u679c<code>[2, 5, 5]\u3002</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[100, 100], [200, 100]]\n<strong>\u8f93\u51fa:</strong> [100, 100]\n<strong>\u89e3\u91ca:</strong> \u76f8\u90bb\u7684\u65b9\u5757\u4e0d\u4f1a\u8fc7\u65e9\u5730\u5361\u4f4f\uff0c\u53ea\u6709\u5b83\u4eec\u7684\u5e95\u90e8\u8fb9\u7f18\u624d\u80fd\u7c98\u5728\u8868\u9762\u4e0a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code>.</li>\n\t<li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li>\n\t<li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Segment Tree", "Ordered Map"], "tags_cn": ["\u7ebf\u6bb5\u6811", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> fallingSquares(vector<vector<int>>& positions) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> fallingSquares(int[][] positions) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fallingSquares(int** positions, int positionsSize, int* positionsColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FallingSquares(int[][] positions) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} positions\n * @return {number[]}\n */\nvar fallingSquares = function(positions) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} positions\n# @return {Integer[]}\ndef falling_squares(positions)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func fallingSquares(_ positions: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fallingSquares(positions [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fallingSquares(positions: Array[Array[Int]]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fallingSquares(positions: Array<IntArray>): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn falling_squares(positions: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $positions\n     * @return Integer[]\n     */\n    function fallingSquares($positions) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fallingSquares(positions: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}]}