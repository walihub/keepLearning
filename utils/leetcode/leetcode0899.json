{"leetcode": [{"question_id": "0818", "frontend_question_id": "0800", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/similar-rgb-color", "url_en": "https://leetcode.com/problems/similar-rgb-color", "relative_path_cn": "/leetcode/0800-0899/0800.Similar%20RGB%20Color/README.md", "relative_path_en": "/leetcode/0800-0899/0800.Similar%20RGB%20Color/README_EN.md", "title_cn": "\u76f8\u4f3c RGB \u989c\u8272", "title_en": "Similar RGB Color", "question_title_slug": "similar-rgb-color", "content_en": null, "content_cn": null, "tags_en": ["Math", "String"], "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0819", "frontend_question_id": "0801", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-swaps-to-make-sequences-increasing", "url_en": "https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing", "relative_path_cn": "/leetcode/0800-0899/0801.Minimum%20Swaps%20To%20Make%20Sequences%20Increasing/README.md", "relative_path_en": "/leetcode/0800-0899/0801.Minimum%20Swaps%20To%20Make%20Sequences%20Increasing/README_EN.md", "title_cn": "\u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570", "title_en": "Minimum Swaps To Make Sequences Increasing", "question_title_slug": "minimum-swaps-to-make-sequences-increasing", "content_en": "<p>We have two integer sequences <code>A</code> and <code>B</code> of the same non-zero length.</p>\r\n\r\n<p>We are allowed to swap elements <code>A[i]</code> and <code>B[i]</code>.&nbsp; Note that both elements are in the same index position in their respective sequences.</p>\r\n\r\n<p>At the end of some number of swaps, <code>A</code> and <code>B</code> are both strictly increasing.&nbsp; (A sequence is <em>strictly increasing</em> if and only if <code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>.)</p>\r\n\r\n<p>Given A and B, return the minimum number of swaps to make both sequences strictly increasing.&nbsp; It is guaranteed that the given input always makes it possible.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> A = [1,3,5,4], B = [1,2,3,7]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>\r\nSwap A[3] and B[3].  Then the sequences are:\r\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\r\nwhich are both strictly increasing.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A, B</code> are arrays with the same length, and that length will be in the range <code>[1, 1000]</code>.</li>\r\n\t<li><code>A[i], B[i]</code> are integer values in the range <code>[0, 2000]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u4e14\u4e0d\u4e3a\u7a7a\u7684\u6574\u578b\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362&nbsp;<code>A[i]</code>&nbsp;\u548c&nbsp;<code>B[i]</code>&nbsp;\u7684\u5143\u7d20\u3002\u6ce8\u610f\u8fd9\u4e24\u4e2a\u5143\u7d20\u5728\u5404\u81ea\u7684\u5e8f\u5217\u4e2d\u5e94\u8be5\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u5728\u4ea4\u6362\u8fc7\u4e00\u4e9b\u5143\u7d20\u4e4b\u540e\uff0c\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u90fd\u5e94\u8be5\u662f\u4e25\u683c\u9012\u589e\u7684\uff08\u6570\u7ec4\u4e25\u683c\u9012\u589e\u7684\u6761\u4ef6\u4ec5\u4e3a<code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>\uff09\u3002</p>\n\n<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8bf7\u8fd4\u56de\u4f7f\u5f97\u4e24\u4e2a\u6570\u7ec4\u5747\u4fdd\u6301\u4e25\u683c\u9012\u589e\u72b6\u6001\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\u5047\u8bbe\u7ed9\u5b9a\u7684\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> A = [1,3,5,4], B = [1,2,3,7]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca: </strong>\n\u4ea4\u6362 A[3] \u548c B[3] \u540e\uff0c\u4e24\u4e2a\u6570\u7ec4\u5982\u4e0b:\nA = [1, 3, 5, 7] \uff0c B = [1, 2, 3, 4]\n\u4e24\u4e2a\u6570\u7ec4\u5747\u4e3a\u4e25\u683c\u9012\u589e\u7684\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A, B</code>&nbsp;\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u603b\u662f\u76f8\u7b49\u7684\uff0c\u4e14\u957f\u5ea6\u7684\u8303\u56f4\u4e3a&nbsp;<code>[1, 1000]</code>\u3002</li>\n\t<li><code>A[i], B[i]</code>&nbsp;\u5747\u4e3a&nbsp;<code>[0, 2000]</code>\u533a\u95f4\u5185\u7684\u6574\u6570\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSwap(vector<int>& A, vector<int>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSwap(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSwap(self, A: List[int], B: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minSwap(int* A, int ASize, int* B, int BSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSwap(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number}\n */\nvar minSwap = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer}\ndef min_swap(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSwap(_ A: [Int], _ B: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minSwap(A []int, B []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSwap(A: Array[Int], B: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSwap(A: IntArray, B: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_swap(a: Vec<i32>, b: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer\n     */\n    function minSwap($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSwap(A: number[], B: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0820", "frontend_question_id": "0802", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-eventual-safe-states", "url_en": "https://leetcode.com/problems/find-eventual-safe-states", "relative_path_cn": "/leetcode/0800-0899/0802.Find%20Eventual%20Safe%20States/README.md", "relative_path_en": "/leetcode/0800-0899/0802.Find%20Eventual%20Safe%20States/README_EN.md", "title_cn": "\u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001", "title_en": "Find Eventual Safe States", "question_title_slug": "find-eventual-safe-states", "content_en": "<p>We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.</p>\n\n<p>We define a starting node to be <strong>safe</strong> if we must eventually walk to a terminal node. More specifically, there is a natural number <code>k</code>, so that we must have stopped at a terminal node in less than <code>k</code> steps for <strong>any choice of where to walk</strong>.</p>\n\n<p>Return <em>an array containing all the safe nodes of the graph</em>. The answer should be sorted in <strong>ascending</strong> order.</p>\n\n<p>The directed graph has <code>n</code> nodes with labels from <code>0</code> to <code>n - 1</code>, where <code>n</code> is the length of <code>graph</code>. The graph is given in the following form: <code>graph[i]</code> is a list of labels <code>j</code> such that <code>(i, j)</code> is a directed edge of the graph, going from node <code>i</code> to node <code>j</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height: 171px; width: 600px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>Output:</strong> [2,4,5,6]\n<strong>Explanation:</strong> The given graph is shown above.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n<strong>Output:</strong> [4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= graph[i].legnth &lt;= n</code></li>\n\t<li><code>graph[i]</code> is sorted in a strictly increasing order.</li>\n\t<li>The graph may contain self-loops.</li>\n\t<li>The number of edges in the graph will be in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n</ul>\n", "content_cn": "<p>\u5728\u6709\u5411\u56fe\u4e2d, \u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9\u548c\u6bcf\u4e2a\u8f6c\u5411\u5904\u5f00\u59cb, \u6cbf\u7740\u56fe\u7684\u6709\u5411\u8fb9\u8d70\u3002 \u5982\u679c\u6211\u4eec\u5230\u8fbe\u7684\u8282\u70b9\u662f\u7ec8\u70b9 (\u5373\u5b83\u6ca1\u6709\u8fde\u51fa\u7684\u6709\u5411\u8fb9), \u6211\u4eec\u505c\u6b62\u3002</p>\n\n<p>\u73b0\u5728, \u5982\u679c\u6211\u4eec\u6700\u540e\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8d77\u59cb\u8282\u70b9\u662f<em>\u6700\u7ec8\u5b89\u5168</em>\u7684\u3002 \u66f4\u5177\u4f53\u5730\u8bf4, \u5b58\u5728\u4e00\u4e2a\u81ea\u7136\u6570 <code>K</code>,&nbsp; \u65e0\u8bba\u9009\u62e9\u4ece\u54ea\u91cc\u5f00\u59cb\u884c\u8d70, \u6211\u4eec\u8d70\u4e86\u4e0d\u5230 <code>K</code> \u6b65\u540e\u5fc5\u80fd\u505c\u6b62\u5728\u4e00\u4e2a\u7ec8\u70b9\u3002</p>\n\n<p>\u54ea\u4e9b\u8282\u70b9\u6700\u7ec8\u662f\u5b89\u5168\u7684\uff1f \u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002</p>\n\n<p>\u8be5\u6709\u5411\u56fe\u6709 <code>N</code> \u4e2a\u8282\u70b9\uff0c\u6807\u7b7e\u4e3a <code>0, 1, ..., N-1</code>, \u5176\u4e2d <code>N</code> \u662f&nbsp;<code>graph</code>&nbsp;\u7684\u8282\u70b9\u6570.&nbsp; \u56fe\u4ee5\u4ee5\u4e0b\u7684\u5f62\u5f0f\u7ed9\u51fa: <code>graph[i]</code> \u662f\u8282\u70b9 <code>j</code> \u7684\u4e00\u4e2a\u5217\u8868\uff0c\u6ee1\u8db3 <code>(i, j)</code> \u662f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,5,6]\n\u8fd9\u91cc\u662f\u4e0a\u56fe\u7684\u793a\u610f\u56fe\u3002\n\n</pre>\n\n<p><img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height:86px; width:300px\" /></p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>graph</code> \u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 <code>10000</code>.</li>\n\t<li>\u56fe\u7684\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 <code>32000</code>.</li>\n\t<li>\u6bcf\u4e2a <code>graph[i]</code> \u88ab\u6392\u5e8f\u4e3a\u4e0d\u540c\u7684\u6574\u6570\u5217\u8868\uff0c \u5728\u533a\u95f4 <code>[0, graph.length - 1]</code>&nbsp;\u4e2d\u9009\u53d6\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def eventualSafeNodes(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* eventualSafeNodes(int** graph, int graphSize, int* graphColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> EventualSafeNodes(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number[]}\n */\nvar eventualSafeNodes = function(graph) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer[]}\ndef eventual_safe_nodes(graph)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func eventualSafeNodes(_ graph: [[Int]]) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func eventualSafeNodes(graph [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def eventualSafeNodes(graph: Array[Array[Int]]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun eventualSafeNodes(graph: Array<IntArray>): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn eventual_safe_nodes(graph: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer[]\n     */\n    function eventualSafeNodes($graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function eventualSafeNodes(graph: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0821", "frontend_question_id": "0803", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bricks-falling-when-hit", "url_en": "https://leetcode.com/problems/bricks-falling-when-hit", "relative_path_cn": "/leetcode/0800-0899/0803.Bricks%20Falling%20When%20Hit/README.md", "relative_path_en": "/leetcode/0800-0899/0803.Bricks%20Falling%20When%20Hit/README_EN.md", "title_cn": "\u6253\u7816\u5757", "title_en": "Bricks Falling When Hit", "question_title_slug": "bricks-falling-when-hit", "content_en": "<p>You are given an <code>m x n</code> binary <code>grid</code>, where each <code>1</code> represents a brick and <code>0</code> represents an empty space. A brick is <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>It is directly connected to the top of the grid, or</li>\n\t<li>At least one other brick in its four adjacent cells is <strong>stable</strong>.</li>\n</ul>\n\n<p>You are also given an array <code>hits</code>, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location <code>hits[i] = (row<sub>i</sub>, col<sub>i</sub>)</code>. The brick on that location&nbsp;(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will <strong>fall</strong>. Once a brick falls, it is <strong>immediately</strong> erased from the <code>grid</code> (i.e., it does not land on other stable bricks).</p>\n\n<p>Return <em>an array </em><code>result</code><em>, where each </em><code>result[i]</code><em> is the number of bricks that will <strong>fall</strong> after the </em><code>i<sup>th</sup></code><em> erasure is applied.</em></p>\n\n<p><strong>Note</strong> that an erasure may refer to a location with no brick, and if it does, no bricks drop.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n<strong>Output:</strong> [2]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [<u>1</u>,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,<u>1</u>,<u>1</u>,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n<strong>Output:</strong> [0,0]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [1,<u>1</u>,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [<u>1</u>,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= hits.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>hits[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i&nbsp;</sub>&lt;= m - 1</code></li>\n\t<li><code>0 &lt;=&nbsp;y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li>All <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are unique.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u7ec4\u5305\u542b1\u548c0\u7684\u7f51\u683c\uff1b\u5176\u4e2d1\u8868\u793a\u7816\u5757\u3002&nbsp;\u5f53\u4e14\u4ec5\u5f53\u4e00\u5757\u7816\u76f4\u63a5\u8fde\u63a5\u5230\u7f51\u683c\u7684\u9876\u90e8\uff0c\u6216\u8005\u5b83\u81f3\u5c11\u6709\u4e00\u5757\u76f8\u90bb\uff084&nbsp;\u4e2a\u65b9\u5411\u4e4b\u4e00\uff09\u7816\u5757\u4e0d\u4f1a\u6389\u843d\u65f6\uff0c\u5b83\u624d\u4e0d\u4f1a\u843d\u4e0b\u3002</p>\n\n<p>\u6211\u4eec\u4f1a\u4f9d\u6b21\u6d88\u9664\u4e00\u4e9b\u7816\u5757\u3002\u6bcf\u5f53\u6211\u4eec\u6d88\u9664&nbsp;(i, j) \u4f4d\u7f6e\u65f6\uff0c \u5bf9\u5e94\u4f4d\u7f6e\u7684\u7816\u5757\uff08\u82e5\u5b58\u5728\uff09\u4f1a\u6d88\u5931\uff0c\u7136\u540e\u5176\u4ed6\u7684\u7816\u5757\u53ef\u80fd\u56e0\u4e3a\u8fd9\u4e2a\u6d88\u9664\u800c\u843d\u4e0b\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u6bcf\u6b21\u6d88\u9664\u64cd\u4f5c\u5bf9\u5e94\u843d\u4e0b\u7684\u7816\u5757\u6570\u76ee\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>\ngrid = [[1,0,0,0],[1,1,1,0]]\nhits = [[1,0]]\n<strong>\u8f93\u51fa:</strong> [2]\n<strong>\u89e3\u91ca: </strong>\n\u5982\u679c\u6211\u4eec\u6d88\u9664(1, 0)\u4f4d\u7f6e\u7684\u7816\u5757, \u5728(1, 1) \u548c(1, 2) \u7684\u7816\u5757\u4f1a\u843d\u4e0b\u3002\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u8fd4\u56de2\u3002</pre>\n\n<pre><strong>\u793a\u4f8b 2\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>\ngrid = [[1,0,0,0],[1,1,0,0]]\nhits = [[1,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[0,0]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f53\u6211\u4eec\u6d88\u9664(1, 0)\u7684\u7816\u5757\u65f6\uff0c(1, 1)\u7684\u7816\u5757\u5df2\u7ecf\u7531\u4e8e\u4e0a\u4e00\u6b65\u6d88\u9664\u800c\u6d88\u5931\u4e86\u3002\u6240\u4ee5\u6bcf\u6b21\u6d88\u9664\u64cd\u4f5c\u4e0d\u4f1a\u9020\u6210\u7816\u5757\u843d\u4e0b\u3002\u6ce8\u610f(1, 0)\u7816\u5757\u4e0d\u4f1a\u8bb0\u4f5c\u843d\u4e0b\u7684\u7816\u5757\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u7f51\u683c\u7684\u884c\u6570\u548c\u5217\u6570\u7684\u8303\u56f4\u662f[1, 200]\u3002</li>\n\t<li>\u6d88\u9664\u7684\u6570\u5b57\u4e0d\u4f1a\u8d85\u8fc7\u7f51\u683c\u7684\u533a\u57df\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u7684\u6d88\u9664\u90fd\u4e0d\u76f8\u540c\uff0c\u5e76\u4e14\u4f4d\u4e8e\u7f51\u683c\u7684\u5185\u90e8\u3002</li>\n\t<li>\u4e00\u4e2a\u6d88\u9664\u7684\u4f4d\u7f6e\u53ef\u80fd\u6ca1\u6709\u7816\u5757\uff0c\u5982\u679c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u4e0d\u4f1a\u6709\u7816\u5757\u843d\u4e0b\u3002</li>\n</ul>\n", "tags_en": ["Union Find"], "tags_cn": ["\u5e76\u67e5\u96c6"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> hitBricks(vector<vector<int>>& grid, vector<vector<int>>& hits) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] hitBricks(int[][] grid, int[][] hits) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hitBricks(self, grid, hits):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type hits: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* hitBricks(int** grid, int gridSize, int* gridColSize, int** hits, int hitsSize, int* hitsColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] HitBricks(int[][] grid, int[][] hits) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @param {number[][]} hits\n * @return {number[]}\n */\nvar hitBricks = function(grid, hits) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @param {Integer[][]} hits\n# @return {Integer[]}\ndef hit_bricks(grid, hits)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hitBricks(_ grid: [[Int]], _ hits: [[Int]]) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hitBricks(grid [][]int, hits [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hitBricks(grid: Array[Array[Int]], hits: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hitBricks(grid: Array<IntArray>, hits: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn hit_bricks(grid: Vec<Vec<i32>>, hits: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer[][] $hits\n     * @return Integer[]\n     */\n    function hitBricks($grid, $hits) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hitBricks(grid: number[][], hits: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0822", "frontend_question_id": "0804", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/unique-morse-code-words", "url_en": "https://leetcode.com/problems/unique-morse-code-words", "relative_path_cn": "/leetcode/0800-0899/0804.Unique%20Morse%20Code%20Words/README.md", "relative_path_en": "/leetcode/0800-0899/0804.Unique%20Morse%20Code%20Words/README_EN.md", "title_cn": "\u552f\u4e00\u6469\u5c14\u65af\u5bc6\u7801\u8bcd", "title_en": "Unique Morse Code Words", "question_title_slug": "unique-morse-code-words", "content_en": "<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.</p>\n\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n\n<pre>\n[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\n\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, &quot;cab&quot; can be written as &quot;-.-..--...&quot;, (which is the concatenation &quot;-.-.&quot; + &quot;.-&quot; + &quot;<code>-...</code>&quot;). We&#39;ll call such a concatenation, the transformation&nbsp;of a word.</p>\n\n<p>Return the number of different transformations among all words we have.</p>\n\n<pre>\n<strong>Example:</strong>\n<strong>Input:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nThe transformation of each word is:\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\n\nThere are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;.\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The length of <code>words</code> will be at most <code>100</code>.</li>\n\t<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\n\t<li><code>words[i]</code> will only consist of lowercase letters.</li>\n</ul>\n", "content_cn": "<p>\u56fd\u9645\u6469\u5c14\u65af\u5bc6\u7801\u5b9a\u4e49\u4e00\u79cd\u6807\u51c6\u7f16\u7801\u65b9\u5f0f\uff0c\u5c06\u6bcf\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u7531\u4e00\u7cfb\u5217\u70b9\u548c\u77ed\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c&nbsp;\u6bd4\u5982: <code>&quot;a&quot;</code> \u5bf9\u5e94 <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> \u5bf9\u5e94 <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> \u5bf9\u5e94 <code>&quot;-.-.&quot;</code>, \u7b49\u7b49\u3002</p>\n\n<p>\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6240\u670926\u4e2a\u82f1\u6587\u5b57\u6bcd\u5bf9\u5e94\u6469\u5c14\u65af\u5bc6\u7801\u8868\u5982\u4e0b\uff1a</p>\n\n<pre>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5355\u8bcd\u53ef\u4ee5\u5199\u6210\u6bcf\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u6469\u5c14\u65af\u5bc6\u7801\u7684\u7ec4\u5408\u3002\u4f8b\u5982\uff0c&quot;cab&quot; \u53ef\u4ee5\u5199\u6210 &quot;-.-..--...&quot;\uff0c(\u5373 &quot;-.-.&quot; + &quot;.-&quot; + &quot;-...&quot; \u5b57\u7b26\u4e32\u7684\u7ed3\u5408)\u3002\u6211\u4eec\u5c06\u8fd9\u6837\u4e00\u4e2a\u8fde\u63a5\u8fc7\u7a0b\u79f0\u4f5c\u5355\u8bcd\u7ffb\u8bd1\u3002</p>\n\n<p>\u8fd4\u56de\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u8bcd\u4e0d\u540c\u5355\u8bcd\u7ffb\u8bd1\u7684\u6570\u91cf\u3002</p>\n\n<pre><strong>\u4f8b\u5982:</strong>\n<strong>\u8f93\u5165:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\n\u5404\u5355\u8bcd\u7ffb\u8bd1\u5982\u4e0b:\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\n\n\u5171\u6709 2 \u79cd\u4e0d\u540c\u7ffb\u8bd1, &quot;--...-.&quot; \u548c &quot;--...--.&quot;.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u5355\u8bcd\u5217\u8868<code>words</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 <code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd&nbsp;<code>words[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[1, 12]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd&nbsp;<code>words[i]</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int uniqueMorseRepresentations(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int uniqueMorseRepresentations(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def uniqueMorseRepresentations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint uniqueMorseRepresentations(char ** words, int wordsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int UniqueMorseRepresentations(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar uniqueMorseRepresentations = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer}\ndef unique_morse_representations(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func uniqueMorseRepresentations(_ words: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func uniqueMorseRepresentations(words []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def uniqueMorseRepresentations(words: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun uniqueMorseRepresentations(words: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn unique_morse_representations(words: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function uniqueMorseRepresentations($words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function uniqueMorseRepresentations(words: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0823", "frontend_question_id": "0805", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/split-array-with-same-average", "url_en": "https://leetcode.com/problems/split-array-with-same-average", "relative_path_cn": "/leetcode/0800-0899/0805.Split%20Array%20With%20Same%20Average/README.md", "relative_path_en": "/leetcode/0800-0899/0805.Split%20Array%20With%20Same%20Average/README_EN.md", "title_cn": "\u6570\u7ec4\u7684\u5747\u503c\u5206\u5272", "title_en": "Split Array With Same Average", "question_title_slug": "split-array-with-same-average", "content_en": "<p>In a given integer array A, we must move every element of A to either list B or list C. (B and C initially start empty.)</p>\r\n\r\n<p>Return true if and only if after such a move, it is possible that the average value of B is equal to the average value of C, and B and C are both non-empty.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\n[1,2,3,4,5,6,7,8]\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have the average of 4.5.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>A</code> will be in the range&nbsp;[1, 30].</li>\r\n\t<li><code>A[i]</code> will be in the range of <code>[0, 10000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u7684\u6574\u6570\u6570\u7ec4 A \uff0c\u6211\u4eec\u8981\u5c06 A\u6570\u7ec4 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u79fb\u52a8\u5230 B\u6570\u7ec4 \u6216\u8005 C\u6570\u7ec4\u4e2d\u3002\uff08B\u6570\u7ec4\u548cC\u6570\u7ec4\u5728\u5f00\u59cb\u7684\u65f6\u5019\u90fd\u4e3a\u7a7a\uff09</p>\n\n<p>\u8fd4\u56de<code>true</code> \uff0c\u5f53\u4e14\u4ec5\u5f53\u5728\u6211\u4eec\u7684\u5b8c\u6210\u8fd9\u6837\u7684\u79fb\u52a8\u540e\uff0c\u53ef\u4f7f\u5f97B\u6570\u7ec4\u7684\u5e73\u5747\u503c\u548cC\u6570\u7ec4\u7684\u5e73\u5747\u503c\u76f8\u7b49\uff0c\u5e76\u4e14B\u6570\u7ec4\u548cC\u6570\u7ec4\u90fd\u4e0d\u4e3a\u7a7a\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \n[1,2,3,4,5,6,7,8]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u5206\u5272\u4e3a [1,4,5,8] \u548c [2,3,6,7], \u4ed6\u4eec\u7684\u5e73\u5747\u503c\u90fd\u662f4.5\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u6570\u7ec4\u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 30]</code>.</li>\n\t<li><code>A[i]</code> \u7684\u6570\u636e\u8303\u56f4\u4e3a <code>[0, 10000]</code>.</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool splitArraySameAverage(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean splitArraySameAverage(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def splitArraySameAverage(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def splitArraySameAverage(self, A: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool splitArraySameAverage(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool SplitArraySameAverage(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar splitArraySameAverage = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Boolean}\ndef split_array_same_average(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func splitArraySameAverage(_ A: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func splitArraySameAverage(A []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def splitArraySameAverage(A: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun splitArraySameAverage(A: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn split_array_same_average(a: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Boolean\n     */\n    function splitArraySameAverage($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function splitArraySameAverage(A: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0824", "frontend_question_id": "0806", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-lines-to-write-string", "url_en": "https://leetcode.com/problems/number-of-lines-to-write-string", "relative_path_cn": "/leetcode/0800-0899/0806.Number%20of%20Lines%20To%20Write%20String/README.md", "relative_path_en": "/leetcode/0800-0899/0806.Number%20of%20Lines%20To%20Write%20String/README_EN.md", "title_cn": "\u5199\u5b57\u7b26\u4e32\u9700\u8981\u7684\u884c\u6570", "title_en": "Number of Lines To Write String", "question_title_slug": "number-of-lines-to-write-string", "content_en": "<p>You are given a string <code>s</code> of lowercase English letters and an array <code>widths</code> denoting <strong>how many pixels wide</strong> each lowercase English letter is. Specifically, <code>widths[0]</code> is the width of <code>&#39;a&#39;</code>, <code>widths[1]</code> is the width of <code>&#39;b&#39;</code>, and so on.</p>\n\n<p>You are trying to write <code>s</code> across several lines, where <strong>each line is no longer than </strong><code>100</code><strong> pixels</strong>. Starting at the beginning of <code>s</code>, write as many letters on the first line such that the total width does not exceed <code>100</code> pixels. Then, from where you stopped in <code>s</code>, continue writing as many letters as you can on the second line. Continue this process until you have written all of <code>s</code>.</p>\n\n<p>Return <em>an array </em><code>result</code><em> of length 2 where:</em></p>\n\n<ul>\n\t<li><code>result[0]</code><em> is the total number of lines.</em></li>\n\t<li><code>result[1]</code><em> is the width of the last line in pixels.</em></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>Output:</strong> [3,60]\n<strong>Explanation:</strong> You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = &quot;bbbcccdddaaa&quot;\n<strong>Output:</strong> [2,4]\n<strong>Explanation:</strong> You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>widths.length == 26</code></li>\n\t<li><code>2 &lt;= widths[i] &lt;= 10</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u8981\u628a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 <code>S</code>&nbsp;\u4ece\u5de6\u5230\u53f3\u5199\u5230\u6bcf\u4e00\u884c\u4e0a\uff0c\u6bcf\u4e00\u884c\u7684\u6700\u5927\u5bbd\u5ea6\u4e3a100\u4e2a\u5355\u4f4d\uff0c\u5982\u679c\u6211\u4eec\u5728\u5199\u67d0\u4e2a\u5b57\u6bcd\u7684\u65f6\u5019\u4f1a\u4f7f\u8fd9\u884c\u8d85\u8fc7\u4e86100 \u4e2a\u5355\u4f4d\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e2a\u5b57\u6bcd\u5199\u5230\u4e0b\u4e00\u884c\u3002\u6211\u4eec\u7ed9\u5b9a\u4e86\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>widths</code>&nbsp;\uff0c\u8fd9\u4e2a\u6570\u7ec4&nbsp;widths[0] \u4ee3\u8868 &#39;a&#39; \u9700\u8981\u7684\u5355\u4f4d\uff0c&nbsp;widths[1] \u4ee3\u8868 &#39;b&#39; \u9700\u8981\u7684\u5355\u4f4d\uff0c...\uff0c&nbsp;widths[25] \u4ee3\u8868 &#39;z&#39; \u9700\u8981\u7684\u5355\u4f4d\u3002</p>\n\n<p>\u73b0\u5728\u56de\u7b54\u4e24\u4e2a\u95ee\u9898\uff1a\u81f3\u5c11\u591a\u5c11\u884c\u80fd\u653e\u4e0b<code>S</code>\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u884c\u4f7f\u7528\u7684\u5bbd\u5ea6\u662f\u591a\u5c11\u4e2a\u5355\u4f4d\uff1f\u5c06\u4f60\u7684\u7b54\u6848\u4f5c\u4e3a\u957f\u5ea6\u4e3a2\u7684\u6574\u6570\u5217\u8868\u8fd4\u56de\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa:</strong> [3, 60]\n<strong>\u89e3\u91ca: \n</strong>\u6240\u6709\u7684\u5b57\u7b26\u62e5\u6709\u76f8\u540c\u7684\u5360\u7528\u5355\u4f4d10\u3002\u6240\u4ee5\u4e66\u5199\u6240\u6709\u768426\u4e2a\u5b57\u6bcd\uff0c\n\u6211\u4eec\u9700\u89812\u4e2a\u6574\u884c\u548c\u5360\u752860\u4e2a\u5355\u4f4d\u7684\u4e00\u884c\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;bbbcccdddaaa&quot;\n<strong>\u8f93\u51fa:</strong> [2, 4]\n<strong>\u89e3\u91ca: \n</strong>\u9664\u53bb\u5b57\u6bcd&#39;a&#39;\u6240\u6709\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\u5355\u4f4d10\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 &quot;bbbcccdddaa&quot; \u5c06\u4f1a\u8986\u76d6 9 * 10 + 2 * 4 = 98 \u4e2a\u5355\u4f4d.\n\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd &#39;a&#39; \u5c06\u4f1a\u88ab\u5199\u5230\u7b2c\u4e8c\u884c\uff0c\u56e0\u4e3a\u7b2c\u4e00\u884c\u53ea\u5269\u4e0b2\u4e2a\u5355\u4f4d\u4e86\u3002\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u7b54\u6848\u662f2\u884c\uff0c\u7b2c\u4e8c\u884c\u67094\u4e2a\u5355\u4f4d\u5bbd\u5ea6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8:</strong></p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code> \u7684\u957f\u5ea6\u5728&nbsp;[1, 1000] \u7684\u8303\u56f4\u3002</li>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>widths</code> \u662f\u957f\u5ea6\u4e3a&nbsp;<code>26</code>\u7684\u6570\u7ec4\u3002</li>\n\t<li><code>widths[i]</code>&nbsp;\u503c\u7684\u8303\u56f4\u5728&nbsp;<code>[2, 10]</code>\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> numberOfLines(vector<int>& widths, string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] numberOfLines(int[] widths, String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfLines(self, widths, s):\n        \"\"\"\n        :type widths: List[int]\n        :type s: str\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberOfLines(int* widths, int widthsSize, char * s, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] NumberOfLines(int[] widths, string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} widths\n * @param {string} s\n * @return {number[]}\n */\nvar numberOfLines = function(widths, s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} widths\n# @param {String} s\n# @return {Integer[]}\ndef number_of_lines(widths, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfLines(widths []int, s string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfLines(widths: Array[Int], s: String): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfLines(widths: IntArray, s: String): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $widths\n     * @param String $s\n     * @return Integer[]\n     */\n    function numberOfLines($widths, $s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfLines(widths: number[], s: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0825", "frontend_question_id": "0807", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline", "url_en": "https://leetcode.com/problems/max-increase-to-keep-city-skyline", "relative_path_cn": "/leetcode/0800-0899/0807.Max%20Increase%20to%20Keep%20City%20Skyline/README.md", "relative_path_en": "/leetcode/0800-0899/0807.Max%20Increase%20to%20Keep%20City%20Skyline/README_EN.md", "title_cn": "\u4fdd\u6301\u57ce\u5e02\u5929\u9645\u7ebf", "title_en": "Max Increase to Keep City Skyline", "question_title_slug": "max-increase-to-keep-city-skyline", "content_en": "<p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts&nbsp;can be different for different buildings). Height&nbsp;0 is considered to be a&nbsp;building&nbsp;as well.&nbsp;</p>\r\n\r\n<p>At the end, the &quot;skyline&quot; when viewed from all four directions&nbsp;of the grid, i.e.&nbsp;top, bottom, left, and right,&nbsp;must be the same as the&nbsp;skyline of the original grid. A city&#39;s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See&nbsp;the following example.</p>\r\n\r\n<p>What is the maximum total sum that the height of the buildings can be increased?</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\n<strong>Output:</strong> 35\r\n<strong>Explanation:</strong> \r\nThe grid is:\r\n[ [3, 0, 8, 4], \r\n  [2, 4, 5, 7],\r\n  [9, 2, 6, 3],\r\n  [0, 3, 1, 0] ]\r\n\r\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\r\nThe skyline viewed from left or right is: [8, 7, 9, 3]\r\n\r\nThe grid after increasing the height of buildings without affecting skylines is:\r\n\r\ngridNew = [ [8, 4, 8, 7],\r\n            [7, 4, 7, 7],\r\n            [9, 4, 8, 7],\r\n            [3, 3, 3, 3] ]\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li>\r\n\t<li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li>\r\n\t<li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5728\u4e8c\u7ef4\u6570\u7ec4<code>grid</code>\u4e2d\uff0c<code>grid[i][j]</code>\u4ee3\u8868\u4f4d\u4e8e\u67d0\u5904\u7684\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002 \u6211\u4eec\u88ab\u5141\u8bb8\u589e\u52a0\u4efb\u4f55\u6570\u91cf\uff08\u4e0d\u540c\u5efa\u7b51\u7269\u7684\u6570\u91cf\u53ef\u80fd\u4e0d\u540c\uff09\u7684\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002 \u9ad8\u5ea6 0 \u4e5f\u88ab\u8ba4\u4e3a\u662f\u5efa\u7b51\u7269\u3002</p>\n\n<p>\u6700\u540e\uff0c\u4ece\u65b0\u6570\u7ec4\u7684\u6240\u6709\u56db\u4e2a\u65b9\u5411\uff08\u5373\u9876\u90e8\uff0c\u5e95\u90e8\uff0c\u5de6\u4fa7\u548c\u53f3\u4fa7\uff09\u89c2\u770b\u7684&ldquo;\u5929\u9645\u7ebf&rdquo;\u5fc5\u987b\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u5929\u9645\u7ebf\u76f8\u540c\u3002 \u57ce\u5e02\u7684\u5929\u9645\u7ebf\u662f\u4ece\u8fdc\u5904\u89c2\u770b\u65f6\uff0c\u7531\u6240\u6709\u5efa\u7b51\u7269\u5f62\u6210\u7684\u77e9\u5f62\u7684\u5916\u90e8\u8f6e\u5ed3\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002</p>\n\n<p>\u5efa\u7b51\u7269\u9ad8\u5ea6\u53ef\u4ee5\u589e\u52a0\u7684\u6700\u5927\u603b\u548c\u662f\u591a\u5c11\uff1f</p>\n\n<pre>\n<strong>\u4f8b\u5b50\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n<strong>\u8f93\u51fa\uff1a</strong> 35\n<strong>\u89e3\u91ca\uff1a</strong> \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n\u4ece\u6570\u7ec4\u7ad6\u76f4\u65b9\u5411\uff08\u5373\u9876\u90e8\uff0c\u5e95\u90e8\uff09\u770b&ldquo;\u5929\u9645\u7ebf&rdquo;\u662f\uff1a[9, 4, 8, 7]\n\u4ece\u6c34\u5e73\u6c34\u5e73\u65b9\u5411\uff08\u5373\u5de6\u4fa7\uff0c\u53f3\u4fa7\uff09\u770b&ldquo;\u5929\u9645\u7ebf&rdquo;\u662f\uff1a[8, 7, 9, 3]\n\n\u5728\u4e0d\u5f71\u54cd\u5929\u9645\u7ebf\u7684\u60c5\u51b5\u4e0b\u5bf9\u5efa\u7b51\u7269\u8fdb\u884c\u589e\u9ad8\u540e\uff0c\u65b0\u6570\u7ec4\u5982\u4e0b\uff1a\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>\u3002</li>\n\t<li>&nbsp;<code>grid[i][j]</code> \u7684\u9ad8\u5ea6\u8303\u56f4\u662f\uff1a <code>[0, 100]</code>\u3002</li>\n\t<li>\u4e00\u5ea7\u5efa\u7b51\u7269\u5360\u636e\u4e00\u4e2a<code>grid[i][j]</code>\uff1a\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u662f <code>1 x 1 x grid[i][j]</code> \u7684\u957f\u65b9\u4f53\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxIncreaseKeepingSkyline(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxIncreaseKeepingSkyline(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxIncreaseKeepingSkyline(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxIncreaseKeepingSkyline = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_increase_keeping_skyline(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxIncreaseKeepingSkyline(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxIncreaseKeepingSkyline(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxIncreaseKeepingSkyline(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxIncreaseKeepingSkyline(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_increase_keeping_skyline(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxIncreaseKeepingSkyline($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxIncreaseKeepingSkyline(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0826", "frontend_question_id": "0808", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/soup-servings", "url_en": "https://leetcode.com/problems/soup-servings", "relative_path_cn": "/leetcode/0800-0899/0808.Soup%20Servings/README.md", "relative_path_en": "/leetcode/0800-0899/0808.Soup%20Servings/README_EN.md", "title_cn": "\u5206\u6c64", "title_en": "Soup Servings", "question_title_slug": "soup-servings", "content_en": "<p>There are two types of soup: type A and type B. Initially we have <code>N</code> ml of each type of soup. There are four kinds of operations:</p>\r\n\r\n<ol>\r\n\t<li>Serve&nbsp;100 ml of soup A and 0 ml of soup B</li>\r\n\t<li>Serve&nbsp;75 ml of soup A and 25&nbsp;ml of soup B</li>\r\n\t<li>Serve 50 ml of soup A and 50 ml of soup B</li>\r\n\t<li>Serve 25&nbsp;ml of soup A and 75&nbsp;ml of soup B</li>\r\n</ol>\r\n\r\n<p>When we serve some soup, we give it to someone and we no longer have it.&nbsp; Each turn,&nbsp;we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve&nbsp;as much as we can.&nbsp; We stop once we no longer have some quantity of both types of soup.</p>\r\n\r\n<p>Note that we do not have the operation where all 100 ml&#39;s of soup B are used first.&nbsp;&nbsp;</p>\r\n\r\n<p>Return the probability that soup A will be empty&nbsp;first, plus half the probability that A and B become empty at the same time.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> N = 50\r\n<strong>Output:</strong> 0.625\r\n<strong>Explanation:</strong> \r\nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= N &lt;= 10^9</code>.&nbsp;</li>\r\n\t<li>Answers within&nbsp;<code>10^-6</code>&nbsp;of the true value will be accepted as correct.</li>\r\n</ul>\r\n", "content_cn": "<p>\u6709&nbsp;A&nbsp;\u548c&nbsp;B \u4e24\u79cd\u7c7b\u578b\u7684\u6c64\u3002\u4e00\u5f00\u59cb\u6bcf\u79cd\u7c7b\u578b\u7684\u6c64\u6709&nbsp;<code>N</code>&nbsp;\u6beb\u5347\u3002\u6709\u56db\u79cd\u5206\u914d\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>\u63d0\u4f9b 100ml \u7684\u6c64A \u548c 0ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 75ml \u7684\u6c64A \u548c 25ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 50ml \u7684\u6c64A \u548c 50ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 25ml \u7684\u6c64A \u548c 75ml \u7684\u6c64B\u3002</li>\n</ol>\n\n<p>\u5f53\u6211\u4eec\u628a\u6c64\u5206\u914d\u7ed9\u67d0\u4eba\u4e4b\u540e\uff0c\u6c64\u5c31\u6ca1\u6709\u4e86\u3002\u6bcf\u4e2a\u56de\u5408\uff0c\u6211\u4eec\u5c06\u4ece\u56db\u79cd\u6982\u7387\u540c\u4e3a0.25\u7684\u64cd\u4f5c\u4e2d\u8fdb\u884c\u5206\u914d\u9009\u62e9\u3002\u5982\u679c\u6c64\u7684\u5269\u4f59\u91cf\u4e0d\u8db3\u4ee5\u5b8c\u6210\u67d0\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u5206\u914d\u3002\u5f53\u4e24\u79cd\u7c7b\u578b\u7684\u6c64\u90fd\u5206\u914d\u5b8c\u65f6\uff0c\u505c\u6b62\u64cd\u4f5c\u3002</p>\n\n<p>\u6ce8\u610f\u4e0d\u5b58\u5728\u5148\u5206\u914d100 ml\u6c64B\u7684\u64cd\u4f5c\u3002</p>\n\n<p>\u9700\u8981\u8fd4\u56de\u7684\u503c\uff1a&nbsp;\u6c64A\u5148\u5206\u914d\u5b8c\u7684\u6982\u7387 + \u6c64A\u548c\u6c64B\u540c\u65f6\u5206\u914d\u5b8c\u7684\u6982\u7387 / 2\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> N = 50\n<strong>\u8f93\u51fa:</strong> 0.625\n<strong>\u89e3\u91ca:\n</strong>\u5982\u679c\u6211\u4eec\u9009\u62e9\u524d\u4e24\u4e2a\u64cd\u4f5c<strong>\uff0c</strong>A\u5c06\u9996\u5148\u53d8\u4e3a\u7a7a\u3002\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u64cd\u4f5c\uff0cA\u548cB\u4f1a\u540c\u65f6\u53d8\u4e3a\u7a7a\u3002\u5bf9\u4e8e\u7b2c\u56db\u4e2a\u64cd\u4f5c\uff0cB\u5c06\u9996\u5148\u53d8\u4e3a\u7a7a\u3002<strong>\n</strong>\u6240\u4ee5A\u53d8\u4e3a\u7a7a\u7684\u603b\u6982\u7387\u52a0\u4e0aA\u548cB\u540c\u65f6\u53d8\u4e3a\u7a7a\u7684\u6982\u7387\u7684\u4e00\u534a\u662f 0.25 *(1 + 1 + 0.5 + 0)= 0.625\u3002\n</pre>\n\n<p><strong>\u6ce8\u91ca: </strong></p>\n\n<ul>\n\t<li><code>0 &lt;= N &lt;= 10^9</code>\u3002</li>\n\t<li>\n\t<p>\u8fd4\u56de\u503c\u5728&nbsp;<code>10^-6</code>&nbsp;\u7684\u8303\u56f4\u5c06\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002</p>\n\t</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double soupServings(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double soupServings(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def soupServings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def soupServings(self, N: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble soupServings(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double SoupServings(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar soupServings = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Float}\ndef soup_servings(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func soupServings(_ N: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func soupServings(N int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def soupServings(N: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun soupServings(N: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn soup_servings(n: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Float\n     */\n    function soupServings($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function soupServings(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0827", "frontend_question_id": "0809", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/expressive-words", "url_en": "https://leetcode.com/problems/expressive-words", "relative_path_cn": "/leetcode/0800-0899/0809.Expressive%20Words/README.md", "relative_path_en": "/leetcode/0800-0899/0809.Expressive%20Words/README_EN.md", "title_cn": "\u60c5\u611f\u4e30\u5bcc\u7684\u6587\u5b57", "title_en": "Expressive Words", "question_title_slug": "expressive-words", "content_en": "<p>Sometimes people repeat letters to represent extra feeling, such as &quot;hello&quot; -&gt; &quot;heeellooo&quot;, &quot;hi&quot; -&gt; &quot;hiiii&quot;.&nbsp; In these strings like &quot;heeellooo&quot;, we have <em>groups</em> of adjacent letters that are all the same:&nbsp; &quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;.</p>\n\n<p>For some given string <code>S</code>, a query word is <em>stretchy</em> if it can be made to be equal to <code>S</code> by any&nbsp;number of&nbsp;applications of the following <em>extension</em> operation: choose a group consisting of&nbsp;characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is 3 or more.</p>\n\n<p>For example, starting with &quot;hello&quot;, we could do an extension on the group &quot;o&quot; to get &quot;hellooo&quot;, but we cannot get &quot;helloo&quot; since the group &quot;oo&quot; has size less than 3.&nbsp; Also, we could do another extension like &quot;ll&quot; -&gt; &quot;lllll&quot; to get &quot;helllllooo&quot;.&nbsp; If <code>S = &quot;helllllooo&quot;</code>, then the query word &quot;hello&quot; would be stretchy because of these two extension operations:&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>.</p>\n\n<p>Given a list of query words, return the number of words that are stretchy.&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>Example:</strong>\n<strong>Input:</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nWe can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.\nWe can&#39;t extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>.</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>.</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>.</li>\n\t<li><code>S</code> and all words in <code>words</code>&nbsp;consist only of&nbsp;lowercase letters</li>\n</ul>\n", "content_cn": "<p>\u6709\u65f6\u5019\u4eba\u4eec\u4f1a\u7528\u91cd\u590d\u5199\u4e00\u4e9b\u5b57\u6bcd\u6765\u8868\u793a\u989d\u5916\u7684\u611f\u53d7\uff0c\u6bd4\u5982 <code>&quot;hello&quot; -&gt; &quot;heeellooo&quot;</code>, <code>&quot;hi&quot; -&gt; &quot;hiii&quot;</code>\u3002\u6211\u4eec\u5c06\u76f8\u90bb\u5b57\u6bcd\u90fd\u76f8\u540c\u7684\u4e00\u4e32\u5b57\u7b26\u5b9a\u4e49\u4e3a\u76f8\u540c\u5b57\u6bcd\u7ec4\uff0c\u4f8b\u5982\uff1a&quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;\u3002</p>\n\n<p>\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 S \uff0c\u5982\u679c\u53e6\u4e00\u4e2a\u5355\u8bcd\u80fd\u591f\u901a\u8fc7\u5c06\u4e00\u4e9b\u5b57\u6bcd\u7ec4\u6269\u5f20\u4ece\u800c\u4f7f\u5176\u548c S \u76f8\u540c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5355\u8bcd\u5b9a\u4e49\u4e3a\u53ef\u6269\u5f20\u7684\uff08stretchy\uff09\u3002\u6269\u5f20\u64cd\u4f5c\u5b9a\u4e49\u5982\u4e0b\uff1a\u9009\u62e9\u4e00\u4e2a\u5b57\u6bcd\u7ec4\uff08\u5305\u542b\u5b57\u6bcd&nbsp;<code>c</code>&nbsp;\uff09\uff0c\u7136\u540e\u5f80\u5176\u4e2d\u6dfb\u52a0\u76f8\u540c\u7684\u5b57\u6bcd&nbsp;<code>c</code>&nbsp;\u4f7f\u5176\u957f\u5ea6\u8fbe\u5230 3 \u6216\u4ee5\u4e0a\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5&nbsp;&quot;hello&quot; \u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b57\u6bcd\u7ec4&nbsp;&quot;o&quot; \u6269\u5f20\u5f97\u5230 &quot;hellooo&quot;\uff0c\u4f46\u662f\u65e0\u6cd5\u4ee5\u540c\u6837\u7684\u65b9\u6cd5\u5f97\u5230 &quot;helloo&quot; \u56e0\u4e3a\u5b57\u6bcd\u7ec4 &quot;oo&quot; \u957f\u5ea6\u5c0f\u4e8e&nbsp;3\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u53e6\u4e00\u79cd\u6269\u5f20 &quot;ll&quot; -&gt; &quot;lllll&quot; \u4ee5\u83b7\u5f97&nbsp;&quot;helllllooo&quot;\u3002\u5982\u679c&nbsp;<code>S = &quot;helllllooo&quot;</code>\uff0c\u90a3\u4e48\u67e5\u8be2\u8bcd&nbsp;&quot;hello&quot; \u662f\u53ef\u6269\u5f20\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5bf9\u5b83\u6267\u884c\u8fd9\u4e24\u79cd\u6269\u5f20\u64cd\u4f5c\u4f7f\u5f97&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u7ec4\u67e5\u8be2\u5355\u8bcd\uff0c\u8f93\u51fa\u5176\u4e2d\u53ef\u6269\u5f20\u7684\u5355\u8bcd\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca</strong>\uff1a\n\u6211\u4eec\u80fd\u901a\u8fc7\u6269\u5f20 &quot;hello&quot; \u7684 &quot;e&quot; \u548c &quot;o&quot; \u6765\u5f97\u5230 &quot;heeellooo&quot;\u3002\n\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u6269\u5f20 &quot;helo&quot; \u6765\u5f97\u5230 &quot;heeellooo&quot; \u56e0\u4e3a &quot;ll&quot; \u7684\u957f\u5ea6\u5c0f\u4e8e 3 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>\u3002</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>\u3002</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u548c\u6240\u6709\u5728&nbsp;<code>words</code>&nbsp;\u4e2d\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int expressiveWords(string S, vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int expressiveWords(String S, String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def expressiveWords(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def expressiveWords(self, S: str, words: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint expressiveWords(char * S, char ** words, int wordsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ExpressiveWords(string S, string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar expressiveWords = function(S, words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef expressive_words(s, words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func expressiveWords(_ S: String, _ words: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func expressiveWords(S string, words []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def expressiveWords(S: String, words: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun expressiveWords(S: String, words: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn expressive_words(s: String, words: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String[] $words\n     * @return Integer\n     */\n    function expressiveWords($S, $words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function expressiveWords(S: string, words: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0828", "frontend_question_id": "0810", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/chalkboard-xor-game", "url_en": "https://leetcode.com/problems/chalkboard-xor-game", "relative_path_cn": "/leetcode/0800-0899/0810.Chalkboard%20XOR%20Game/README.md", "relative_path_en": "/leetcode/0800-0899/0810.Chalkboard%20XOR%20Game/README_EN.md", "title_cn": "\u9ed1\u677f\u5f02\u6216\u6e38\u620f", "title_en": "Chalkboard XOR Game", "question_title_slug": "chalkboard-xor-game", "content_en": "<p>We are given non-negative integers nums[i] which are written on a chalkboard.&nbsp; Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.&nbsp; If erasing a number causes&nbsp;the bitwise XOR of all the elements of the chalkboard to become&nbsp;0, then that player loses.&nbsp; (Also, we&#39;ll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)</p>\r\n\r\n<p>Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.</p>\r\n\r\n<p>Return True if and only if Alice wins the game, assuming both players play optimally.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> nums = [1, 1, 2]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nAlice has two choices: erase 1 or erase 2. \r\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \r\nIf Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code>.&nbsp;</li>\r\n\t<li><code>0 &lt;= nums[i] &lt;= 2^16</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u4e00\u4e2a\u9ed1\u677f\u4e0a\u5199\u7740\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 nums[i] \u3002\u5c0f\u7ea2\u548c\u5c0f\u660e\u8f6e\u6d41\u4ece\u9ed1\u677f\u4e0a\u64e6\u6389\u4e00\u4e2a\u6570\u5b57\uff0c\u5c0f\u7ea2\u5148\u624b\u3002\u5982\u679c\u64e6\u9664\u4e00\u4e2a\u6570\u5b57\u540e\uff0c\u5269\u4f59\u7684\u6240\u6709\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\u7b49\u4e8e 0 \u7684\u8bdd\uff0c\u5f53\u524d\u73a9\u5bb6\u6e38\u620f\u5931\u8d25\u3002&nbsp;(\u53e6\u5916\uff0c\u5982\u679c\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\uff0c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u5b83\u672c\u8eab\uff1b\u5982\u679c\u65e0\u6570\u5b57\u5269\u4f59\uff0c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7ed3\u679c\u4e3a&nbsp;0\u3002\uff09</p>\n\n<p>\u6362\u79cd\u8bf4\u6cd5\u5c31\u662f\uff0c\u8f6e\u5230\u67d0\u4e2a\u73a9\u5bb6\u65f6\uff0c\u5982\u679c\u5f53\u524d\u9ed1\u677f\u4e0a\u6240\u6709\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e 0\uff0c\u8fd9\u4e2a\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u6bcf\u6b65\u90fd\u4f7f\u7528\u6700\u4f18\u89e3\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c0f\u7ea2\u83b7\u80dc\u65f6\u8fd4\u56de <code>true</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1, 1, 2]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \n\u5c0f\u7ea2\u6709\u4e24\u4e2a\u9009\u62e9: \u64e6\u6389\u6570\u5b57 1 \u6216 2\u3002\n\u5982\u679c\u64e6\u6389 1, \u6570\u7ec4\u53d8\u6210 [1, 2]\u3002\u5269\u4f59\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u5f97\u5230 1 XOR 2 = 3\u3002\u90a3\u4e48\u5c0f\u660e\u53ef\u4ee5\u64e6\u6389\u4efb\u610f\u6570\u5b57\uff0c\u56e0\u4e3a\u5c0f\u7ea2\u4f1a\u6210\u4e3a\u64e6\u6389\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4eba\uff0c\u5979\u603b\u662f\u4f1a\u8f93\u3002\n\u5982\u679c\u5c0f\u7ea2\u64e6\u6389 2\uff0c\u90a3\u4e48\u6570\u7ec4\u53d8\u6210[1, 1]\u3002\u5269\u4f59\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u5f97\u5230 1 XOR 1 = 0\u3002\u5c0f\u7ea2\u4ecd\u7136\u4f1a\u8f93\u6389\u6e38\u620f\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2^16</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool xorGame(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean xorGame(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def xorGame(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def xorGame(self, nums: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool xorGame(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool XorGame(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar xorGame = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef xor_game(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func xorGame(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func xorGame(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def xorGame(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun xorGame(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn xor_game(nums: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function xorGame($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function xorGame(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0829", "frontend_question_id": "0811", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subdomain-visit-count", "url_en": "https://leetcode.com/problems/subdomain-visit-count", "relative_path_cn": "/leetcode/0800-0899/0811.Subdomain%20Visit%20Count/README.md", "relative_path_en": "/leetcode/0800-0899/0811.Subdomain%20Visit%20Count/README_EN.md", "title_cn": "\u5b50\u57df\u540d\u8bbf\u95ee\u8ba1\u6570", "title_en": "Subdomain Visit Count", "question_title_slug": "subdomain-visit-count", "content_en": "<p>A website domain like &quot;discuss.leetcode.com&quot; consists of various subdomains. At the top level, we have &quot;com&quot;, at the next level, we have &quot;leetcode.com&quot;, and at the lowest level, &quot;discuss.leetcode.com&quot;. When we visit a domain like &quot;discuss.leetcode.com&quot;, we will also visit the parent domains &quot;leetcode.com&quot; and &quot;com&quot; implicitly.</p>\r\n\r\n<p>Now, call a &quot;count-paired domain&quot; to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be &quot;9001 discuss.leetcode.com&quot;.</p>\r\n\r\n<p>We are given a list <code>cpdomains</code> of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\n[&quot;9001 discuss.leetcode.com&quot;]\r\n<strong>Output:</strong> \r\n[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]\r\n<strong>Explanation:</strong> \r\nWe only have one website domain: &quot;discuss.leetcode.com&quot;. As discussed above, the subdomain &quot;leetcode.com&quot; and &quot;com&quot; will also be visited. So they will all be visited 9001 times.\r\n\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\n[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\r\n<strong>Output:</strong> \r\n[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\r\n<strong>Explanation:</strong> \r\nWe will visit &quot;google.mail.com&quot; 900 times, &quot;yahoo.com&quot; 50 times, &quot;intel.mail.com&quot; once and &quot;wiki.org&quot; 5 times. For the subdomains, we will visit &quot;mail.com&quot; 900 + 1 = 901 times, &quot;com&quot; 900 + 50 + 1 = 951 times, and &quot;org&quot; 5 times.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>cpdomains</code> will not exceed&nbsp;<code>100</code>.&nbsp;</li>\r\n\t<li>The length of each domain name will not exceed <code>100</code>.</li>\r\n\t<li>Each address will have either 1 or 2 &quot;.&quot; characters.</li>\r\n\t<li>The input count&nbsp;in any count-paired domain will not exceed <code>10000</code>.</li>\r\n\t<li>The answer output can be returned in any order.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4e00\u4e2a\u7f51\u7ad9\u57df\u540d\uff0c\u5982&quot;discuss.leetcode.com&quot;\uff0c\u5305\u542b\u4e86\u591a\u4e2a\u5b50\u57df\u540d\u3002\u4f5c\u4e3a\u9876\u7ea7\u57df\u540d\uff0c\u5e38\u7528\u7684\u6709&quot;com&quot;\uff0c\u4e0b\u4e00\u7ea7\u5219\u6709&quot;leetcode.com&quot;\uff0c\u6700\u4f4e\u7684\u4e00\u7ea7\u4e3a&quot;discuss.leetcode.com&quot;\u3002\u5f53\u6211\u4eec\u8bbf\u95ee\u57df\u540d&quot;discuss.leetcode.com&quot;\u65f6\uff0c\u4e5f\u540c\u65f6\u8bbf\u95ee\u4e86\u5176\u7236\u57df\u540d&quot;leetcode.com&quot;\u4ee5\u53ca\u9876\u7ea7\u57df\u540d&nbsp;&quot;com&quot;\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u8bbf\u95ee\u6b21\u6570\u548c\u57df\u540d\u7684\u7ec4\u5408\uff0c\u8981\u6c42\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2a\u57df\u540d\u88ab\u8bbf\u95ee\u7684\u6b21\u6570\u3002\u5176\u683c\u5f0f\u4e3a\u8bbf\u95ee\u6b21\u6570+\u7a7a\u683c+\u5730\u5740\uff0c\u4f8b\u5982\uff1a&quot;9001 discuss.leetcode.com&quot;\u3002</p>\n\n<p>\u63a5\u4e0b\u6765\u4f1a\u7ed9\u51fa\u4e00\u7ec4\u8bbf\u95ee\u6b21\u6570\u548c\u57df\u540d\u7ec4\u5408\u7684\u5217\u8868<code>cpdomains</code>&nbsp;\u3002\u8981\u6c42\u89e3\u6790\u51fa\u6240\u6709\u57df\u540d\u7684\u8bbf\u95ee\u6b21\u6570\uff0c\u8f93\u51fa\u683c\u5f0f\u548c\u8f93\u5165\u683c\u5f0f\u76f8\u540c\uff0c\u4e0d\u9650\u5b9a\u5148\u540e\u987a\u5e8f\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \n[&quot;9001 discuss.leetcode.com&quot;]\n<strong>\u8f93\u51fa:</strong> \n[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]\n<strong>\u8bf4\u660e:</strong> \n\u4f8b\u5b50\u4e2d\u4ec5\u5305\u542b\u4e00\u4e2a\u7f51\u7ad9\u57df\u540d\uff1a&quot;discuss.leetcode.com&quot;\u3002\u6309\u7167\u524d\u6587\u5047\u8bbe\uff0c\u5b50\u57df\u540d&quot;leetcode.com&quot;\u548c&quot;com&quot;\u90fd\u4f1a\u88ab\u8bbf\u95ee\uff0c\u6240\u4ee5\u5b83\u4eec\u90fd\u88ab\u8bbf\u95ee\u4e869001\u6b21\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2\n\u8f93\u5165:</strong> \n[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\n<strong>\u8f93\u51fa:</strong> \n[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\n<strong>\u8bf4\u660e:</strong> \n\u6309\u7167\u5047\u8bbe\uff0c\u4f1a\u8bbf\u95ee&quot;google.mail.com&quot; 900\u6b21\uff0c&quot;yahoo.com&quot; 50\u6b21\uff0c&quot;intel.mail.com&quot; 1\u6b21\uff0c&quot;wiki.org&quot; 5\u6b21\u3002\n\u800c\u5bf9\u4e8e\u7236\u57df\u540d\uff0c\u4f1a\u8bbf\u95ee&quot;mail.com&quot; 900+1 = 901\u6b21\uff0c&quot;com&quot; 900 + 50 + 1 = 951\u6b21\uff0c\u548c &quot;org&quot; 5 \u6b21\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\u4e8b\u9879\uff1a</strong></p>\n\n<ul>\n\t<li>&nbsp;<code>cpdomains</code>&nbsp;\u7684\u957f\u5ea6\u5c0f\u4e8e&nbsp;<code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u57df\u540d\u7684\u957f\u5ea6\u5c0f\u4e8e<code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u57df\u540d\u5730\u5740\u5305\u542b\u4e00\u4e2a\u6216\u4e24\u4e2a&quot;.&quot;\u7b26\u53f7\u3002</li>\n\t<li>\u8f93\u5165\u4e2d\u4efb\u610f\u4e00\u4e2a\u57df\u540d\u7684\u8bbf\u95ee\u6b21\u6570\u90fd\u5c0f\u4e8e<code>10000</code>\u3002</li>\n</ul>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> subdomainVisits(vector<string>& cpdomains) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> subdomainVisits(String[] cpdomains) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def subdomainVisits(self, cpdomains):\n        \"\"\"\n        :type cpdomains: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** subdomainVisits(char ** cpdomains, int cpdomainsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> SubdomainVisits(string[] cpdomains) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} cpdomains\n * @return {string[]}\n */\nvar subdomainVisits = function(cpdomains) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} cpdomains\n# @return {String[]}\ndef subdomain_visits(cpdomains)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func subdomainVisits(_ cpdomains: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func subdomainVisits(cpdomains []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def subdomainVisits(cpdomains: Array[String]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun subdomainVisits(cpdomains: Array<String>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn subdomain_visits(cpdomains: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $cpdomains\n     * @return String[]\n     */\n    function subdomainVisits($cpdomains) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function subdomainVisits(cpdomains: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0830", "frontend_question_id": "0812", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-triangle-area", "url_en": "https://leetcode.com/problems/largest-triangle-area", "relative_path_cn": "/leetcode/0800-0899/0812.Largest%20Triangle%20Area/README.md", "relative_path_en": "/leetcode/0800-0899/0812.Largest%20Triangle%20Area/README_EN.md", "title_cn": "\u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef", "title_en": "Largest Triangle Area", "question_title_slug": "largest-triangle-area", "content_en": "<p>You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe five points are show in the figure below. The red triangle is the largest.\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /></p>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\r\n\t<li>No points will be duplicated.</li>\r\n\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\r\n\t<li>Answers within&nbsp;<code>10^-6</code>&nbsp;of the true value will be accepted as correct.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u5305\u542b\u591a\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u4ece\u5176\u4e2d\u53d6\u4e09\u4e2a\u70b9\u7ec4\u6210\u4e09\u89d2\u5f62\uff0c\u8fd4\u56de\u80fd\u7ec4\u6210\u7684\u6700\u5927\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u8fd9\u4e94\u4e2a\u70b9\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7ec4\u6210\u7684\u6a59\u8272\u4e09\u89d2\u5f62\u662f\u6700\u5927\u7684\uff0c\u9762\u79ef\u4e3a2\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /></p>\n\n<p><strong>\u6ce8\u610f: </strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\n\t<li>\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u70b9\u3002</li>\n\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\n\t<li>\u7ed3\u679c\u8bef\u5dee\u503c\u5728&nbsp;<code>10^-6</code>&nbsp;\u4ee5\u5185\u90fd\u8ba4\u4e3a\u662f\u6b63\u786e\u7b54\u6848\u3002</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double largestTriangleArea(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double largestTriangleArea(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble largestTriangleArea(int** points, int pointsSize, int* pointsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double LargestTriangleArea(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar largestTriangleArea = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Float}\ndef largest_triangle_area(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestTriangleArea(_ points: [[Int]]) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestTriangleArea(points [][]int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestTriangleArea(points: Array[Array[Int]]): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestTriangleArea(points: Array<IntArray>): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_triangle_area(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function largestTriangleArea($points) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestTriangleArea(points: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0831", "frontend_question_id": "0813", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-sum-of-averages", "url_en": "https://leetcode.com/problems/largest-sum-of-averages", "relative_path_cn": "/leetcode/0800-0899/0813.Largest%20Sum%20of%20Averages/README.md", "relative_path_en": "/leetcode/0800-0899/0813.Largest%20Sum%20of%20Averages/README_EN.md", "title_cn": "\u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4", "title_en": "Largest Sum of Averages", "question_title_slug": "largest-sum-of-averages", "content_en": "<p>We partition a row of numbers <code>A</code>&nbsp;into at most <code>K</code> adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?</p>\r\n\r\n<p>Note that our partition must use every number in A, and that scores are not necessarily integers.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nA = [9,1,2,3,9]\r\nK = 3\r\n<strong>Output:</strong> 20\r\n<strong>Explanation:</strong> \r\nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\r\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\r\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\r\n\t<li>Answers within <code>10^-6</code> of the correct answer will be accepted as correct.</li>\r\n</ul>\r\n", "content_cn": "<p>\u6211\u4eec\u5c06\u7ed9\u5b9a\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u5206\u6210&nbsp;<code>K</code>&nbsp;\u4e2a\u76f8\u90bb\u7684\u975e\u7a7a\u5b50\u6570\u7ec4 \uff0c\u6211\u4eec\u7684\u5206\u6570\u7531\u6bcf\u4e2a\u5b50\u6570\u7ec4\u5185\u7684\u5e73\u5747\u503c\u7684\u603b\u548c\u6784\u6210\u3002\u8ba1\u7b97\u6211\u4eec\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\u662f\u591a\u5c11\u3002</p>\n\n<p>\u6ce8\u610f\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 A \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4e14\u5206\u6570\u4e0d\u4e00\u5b9a\u9700\u8981\u662f\u6574\u6570\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>\u8f93\u51fa:</strong> 20\n<strong>\u89e3\u91ca:</strong> \nA \u7684\u6700\u4f18\u5206\u7ec4\u662f[9], [1, 2, 3], [9]. \u5f97\u5230\u7684\u5206\u6570\u662f 9 + (1 + 2 + 3) / 3 + 9 = 20.\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a A \u5206\u6210[9, 1], [2], [3, 9].\n\u8fd9\u6837\u7684\u5206\u7ec4\u5f97\u5230\u7684\u5206\u6570\u4e3a 5 + 2 + 6 = 13, \u4f46\u4e0d\u662f\u6700\u5927\u503c.\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\n\t<li>\u7b54\u6848\u8bef\u5dee\u5728&nbsp;<code>10^-6</code>&nbsp;\u5185\u88ab\u89c6\u4e3a\u662f\u6b63\u786e\u7684\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double largestSumOfAverages(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestSumOfAverages(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble largestSumOfAverages(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double LargestSumOfAverages(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumOfAverages = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Float}\ndef largest_sum_of_averages(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestSumOfAverages(_ A: [Int], _ K: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestSumOfAverages(A []int, K int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestSumOfAverages(A: Array[Int], K: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestSumOfAverages(A: IntArray, K: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_sum_of_averages(a: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Float\n     */\n    function largestSumOfAverages($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestSumOfAverages(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0832", "frontend_question_id": "0814", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-tree-pruning", "url_en": "https://leetcode.com/problems/binary-tree-pruning", "relative_path_cn": "/leetcode/0800-0899/0814.Binary%20Tree%20Pruning/README.md", "relative_path_en": "/leetcode/0800-0899/0814.Binary%20Tree%20Pruning/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u526a\u679d", "title_en": "Binary Tree Pruning", "question_title_slug": "binary-tree-pruning", "content_en": "<p>We are given the head node <code>root</code>&nbsp;of a binary tree, where additionally every node&#39;s value is either a 0 or a 1.</p>\n\n<p>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.</p>\n\n<p>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p>\n\n<pre>\n<strong>Example 1:</strong>\n<strong>Input:</strong> [1,null,0,0,1]\n<strong>Output: </strong>[1,null,0,null,1]\n \n<strong>Explanation:</strong> \nOnly the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.\nThe diagram on the right represents the answer.\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>Example 2:</strong>\n<strong>Input:</strong> [1,0,1,0,0,0,1]\n<strong>Output: </strong>[1,null,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>Example 3:</strong>\n<strong>Input:</strong> [1,1,0,1,1,0,1,0]\n<strong>Output: </strong>[1,1,0,1,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>Note: </strong></p>\n\n<ul>\n\t<li>The binary tree&nbsp;will&nbsp;have&nbsp;at&nbsp;most <code>200 nodes</code>.</li>\n\t<li>The value of each node will only be <code>0</code> or <code>1</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u6839\u7ed3\u70b9&nbsp;<code>root</code>&nbsp;\uff0c\u6b64\u5916\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1\u3002</p>\n\n<p>\u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811\u7684\u539f\u4e8c\u53c9\u6811\u3002</p>\n\n<p>( \u8282\u70b9 X \u7684\u5b50\u6811\u4e3a X \u672c\u8eab\uff0c\u4ee5\u53ca\u6240\u6709 X \u7684\u540e\u4ee3\u3002)</p>\n\n<pre>\n<strong>\u793a\u4f8b1:</strong>\n<strong>\u8f93\u5165:</strong> [1,null,0,0,1]\n<strong>\u8f93\u51fa: </strong>[1,null,0,null,1]\n \n<strong>\u89e3\u91ca:</strong> \n\u53ea\u6709\u7ea2\u8272\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6&ldquo;\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811&rdquo;\u3002\n\u53f3\u56fe\u4e3a\u8fd4\u56de\u7684\u7b54\u6848\u3002\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b2:</strong>\n<strong>\u8f93\u5165:</strong> [1,0,1,0,0,0,1]\n<strong>\u8f93\u51fa: </strong>[1,null,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b3:</strong>\n<strong>\u8f93\u5165:</strong> [1,1,0,1,1,0,1,0]\n<strong>\u8f93\u51fa: </strong>[1,1,0,1,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709&nbsp;<code>100</code>&nbsp;\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u53ea\u4f1a\u4e3a&nbsp;<code>0</code> \u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* pruneTree(TreeNode* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pruneTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* pruneTree(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode PruneTree(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar pruneTree = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {TreeNode}\ndef prune_tree(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func pruneTree(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pruneTree(root *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def pruneTree(root: TreeNode): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun pruneTree(root: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn prune_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function pruneTree($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction pruneTree(root: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0833", "frontend_question_id": "0815", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bus-routes", "url_en": "https://leetcode.com/problems/bus-routes", "relative_path_cn": "/leetcode/0800-0899/0815.Bus%20Routes/README.md", "relative_path_en": "/leetcode/0800-0899/0815.Bus%20Routes/README_EN.md", "title_cn": "\u516c\u4ea4\u8def\u7ebf", "title_en": "Bus Routes", "question_title_slug": "bus-routes", "content_en": "<p>We have a list of bus routes. Each <code>routes[i]</code> is a bus route that the i-th bus&nbsp;repeats forever. For example if <code>routes[0] = [1, 5, 7]</code>, this means that the first&nbsp;bus (0-th indexed) travels in the sequence 1-&gt;5-&gt;7-&gt;1-&gt;5-&gt;7-&gt;1-&gt;... forever.</p>\n\n<p>We start at bus stop <code>S</code> (initially not on a bus), and we want to go to bus stop <code>T</code>. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.</p>\n\n<pre>\n<strong>Example:</strong>\n<strong>Input:</strong> \nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 10^5</code>.</li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10 ^ 6</code>.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u7cfb\u5217\u516c\u4ea4\u8def\u7ebf\u3002\u6bcf\u4e00\u6761\u8def\u7ebf <code>routes[i]</code>&nbsp;\u4e0a\u90fd\u6709\u4e00\u8f86\u516c\u4ea4\u8f66\u5728\u4e0a\u9762\u5faa\u73af\u884c\u9a76\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u6761\u8def\u7ebf&nbsp;<code>routes[0] = [1, 5, 7]</code>\uff0c\u8868\u793a\u7b2c\u4e00\u8f86 (\u4e0b\u6807\u4e3a0) \u516c\u4ea4\u8f66\u4f1a\u4e00\u76f4\u6309\u7167&nbsp;1-&gt;5-&gt;7-&gt;1-&gt;5-&gt;7-&gt;1-&gt;...&nbsp;\u7684\u8f66\u7ad9\u8def\u7ebf\u884c\u9a76\u3002</p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u4ece&nbsp;<code>S</code>&nbsp;\u8f66\u7ad9\u5f00\u59cb\uff08\u521d\u59cb\u65f6\u4e0d\u5728\u516c\u4ea4\u8f66\u4e0a\uff09\uff0c\u8981\u53bb\u5f80&nbsp;<code>T</code>&nbsp;\u7ad9\u3002 \u671f\u95f4\u4ec5\u53ef\u4e58\u5750\u516c\u4ea4\u8f66\uff0c\u6c42\u51fa\u6700\u5c11\u4e58\u5750\u7684\u516c\u4ea4\u8f66\u6570\u91cf\u3002\u8fd4\u56de -1 \u8868\u793a\u4e0d\u53ef\u80fd\u5230\u8fbe\u7ec8\u70b9\u8f66\u7ad9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u4f18\u7b56\u7565\u662f\u5148\u4e58\u5750\u7b2c\u4e00\u8f86\u516c\u4ea4\u8f66\u5230\u8fbe\u8f66\u7ad9 7, \u7136\u540e\u6362\u4e58\u7b2c\u4e8c\u8f86\u516c\u4ea4\u8f66\u5230\u8f66\u7ad9 6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 10^5</code>.</li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10 ^ 6</code>.</li>\n</ul>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numBusesToDestination(int[][] routes, int S, int T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numBusesToDestination(self, routes, S, T):\n        \"\"\"\n        :type routes: List[List[int]]\n        :type S: int\n        :type T: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numBusesToDestination(self, routes: List[List[int]], S: int, T: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numBusesToDestination(int** routes, int routesSize, int* routesColSize, int S, int T){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumBusesToDestination(int[][] routes, int S, int T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} routes\n * @param {number} S\n * @param {number} T\n * @return {number}\n */\nvar numBusesToDestination = function(routes, S, T) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} routes\n# @param {Integer} s\n# @param {Integer} t\n# @return {Integer}\ndef num_buses_to_destination(routes, s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numBusesToDestination(_ routes: [[Int]], _ S: Int, _ T: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numBusesToDestination(routes [][]int, S int, T int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numBusesToDestination(routes: Array[Array[Int]], S: Int, T: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numBusesToDestination(routes: Array<IntArray>, S: Int, T: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_buses_to_destination(routes: Vec<Vec<i32>>, s: i32, t: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $routes\n     * @param Integer $S\n     * @param Integer $T\n     * @return Integer\n     */\n    function numBusesToDestination($routes, $S, $T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numBusesToDestination(routes: number[][], S: number, T: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0834", "frontend_question_id": "0816", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ambiguous-coordinates", "url_en": "https://leetcode.com/problems/ambiguous-coordinates", "relative_path_cn": "/leetcode/0800-0899/0816.Ambiguous%20Coordinates/README.md", "relative_path_en": "/leetcode/0800-0899/0816.Ambiguous%20Coordinates/README_EN.md", "title_cn": "\u6a21\u7cca\u5750\u6807", "title_en": "Ambiguous Coordinates", "question_title_slug": "ambiguous-coordinates", "content_en": "<p>We had some 2-dimensional coordinates, like <code>&quot;(1, 3)&quot;</code> or <code>&quot;(2, 0.5)&quot;</code>.&nbsp; Then, we removed&nbsp;all commas, decimal points, and spaces, and ended up with the string&nbsp;<code>S</code>.&nbsp; Return a list of strings representing&nbsp;all possibilities for what our original coordinates could have been.</p>\r\n\r\n<p>Our original representation never had extraneous zeroes, so we never started with numbers like &quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;, or any other number that can be represented with&nbsp;less digits.&nbsp; Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like &quot;.1&quot;.</p>\r\n\r\n<p>The final answer list can be returned in any order.&nbsp; Also note that all coordinates in the final answer&nbsp;have exactly one space between them (occurring after the comma.)</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> &quot;(123)&quot;\r\n<strong>Output:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> &quot;(00011)&quot;\r\n<strong>Output:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\r\n<strong>Explanation:</strong> \r\n0.0, 00, 0001 or 00.01 are not allowed.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> &quot;(0123)&quot;\r\n<strong>Output:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 4:</strong>\r\n<strong>Input:</strong> &quot;(100)&quot;\r\n<strong>Output:</strong> [(10, 0)]\r\n<strong>Explanation:</strong> \r\n1.0 is not allowed.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\r\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, and the other elements in <code>S</code> are digits.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u4e9b\u4e8c\u7ef4\u5750\u6807\uff0c\u5982&nbsp;<code>&quot;(1, 3)&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;(2, 0.5)&quot;</code>\uff0c\u7136\u540e\u6211\u4eec\u79fb\u9664\u6240\u6709\u9017\u53f7\uff0c\u5c0f\u6570\u70b9\u548c\u7a7a\u683c\uff0c\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002</p>\n\n<p>\u539f\u59cb\u7684\u5750\u6807\u8868\u793a\u6cd5\u4e0d\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u96f6\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u4e8e&quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;\u6216\u4e00\u4e9b\u5176\u4ed6\u66f4\u5c0f\u7684\u6570\u6765\u8868\u793a\u5750\u6807\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5c0f\u6570\u70b9\u524d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u51fa\u73b0&ldquo;.1&rdquo;\u5f62\u5f0f\u7684\u6570\u5b57\u3002</p>\n\n<p>\u6700\u540e\u8fd4\u56de\u7684\u5217\u8868\u53ef\u4ee5\u662f\u4efb\u610f\u987a\u5e8f\u7684\u3002\u800c\u4e14\u6ce8\u610f\u8fd4\u56de\u7684\u4e24\u4e2a\u6570\u5b57\u4e2d\u95f4\uff08\u9017\u53f7\u4e4b\u540e\uff09\u90fd\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(123)&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(00011)&quot;\n<strong>\u8f93\u51fa:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\n<strong>\u89e3\u91ca:</strong> \n0.0, 00, 0001 \u6216 00.01 \u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 3:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(0123)&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 4:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(100)&quot;\n<strong>\u8f93\u51fa:</strong> [(10, 0)]\n<strong>\u89e3\u91ca:</strong> \n1.0 \u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a: </strong></p>\n\n<ul>\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, \u4e14\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u90fd\u662f\u6570\u5b57\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> ambiguousCoordinates(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> ambiguousCoordinates(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def ambiguousCoordinates(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def ambiguousCoordinates(self, S: str) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** ambiguousCoordinates(char * S, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> AmbiguousCoordinates(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string[]}\n */\nvar ambiguousCoordinates = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func ambiguousCoordinates(_ S: String) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func ambiguousCoordinates(S string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def ambiguousCoordinates(S: String): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun ambiguousCoordinates(S: String): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn ambiguous_coordinates(s: String) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function ambiguousCoordinates($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function ambiguousCoordinates(S: string): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0835", "frontend_question_id": "0817", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/linked-list-components", "url_en": "https://leetcode.com/problems/linked-list-components", "relative_path_cn": "/leetcode/0800-0899/0817.Linked%20List%20Components/README.md", "relative_path_en": "/leetcode/0800-0899/0817.Linked%20List%20Components/README_EN.md", "title_cn": "\u94fe\u8868\u7ec4\u4ef6", "title_en": "Linked List Components", "question_title_slug": "linked-list-components", "content_en": "<p>We are given&nbsp;<code>head</code>,&nbsp;the head node of a linked list containing&nbsp;<strong>unique integer values</strong>.</p>\r\n\r\n<p>We are also given the list&nbsp;<code>G</code>, a subset of the values in the linked list.</p>\r\n\r\n<p>Return the number of connected components in <code>G</code>, where two values are connected if they appear consecutively in the linked list.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nhead: 0-&gt;1-&gt;2-&gt;3\r\nG = [0, 1, 3]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\n0 and 1 are connected, so [0, 1] and [3] are the two connected components.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\r\nG = [0, 3, 1, 4]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\n0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li>If&nbsp;<code>N</code>&nbsp;is the&nbsp;length of the linked list given by&nbsp;<code>head</code>,&nbsp;<code>1 &lt;= N &lt;= 10000</code>.</li>\r\n\t<li>The value of each node in the linked list will be in the range<code> [0, N - 1]</code>.</li>\r\n\t<li><code>1 &lt;= G.length &lt;= 10000</code>.</li>\r\n\t<li><code>G</code> is a subset of all values in the linked list.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u94fe\u8868\u5934\u7ed3\u70b9&nbsp;<code>head</code>\uff0c\u8be5\u94fe\u8868\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a <strong>\u552f\u4e00\u7684\u6574\u578b\u503c</strong> \u3002</p>\n\n<p>\u540c\u65f6\u7ed9\u5b9a\u5217\u8868&nbsp;<code>G</code>\uff0c\u8be5\u5217\u8868\u662f\u4e0a\u8ff0\u94fe\u8868\u4e2d\u6574\u578b\u503c\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p>\n\n<p>\u8fd4\u56de\u5217\u8868&nbsp;<code>G</code>&nbsp;\u4e2d\u7ec4\u4ef6\u7684\u4e2a\u6570\uff0c\u8fd9\u91cc\u5bf9\u7ec4\u4ef6\u7684\u5b9a\u4e49\u4e3a\uff1a\u94fe\u8868\u4e2d\u4e00\u6bb5\u6700\u957f\u8fde\u7eed\u7ed3\u70b9\u7684\u503c\uff08\u8be5\u503c\u5fc5\u987b\u5728\u5217\u8868&nbsp;<code>G</code>&nbsp;\u4e2d\uff09\u6784\u6210\u7684\u96c6\u5408\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3\nG = [0, 1, 3]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u94fe\u8868\u4e2d,0 \u548c 1 \u662f\u76f8\u8fde\u63a5\u7684\uff0c\u4e14 G \u4e2d\u4e0d\u5305\u542b 2\uff0c\u6240\u4ee5 [0, 1] \u662f G \u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u540c\u7406 [3] \u4e5f\u662f\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u6545\u8fd4\u56de 2\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\nG = [0, 3, 1, 4]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u94fe\u8868\u4e2d\uff0c0 \u548c 1 \u662f\u76f8\u8fde\u63a5\u7684\uff0c3 \u548c 4 \u662f\u76f8\u8fde\u63a5\u7684\uff0c\u6240\u4ee5 [0, 1] \u548c [3, 4] \u662f\u4e24\u4e2a\u7ec4\u4ef6\uff0c\u6545\u8fd4\u56de 2\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>N</code>&nbsp;\u662f\u7ed9\u5b9a\u94fe\u8868&nbsp;<code>head</code>&nbsp;\u7684\u957f\u5ea6\uff0c<code>1 &lt;= N &lt;= 10000</code>\u3002</li>\n\t<li>\u94fe\u8868\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u6240\u5728\u8303\u56f4\u4e3a&nbsp;<code>[0, N - 1]</code>\u3002</li>\n\t<li><code>1 &lt;= G.length &lt;= 10000</code></li>\n\t<li><code>G</code> \u662f\u94fe\u8868\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u4e00\u4e2a\u5b50\u96c6.</li>\n</ul>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int numComponents(ListNode* head, vector<int>& G) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int numComponents(ListNode head, int[] G) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def numComponents(self, head, G):\n        \"\"\"\n        :type head: ListNode\n        :type G: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def numComponents(self, head: ListNode, G: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nint numComponents(struct ListNode* head, int* G, int GSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int NumComponents(ListNode head, int[] G) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number[]} G\n * @return {number}\n */\nvar numComponents = function(head, G) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer[]} g\n# @return {Integer}\ndef num_components(head, g)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func numComponents(_ head: ListNode?, _ G: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc numComponents(head *ListNode, G []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def numComponents(head: ListNode, G: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun numComponents(head: ListNode?, G: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn num_components(head: Option<Box<ListNode>>, g: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer[] $G\n     * @return Integer\n     */\n    function numComponents($head, $G) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction numComponents(head: ListNode | null, G: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0836", "frontend_question_id": "0818", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/race-car", "url_en": "https://leetcode.com/problems/race-car", "relative_path_cn": "/leetcode/0800-0899/0818.Race%20Car/README.md", "relative_path_en": "/leetcode/0800-0899/0818.Race%20Car/README_EN.md", "title_cn": "\u8d5b\u8f66", "title_en": "Race Car", "question_title_slug": "race-car", "content_en": "<p>Your car starts at position 0 and speed +1 on an infinite number line.&nbsp; (Your car can go into negative positions.)</p>\r\n\r\n<p>Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).</p>\r\n\r\n<p>When you get an instruction &quot;A&quot;, your car does the following:&nbsp;<code>position += speed, speed *= 2</code>.</p>\r\n\r\n<p>When you get an instruction &quot;R&quot;, your car does the following: if your speed is positive then&nbsp;<code>speed = -1</code>&nbsp;, otherwise&nbsp;<code>speed = 1</code>.&nbsp; (Your position stays the same.)</p>\r\n\r\n<p>For example, after commands &quot;AAR&quot;, your car goes to positions 0-&gt;1-&gt;3-&gt;3, and your speed goes to 1-&gt;2-&gt;4-&gt;-1.</p>\r\n\r\n<p>Now for some target position, say the <strong>length</strong> of the shortest sequence of instructions to get there.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\ntarget = 3\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\ntarget = 6\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AAARA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= target &lt;= 10000</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4f60\u7684\u8d5b\u8f66\u8d77\u59cb\u505c\u7559\u5728\u4f4d\u7f6e 0\uff0c\u901f\u5ea6\u4e3a +1\uff0c\u6b63\u884c\u9a76\u5728\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u6570\u8f74\u4e0a\u3002\uff08\u8f66\u4e5f\u53ef\u4ee5\u5411\u8d1f\u6570\u65b9\u5411\u884c\u9a76\u3002\uff09</p>\n\n<p>\u4f60\u7684\u8f66\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7531 A\uff08\u52a0\u901f\uff09\u548c R\uff08\u5012\u8f66\uff09\u7ec4\u6210\u7684\u6307\u4ee4\u8fdb\u884c\u81ea\u52a8\u9a7e\u9a76&nbsp;\u3002</p>\n\n<p>\u5f53\u8f66\u5f97\u5230\u6307\u4ee4 &quot;A&quot; \u65f6, \u5c06\u4f1a\u505a\u51fa\u4ee5\u4e0b\u64cd\u4f5c\uff1a&nbsp;<code>position += speed, speed *= 2</code>\u3002</p>\n\n<p>\u5f53\u8f66\u5f97\u5230\u6307\u4ee4 &quot;R&quot; \u65f6, \u5c06\u4f1a\u505a\u51fa\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u5982\u679c\u5f53\u524d\u901f\u5ea6\u662f\u6b63\u6570\uff0c\u5219\u5c06\u8f66\u901f\u8c03\u6574\u4e3a&nbsp;<code>speed = -1</code>&nbsp;\uff1b\u5426\u5219\u5c06\u8f66\u901f\u8c03\u6574\u4e3a&nbsp;<code>speed = 1</code>\u3002&nbsp; (\u5f53\u524d\u6240\u5904\u4f4d\u7f6e\u4e0d\u53d8\u3002)</p>\n\n<p>\u4f8b\u5982\uff0c\u5f53\u5f97\u5230\u4e00\u7cfb\u5217\u6307\u4ee4 &quot;AAR&quot; \u540e, \u4f60\u7684\u8f66\u5c06\u4f1a\u8d70\u8fc7\u4f4d\u7f6e 0-&gt;1-&gt;3-&gt;3\uff0c\u5e76\u4e14\u901f\u5ea6\u53d8\u5316\u4e3a&nbsp;1-&gt;2-&gt;4-&gt;-1\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e\uff0c\u8bf7\u7ed9\u51fa\u80fd\u591f\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u6700\u77ed\u6307\u4ee4\u5217\u8868\u7684<strong>\u957f\u5ea6</strong>\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \ntarget = 3\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u6700\u77ed\u6307\u4ee4\u5217\u8868\u4e3a &quot;AA&quot;\n\u4f4d\u7f6e\u53d8\u5316\u4e3a 0-&gt;1-&gt;3\n</pre>\n\n<pre><strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> \ntarget = 6\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u6700\u77ed\u6307\u4ee4\u5217\u8868\u4e3a &quot;AAARA&quot;\n\u4f4d\u7f6e\u53d8\u5316\u4e3a 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target\uff08\u76ee\u6807\u4f4d\u7f6e\uff09 &lt;= 10000</code>\u3002</li>\n</ul>\n", "tags_en": ["Heap", "Dynamic Programming"], "tags_cn": ["\u5806", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int racecar(int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int racecar(int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def racecar(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def racecar(self, target: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint racecar(int target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Racecar(int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} target\n * @return {number}\n */\nvar racecar = function(target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} target\n# @return {Integer}\ndef racecar(target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func racecar(_ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func racecar(target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def racecar(target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun racecar(target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn racecar(target: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function racecar($target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function racecar(target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0837", "frontend_question_id": "0819", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/most-common-word", "url_en": "https://leetcode.com/problems/most-common-word", "relative_path_cn": "/leetcode/0800-0899/0819.Most%20Common%20Word/README.md", "relative_path_en": "/leetcode/0800-0899/0819.Most%20Common%20Word/README_EN.md", "title_cn": "\u6700\u5e38\u89c1\u7684\u5355\u8bcd", "title_en": "Most Common Word", "question_title_slug": "most-common-word", "content_en": "<p>Given a paragraph&nbsp;and a list of banned words, return the most frequent word that is not in the list of banned words.&nbsp; It is guaranteed there is at least one word that isn&#39;t banned, and that the answer is unique.</p>\r\n\r\n<p>Words in the list of banned words are given in lowercase, and free of punctuation.&nbsp; Words in the paragraph are not case sensitive.&nbsp; The answer is in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\r\nbanned = [&quot;hit&quot;]\r\n<strong>Output:</strong> &quot;ball&quot;\r\n<strong>Explanation:</strong> \r\n&quot;hit&quot; occurs 3 times, but it is a banned word.\r\n&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \r\nNote that words in the paragraph are not case sensitive,\r\nthat punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), \r\nand that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= paragraph.length &lt;= 1000</code>.</li>\r\n\t<li><code>0 &lt;= banned.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= banned[i].length &lt;= 10</code>.</li>\r\n\t<li>The answer is unique, and written in lowercase (even if its occurrences in <code>paragraph</code>&nbsp;may have&nbsp;uppercase symbols, and even if it is a proper noun.)</li>\r\n\t<li><code>paragraph</code> only consists of letters, spaces, or the punctuation symbols <code>!?&#39;,;.</code></li>\r\n\t<li>There are no hyphens or hyphenated words.</li>\r\n\t<li>Words only consist of letters, never apostrophes or other punctuation symbols.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002</p>\n\n<p>\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\nbanned = [&quot;hit&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;ball&quot;\n<strong>\u89e3\u91ca:</strong> \n&quot;hit&quot; \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002\n&quot;ball&quot; \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \n\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 &quot;ball,&quot;\uff09\uff0c \n&quot;hit&quot;\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= \u6bb5\u843d\u957f\u5ea6 &lt;= 1000</code></li>\n\t<li><code>0 &lt;= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 &lt;= 100</code></li>\n\t<li><code>1 &lt;= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 &lt;= 10</code></li>\n\t<li>\u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd&nbsp;(\u5373\u4f7f\u5728 <code>paragraph</code> \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002)</li>\n\t<li><code>paragraph</code>&nbsp;\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7<code>!?&#39;,;.</code></li>\n\t<li>\u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string mostCommonWord(string paragraph, vector<string>& banned) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String mostCommonWord(String paragraph, String[] banned) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mostCommonWord(self, paragraph, banned):\n        \"\"\"\n        :type paragraph: str\n        :type banned: List[str]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * mostCommonWord(char * paragraph, char ** banned, int bannedSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MostCommonWord(string paragraph, string[] banned) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} paragraph\n * @param {string[]} banned\n * @return {string}\n */\nvar mostCommonWord = function(paragraph, banned) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} paragraph\n# @param {String[]} banned\n# @return {String}\ndef most_common_word(paragraph, banned)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func mostCommonWord(_ paragraph: String, _ banned: [String]) -> String {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func mostCommonWord(paragraph string, banned []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mostCommonWord(paragraph: String, banned: Array[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mostCommonWord(paragraph: String, banned: Array<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn most_common_word(paragraph: String, banned: Vec<String>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $paragraph\n     * @param String[] $banned\n     * @return String\n     */\n    function mostCommonWord($paragraph, $banned) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mostCommonWord(paragraph: string, banned: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0839", "frontend_question_id": "0820", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/short-encoding-of-words", "url_en": "https://leetcode.com/problems/short-encoding-of-words", "relative_path_cn": "/leetcode/0800-0899/0820.Short%20Encoding%20of%20Words/README.md", "relative_path_en": "/leetcode/0800-0899/0820.Short%20Encoding%20of%20Words/README_EN.md", "title_cn": "\u5355\u8bcd\u7684\u538b\u7f29\u7f16\u7801", "title_en": "Short Encoding of Words", "question_title_slug": "short-encoding-of-words", "content_en": "<p>Given a list of <code>words</code>, we may encode it by writing a reference string <code>s</code> and a list of indexes <code>a</code>.</p>\n\n<p>For example, if the list of <code>words</code> is <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>, we can write it as <code>s = &quot;time#bell#&quot;</code> and <code>indexes = [0, 2, 5]</code>.</p>\n\n<p>Then for each index, we will recover the word by reading from the reference string from that index until we reach a <code>&quot;#&quot;</code> character.</p>\n\n<p>Return <em>the length of the shortest reference string </em><code>s</code><em> possible that encodes the given </em><code>words</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> s = <code>&quot;time#bell#&quot; and indexes = [0, 2, 5</code>].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;t&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>words[i]</code> consists of only lowercase letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5217\u8868\u7f16\u7801\u6210\u4e00\u4e2a\u7d22\u5f15\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e0e\u4e00\u4e2a\u7d22\u5f15\u5217\u8868 <code>A</code>\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u8fd9\u4e2a\u5217\u8868\u662f <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a <code>S = &quot;time#bell#&quot;</code> \u548c <code>indexes = [0, 2, 5]</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7d22\u5f15\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece\u5b57\u7b26\u4e32 <code>S</code>&nbsp;\u4e2d\u7d22\u5f15\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u76f4\u5230 &quot;#&quot; \u7ed3\u675f\uff0c\u6765\u6062\u590d\u6211\u4eec\u4e4b\u524d\u7684\u5355\u8bcd\u5217\u8868\u3002</p>\n\n<p>\u90a3\u4e48\u6210\u529f\u5bf9\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u8fdb\u884c\u7f16\u7801\u7684\u6700\u5c0f\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u591a\u5c11\u5462\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\n<strong>\u8f93\u51fa:</strong> 10\n<strong>\u8bf4\u660e:</strong> S = <code>&quot;time#bell#&quot; \uff0c indexes = [0, 2, 5</code>] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code></li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd \u3002</li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumLengthEncoding(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumLengthEncoding(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumLengthEncoding(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumLengthEncoding(self, words: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minimumLengthEncoding(char ** words, int wordsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumLengthEncoding(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimumLengthEncoding = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer}\ndef minimum_length_encoding(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumLengthEncoding(_ words: [String]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumLengthEncoding(words []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumLengthEncoding(words: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumLengthEncoding(words: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_length_encoding(words: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function minimumLengthEncoding($words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumLengthEncoding(words: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0841", "frontend_question_id": "0821", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-distance-to-a-character", "url_en": "https://leetcode.com/problems/shortest-distance-to-a-character", "relative_path_cn": "/leetcode/0800-0899/0821.Shortest%20Distance%20to%20a%20Character/README.md", "relative_path_en": "/leetcode/0800-0899/0821.Shortest%20Distance%20to%20a%20Character/README_EN.md", "title_cn": "\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb", "title_en": "Shortest Distance to a Character", "question_title_slug": "shortest-distance-to-a-character", "content_en": "<p>Given a string <code>S</code>&nbsp;and a character <code>C</code>, return an array of integers representing the shortest distance from the character <code>C</code> in the string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\r\n<strong>Output:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> string length is&nbsp;in&nbsp;<code>[1, 10000].</code></li>\r\n\t<li><code>C</code>&nbsp;is a single character, and guaranteed to be in string <code>S</code>.</li>\r\n\t<li>All letters in <code>S</code> and <code>C</code> are lowercase.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u548c\u4e00\u4e2a\u5b57\u7b26&nbsp;<code>C</code>\u3002\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u7684\u5b57\u7b26&nbsp;<code>C</code>&nbsp;\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\n<strong>\u8f93\u51fa:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[1, 10000]</code>\u3002</li>\n\t<li><code>C</code>&nbsp;\u662f\u4e00\u4e2a\u5355\u5b57\u7b26\uff0c\u4e14\u4fdd\u8bc1\u662f\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u91cc\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>S</code>&nbsp;\u548c&nbsp;<code>C</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> shortestToChar(string S, char C) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] shortestToChar(String S, char C) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestToChar(self, S, C):\n        \"\"\"\n        :type S: str\n        :type C: str\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestToChar(self, S: str, C: str) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestToChar(char * S, char C, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ShortestToChar(string S, char C) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function(S, C) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Character} c\n# @return {Integer[]}\ndef shortest_to_char(s, c)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestToChar(_ S: String, _ C: Character) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestToChar(S string, C byte) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestToChar(S: String, C: Char): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestToChar(S: String, C: Char): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_to_char(s: String, c: char) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $C\n     * @return Integer[]\n     */\n    function shortestToChar($S, $C) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestToChar(S: string, C: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0842", "frontend_question_id": "0822", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/card-flipping-game", "url_en": "https://leetcode.com/problems/card-flipping-game", "relative_path_cn": "/leetcode/0800-0899/0822.Card%20Flipping%20Game/README.md", "relative_path_en": "/leetcode/0800-0899/0822.Card%20Flipping%20Game/README_EN.md", "title_cn": "\u7ffb\u8f6c\u5361\u7247\u6e38\u620f", "title_en": "Card Flipping Game", "question_title_slug": "card-flipping-game", "content_en": "<p>On a table are <code>N</code> cards, with a positive integer printed on the front and back of each card (possibly different).</p>\r\n\r\n<p>We flip any number of cards, and after we choose one&nbsp;card.&nbsp;</p>\r\n\r\n<p>If the number <code>X</code> on the back of the chosen&nbsp;card is not on the front of any card, then this number X is good.</p>\r\n\r\n<p>What is the smallest number that is good?&nbsp; If no number is good, output <code>0</code>.</p>\r\n\r\n<p>Here, <code>fronts[i]</code> and <code>backs[i]</code> represent the number on the front and back of card <code>i</code>.&nbsp;</p>\r\n\r\n<p>A&nbsp;flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\r\n<strong>Output:</strong> <code>2</code>\r\n<strong>Explanation:</strong> If we flip the second card, the fronts are <code>[1,3,4,4,7]</code> and the backs are <code>[1,2,4,1,3]</code>.\r\nWe choose the second card, which has number 2 on the back, and it isn&#39;t on the front of any card, so <code>2</code> is good.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code>.</li>\r\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code>.</li>\r\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u684c\u5b50\u4e0a\u6709 <code>N</code> \u5f20\u5361\u7247\uff0c\u6bcf\u5f20\u5361\u7247\u7684\u6b63\u9762\u548c\u80cc\u9762\u90fd\u5199\u7740\u4e00\u4e2a\u6b63\u6570\uff08\u6b63\u9762\u4e0e\u80cc\u9762\u4e0a\u7684\u6570\u6709\u53ef\u80fd\u4e0d\u4e00\u6837\uff09\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u5148\u7ffb\u8f6c\u4efb\u610f\u5f20\u5361\u7247\uff0c\u7136\u540e\u9009\u62e9\u5176\u4e2d\u4e00\u5f20\u5361\u7247\u3002</p>\n\n<p>\u5982\u679c\u9009\u4e2d\u7684\u90a3\u5f20\u5361\u7247\u80cc\u9762\u7684\u6570\u5b57 <code>X</code> \u4e0e\u4efb\u610f\u4e00\u5f20\u5361\u7247\u7684\u6b63\u9762\u7684\u6570\u5b57\u90fd\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u662f\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u3002</p>\n\n<p>\u54ea\u4e2a\u6570\u662f\u8fd9\u4e9b\u60f3\u8981\u7684\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u6570\uff08\u627e\u5230\u8fd9\u4e9b\u6570\u4e2d\u7684\u6700\u5c0f\u503c\uff09\u5462\uff1f\u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u6570\u5b57\u7b26\u5408\u8981\u6c42\u7684\uff0c\u8f93\u51fa 0\u3002</p>\n\n<p>\u5176\u4e2d, <code>fronts[i]</code>&nbsp;\u548c&nbsp;<code>backs[i]</code>&nbsp;\u5206\u522b\u4ee3\u8868\u7b2c&nbsp;<code>i</code>&nbsp;\u5f20\u5361\u7247\u7684\u6b63\u9762\u548c\u80cc\u9762\u7684\u6570\u5b57\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u901a\u8fc7\u7ffb\u8f6c\u5361\u7247\u6765\u4ea4\u6362\u6b63\u9762\u4e0e\u80cc\u9762\u4e0a\u7684\u6570\uff0c\u90a3\u4e48\u5f53\u521d\u5728\u6b63\u9762\u7684\u6570\u5c31\u53d8\u6210\u80cc\u9762\u7684\u6570\uff0c\u80cc\u9762\u7684\u6570\u5c31\u53d8\u6210\u6b63\u9762\u7684\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>\u8f93\u51fa\uff1a</strong><code>2</code>\n<strong>\u89e3\u91ca\uff1a</strong>\u5047\u8bbe\u6211\u4eec\u7ffb\u8f6c\u7b2c\u4e8c\u5f20\u5361\u7247\uff0c\u90a3\u4e48\u5728\u6b63\u9762\u7684\u6570\u53d8\u6210\u4e86 <code>[1,3,4,4,7]</code> \uff0c \u80cc\u9762\u7684\u6570\u53d8\u6210\u4e86 <code>[1,2,4,1,3]\u3002</code>\n\u63a5\u7740\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u5f20\u5361\u7247\uff0c\u56e0\u4e3a\u73b0\u5728\u8be5\u5361\u7247\u7684\u80cc\u9762\u7684\u6570\u662f 2\uff0c2 \u4e0e\u4efb\u610f\u5361\u7247\u4e0a\u6b63\u9762\u7684\u6570\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5 2 \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code></li>\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code></li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int flipgame(vector<int>& fronts, vector<int>& backs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int flipgame(int[] fronts, int[] backs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint flipgame(int* fronts, int frontsSize, int* backs, int backsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Flipgame(int[] fronts, int[] backs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} fronts\n * @param {number[]} backs\n * @return {number}\n */\nvar flipgame = function(fronts, backs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} fronts\n# @param {Integer[]} backs\n# @return {Integer}\ndef flipgame(fronts, backs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func flipgame(_ fronts: [Int], _ backs: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func flipgame(fronts []int, backs []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun flipgame(fronts: IntArray, backs: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn flipgame(fronts: Vec<i32>, backs: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $fronts\n     * @param Integer[] $backs\n     * @return Integer\n     */\n    function flipgame($fronts, $backs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function flipgame(fronts: number[], backs: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0843", "frontend_question_id": "0823", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-trees-with-factors", "url_en": "https://leetcode.com/problems/binary-trees-with-factors", "relative_path_cn": "/leetcode/0800-0899/0823.Binary%20Trees%20With%20Factors/README.md", "relative_path_en": "/leetcode/0800-0899/0823.Binary%20Trees%20With%20Factors/README_EN.md", "title_cn": "\u5e26\u56e0\u5b50\u7684\u4e8c\u53c9\u6811", "title_en": "Binary Trees With Factors", "question_title_slug": "binary-trees-with-factors", "content_en": "<p>Given an array of unique integers, <code>arr</code>, where each integer <code>arr[i]</code> is strictly greater than <code>1</code>.</p>\n\n<p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node&#39;s value should be equal to the product of the values of its children.</p>\n\n<p>Return <em>the number of binary trees we can make</em>. The answer may be too large so return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [4, 2, 2]</code></pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,4,5,10]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>2 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u542b\u6709\u4e0d\u91cd\u590d\u6574\u6570\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6574\u6570\u5747\u5927\u4e8e 1\u3002</p>\n\n<p>\u6211\u4eec\u7528\u8fd9\u4e9b\u6574\u6570\u6765\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u6574\u6570\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6b21\u6570\u3002</p>\n\n<p>\u5176\u4e2d\uff1a\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u7684\u503c\u5e94\u7b49\u4e8e\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u503c\u7684\u4e58\u79ef\u3002</p>\n\n<p>\u6ee1\u8db3\u6761\u4ef6\u7684\u4e8c\u53c9\u6811\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff1f\u8fd4\u56de\u7684\u7ed3\u679c\u5e94<strong>\u6a21\u9664 10 ** 9 + 7</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <code>A = [2, 4]</code>\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e8c\u53c9\u6811: <code>[2], [4], [4, 2, 2]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <code>A = [2, 4, 5, 10]</code>\n<strong>\u8f93\u51fa:</strong> <code>7</code>\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e8c\u53c9\u6811: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;1000.</code></li>\n\t<li><code>2 &lt;=&nbsp;A[i]&nbsp;&lt;=&nbsp;10 ^ 9</code>.</li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numFactoredBinaryTrees(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numFactoredBinaryTrees(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numFactoredBinaryTrees(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numFactoredBinaryTrees(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumFactoredBinaryTrees(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar numFactoredBinaryTrees = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef num_factored_binary_trees(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numFactoredBinaryTrees(_ arr: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numFactoredBinaryTrees(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numFactoredBinaryTrees(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numFactoredBinaryTrees(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_factored_binary_trees(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function numFactoredBinaryTrees($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numFactoredBinaryTrees(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0851", "frontend_question_id": "0824", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/goat-latin", "url_en": "https://leetcode.com/problems/goat-latin", "relative_path_cn": "/leetcode/0800-0899/0824.Goat%20Latin/README.md", "relative_path_en": "/leetcode/0800-0899/0824.Goat%20Latin/README_EN.md", "title_cn": "\u5c71\u7f8a\u62c9\u4e01\u6587", "title_en": "Goat Latin", "question_title_slug": "goat-latin", "content_en": "<p>A sentence <code>S</code> is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p>\r\n\r\n<p>We would like to convert the sentence to &quot;<em>Goat Latin&quot;</em>&nbsp;(a made-up language similar to Pig Latin.)</p>\r\n\r\n<p>The rules of Goat Latin are as follows:</p>\r\n\r\n<ul>\r\n\t<li>If a word begins with a vowel (a, e, i, o, or u), append <code>&quot;ma&quot;</code>&nbsp;to the end of the word.<br />\r\n\tFor example, the word &#39;apple&#39; becomes &#39;applema&#39;.<br />\r\n\t&nbsp;</li>\r\n\t<li>If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add <code>&quot;ma&quot;</code>.<br />\r\n\tFor example, the word <code>&quot;goat&quot;</code>&nbsp;becomes <code>&quot;oatgma&quot;</code>.<br />\r\n\t&nbsp;</li>\r\n\t<li>Add one letter <code>&#39;a&#39;</code>&nbsp;to the end of each word per its word index in the sentence, starting with 1.<br />\r\n\tFor example,&nbsp;the first word gets <code>&quot;a&quot;</code> added to the end, the second word gets <code>&quot;aa&quot;</code> added to the end and so on.</li>\r\n</ul>\r\n\r\n<p>Return the&nbsp;final sentence representing the conversion from <code>S</code>&nbsp;to Goat&nbsp;Latin.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;I speak Goat Latin&quot;\r\n<strong>Output: </strong>&quot;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;The quick brown fox jumped over the lazy dog&quot;\r\n<strong>Output: </strong>&quot;heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa&quot;\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notes:</p>\r\n\r\n<ul>\r\n\t<li><code>S</code> contains only uppercase, lowercase and spaces.&nbsp;Exactly one space between each word.</li>\r\n\t<li><code>1 &lt;= S.length &lt;= 150</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50&nbsp;<code>S</code>\u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a&nbsp;<em>&ldquo;Goat Latin&rdquo;</em>\uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587&nbsp;- Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002</p>\n\n<p>\u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;ma&quot;</code>\u3002<br />\n\t\u4f8b\u5982\uff0c\u5355\u8bcd<code>&quot;apple&quot;</code>\u53d8\u4e3a<code>&quot;applema&quot;</code>\u3002</li>\n\t<br />\n\t<li>\u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0<code>&quot;ma&quot;</code>\u3002<br />\n\t\u4f8b\u5982\uff0c\u5355\u8bcd<code>&quot;goat&quot;</code>\u53d8\u4e3a<code>&quot;oatgma&quot;</code>\u3002</li>\n\t<br />\n\t<li>\u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd<code>&#39;a&#39;</code>\uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002<br />\n\t\u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;a&quot;</code>\uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;aa&quot;</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u5c06&nbsp;<code>S</code>&nbsp;\u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;I speak Goat Latin&quot;\n<strong>\u8f93\u51fa: </strong>&quot;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;The quick brown fox jumped over the lazy dog&quot;\n<strong>\u8f93\u51fa: </strong>&quot;heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li><code>1 &lt;= S.length &lt;= 150</code>\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string toGoatLatin(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String toGoatLatin(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def toGoatLatin(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * toGoatLatin(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ToGoatLatin(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar toGoatLatin = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef to_goat_latin(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func toGoatLatin(_ S: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func toGoatLatin(S string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def toGoatLatin(S: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun toGoatLatin(S: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn to_goat_latin(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String\n     */\n    function toGoatLatin($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function toGoatLatin(S: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0852", "frontend_question_id": "0825", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/friends-of-appropriate-ages", "url_en": "https://leetcode.com/problems/friends-of-appropriate-ages", "relative_path_cn": "/leetcode/0800-0899/0825.Friends%20Of%20Appropriate%20Ages/README.md", "relative_path_en": "/leetcode/0800-0899/0825.Friends%20Of%20Appropriate%20Ages/README_EN.md", "title_cn": "\u9002\u9f84\u7684\u670b\u53cb", "title_en": "Friends Of Appropriate Ages", "question_title_slug": "friends-of-appropriate-ages", "content_en": "<p>Some people will make friend requests. The&nbsp;list of their ages is given and&nbsp;<code>ages[i]</code>&nbsp;is the age of the&nbsp;ith person.&nbsp;</p>\n\n<p>Person A will NOT friend request person B (B != A) if any of the following conditions are true:</p>\n\n<ul>\n\t<li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>\n\t<li><code>age[B]&nbsp;&gt; age[A]</code></li>\n\t<li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>\n</ul>\n\n<p>Otherwise, A will friend request B.</p>\n\n<p>Note that if&nbsp;A requests B, B does not necessarily request A.&nbsp; Also, people will not friend request themselves.</p>\n\n<p>How many total friend requests are made?</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>[16,16]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>2 people friend request each other.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>[16,17,18]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Friend requests are made 17 -&gt; 16, 18 -&gt; 17.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong>[20,30,100,110,120]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Friend requests are made 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Notes:</p>\n\n<ul>\n\t<li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>\n</ul>\n", "content_cn": "<p>\u4eba\u4eec\u4f1a\u4e92\u76f8\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\uff0c\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u6709\u4ed6\u4eec\u5e74\u9f84\u7684\u6570\u7ec4\uff0c<code>ages[i]</code>&nbsp;\u8868\u793a\u7b2c i \u4e2a\u4eba\u7684\u5e74\u9f84\u3002</p>\n\n<p>\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u4efb\u4e00\u6761\u4ef6\u65f6\uff0cA \u4e0d\u80fd\u7ed9 B\uff08A\u3001B\u4e0d\u4e3a\u540c\u4e00\u4eba\uff09\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\uff1a</p>\n\n<ul>\n\t<li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>\n\t<li><code>age[B]&nbsp;&gt; age[A]</code></li>\n\t<li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>\n</ul>\n\n<p>\u5426\u5219\uff0cA \u53ef\u4ee5\u7ed9 B \u53d1\u9001\u597d\u53cb\u8bf7\u6c42\u3002</p>\n\n<p>\u6ce8\u610f\u5982\u679c A \u5411 B \u53d1\u51fa\u4e86\u8bf7\u6c42\uff0c\u4e0d\u7b49\u4e8e B \u4e5f\u4e00\u5b9a\u4f1a\u5411&nbsp;A \u53d1\u51fa\u8bf7\u6c42\u3002\u800c\u4e14\uff0c\u4eba\u4eec\u4e0d\u4f1a\u7ed9\u81ea\u5df1\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\u3002&nbsp;</p>\n\n<p>\u6c42\u603b\u5171\u4f1a\u53d1\u51fa\u591a\u5c11\u4efd\u597d\u53cb\u8bf7\u6c42?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[16,16]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u4e8c\u4eba\u53ef\u4ee5\u4e92\u53d1\u597d\u53cb\u7533\u8bf7\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[16,17,18]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u597d\u53cb\u8bf7\u6c42\u53ef\u4ea7\u751f\u4e8e 17 -&gt; 16, 18 -&gt; 17.</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[20,30,100,110,120]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u597d\u53cb\u8bf7\u6c42\u53ef\u4ea7\u751f\u4e8e 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numFriendRequests(vector<int>& ages) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numFriendRequests(int[] ages) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numFriendRequests(self, ages):\n        \"\"\"\n        :type ages: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numFriendRequests(int* ages, int agesSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumFriendRequests(int[] ages) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} ages\n * @return {number}\n */\nvar numFriendRequests = function(ages) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} ages\n# @return {Integer}\ndef num_friend_requests(ages)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numFriendRequests(_ ages: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numFriendRequests(ages []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numFriendRequests(ages: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numFriendRequests(ages: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_friend_requests(ages: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $ages\n     * @return Integer\n     */\n    function numFriendRequests($ages) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numFriendRequests(ages: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0853", "frontend_question_id": "0826", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/most-profit-assigning-work", "url_en": "https://leetcode.com/problems/most-profit-assigning-work", "relative_path_cn": "/leetcode/0800-0899/0826.Most%20Profit%20Assigning%20Work/README.md", "relative_path_en": "/leetcode/0800-0899/0826.Most%20Profit%20Assigning%20Work/README_EN.md", "title_cn": "\u5b89\u6392\u5de5\u4f5c\u4ee5\u8fbe\u5230\u6700\u5927\u6536\u76ca", "title_en": "Most Profit Assigning Work", "question_title_slug": "most-profit-assigning-work", "content_en": "<p>We have jobs: <code>difficulty[i]</code>&nbsp;is the difficulty of the&nbsp;<code>i</code>th job, and&nbsp;<code>profit[i]</code>&nbsp;is the profit of the&nbsp;<code>i</code>th job.&nbsp;</p>\r\n\r\n<p>Now we have some workers.&nbsp;<code>worker[i]</code>&nbsp;is the ability of the&nbsp;<code>i</code>th worker, which means that this worker can only complete a job with difficulty at most&nbsp;<code>worker[i]</code>.&nbsp;</p>\r\n\r\n<p>Every worker can be assigned at most one job, but one job&nbsp;can be completed multiple times.</p>\r\n\r\n<p>For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.&nbsp; If a worker cannot complete any job, his profit is $0.</p>\r\n\r\n<p>What is the most profit we can make?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\r\n<strong>Output: </strong>100 \r\n<strong>Explanation: W</strong>orkers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\r\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; are in range&nbsp;<code>[1, 10^5]</code></li>\r\n</ul>\r\n", "content_cn": "<p>\u6709\u4e00\u4e9b\u5de5\u4f5c\uff1a<code>difficulty[i]</code>&nbsp;\u8868\u793a\u7b2c <code>i</code> \u4e2a\u5de5\u4f5c\u7684\u96be\u5ea6\uff0c<code>profit[i]</code> \u8868\u793a\u7b2c <code>i</code> \u4e2a\u5de5\u4f5c\u7684\u6536\u76ca\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e9b\u5de5\u4eba\u3002<code>worker[i]</code> \u662f\u7b2c <code>i</code> \u4e2a\u5de5\u4eba\u7684\u80fd\u529b\uff0c\u5373\u8be5\u5de5\u4eba\u53ea\u80fd\u5b8c\u6210\u96be\u5ea6\u5c0f\u4e8e\u7b49\u4e8e <code>worker[i]</code> \u7684\u5de5\u4f5c\u3002</p>\n\n<p>\u6bcf\u4e00\u4e2a\u5de5\u4eba\u90fd\u6700\u591a\u53ea\u80fd\u5b89\u6392\u4e00\u4e2a\u5de5\u4f5c\uff0c\u4f46\u662f\u4e00\u4e2a\u5de5\u4f5c\u53ef\u4ee5\u5b8c\u6210\u591a\u6b21\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c 3 \u4e2a\u5de5\u4eba\u90fd\u5c1d\u8bd5\u5b8c\u6210\u4e00\u4efd\u62a5\u916c\u4e3a 1 \u7684\u540c\u6837\u5de5\u4f5c\uff0c\u90a3\u4e48\u603b\u6536\u76ca\u4e3a $3\u3002\u5982\u679c\u4e00\u4e2a\u5de5\u4eba\u4e0d\u80fd\u5b8c\u6210\u4efb\u4f55\u5de5\u4f5c\uff0c\u4ed6\u7684\u6536\u76ca\u4e3a $0 \u3002</p>\n\n<p>\u6211\u4eec\u80fd\u5f97\u5230\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>\u8f93\u51fa: </strong>100 \n<strong>\u89e3\u91ca: </strong>\u5de5\u4eba\u88ab\u5206\u914d\u7684\u5de5\u4f5c\u96be\u5ea6\u662f [4,4,6,6] \uff0c\u5206\u522b\u83b7\u5f97 [20,20,30,30] \u7684\u6536\u76ca\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 10^5]</code></li>\n</ul>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        \"\"\"\n        :type difficulty: List[int]\n        :type profit: List[int]\n        :type worker: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxProfitAssignment(int* difficulty, int difficultySize, int* profit, int profitSize, int* worker, int workerSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} difficulty\n * @param {number[]} profit\n * @param {number[]} worker\n * @return {number}\n */\nvar maxProfitAssignment = function(difficulty, profit, worker) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} difficulty\n# @param {Integer[]} profit\n# @param {Integer[]} worker\n# @return {Integer}\ndef max_profit_assignment(difficulty, profit, worker)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxProfitAssignment(_ difficulty: [Int], _ profit: [Int], _ worker: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxProfitAssignment(difficulty []int, profit []int, worker []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxProfitAssignment(difficulty: Array[Int], profit: Array[Int], worker: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxProfitAssignment(difficulty: IntArray, profit: IntArray, worker: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_profit_assignment(difficulty: Vec<i32>, profit: Vec<i32>, worker: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $difficulty\n     * @param Integer[] $profit\n     * @param Integer[] $worker\n     * @return Integer\n     */\n    function maxProfitAssignment($difficulty, $profit, $worker) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxProfitAssignment(difficulty: number[], profit: number[], worker: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0854", "frontend_question_id": "0827", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/making-a-large-island", "url_en": "https://leetcode.com/problems/making-a-large-island", "relative_path_cn": "/leetcode/0800-0899/0827.Making%20A%20Large%20Island/README.md", "relative_path_en": "/leetcode/0800-0899/0827.Making%20A%20Large%20Island/README_EN.md", "title_cn": "\u6700\u5927\u4eba\u5de5\u5c9b", "title_en": "Making A Large Island", "question_title_slug": "making-a-large-island", "content_en": "<p>In a 2D grid of <code>0</code>s and <code>1</code>s, we change at most one <code>0</code> to a <code>1</code>.</p>\r\n\r\n<p>After, what is the size of the largest island?&nbsp;(An island is a 4-directionally connected group of <code>1</code>s).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 0], [0, 1]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 1], [1, 0]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation: </strong>Change the 0 to 1 and make the island bigger, only one island with area = 4.</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 1], [1, 1]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Can&#39;t change any 0 to 1, only one island with area = 4.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notes:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code>.</li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5728\u4e8c\u7ef4\u5730\u56fe\u4e0a\uff0c&nbsp;<code>0</code>\u4ee3\u8868\u6d77\u6d0b\uff0c&nbsp;<code>1</code>\u4ee3\u8868\u9646\u5730\uff0c\u6211\u4eec\u6700\u591a\u53ea\u80fd\u5c06\u4e00\u683c&nbsp;<code>0</code> \u6d77\u6d0b\u53d8\u6210&nbsp;<code>1</code>\u53d8\u6210\u9646\u5730\u3002</p>\n\n<p>\u8fdb\u884c\u586b\u6d77\u4e4b\u540e\uff0c\u5730\u56fe\u4e0a\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u662f\u591a\u5c11\uff1f\uff08\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u8fde\u7684&nbsp;<code>1</code>&nbsp;\u53ef\u5f62\u6210\u5c9b\u5c7f\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 0], [0, 1]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u5c06\u4e00\u683c0\u53d8\u62101\uff0c\u6700\u7ec8\u8fde\u901a\u4e24\u4e2a\u5c0f\u5c9b\u5f97\u5230\u9762\u79ef\u4e3a 3 \u7684\u5c9b\u5c7f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 1], [1, 0]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5c06\u4e00\u683c0\u53d8\u62101\uff0c\u5c9b\u5c7f\u7684\u9762\u79ef\u6269\u5927\u4e3a 4\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 1], [1, 1]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6ca1\u67090\u53ef\u4ee5\u8ba9\u6211\u4eec\u53d8\u62101\uff0c\u9762\u79ef\u4f9d\u7136\u4e3a 4\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestIsland(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestIsland(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestIsland(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint largestIsland(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestIsland(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar largestIsland = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef largest_island(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestIsland(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestIsland(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestIsland(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestIsland(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_island(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function largestIsland($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestIsland(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0855", "frontend_question_id": "0828", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-unique-characters-of-all-substrings-of-a-given-string", "url_en": "https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string", "relative_path_cn": "/leetcode/0800-0899/0828.Count%20Unique%20Characters%20of%20All%20Substrings%20of%20a%20Given%20String/README.md", "relative_path_en": "/leetcode/0800-0899/0828.Count%20Unique%20Characters%20of%20All%20Substrings%20of%20a%20Given%20String/README_EN.md", "title_cn": "\u7edf\u8ba1\u5b50\u4e32\u4e2d\u7684\u552f\u4e00\u5b57\u7b26", "title_en": "Count Unique Characters of All Substrings of a Given String", "question_title_slug": "count-unique-characters-of-all-substrings-of-a-given-string", "content_en": "<p>Let&#39;s define a function <code>countUniqueChars(s)</code>&nbsp;that returns the number of unique characters on <code>s</code>, for example if <code>s = &quot;LEETCODE&quot;</code>&nbsp;then <code>&quot;L&quot;</code>, <code>&quot;T&quot;</code>,<code>&quot;C&quot;</code>,<code>&quot;O&quot;</code>,<code>&quot;D&quot;</code> are the unique characters since they appear only once in <code>s</code>, therefore&nbsp;<code>countUniqueChars(s) = 5</code>.<br />\n<br />\nOn this problem given a string <code>s</code> we need to return the sum of&nbsp;<code>countUniqueChars(t)</code>&nbsp;where <code>t</code> is a substring of <code>s</code>. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.</p>\n\n<p>Since the answer can be very large, return&nbsp;the answer&nbsp;modulo&nbsp;<code>10 ^ 9 + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABC&quot;\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;.\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABA&quot;\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>The same as example 1, except <code>countUniqueChars</code>(&quot;ABA&quot;) = 1.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LEETCODE&quot;\n<strong>Output:</strong> 92\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10^4</code></li>\n\t<li><code>s</code>&nbsp;contain upper-case English letters only.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 <code>countUniqueChars(s)</code> \u6765\u7edf\u8ba1\u5b57\u7b26\u4e32 <code>s</code> \u4e2d\u7684\u552f\u4e00\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u552f\u4e00\u5b57\u7b26\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u4f8b\u5982\uff1a<code>s = &quot;LEETCODE&quot;</code> \uff0c\u5219\u5176\u4e2d <code>&quot;L&quot;</code>, <code>&quot;T&quot;</code>,<code>&quot;C&quot;</code>,<code>&quot;O&quot;</code>,<code>&quot;D&quot;</code> \u90fd\u662f\u552f\u4e00\u5b57\u7b26\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u6240\u4ee5 <code>countUniqueChars(s) = 5</code> \u3002</p>\n\n<p>\u672c\u9898\u5c06\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de <code>countUniqueChars(t)</code> \u7684\u603b\u548c\uff0c\u5176\u4e2d <code>t</code> \u662f <code>s</code> \u7684\u5b50\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u67d0\u4e9b\u5b50\u5b57\u7b26\u4e32\u53ef\u80fd\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4f60\u7edf\u8ba1\u65f6\u4e5f\u5fc5\u987b\u7b97\u4e0a\u8fd9\u4e9b\u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5fc5\u987b\u7edf\u8ba1 <code>s</code> \u7684\u6240\u6709\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u552f\u4e00\u5b57\u7b26\uff09\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8bf7\u5c06\u7ed3\u679c <strong>mod 10 ^ 9 + 7</strong> \u540e\u518d\u8fd4\u56de\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;ABC&quot;\n<strong>\u8f93\u51fa: </strong>10\n<strong>\u89e3\u91ca:</strong> \u6240\u6709\u53ef\u80fd\u7684\u5b50\u4e32\u4e3a\uff1a&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; \u548c &quot;ABC&quot;\u3002\n     \u5176\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5b50\u4e32\u90fd\u7531\u72ec\u7279\u5b57\u7b26\u6784\u6210\u3002\n     \u6240\u4ee5\u5176\u957f\u5ea6\u603b\u548c\u4e3a\uff1a1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;ABA&quot;\n<strong>\u8f93\u51fa: </strong>8\n<strong>\u89e3\u91ca: </strong>\u9664<code>\u4e86 countUniqueChars</code>(&quot;ABA&quot;) = 1 \u4e4b\u5916\uff0c\u5176\u4f59\u4e0e\u793a\u4f8b 1 \u76f8\u540c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;LEETCODE&quot;\n<strong>\u8f93\u51fa\uff1a</strong>92\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10^4</code></li>\n\t<li><code>s</code> \u53ea\u5305\u542b\u5927\u5199\u82f1\u6587\u5b57\u7b26</li>\n</ul>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int uniqueLetterString(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int uniqueLetterString(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def uniqueLetterString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint uniqueLetterString(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int UniqueLetterString(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar uniqueLetterString = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef unique_letter_string(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func uniqueLetterString(_ s: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func uniqueLetterString(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def uniqueLetterString(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun uniqueLetterString(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn unique_letter_string(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function uniqueLetterString($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function uniqueLetterString(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0856", "frontend_question_id": "0829", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/consecutive-numbers-sum", "url_en": "https://leetcode.com/problems/consecutive-numbers-sum", "relative_path_cn": "/leetcode/0800-0899/0829.Consecutive%20Numbers%20Sum/README.md", "relative_path_en": "/leetcode/0800-0899/0829.Consecutive%20Numbers%20Sum/README_EN.md", "title_cn": "\u8fde\u7eed\u6574\u6570\u6c42\u548c", "title_en": "Consecutive Numbers Sum", "question_title_slug": "consecutive-numbers-sum", "content_en": "<p>Given a positive integer&nbsp;<code>N</code>, how many ways can we write it as a sum of&nbsp;consecutive positive integers?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>5\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>5 = 5 = 2 + 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>9\r\n<strong>Output: </strong>3\r\n<strong>Explanation: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>15\r\n<strong>Output: </strong>4\r\n<strong>Explanation: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre>\r\n\r\n<p><strong>Note:</strong>&nbsp;<code>1 &lt;= N &lt;= 10 ^ 9</code>.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>N</code>\uff0c\u8bd5\u6c42\u6709\u591a\u5c11\u7ec4\u8fde\u7eed\u6b63\u6574\u6570\u6ee1\u8db3\u6240\u6709\u6570\u5b57\u4e4b\u548c\u4e3a <code>N</code>?</p>\n\n<p><strong>\u793a</strong><strong>\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong>2\n<strong>\u89e3\u91ca: </strong>5 = 5 = 2 + 3\uff0c\u5171\u6709\u4e24\u7ec4\u8fde\u7eed\u6574\u6570([5],[2,3])\u6c42\u548c\u540e\u4e3a 5\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>9\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>15\n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong><code>1 &lt;= N &lt;= 10 ^ 9</code></p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int consecutiveNumbersSum(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int consecutiveNumbersSum(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def consecutiveNumbersSum(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def consecutiveNumbersSum(self, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint consecutiveNumbersSum(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ConsecutiveNumbersSum(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar consecutiveNumbersSum = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef consecutive_numbers_sum(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func consecutiveNumbersSum(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func consecutiveNumbersSum(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def consecutiveNumbersSum(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun consecutiveNumbersSum(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn consecutive_numbers_sum(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function consecutiveNumbersSum($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function consecutiveNumbersSum(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0857", "frontend_question_id": "0830", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/positions-of-large-groups", "url_en": "https://leetcode.com/problems/positions-of-large-groups", "relative_path_cn": "/leetcode/0800-0899/0830.Positions%20of%20Large%20Groups/README.md", "relative_path_en": "/leetcode/0800-0899/0830.Positions%20of%20Large%20Groups/README_EN.md", "title_cn": "\u8f83\u5927\u5206\u7ec4\u7684\u4f4d\u7f6e", "title_en": "Positions of Large Groups", "question_title_slug": "positions-of-large-groups", "content_en": "<p>In a string <code><font face=\"monospace\">s</font></code>&nbsp;of lowercase letters, these letters form consecutive groups of the same character.</p>\n\n<p>For example, a string like <code>s = &quot;abbxxxxzyy&quot;</code> has the groups <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code>, and&nbsp;<code>&quot;yy&quot;</code>.</p>\n\n<p>A group is identified by an interval&nbsp;<code>[start, end]</code>, where&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code>&nbsp;denote the start and end&nbsp;indices (inclusive) of the group. In the above example,&nbsp;<code>&quot;xxxx&quot;</code>&nbsp;has the interval&nbsp;<code>[3,6]</code>.</p>\n\n<p>A group is considered&nbsp;<strong>large</strong>&nbsp;if it has 3 or more characters.</p>\n\n<p>Return&nbsp;<em>the intervals of every <strong>large</strong> group sorted in&nbsp;<strong>increasing order by start index</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbxxxxzzy&quot;\n<strong>Output:</strong> [[3,6]]\n<strong>Explanation</strong>: <code>&quot;xxxx&quot; is the only </code>large group with start index 3 and end index 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> []\n<strong>Explanation</strong>: We have groups &quot;a&quot;, &quot;b&quot;, and &quot;c&quot;, none of which are large groups.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdddeeeeaabbbcd&quot;\n<strong>Output:</strong> [[3,5],[6,9],[12,14]]\n<strong>Explanation</strong>: The large groups are &quot;ddd&quot;, &quot;eeee&quot;, and &quot;bbb&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> contains lower-case English letters only.</li>\n</ul>\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32 <code>s</code> \u4e2d\uff0c\u5305\u542b\u7531\u4e00\u4e9b\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\u6240\u6784\u6210\u7684\u5206\u7ec4\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5728\u5b57\u7b26\u4e32 <code>s = \"abbxxxxzyy\"</code>\u00a0\u4e2d\uff0c\u5c31\u542b\u6709 <code>\"a\"</code>, <code>\"bb\"</code>, <code>\"xxxx\"</code>, <code>\"z\"</code> \u548c <code>\"yy\"</code> \u8fd9\u6837\u7684\u4e00\u4e9b\u5206\u7ec4\u3002</p>\n\n<p>\u5206\u7ec4\u53ef\u4ee5\u7528\u533a\u95f4 <code>[start, end]</code> \u8868\u793a\uff0c\u5176\u4e2d <code>start</code> \u548c <code>end</code> \u5206\u522b\u8868\u793a\u8be5\u5206\u7ec4\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\u4f4d\u7f6e\u7684\u4e0b\u6807\u3002\u4e0a\u4f8b\u4e2d\u7684 <code>\"xxxx\"</code> \u5206\u7ec4\u7528\u533a\u95f4\u8868\u793a\u4e3a <code>[3,6]</code> \u3002</p>\n\n<p>\u6211\u4eec\u79f0\u6240\u6709\u5305\u542b\u5927\u4e8e\u6216\u7b49\u4e8e\u4e09\u4e2a\u8fde\u7eed\u5b57\u7b26\u7684\u5206\u7ec4\u4e3a <strong>\u8f83\u5927\u5206\u7ec4</strong> \u3002</p>\n\n<p>\u627e\u5230\u6bcf\u4e00\u4e2a <strong>\u8f83\u5927\u5206\u7ec4</strong> \u7684\u533a\u95f4\uff0c<strong>\u6309\u8d77\u59cb\u4f4d\u7f6e\u4e0b\u6807\u9012\u589e\u987a\u5e8f\u6392\u5e8f\u540e</strong>\uff0c\u8fd4\u56de\u7ed3\u679c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"abbxxxxzzy\"\n<strong>\u8f93\u51fa\uff1a</strong>[[3,6]]\n<strong>\u89e3\u91ca</strong><strong>\uff1a</strong><code>\"xxxx\" \u662f\u4e00\u4e2a\u8d77\u59cb\u4e8e 3 \u4e14\u7ec8\u6b62\u4e8e 6 \u7684\u8f83\u5927\u5206\u7ec4</code>\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"abc\"\n<strong>\u8f93\u51fa\uff1a</strong>[]\n<strong>\u89e3\u91ca\uff1a</strong>\"a\",\"b\" \u548c \"c\" \u5747\u4e0d\u662f\u7b26\u5408\u8981\u6c42\u7684\u8f83\u5927\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"abcdddeeeeaabbbcd\"\n<strong>\u8f93\u51fa\uff1a</strong>[[3,5],[6,9],[12,14]]\n<strong>\u89e3\u91ca\uff1a</strong>\u8f83\u5927\u5206\u7ec4\u4e3a \"ddd\", \"eeee\" \u548c \"bbb\"</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"aba\"\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\u00a0\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 1000</code></li>\n\t<li><code>s</code> \u4ec5\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> largeGroupPositions(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> largeGroupPositions(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largeGroupPositions(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largeGroupPositions(self, s: str) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** largeGroupPositions(char * s, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> LargeGroupPositions(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number[][]}\n */\nvar largeGroupPositions = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[][]}\ndef large_group_positions(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largeGroupPositions(_ s: String) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largeGroupPositions(s string) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largeGroupPositions(s: String): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largeGroupPositions(s: String): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn large_group_positions(s: String) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[][]\n     */\n    function largeGroupPositions($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largeGroupPositions(s: string): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0858", "frontend_question_id": "0831", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/masking-personal-information", "url_en": "https://leetcode.com/problems/masking-personal-information", "relative_path_cn": "/leetcode/0800-0899/0831.Masking%20Personal%20Information/README.md", "relative_path_en": "/leetcode/0800-0899/0831.Masking%20Personal%20Information/README_EN.md", "title_cn": "\u9690\u85cf\u4e2a\u4eba\u4fe1\u606f", "title_en": "Masking Personal Information", "question_title_slug": "masking-personal-information", "content_en": "<p>We are given a&nbsp;personal information string <code>S</code>, which may represent&nbsp;either <strong>an email address</strong> or <strong>a phone number.</strong></p>\r\n\r\n<p>We would like to mask this&nbsp;personal information according to the&nbsp;following rules:</p>\r\n\r\n<p><br />\r\n<u><strong>1. Email address:</strong></u></p>\r\n\r\n<p>We define a&nbsp;<strong>name</strong> to be a string of <code>length &ge; 2</code> consisting&nbsp;of only lowercase letters&nbsp;<code>a-z</code> or uppercase&nbsp;letters&nbsp;<code>A-Z</code>.</p>\r\n\r\n<p>An email address starts with a name, followed by the&nbsp;symbol <code>&#39;@&#39;</code>, followed by a name, followed by the&nbsp;dot&nbsp;<code>&#39;.&#39;</code>&nbsp;and&nbsp;followed by a name.&nbsp;</p>\r\n\r\n<p>All email addresses are&nbsp;guaranteed to be valid and in the format of&nbsp;<code>&quot;name1@name2.name3&quot;.</code></p>\r\n\r\n<p>To mask an email, <strong>all names must be converted to lowercase</strong> and <strong>all letters between the first and last letter of the first name</strong> must be replaced by 5 asterisks <code>&#39;*&#39;</code>.</p>\r\n\r\n<p><br />\r\n<u><strong>2. Phone number:</strong></u></p>\r\n\r\n<p>A phone number is a string consisting of&nbsp;only the digits <code>0-9</code> or the characters from the set <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;}.</code>&nbsp;You may assume a phone&nbsp;number contains&nbsp;10 to 13 digits.</p>\r\n\r\n<p>The last 10 digits make up the local&nbsp;number, while the digits before those make up the country code. Note that&nbsp;the country code is optional. We want to expose only the last 4 digits&nbsp;and mask all other&nbsp;digits.</p>\r\n\r\n<p>The local&nbsp;number&nbsp;should be formatted and masked as <code>&quot;***-***-1111&quot;,&nbsp;</code>where <code>1</code> represents the exposed digits.</p>\r\n\r\n<p>To mask a phone number with country code like <code>&quot;+111 111 111 1111&quot;</code>, we write it in the form <code>&quot;+***-***-***-1111&quot;.</code>&nbsp; The <code>&#39;+&#39;</code>&nbsp;sign and the first <code>&#39;-&#39;</code>&nbsp;sign before the local number should only exist if there is a country code.&nbsp; For example, a 12 digit phone number mask&nbsp;should start&nbsp;with <code>&quot;+**-&quot;</code>.</p>\r\n\r\n<p>Note that extraneous characters like <code>&quot;(&quot;, &quot;)&quot;, &quot; &quot;</code>, as well as&nbsp;extra dashes or plus signs not part of the above formatting scheme should be removed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Return the correct &quot;mask&quot; of the information provided.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;LeetCode@LeetCode.com&quot;\r\n<strong>Output: </strong>&quot;l*****e@leetcode.com&quot;\r\n<strong>Explanation:&nbsp;</strong>All names are converted to lowercase, and the letters between the\r\n&nbsp;            first and last letter of the first name is replaced by 5 asterisks.\r\n&nbsp;            Therefore, &quot;leetcode&quot; -&gt; &quot;l*****e&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;AB@qq.com&quot;\r\n<strong>Output: </strong>&quot;a*****b@qq.com&quot;\r\n<strong>Explanation:&nbsp;</strong>There must be 5 asterisks between the first and last letter \r\n&nbsp;            of the first name &quot;ab&quot;. Therefore, &quot;ab&quot; -&gt; &quot;a*****b&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;1(234)567-890&quot;\r\n<strong>Output: </strong>&quot;***-***-7890&quot;\r\n<strong>Explanation:</strong>&nbsp;10 digits in the phone number, which means all digits make up the local number.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;86-(10)12345678&quot;\r\n<strong>Output: </strong>&quot;+**-***-***-5678&quot;\r\n<strong>Explanation:</strong>&nbsp;12 digits, 2 digits for country code and 10 digits for local number. \r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>.</li>\r\n\t<li>Emails have length at least 8.</li>\r\n\t<li>Phone numbers have length at least 10.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u6761\u4e2a\u4eba\u4fe1\u606f\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a <strong>\u90ae\u7bb1\u5730\u5740</strong> \uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e32 <strong>\u7535\u8bdd\u53f7\u7801</strong> \u3002</p>\n\n<p>\u6211\u4eec\u5c06\u9690\u85cf\u5b83\u7684\u9690\u79c1\u4fe1\u606f\uff0c\u901a\u8fc7\u5982\u4e0b\u89c4\u5219:</p>\n\n<p>&nbsp;</p>\n\n<p><strong>1. \u7535\u5b50\u90ae\u7bb1</strong></p>\n\n<p>\u5b9a\u4e49\u540d\u79f0 <strong>name</strong> \u662f\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 2 \uff08<code>length &ge; 2</code>\uff09\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd <code>a-z</code> \u548c\u5927\u5199\u5b57\u6bcd <code>A-Z</code> \u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u7531\u540d\u79f0 <strong>name</strong> \u5f00\u5934\uff0c\u7d27\u63a5\u7740\u662f\u7b26\u53f7 <code>&#39;@&#39;</code>\uff0c\u540e\u9762\u63a5\u7740\u4e00\u4e2a\u540d\u79f0 <strong>name</strong>\uff0c\u518d\u63a5\u7740\u4e00\u4e2a\u70b9\u53f7 <code>&#39;.&#39;</code>\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u540d\u79f0 <strong>name</strong>\u3002</p>\n\n<p>\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u786e\u5b9a\u4e3a\u6709\u6548\u7684\uff0c\u5e76\u4e14\u683c\u5f0f\u662f <code>&quot;name1@name2.name3&quot;</code>\u3002</p>\n\n<p>\u4e3a\u4e86\u9690\u85cf\u7535\u5b50\u90ae\u7bb1\uff0c\u6240\u6709\u7684\u540d\u79f0 <strong>name</strong> \u5fc5\u987b\u88ab\u8f6c\u6362\u6210\u5c0f\u5199\u7684\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u540d\u79f0&nbsp;<strong>name</strong> \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4e2d\u95f4\u7684\u6240\u6709\u5b57\u6bcd\u7531 5 \u4e2a <code>&#39;*&#39;</code> \u4ee3\u66ff\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>2. \u7535\u8bdd\u53f7\u7801</strong></p>\n\n<p>\u7535\u8bdd\u53f7\u7801\u662f\u4e00\u4e32\u5305\u62ec\u6570\u5b57&nbsp;<code>0-9</code>\uff0c\u4ee5\u53ca <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;}</code> \u8fd9\u51e0\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7535\u8bdd\u53f7\u7801\u5305\u542b 10 \u5230 13 \u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u7535\u8bdd\u53f7\u7801\u7684\u6700\u540e 10 \u4e2a\u6570\u5b57\u7ec4\u6210\u672c\u5730\u53f7\u7801\uff0c\u5728\u8fd9\u4e4b\u524d\u7684\u6570\u5b57\u7ec4\u6210\u56fd\u9645\u53f7\u7801\u3002\u6ce8\u610f\uff0c\u56fd\u9645\u53f7\u7801\u662f\u53ef\u9009\u7684\u3002\u6211\u4eec\u53ea\u66b4\u9732\u6700\u540e 4 \u4e2a\u6570\u5b57\u5e76\u9690\u85cf\u6240\u6709\u5176\u4ed6\u6570\u5b57\u3002</p>\n\n<p>\u672c\u5730\u53f7\u7801\u662f\u6709\u683c\u5f0f\u7684\uff0c\u5e76\u4e14\u5982 <code>&quot;***-***-1111&quot;</code> \u8fd9\u6837\u663e\u793a\uff0c\u8fd9\u91cc\u7684 1 \u8868\u793a\u66b4\u9732\u7684\u6570\u5b57\u3002</p>\n\n<p>\u4e3a\u4e86\u9690\u85cf\u6709\u56fd\u9645\u53f7\u7801\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u50cf&nbsp;<code>&quot;+111 111 111 1111&quot;</code>\uff0c\u6211\u4eec\u4ee5 <code>&quot;+***-***-***-1111&quot;</code> \u7684\u683c\u5f0f\u6765\u663e\u793a\u3002\u5728\u672c\u5730\u53f7\u7801\u524d\u9762\u7684 <code>&#39;+&#39;</code> \u53f7\u548c\u7b2c\u4e00\u4e2a <code>&#39;-&#39;</code> \u53f7\u4ec5\u5f53\u7535\u8bdd\u53f7\u7801\u4e2d\u5305\u542b\u56fd\u9645\u53f7\u7801\u65f6\u5b58\u5728\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a 12 \u4f4d\u7684\u7535\u8bdd\u53f7\u7801\u5e94\u5f53\u4ee5 <code>&quot;+**-&quot;</code> \u5f00\u5934\u8fdb\u884c\u663e\u793a\u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u50cf <code>&quot;(&quot;\uff0c&quot;)&quot;\uff0c&quot; &quot;</code> \u8fd9\u6837\u7684\u4e0d\u76f8\u5e72\u7684\u5b57\u7b26\u4ee5\u53ca\u4e0d\u7b26\u5408\u4e0a\u8ff0\u683c\u5f0f\u7684\u989d\u5916\u7684\u51cf\u53f7\u6216\u8005\u52a0\u53f7\u90fd\u5e94\u5f53\u88ab\u5220\u9664\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u6700\u540e\uff0c\u5c06\u63d0\u4f9b\u7684\u4fe1\u606f\u6b63\u786e\u9690\u85cf\u540e\u8fd4\u56de\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;LeetCode@LeetCode.com&quot;\n<strong>\u8f93\u51fa: </strong>&quot;l*****e@leetcode.com&quot;\n<strong>\u89e3\u91ca\uff1a \n</strong>\u6240\u6709\u7684\u540d\u79f0\u8f6c\u6362\u6210\u5c0f\u5199, \u7b2c\u4e00\u4e2a\u540d\u79f0\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e2d\u95f4\u7531 5 \u4e2a\u661f\u53f7\u4ee3\u66ff\u3002\n\u56e0\u6b64\uff0c&quot;leetcode&quot; -&gt; &quot;l*****e&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;AB@qq.com&quot;\n<strong>\u8f93\u51fa: </strong>&quot;a*****b@qq.com&quot;\n<strong>\u89e3\u91ca:&nbsp;\n</strong>\u7b2c\u4e00\u4e2a\u540d\u79f0&quot;ab&quot;\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e2d\u95f4\u5fc5\u987b\u6709 5 \u4e2a\u661f\u53f7\n\u56e0\u6b64\uff0c&quot;ab&quot; -&gt; &quot;a*****b&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;1(234)567-890&quot;\n<strong>\u8f93\u51fa: </strong>&quot;***-***-7890&quot;\n<strong>\u89e3\u91ca:</strong>&nbsp;\n10 \u4e2a\u6570\u5b57\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u90a3\u610f\u5473\u7740\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u672c\u5730\u53f7\u7801\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;86-(10)12345678&quot;\n<strong>\u8f93\u51fa: </strong>&quot;+**-***-***-5678&quot;\n<strong>\u89e3\u91ca:</strong>&nbsp;\n12 \u4f4d\u6570\u5b57\uff0c2 \u4e2a\u6570\u5b57\u662f\u56fd\u9645\u53f7\u7801\u53e6\u5916 10 \u4e2a\u6570\u5b57\u662f\u672c\u5730\u53f7\u7801 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>\u3002</li>\n\t<li>\u90ae\u7bb1\u7684\u957f\u5ea6\u81f3\u5c11\u662f 8\u3002</li>\n\t<li>\u7535\u8bdd\u53f7\u7801\u7684\u957f\u5ea6\u81f3\u5c11\u662f 10\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string maskPII(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String maskPII(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maskPII(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maskPII(self, S: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * maskPII(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MaskPII(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar maskPII = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef mask_pii(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maskPII(_ S: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maskPII(S string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maskPII(S: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maskPII(S: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mask_pii(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String\n     */\n    function maskPII($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maskPII(S: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0861", "frontend_question_id": "0832", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flipping-an-image", "url_en": "https://leetcode.com/problems/flipping-an-image", "relative_path_cn": "/leetcode/0800-0899/0832.Flipping%20an%20Image/README.md", "relative_path_en": "/leetcode/0800-0899/0832.Flipping%20an%20Image/README_EN.md", "title_cn": "\u7ffb\u8f6c\u56fe\u50cf", "title_en": "Flipping an Image", "question_title_slug": "flipping-an-image", "content_en": "<p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.</p>\r\n\r\n<p>To flip an image horizontally means that each row of the image is reversed.&nbsp; For example, flipping&nbsp;<code>[1, 1, 0]</code>&nbsp;horizontally results in&nbsp;<code>[0, 1, 1]</code>.</p>\r\n\r\n<p>To invert an image means&nbsp;that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.&nbsp;For example, inverting&nbsp;<code>[0, 1, 1]</code>&nbsp;results in&nbsp;<code>[1, 0, 0]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0],[1,0,1],[0,0,0]]\r\n<strong>Output: </strong>[[1,0,0],[0,1,0],[1,1,1]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\r\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\r\n<strong>Output: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\r\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\r\n\t<li><code>0 &lt;= A[i][j]<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">&nbsp;&lt;=&nbsp;</font>1</code></li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u77e9\u9635&nbsp;<code>A</code>\uff0c\u6211\u4eec\u60f3\u5148\u6c34\u5e73\u7ffb\u8f6c\u56fe\u50cf\uff0c\u7136\u540e\u53cd\u8f6c\u56fe\u50cf\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p>\n\n<p>\u6c34\u5e73\u7ffb\u8f6c\u56fe\u7247\u5c31\u662f\u5c06\u56fe\u7247\u7684\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5373\u9006\u5e8f\u3002\u4f8b\u5982\uff0c\u6c34\u5e73\u7ffb\u8f6c&nbsp;<code>[1, 1, 0]</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[0, 1, 1]</code>\u3002</p>\n\n<p>\u53cd\u8f6c\u56fe\u7247\u7684\u610f\u601d\u662f\u56fe\u7247\u4e2d\u7684&nbsp;<code>0</code>&nbsp;\u5168\u90e8\u88ab&nbsp;<code>1</code>&nbsp;\u66ff\u6362\uff0c&nbsp;<code>1</code>&nbsp;\u5168\u90e8\u88ab&nbsp;<code>0</code>&nbsp;\u66ff\u6362\u3002\u4f8b\u5982\uff0c\u53cd\u8f6c&nbsp;<code>[0, 1, 1]</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[1, 0, 0]</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1,1,0],[1,0,1],[0,0,0]]\n<strong>\u8f93\u51fa: </strong>[[1,0,0],[0,1,0],[1,1,1]]\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u7ffb\u8f6c\u6bcf\u4e00\u884c: [[0,1,1],[1,0,1],[0,0,0]]\uff1b\n     \u7136\u540e\u53cd\u8f6c\u56fe\u7247: [[1,0,0],[0,1,0],[1,1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>\u8f93\u51fa: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u7ffb\u8f6c\u6bcf\u4e00\u884c: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]\uff1b\n     \u7136\u540e\u53cd\u8f6c\u56fe\u7247: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n\t<li><code>0 &lt;= A[i][j]&nbsp;&lt;=&nbsp;1</code></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] flipAndInvertImage(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def flipAndInvertImage(self, A: List[List[int]]) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** flipAndInvertImage(int** A, int ASize, int* AColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] FlipAndInvertImage(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar flipAndInvertImage = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @return {Integer[][]}\ndef flip_and_invert_image(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func flipAndInvertImage(_ A: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func flipAndInvertImage(A [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def flipAndInvertImage(A: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun flipAndInvertImage(A: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn flip_and_invert_image(a: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function flipAndInvertImage($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function flipAndInvertImage(A: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0862", "frontend_question_id": "0833", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-and-replace-in-string", "url_en": "https://leetcode.com/problems/find-and-replace-in-string", "relative_path_cn": "/leetcode/0800-0899/0833.Find%20And%20Replace%20in%20String/README.md", "relative_path_en": "/leetcode/0800-0899/0833.Find%20And%20Replace%20in%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u4e2d\u7684\u67e5\u627e\u4e0e\u66ff\u6362", "title_en": "Find And Replace in String", "question_title_slug": "find-and-replace-in-string", "content_en": "<p>To some string <code>S</code>, we will perform some&nbsp;replacement&nbsp;operations that replace groups of letters with new ones (not necessarily the same size).</p>\n\n<p>Each replacement operation has <code>3</code> parameters: a starting index <code>i</code>, a source word&nbsp;<code>x</code>&nbsp;and a target word&nbsp;<code>y</code>.&nbsp; The rule is that if <code><font face=\"monospace\">x</font></code>&nbsp;starts at position <code>i</code>&nbsp;in the <strong>original</strong> <strong>string</strong> <strong><code>S</code></strong>, then we will replace that occurrence of&nbsp;<code>x</code>&nbsp;with&nbsp;<code>y</code>.&nbsp; If not, we do nothing.</p>\n\n<p>For example, if we have&nbsp;<code>S = &quot;abcd&quot;</code>&nbsp;and we have some replacement operation&nbsp;<code>i = 2, x = &quot;cd&quot;, y = &quot;ffff&quot;</code>, then because&nbsp;<code>&quot;cd&quot;</code>&nbsp;starts at position <code><font face=\"monospace\">2</font></code>&nbsp;in the original string <code>S</code>, we will replace it with <code>&quot;ffff&quot;</code>.</p>\n\n<p>Using another example on <code>S = &quot;abcd&quot;</code>, if we have both the replacement operation <code>i = 0, x = &quot;ab&quot;, y = &quot;eee&quot;</code>, as well as another replacement operation&nbsp;<code>i = 2, x = &quot;ec&quot;, y = &quot;ffff&quot;</code>, this second operation does nothing because in the original string&nbsp;<code>S[2] = &#39;c&#39;</code>, which doesn&#39;t match&nbsp;<code>x[0] = &#39;e&#39;</code>.</p>\n\n<p>All these operations occur simultaneously.&nbsp; It&#39;s guaranteed that there won&#39;t be any overlap in replacement: for example,&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> is not a valid test case.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;abcd&quot;, indexes = [0, 2], sources = [&quot;a&quot;, &quot;cd&quot;], targets = [&quot;eee&quot;, &quot;ffff&quot;]\n<strong>Output:</strong> &quot;eeebffff&quot;\n<strong>Explanation:</strong>\n&quot;a&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;.\n&quot;cd&quot; starts at index 2 in S, so it&#39;s replaced by &quot;ffff&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;abcd&quot;, indexes = [0, 2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>Output:</strong> &quot;eeecd&quot;\n<strong>Explanation:</strong>\n&quot;ab&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;.\n&quot;ec&quot; doesn&#39;t starts at index 2 in the <strong>original</strong> S, so we do nothing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= S.length &lt;= 1000</code></li>\n\t<li><code>S</code> consists of only lowercase English letters.</li>\n\t<li><code>0 &lt;= indexes.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= indexes[i] &lt; S.length</code></li>\n\t<li><code>sources.length == indexes.length</code></li>\n\t<li><code>targets.length == indexes.length</code></li>\n\t<li><code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code></li>\n\t<li><code>sources[i]</code>&nbsp;and <code>targets[i]</code>&nbsp;consist of only lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u67d0\u4e2a\u5b57\u7b26\u4e32 <code>S</code> \u9700\u8981\u6267\u884c\u4e00\u4e9b\u66ff\u6362\u64cd\u4f5c\uff0c\u7528\u65b0\u7684\u5b57\u6bcd\u7ec4\u66ff\u6362\u539f\u6709\u7684\u5b57\u6bcd\u7ec4\uff08\u4e0d\u4e00\u5b9a\u5927\u5c0f\u76f8\u540c\uff09\u3002</p>\n\n<p>\u6bcf\u4e2a\u66ff\u6362\u64cd\u4f5c\u5177\u6709 3 \u4e2a\u53c2\u6570\uff1a\u8d77\u59cb\u7d22\u5f15 <code>i</code>\uff0c\u6e90\u5b57 <code>x</code> \u548c\u76ee\u6807\u5b57 <code>y</code>\u3002\u89c4\u5219\u662f\uff1a\u5982\u679c <code>x</code> \u4ece<strong>\u539f\u59cb\u5b57\u7b26\u4e32 <code>S</code></strong> \u4e2d\u7684\u4f4d\u7f6e <code>i</code> \u5f00\u59cb\uff0c\u90a3\u4e48\u5c31\u7528 <code>y</code> \u66ff\u6362\u51fa\u73b0\u7684 <code>x</code>\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c <code>S\u00a0= \u201cabcd\u201d</code> \u5e76\u4e14\u66ff\u6362\u64cd\u4f5c <code>i = 2\uff0cx = \u201ccd\u201d\uff0cy = \u201cffff\u201d</code>\uff0c\u90a3\u4e48\u56e0\u4e3a <code>\u201ccd\u201d</code> \u4ece\u539f\u59cb\u5b57\u7b26\u4e32 <code>S</code> \u4e2d\u7684\u4f4d\u7f6e <code>2</code> \u5f00\u59cb\uff0c\u6240\u4ee5\u7528\u00a0<code>\u201cffff\u201d</code> \u66ff\u6362\u5b83\u3002</p>\n\n<p>\u518d\u6765\u770b <code>S = \u201cabcd\u201d</code> \u4e0a\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u4e2a\u66ff\u6362\u64cd\u4f5c<code> i = 0\uff0cx = \u201cab\u201d\uff0cy = \u201ceee\u201d</code>\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u66ff\u6362\u64cd\u4f5c <code>i = 2\uff0cx = \u201cec\u201d\uff0cy = \u201cffff\u201d</code>\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5c06\u4e0d\u4f1a\u6267\u884c\uff0c\u56e0\u4e3a\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u00a0<code>S[2] = 'c'</code>\uff0c\u4e0e <code>x[0] = 'e'</code> \u4e0d\u5339\u914d\u3002</p>\n\n<p>\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\u3002\u4fdd\u8bc1\u5728\u66ff\u6362\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u91cd\u53e0\uff1a\u00a0<code>S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"]</code> \u4e0d\u662f\u6709\u6548\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\n<strong>\u8f93\u51fa\uff1a</strong>\"eeebffff\"\n<strong>\u89e3\u91ca\uff1a\n</strong>\"a\" \u4ece S \u4e2d\u7684\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a \"eee\"\u3002\n\"cd\" \u4ece S \u4e2d\u7684\u7d22\u5f15 2 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a \"ffff\"\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\n<strong>\u8f93\u51fa\uff1a</strong>\"eeecd\"\n<strong>\u89e3\u91ca\uff1a\n</strong>\"ab\" \u4ece S \u4e2d\u7684\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a \"eee\"\u3002\n\"ec\" \u6ca1\u6709\u4ece<strong>\u539f\u59cb\u7684</strong> S \u4e2d\u7684\u7d22\u5f15 2 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u88ab\u66ff\u6362\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= S.length <= 1000</code></li>\n\t<li><code>S</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>0 <= indexes.length <= 100</code></li>\n\t<li><code>0 <= indexes[i] < S.length</code></li>\n\t<li><code>sources.length == indexes.length</code></li>\n\t<li><code>targets.length == indexes.length</code></li>\n\t<li><code>1 <= sources[i].length, targets[i].length <= 50</code></li>\n\t<li><code>sources[i]</code> \u548c <code>targets[i]</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n\n<p>\u00a0</p>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string findReplaceString(string S, vector<int>& indexes, vector<string>& sources, vector<string>& targets) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findReplaceString(self, S, indexes, sources, targets):\n        \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * findReplaceString(char * S, int* indexes, int indexesSize, char ** sources, int sourcesSize, char ** targets, int targetsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FindReplaceString(string S, int[] indexes, string[] sources, string[] targets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {number[]} indexes\n * @param {string[]} sources\n * @param {string[]} targets\n * @return {string}\n */\nvar findReplaceString = function(S, indexes, sources, targets) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[]} indexes\n# @param {String[]} sources\n# @param {String[]} targets\n# @return {String}\ndef find_replace_string(s, indexes, sources, targets)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findReplaceString(_ S: String, _ indexes: [Int], _ sources: [String], _ targets: [String]) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findReplaceString(S string, indexes []int, sources []string, targets []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findReplaceString(S: String, indexes: Array[Int], sources: Array[String], targets: Array[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findReplaceString(S: String, indexes: IntArray, sources: Array<String>, targets: Array<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_replace_string(s: String, indexes: Vec<i32>, sources: Vec<String>, targets: Vec<String>) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer[] $indexes\n     * @param String[] $sources\n     * @param String[] $targets\n     * @return String\n     */\n    function findReplaceString($S, $indexes, $sources, $targets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findReplaceString(S: string, indexes: number[], sources: string[], targets: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0863", "frontend_question_id": "0834", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-distances-in-tree", "url_en": "https://leetcode.com/problems/sum-of-distances-in-tree", "relative_path_cn": "/leetcode/0800-0899/0834.Sum%20of%20Distances%20in%20Tree/README.md", "relative_path_en": "/leetcode/0800-0899/0834.Sum%20of%20Distances%20in%20Tree/README_EN.md", "title_cn": "\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c", "title_en": "Sum of Distances in Tree", "question_title_slug": "sum-of-distances-in-tree", "content_en": "<p>An undirected, connected&nbsp;tree with <code>N</code> nodes labelled <code>0...N-1</code> and <code>N-1</code> <code>edges</code>&nbsp;are&nbsp;given.</p>\r\n\r\n<p>The <code>i</code>th edge connects nodes&nbsp;<code>edges[i][0] </code>and<code>&nbsp;edges[i][1]</code>&nbsp;together.</p>\r\n\r\n<p>Return a list <code>ans</code>, where <code>ans[i]</code> is the sum of the distances between node <code>i</code> and all other nodes.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\r\n<strong>Output: </strong>[8,12,6,10,10,10]\r\n<strong>Explanation: </strong>\r\nHere is a diagram of the given tree:\r\n  0\r\n / \\\r\n1   2\r\n   /|\\\r\n  3 4 5\r\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\r\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\r\n</pre>\r\n\r\n<p>Note:<font face=\"monospace\">&nbsp;<code>1 &lt;= N &lt;= 10000</code></font></p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u3001\u8fde\u901a\u7684\u6811\u3002\u6811\u4e2d\u6709 <code>N</code> \u4e2a\u6807\u8bb0\u4e3a <code>0...N-1</code> \u7684\u8282\u70b9\u4ee5\u53ca <code>N-1</code>&nbsp;\u6761\u8fb9&nbsp;\u3002</p>\n\n<p>\u7b2c <code>i</code> \u6761\u8fb9\u8fde\u63a5\u8282\u70b9&nbsp;<code>edges[i][0]</code> \u548c <code>edges[i][1]</code>&nbsp;\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8282\u70b9 <code>i</code> \u4e0e\u5176\u4ed6\u6240\u6709\u8282\u70b9\u8ddd\u79bb\u4e4b\u548c\u7684\u5217\u8868 <code>ans</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>\u8f93\u51fa: </strong>[8,12,6,10,10,10]\n<strong>\u89e3\u91ca: </strong>\n\u5982\u4e0b\u4e3a\u7ed9\u5b9a\u7684\u6811\u7684\u793a\u610f\u56fe\uff1a\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\n\n\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \n\u4e5f\u5c31\u662f 1 + 1 + 2 + 2 + 2 = 8\u3002 \u56e0\u6b64\uff0canswer[0] = 8\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sumOfDistancesInTree(int N, int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sumOfDistancesInTree(self, N, edges):\n        \"\"\"\n        :type N: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sumOfDistancesInTree(self, N: int, edges: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumOfDistancesInTree(int N, int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SumOfDistancesInTree(int N, int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar sumOfDistancesInTree = function(N, edges) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef sum_of_distances_in_tree(n, edges)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sumOfDistancesInTree(_ N: Int, _ edges: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sumOfDistancesInTree(N int, edges [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sumOfDistancesInTree(N: Int, edges: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sumOfDistancesInTree(N: Int, edges: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sum_of_distances_in_tree(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function sumOfDistancesInTree($N, $edges) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sumOfDistancesInTree(N: number, edges: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0864", "frontend_question_id": "0835", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/image-overlap", "url_en": "https://leetcode.com/problems/image-overlap", "relative_path_cn": "/leetcode/0800-0899/0835.Image%20Overlap/README.md", "relative_path_en": "/leetcode/0800-0899/0835.Image%20Overlap/README_EN.md", "title_cn": "\u56fe\u50cf\u91cd\u53e0", "title_en": "Image Overlap", "question_title_slug": "image-overlap", "content_en": "<p>You are given two images <code>img1</code> and <code>img2</code>&nbsp;both of size <code>n x n</code>, represented as&nbsp;binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)</p>\n\n<p>We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.&nbsp; After, the <em>overlap</em> of this translation is the number of positions that have a 1 in both images.</p>\n\n<p>(Note also that a translation does <strong>not</strong> include any kind of rotation.)</p>\n\n<p>What is the largest possible overlap?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg\" style=\"width: 450px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We slide img1 to right by 1 unit and down by 1 unit.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg\" style=\"width: 450px; height: 105px;\" />\nThe number of positions that have a 1 in both images is 3. (Shown in red)\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg\" style=\"width: 450px; height: 231px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> img1 = [[1]], img2 = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> img1 = [[0]], img2 = [[0]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == img1.length</code></li>\n\t<li><code>n == img1[i].length</code></li>\n\t<li><code>n == img2.length </code></li>\n\t<li><code>n == img2[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n\t<li><code>img1[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>img2[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u4e24\u4e2a\u56fe\u50cf <code>A</code> \u548c <code>B</code>&nbsp;\uff0c<code>A</code> \u548c <code>B</code>&nbsp;\u4e3a\u5927\u5c0f\u76f8\u540c\u7684\u4e8c\u7ef4\u6b63\u65b9\u5f62\u77e9\u9635\u3002\uff08\u5e76\u4e14\u4e3a\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u53ea\u5305\u542b0\u548c1\uff09\u3002</p>\n\n<p>\u6211\u4eec\u8f6c\u6362\u5176\u4e2d\u4e00\u4e2a\u56fe\u50cf\uff0c\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u6216\u4e0b\u6ed1\u52a8\u4efb\u4f55\u6570\u91cf\u7684\u5355\u4f4d\uff0c\u5e76\u628a\u5b83\u653e\u5728\u53e6\u4e00\u4e2a\u56fe\u50cf\u7684\u4e0a\u9762\u3002\u4e4b\u540e\uff0c\u8be5\u8f6c\u6362\u7684\u91cd\u53e0\u662f\u6307\u4e24\u4e2a\u56fe\u50cf\u90fd\u5177\u6709 1 \u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u8f6c\u6362\u4e0d\u5305\u62ec\u5411\u4efb\u4f55\u65b9\u5411\u65cb\u8f6c\u3002\uff09</p>\n\n<p>\u6700\u5927\u53ef\u80fd\u7684\u91cd\u53e0\u662f\u4ec0\u4e48\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [[1,1,0],\n          [0,1,0],\n&nbsp;         [0,1,0]]\n&nbsp;    B = [[0,0,0],\n&nbsp;         [0,1,1],\n&nbsp;         [0,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca:</strong> \u5c06 A \u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u7136\u540e\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = A[0].length = B.length = B[0].length &lt;= 30</code></li>\n\t<li><code>0 &lt;=&nbsp;A[i][j], B[i][j] &lt;= 1</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestOverlap(int[][] img1, int[][] img2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestOverlap(self, img1, img2):\n        \"\"\"\n        :type img1: List[List[int]]\n        :type img2: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint largestOverlap(int** img1, int img1Size, int* img1ColSize, int** img2, int img2Size, int* img2ColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestOverlap(int[][] img1, int[][] img2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} img1\n * @param {number[][]} img2\n * @return {number}\n */\nvar largestOverlap = function(img1, img2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} img1\n# @param {Integer[][]} img2\n# @return {Integer}\ndef largest_overlap(img1, img2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestOverlap(_ img1: [[Int]], _ img2: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestOverlap(img1 [][]int, img2 [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestOverlap(img1: Array[Array[Int]], img2: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestOverlap(img1: Array<IntArray>, img2: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_overlap(img1: Vec<Vec<i32>>, img2: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $img1\n     * @param Integer[][] $img2\n     * @return Integer\n     */\n    function largestOverlap($img1, $img2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestOverlap(img1: number[][], img2: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0866", "frontend_question_id": "0836", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rectangle-overlap", "url_en": "https://leetcode.com/problems/rectangle-overlap", "relative_path_cn": "/leetcode/0800-0899/0836.Rectangle%20Overlap/README.md", "relative_path_en": "/leetcode/0800-0899/0836.Rectangle%20Overlap/README_EN.md", "title_cn": "\u77e9\u5f62\u91cd\u53e0", "title_en": "Rectangle Overlap", "question_title_slug": "rectangle-overlap", "content_en": "<p>An axis-aligned rectangle is represented as a list <code>[x1, y1, x2, y2]</code>, where <code>(x1, y1)</code> is the coordinate of its bottom-left corner, and <code>(x2, y2)</code> is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p>\n\n<p>Two rectangles overlap if the area of their intersection is <strong>positive</strong>. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\n\n<p>Given two axis-aligned rectangles <code>rec1</code> and <code>rec2</code>, return <code>true</code><em> if they overlap, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rect1.length == 4</code></li>\n\t<li><code>rect2.length == 4</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= rec1[i], rec2[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>rec1[0] &lt;= rec1[2]</code> and <code>rec1[1] &lt;= rec1[3]</code></li>\n\t<li><code>rec2[0] &lt;= rec2[2]</code> and <code>rec2[1] &lt;= rec2[3]</code></li>\n</ul>\n", "content_cn": "<p>\u77e9\u5f62\u4ee5\u5217\u8868 <code>[x1, y1, x2, y2]</code> \u7684\u5f62\u5f0f\u8868\u793a\uff0c\u5176\u4e2d <code>(x1, y1)</code> \u4e3a\u5de6\u4e0b\u89d2\u7684\u5750\u6807\uff0c<code>(x2, y2)</code> \u662f\u53f3\u4e0a\u89d2\u7684\u5750\u6807\u3002\u77e9\u5f62\u7684\u4e0a\u4e0b\u8fb9\u5e73\u884c\u4e8e x \u8f74\uff0c\u5de6\u53f3\u8fb9\u5e73\u884c\u4e8e y \u8f74\u3002</p>\n\n<p>\u5982\u679c\u76f8\u4ea4\u7684\u9762\u79ef\u4e3a <strong>\u6b63</strong> \uff0c\u5219\u79f0\u4e24\u77e9\u5f62\u91cd\u53e0\u3002\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u53ea\u5728\u89d2\u6216\u8fb9\u63a5\u89e6\u7684\u4e24\u4e2a\u77e9\u5f62\u4e0d\u6784\u6210\u91cd\u53e0\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u77e9\u5f62 <code>rec1</code> \u548c <code>rec2</code> \u3002\u5982\u679c\u5b83\u4eec\u91cd\u53e0\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>rect1.length == 4</code></li>\n\t<li><code>rect2.length == 4</code></li>\n\t<li><code>-10<sup>9</sup> <= rec1[i], rec2[i] <= 10<sup>9</sup></code></li>\n\t<li><code>rec1[0] <= rec1[2]</code> \u4e14 <code>rec1[1] <= rec1[3]</code></li>\n\t<li><code>rec2[0] <= rec2[2]</code> \u4e14 <code>rec2[1] <= rec2[3]</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isRectangleOverlap(int* rec1, int rec1Size, int* rec2, int rec2Size){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsRectangleOverlap(int[] rec1, int[] rec2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isRectangleOverlap(_ rec1: [Int], _ rec2: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isRectangleOverlap(rec1 []int, rec2 []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isRectangleOverlap(rec1: Array[Int], rec2: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isRectangleOverlap(rec1: IntArray, rec2: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_rectangle_overlap(rec1: Vec<i32>, rec2: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rec1\n     * @param Integer[] $rec2\n     * @return Boolean\n     */\n    function isRectangleOverlap($rec1, $rec2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isRectangleOverlap(rec1: number[], rec2: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0867", "frontend_question_id": "0837", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/new-21-game", "url_en": "https://leetcode.com/problems/new-21-game", "relative_path_cn": "/leetcode/0800-0899/0837.New%2021%20Game/README.md", "relative_path_en": "/leetcode/0800-0899/0837.New%2021%20Game/README_EN.md", "title_cn": "\u65b021\u70b9", "title_en": "New 21 Game", "question_title_slug": "new-21-game", "content_en": "<p>Alice plays the following game, loosely based on the card game &quot;21&quot;.</p>\r\n\r\n<p>Alice starts with <code>0</code> points, and draws numbers while she has less than <code>K</code> points.&nbsp; During each draw, she gains an integer number of points randomly from the range <code>[1, W]</code>, where <code>W</code> is an integer.&nbsp; Each draw is independent and the outcomes have equal probabilities.</p>\r\n\r\n<p>Alice stops drawing numbers when she gets <code>K</code> or more points.&nbsp; What is the probability&nbsp;that she has <code>N</code> or less points?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 10, K = 1, W = 10\r\n<strong>Output: </strong>1.00000\r\n<strong>Explanation: </strong> Alice gets a single card, then stops.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 6, K = 1, W = 10\r\n<strong>Output: </strong>0.60000\r\n<strong>Explanation: </strong> Alice gets a single card, then stops.\r\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 21, K = 17, W = 10\r\n<strong>Output: </strong>0.73278</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= W &lt;= 10000</code></li>\r\n\t<li>Answers will be accepted as correct if they are within <code>10^-5</code> of the correct answer.</li>\r\n\t<li>The judging time limit has been reduced for this question.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7231\u4e3d\u4e1d\u53c2\u4e0e\u4e00\u4e2a\u5927\u81f4\u57fa\u4e8e\u7eb8\u724c\u6e38\u620f &ldquo;21\u70b9&rdquo; \u89c4\u5219\u7684\u6e38\u620f\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a</p>\n\n<p>\u7231\u4e3d\u4e1d\u4ee5 <code>0</code> \u5206\u5f00\u59cb\uff0c\u5e76\u5728\u5979\u7684\u5f97\u5206\u5c11\u4e8e <code>K</code> \u5206\u65f6\u62bd\u53d6\u6570\u5b57\u3002 \u62bd\u53d6\u65f6\uff0c\u5979\u4ece <code>[1, W]</code> \u7684\u8303\u56f4\u4e2d\u968f\u673a\u83b7\u5f97\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u5206\u6570\u8fdb\u884c\u7d2f\u8ba1\uff0c\u5176\u4e2d <code>W</code> \u662f\u6574\u6570\u3002 \u6bcf\u6b21\u62bd\u53d6\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5176\u7ed3\u679c\u5177\u6709\u76f8\u540c\u7684\u6982\u7387\u3002</p>\n\n<p>\u5f53\u7231\u4e3d\u4e1d\u83b7\u5f97\u4e0d\u5c11\u4e8e <code>K</code> \u5206\u65f6\uff0c\u5979\u5c31\u505c\u6b62\u62bd\u53d6\u6570\u5b57\u3002 \u7231\u4e3d\u4e1d\u7684\u5206\u6570\u4e0d\u8d85\u8fc7 <code>N</code> \u7684\u6982\u7387\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b</strong><strong> 1</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 10, K = 1, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>1.00000\n<strong>\u8bf4\u660e\uff1a</strong>\u7231\u4e3d\u4e1d\u5f97\u5230\u4e00\u5f20\u5361\uff0c\u7136\u540e\u505c\u6b62\u3002</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>2</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 6, K = 1, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>0.60000\n<strong>\u8bf4\u660e\uff1a</strong>\u7231\u4e3d\u4e1d\u5f97\u5230\u4e00\u5f20\u5361\uff0c\u7136\u540e\u505c\u6b62\u3002\n\u5728 W = 10 \u7684 6 \u79cd\u53ef\u80fd\u4e0b\uff0c\u5979\u7684\u5f97\u5206\u4e0d\u8d85\u8fc7 N = 6 \u5206\u3002</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>3</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 21, K = 17, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>0.73278</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li>\n\t<li><code>1 &lt;= W &lt;= 10000</code></li>\n\t<li>\u5982\u679c\u7b54\u6848\u4e0e\u6b63\u786e\u7b54\u6848\u7684\u8bef\u5dee\u4e0d\u8d85\u8fc7 <code>10^-5</code>\uff0c\u5219\u8be5\u7b54\u6848\u5c06\u88ab\u89c6\u4e3a\u6b63\u786e\u7b54\u6848\u901a\u8fc7\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u51cf\u5c11\u3002</li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double new21Game(int N, int K, int W) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double new21Game(int N, int K, int W) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def new21Game(self, N, K, W):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :type W: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def new21Game(self, N: int, K: int, W: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble new21Game(int N, int K, int W){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double New21Game(int N, int K, int W) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number} K\n * @param {number} W\n * @return {number}\n */\nvar new21Game = function(N, K, W) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} w\n# @return {Float}\ndef new21_game(n, k, w)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func new21Game(_ N: Int, _ K: Int, _ W: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func new21Game(N int, K int, W int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def new21Game(N: Int, K: Int, W: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun new21Game(N: Int, K: Int, W: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn new21_game(n: i32, k: i32, w: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer $K\n     * @param Integer $W\n     * @return Float\n     */\n    function new21Game($N, $K, $W) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function new21Game(N: number, K: number, W: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0868", "frontend_question_id": "0838", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/push-dominoes", "url_en": "https://leetcode.com/problems/push-dominoes", "relative_path_cn": "/leetcode/0800-0899/0838.Push%20Dominoes/README.md", "relative_path_en": "/leetcode/0800-0899/0838.Push%20Dominoes/README_EN.md", "title_cn": "\u63a8\u591a\u7c73\u8bfa", "title_en": "Push Dominoes", "question_title_slug": "push-dominoes", "content_en": "<p>There are<font face=\"monospace\">&nbsp;<code>N</code></font> dominoes in a line, and we place each domino vertically upright.</p>\r\n\r\n<p>In the beginning, we simultaneously push&nbsp;some of the dominoes either to the left or to the right.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png\" style=\"height: 160px;\" /></p>\r\n\r\n<p>After each second, each domino that is falling to the left pushes the adjacent domino on the left.</p>\r\n\r\n<p>Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p>\r\n\r\n<p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p>\r\n\r\n<p>For the purposes of this question, we will consider that a falling domino&nbsp;expends no additional force to a falling or already fallen domino.</p>\r\n\r\n<p>Given a string &quot;S&quot; representing the initial state.&nbsp;<code>S[i] = &#39;L&#39;</code>, if the i-th domino has been pushed to the left; <code>S[i] = &#39;R&#39;</code>, if the i-th domino has been pushed to the right; <code>S[i] = &#39;.&#39;</code>,&nbsp;if the <code>i</code>-th domino has not been pushed.</p>\r\n\r\n<p>Return a string representing the final state.&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;.L.R...LR..L..&quot;\r\n<strong>Output: </strong>&quot;LL.RR.LLRRLL..&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;RR.L&quot;\r\n<strong>Output: </strong>&quot;RR.L&quot;\r\n<strong>Explanation: </strong>The first domino expends no additional force on the second domino.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N&nbsp;&lt;= 10^5</code></li>\r\n\t<li>String&nbsp;<code>dominoes</code> contains only&nbsp;<code>&#39;L</code>&#39;, <code>&#39;R&#39;</code> and <code>&#39;.&#39;</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u4e00\u884c\u4e2d\u6709 <code>N</code> \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u5c06\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u5782\u76f4\u7ad6\u7acb\u3002</p>\n\n<p>\u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u628a\u4e00\u4e9b\u591a\u7c73\u8bfa\u9aa8\u724c\u5411\u5de6\u6216\u5411\u53f3\u63a8\u3002</p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/05/19/domino.png\" style=\"height: 160px; width: 418px;\"></p>\n\n<p>\u6bcf\u8fc7\u4e00\u79d2\uff0c\u5012\u5411\u5de6\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4f1a\u63a8\u52a8\u5176\u5de6\u4fa7\u76f8\u90bb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p>\n\n<p>\u540c\u6837\u5730\uff0c\u5012\u5411\u53f3\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e5f\u4f1a\u63a8\u52a8\u7ad6\u7acb\u5728\u5176\u53f3\u4fa7\u7684\u76f8\u90bb\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p>\n\n<p>\u5982\u679c\u540c\u65f6\u6709\u591a\u7c73\u8bfa\u9aa8\u724c\u843d\u5728\u4e00\u5f20\u5782\u76f4\u7ad6\u7acb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e24\u8fb9\uff0c\u7531\u4e8e\u53d7\u529b\u5e73\u8861\uff0c \u8be5\u9aa8\u724c\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002</p>\n\n<p>\u5c31\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u6b63\u5728\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e0d\u4f1a\u5bf9\u5176\u5b83\u6b63\u5728\u4e0b\u964d\u6216\u5df2\u7ecf\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002</p>\n\n<p>\u7ed9\u5b9a\u8868\u793a\u521d\u59cb\u72b6\u6001\u7684\u5b57\u7b26\u4e32 &quot;S&quot; \u3002\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u5de6\u8fb9\uff0c\u5219 <code>S[i] = &#39;L&#39;</code>\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u53f3\u8fb9\uff0c\u5219 <code>S[i] = &#39;R&#39;</code>\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u88ab\u63a8\u52a8\uff0c\u5219 <code>S[i] = &#39;.&#39;</code>\u3002</p>\n\n<p>\u8fd4\u56de\u8868\u793a\u6700\u7ec8\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b </strong><strong>1</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;.L.R...LR..L..&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;LL.RR.LLRRLL..&quot;</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>2</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;RR.L&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;RR.L&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u7b2c\u4e00\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u7ed9\u7b2c\u4e8c\u5f20\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10^5</code></li>\n\t<li>\u8868\u793a\u591a\u7c73\u8bfa\u9aa8\u724c\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709 <code>&#39;L&#39;</code>\uff0c<code>&#39;R&#39;</code>; \u4ee5\u53ca <code>&#39;.&#39;</code>;</li>\n</ol>\n", "tags_en": ["Two Pointers", "Dynamic Programming"], "tags_cn": ["\u53cc\u6307\u9488", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string pushDominoes(string dominoes) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String pushDominoes(String dominoes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pushDominoes(self, dominoes):\n        \"\"\"\n        :type dominoes: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * pushDominoes(char * dominoes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string PushDominoes(string dominoes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} dominoes\n * @return {string}\n */\nvar pushDominoes = function(dominoes) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} dominoes\n# @return {String}\ndef push_dominoes(dominoes)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func pushDominoes(_ dominoes: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func pushDominoes(dominoes string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pushDominoes(dominoes: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pushDominoes(dominoes: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn push_dominoes(dominoes: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $dominoes\n     * @return String\n     */\n    function pushDominoes($dominoes) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pushDominoes(dominoes: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0869", "frontend_question_id": "0839", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/similar-string-groups", "url_en": "https://leetcode.com/problems/similar-string-groups", "relative_path_cn": "/leetcode/0800-0899/0839.Similar%20String%20Groups/README.md", "relative_path_en": "/leetcode/0800-0899/0839.Similar%20String%20Groups/README_EN.md", "title_cn": "\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4", "title_en": "Similar String Groups", "question_title_slug": "similar-string-groups", "content_en": "<p>Two strings <code>X</code>&nbsp;and <code>Y</code>&nbsp;are similar if we can swap two letters (in different positions) of <code>X</code>, so that&nbsp;it equals <code>Y</code>. Also two strings <code>X</code> and <code>Y</code> are similar if they are equal.</p>\n\n<p>For example, <code>&quot;tars&quot;</code>&nbsp;and <code>&quot;rats&quot;</code>&nbsp;are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>&quot;rats&quot;</code> and <code>&quot;arts&quot;</code> are similar, but <code>&quot;star&quot;</code> is not similar to <code>&quot;tars&quot;</code>, <code>&quot;rats&quot;</code>, or <code>&quot;arts&quot;</code>.</p>\n\n<p>Together, these form two connected groups by similarity: <code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> and <code>{&quot;star&quot;}</code>.&nbsp; Notice that <code>&quot;tars&quot;</code> and <code>&quot;arts&quot;</code> are in the same group even though they are not similar.&nbsp; Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\n\n<p>We are given a list <code>strs</code> of strings where every string in <code>strs</code> is an anagram of every other string in <code>strs</code>. How many groups are there?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;omv&quot;,&quot;ovm&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 1000</code></li>\n\t<li><code>sum(strs[i].length) &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>strs[i]</code> consists of lowercase letters only.</li>\n\t<li>All words in <code>strs</code> have the same length and are anagrams of each other.</li>\n</ul>\n", "content_cn": "<p>\u5982\u679c\u6211\u4eec\u4ea4\u6362\u5b57\u7b26\u4e32&nbsp;<code>X</code> \u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u5b83\u548c\u5b57\u7b26\u4e32&nbsp;<code>Y</code> \u76f8\u7b49\uff0c\u90a3\u4e48\u79f0 <code>X</code> \u548c <code>Y</code> \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u4f3c\u7684\u3002</p>\n\n<p>\u4f8b\u5982\uff0c<code>&quot;tars&quot;</code> \u548c <code>&quot;rats&quot;</code> \u662f\u76f8\u4f3c\u7684 (\u4ea4\u6362 <code>0</code> \u4e0e <code>2</code> \u7684\u4f4d\u7f6e)\uff1b&nbsp;<code>&quot;rats&quot;</code> \u548c <code>&quot;arts&quot;</code> \u4e5f\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u662f <code>&quot;star&quot;</code> \u4e0d\u4e0e <code>&quot;tars&quot;</code>\uff0c<code>&quot;rats&quot;</code>\uff0c\u6216 <code>&quot;arts&quot;</code> \u76f8\u4f3c\u3002</p>\n\n<p>\u603b\u4e4b\uff0c\u5b83\u4eec\u901a\u8fc7\u76f8\u4f3c\u6027\u5f62\u6210\u4e86\u4e24\u4e2a\u5173\u8054\u7ec4\uff1a<code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> \u548c <code>{&quot;star&quot;}</code>\u3002\u6ce8\u610f\uff0c<code>&quot;tars&quot;</code> \u548c <code>&quot;arts&quot;</code> \u662f\u5728\u540c\u4e00\u7ec4\u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5e76\u4e0d\u76f8\u4f3c\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u7ec4\u800c\u8a00\uff0c\u8981\u786e\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5728\u7ec4\u4e2d\uff0c\u53ea\u9700\u8981\u8fd9\u4e2a\u8bcd\u548c\u8be5\u7ec4\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5355\u8bcd\u76f8\u4f3c\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 <code>A</code>\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f <code>A</code> \u4e2d\u5176\u5b83\u6240\u6709\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\u8bf7\u95ee <code>A</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>A.length &lt;= 2000</code></li>\n\t<li><code>A[i].length &lt;= 1000</code></li>\n\t<li><code>A.length * A[i].length &lt;= 20000</code></li>\n\t<li><code>A</code> \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>A</code> \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4e14\u662f\u5f7c\u6b64\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u5ef6\u957f\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u5907\u6ce8\uff1a</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u5b57\u6bcd\u5f02\u4f4d\u8bcd[anagram]\uff0c\u4e00\u79cd\u628a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff08\u987a\u5e8f\uff09\u52a0\u4ee5\u6539\u6362\u6240\u5f62\u6210\u7684\u65b0\u8bcd\u3002</p>\n", "tags_en": ["Depth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSimilarGroups(vector<string>& strs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSimilarGroups(String[] strs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSimilarGroups(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSimilarGroups(char ** strs, int strsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSimilarGroups(string[] strs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} strs\n * @return {number}\n */\nvar numSimilarGroups = function(strs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} strs\n# @return {Integer}\ndef num_similar_groups(strs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSimilarGroups(_ strs: [String]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSimilarGroups(strs []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSimilarGroups(strs: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSimilarGroups(strs: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_similar_groups(strs: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return Integer\n     */\n    function numSimilarGroups($strs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSimilarGroups(strs: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0870", "frontend_question_id": "0840", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/magic-squares-in-grid", "url_en": "https://leetcode.com/problems/magic-squares-in-grid", "relative_path_cn": "/leetcode/0800-0899/0840.Magic%20Squares%20In%20Grid/README.md", "relative_path_en": "/leetcode/0800-0899/0840.Magic%20Squares%20In%20Grid/README_EN.md", "title_cn": "\u77e9\u9635\u4e2d\u7684\u5e7b\u65b9", "title_en": "Magic Squares In Grid", "question_title_slug": "magic-squares-in-grid", "content_en": "<p>A <code>3 x 3</code> magic square is a <code>3 x 3</code> grid filled with distinct numbers <strong>from </strong><code>1</code><strong> to </strong><code>9</code> such that each row, column, and both diagonals all have the same sum.</p>\n\n<p>Given a <code>row x col</code>&nbsp;<code>grid</code>&nbsp;of integers, how many <code>3 x 3</code> &quot;magic square&quot; subgrids are there?&nbsp; (Each subgrid is contiguous).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>\nThe following subgrid is a 3 x 3 magic square:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg\" style=\"width: 242px; height: 242px;\" />\nwhile this one is not:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg\" style=\"width: 242px; height: 242px;\" />\nIn total, there is only one magic square inside the given grid.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[8]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[4,4],[3,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[4,7,8],[9,5,1],[2,3,6]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>row == grid.length</code></li>\n\t<li><code>col == grid[i].length</code></li>\n\t<li><code>1 &lt;= row, col &lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\n</ul>\n", "content_cn": "<p>3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709<strong>\u4ece 1 \u5230 9</strong> \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 <code>grid</code>\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 &times; 3 \u7684 &ldquo;\u5e7b\u65b9&rdquo; \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>\n\u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a\n438\n951\n276\n\n\u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a\n384\n519\n762\n\n\u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 10</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numMagicSquaresInside(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numMagicSquaresInside(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numMagicSquaresInside(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numMagicSquaresInside(int** grid, int gridSize, int* gridColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumMagicSquaresInside(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numMagicSquaresInside = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef num_magic_squares_inside(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numMagicSquaresInside(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numMagicSquaresInside(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numMagicSquaresInside(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numMagicSquaresInside(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_magic_squares_inside(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function numMagicSquaresInside($grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numMagicSquaresInside(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0871", "frontend_question_id": "0841", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/keys-and-rooms", "url_en": "https://leetcode.com/problems/keys-and-rooms", "relative_path_cn": "/leetcode/0800-0899/0841.Keys%20and%20Rooms/README.md", "relative_path_en": "/leetcode/0800-0899/0841.Keys%20and%20Rooms/README_EN.md", "title_cn": "\u94a5\u5319\u548c\u623f\u95f4", "title_en": "Keys and Rooms", "question_title_slug": "keys-and-rooms", "content_en": "<p>There are <code>N</code> rooms and you start in room <code>0</code>.&nbsp; Each room has a distinct number in <code>0, 1, 2, ..., N-1</code>, and each room may have&nbsp;some keys to access the next room.&nbsp;</p>\r\n\r\n<p>Formally, each room <code>i</code>&nbsp;has a list of keys <code>rooms[i]</code>, and each key <code>rooms[i][j]</code> is an integer in <code>[0, 1, ..., N-1]</code> where <code>N = rooms.length</code>.&nbsp; A key <code>rooms[i][j] = v</code>&nbsp;opens the room with number <code>v</code>.</p>\r\n\r\n<p>Initially, all the rooms start locked (except for room <code>0</code>).&nbsp;</p>\r\n\r\n<p>You can walk back and forth between rooms freely.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if you can enter&nbsp;every room.</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1],[2],[3],[]]\r\n<strong>Output: </strong>true\r\n<strong>Explanation:  </strong>\r\nWe start in room 0, and pick up key 1.\r\nWe then go to room 1, and pick up key 2.\r\nWe then go to room 2, and pick up key 3.\r\nWe then go to room 3.  Since we were able to go to every room, we return true.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,3],[3,0,1],[2],[0]]\r\n<strong>Output: </strong>false\r\n<strong>Explanation: </strong>We can&#39;t enter the room with number 2.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\r\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\r\n\t<li>The number of keys in all rooms combined is at most&nbsp;<code>3000</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u6709 <code>N</code> \u4e2a\u623f\u95f4\uff0c\u5f00\u59cb\u65f6\u4f60\u4f4d\u4e8e <code>0</code> \u53f7\u623f\u95f4\u3002\u6bcf\u4e2a\u623f\u95f4\u6709\u4e0d\u540c\u7684\u53f7\u7801\uff1a<code>0\uff0c1\uff0c2\uff0c...\uff0cN-1</code>\uff0c\u5e76\u4e14\u623f\u95f4\u91cc\u53ef\u80fd\u6709\u4e00\u4e9b\u94a5\u5319\u80fd\u4f7f\u4f60\u8fdb\u5165\u4e0b\u4e00\u4e2a\u623f\u95f4\u3002</p>\n\n<p>\u5728\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u623f\u95f4 <code>i</code> \u90fd\u6709\u4e00\u4e2a\u94a5\u5319\u5217\u8868 <code>rooms[i]</code>\uff0c\u6bcf\u4e2a\u94a5\u5319 <code>rooms[i][j]</code> \u7531 <code>[0,1\uff0c...\uff0cN-1]</code> \u4e2d\u7684\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff0c\u5176\u4e2d <code>N = rooms.length</code>\u3002 \u94a5\u5319 <code>rooms[i][j] = v</code> \u53ef\u4ee5\u6253\u5f00\u7f16\u53f7\u4e3a <code>v</code> \u7684\u623f\u95f4\u3002</p>\n\n<p>\u6700\u521d\uff0c\u9664 <code>0</code> \u53f7\u623f\u95f4\u5916\u7684\u5176\u4f59\u6240\u6709\u623f\u95f4\u90fd\u88ab\u9501\u4f4f\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u623f\u95f4\u4e4b\u95f4\u6765\u56de\u8d70\u52a8\u3002</p>\n\n<p>\u5982\u679c\u80fd\u8fdb\u5165\u6bcf\u4e2a\u623f\u95f4\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[1],[2],[3],[]]\n<strong>\u8f93\u51fa: </strong>true\n<strong>\u89e3\u91ca:  </strong>\n\u6211\u4eec\u4ece 0 \u53f7\u623f\u95f4\u5f00\u59cb\uff0c\u62ff\u5230\u94a5\u5319 1\u3002\n\u4e4b\u540e\u6211\u4eec\u53bb 1 \u53f7\u623f\u95f4\uff0c\u62ff\u5230\u94a5\u5319 2\u3002\n\u7136\u540e\u6211\u4eec\u53bb 2 \u53f7\u623f\u95f4\uff0c\u62ff\u5230\u94a5\u5319 3\u3002\n\u6700\u540e\u6211\u4eec\u53bb\u4e86 3 \u53f7\u623f\u95f4\u3002\n\u7531\u4e8e\u6211\u4eec\u80fd\u591f\u8fdb\u5165\u6bcf\u4e2a\u623f\u95f4\uff0c\u6211\u4eec\u8fd4\u56de true\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,3],[3,0,1],[2],[0]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u4e0d\u80fd\u8fdb\u5165 2 \u53f7\u623f\u95f4\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\n\t<li>\u6240\u6709\u623f\u95f4\u4e2d\u7684\u94a5\u5319\u6570\u91cf\u603b\u8ba1\u4e0d\u8d85\u8fc7&nbsp;<code>3000</code>\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canVisitAllRooms(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canVisitAllRooms(int** rooms, int roomsSize, int* roomsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanVisitAllRooms(IList<IList<int>> rooms) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} rooms\n# @return {Boolean}\ndef can_visit_all_rooms(rooms)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func canVisitAllRooms(_ rooms: [[Int]]) -> Bool {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canVisitAllRooms(rooms [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canVisitAllRooms(rooms: List[List[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canVisitAllRooms(rooms: List<List<Int>>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_visit_all_rooms(rooms: Vec<Vec<i32>>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rooms\n     * @return Boolean\n     */\n    function canVisitAllRooms($rooms) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canVisitAllRooms(rooms: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0872", "frontend_question_id": "0842", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence", "url_en": "https://leetcode.com/problems/split-array-into-fibonacci-sequence", "relative_path_cn": "/leetcode/0800-0899/0842.Split%20Array%20into%20Fibonacci%20Sequence/README.md", "relative_path_en": "/leetcode/0800-0899/0842.Split%20Array%20into%20Fibonacci%20Sequence/README_EN.md", "title_cn": "\u5c06\u6570\u7ec4\u62c6\u5206\u6210\u6590\u6ce2\u90a3\u5951\u5e8f\u5217", "title_en": "Split Array into Fibonacci Sequence", "question_title_slug": "split-array-into-fibonacci-sequence", "content_en": "<p>Given a string <code>S</code>&nbsp;of digits, such as <code>S = &quot;123456579&quot;</code>, we can split it into a <em>Fibonacci-like sequence</em>&nbsp;<code>[123, 456, 579].</code></p>\r\n\r\n<p>Formally, a Fibonacci-like sequence is a list&nbsp;<code>F</code> of non-negative integers such that:</p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>, (that is,&nbsp;each integer fits a 32-bit signed integer type);</li>\r\n\t<li><code>F.length &gt;= 3</code>;</li>\r\n\t<li>and<code> F[i] + F[i+1] = F[i+2] </code>for all <code>0 &lt;= i &lt; F.length - 2</code>.</li>\r\n</ul>\r\n\r\n<p>Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.</p>\r\n\r\n<p>Return any Fibonacci-like sequence split from <code>S</code>, or return <code>[]</code> if it cannot be done.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;123456579&quot;\r\n<strong>Output: </strong>[123,456,579]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;11235813&quot;\r\n<strong>Output: </strong>[1,1,2,3,5,8,13]\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;112358130&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation: </strong>The task is impossible.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;0123&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation: </strong>Leading zeroes are not allowed, so &quot;01&quot;, &quot;2&quot;, &quot;3&quot; is not valid.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;1101111&quot;\r\n<strong>Output: </strong>[110, 1, 111]\r\n<strong>Explanation: </strong>The output [11, 0, 11, 11] would also be accepted.\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\r\n\t<li><code>S</code> contains only digits.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u6bd4\u5982 <code>S = &quot;123456579&quot;</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u5206\u6210\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5e8f\u5217 <code>[123, 456, 579]</code>\u3002</p>\n\n<p>\u5f62\u5f0f\u4e0a\uff0c\u6590\u6ce2\u90a3\u5951\u5f0f\u5e8f\u5217\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5217\u8868 <code>F</code>\uff0c\u4e14\u6ee1\u8db3\uff1a</p>\n\n<ul>\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>\uff0c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u6574\u6570\u90fd\u7b26\u5408 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff09\uff1b</li>\n\t<li><code>F.length &gt;= 3</code>\uff1b</li>\n\t<li>\u5bf9\u4e8e\u6240\u6709\u7684<code>0 &lt;= i &lt; F.length - 2</code>\uff0c\u90fd\u6709 <code>F[i] + F[i+1] = F[i+2]</code> \u6210\u7acb\u3002</li>\n</ul>\n\n<p>\u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5c0f\u5757\u65f6\uff0c\u6bcf\u4e2a\u5757\u7684\u6570\u5b57\u4e00\u5b9a\u4e0d\u8981\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u8fd9\u4e2a\u5757\u662f\u6570\u5b57 0 \u672c\u8eab\u3002</p>\n\n<p>\u8fd4\u56de\u4ece <code>S</code> \u62c6\u5206\u51fa\u6765\u7684\u4efb\u610f\u4e00\u7ec4\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5e8f\u5217\u5757\uff0c\u5982\u679c\u4e0d\u80fd\u62c6\u5206\u5219\u8fd4\u56de <code>[]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;123456579&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[123,456,579]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;11235813&quot;\n<strong>\u8f93\u51fa: </strong>[1,1,2,3,5,8,13]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;112358130&quot;\n<strong>\u8f93\u51fa: </strong>[]\n<strong>\u89e3\u91ca: </strong>\u8fd9\u9879\u4efb\u52a1\u65e0\u6cd5\u5b8c\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;0123&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[]\n<strong>\u89e3\u91ca\uff1a</strong>\u6bcf\u4e2a\u5757\u7684\u6570\u5b57\u4e0d\u80fd\u4ee5\u96f6\u5f00\u5934\uff0c\u56e0\u6b64 &quot;01&quot;\uff0c&quot;2&quot;\uff0c&quot;3&quot; \u4e0d\u662f\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;1101111&quot;\n<strong>\u8f93\u51fa: </strong>[110, 1, 111]\n<strong>\u89e3\u91ca: </strong>\u8f93\u51fa [11,0,11,11] \u4e5f\u540c\u6837\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\n\t<li>\u5b57\u7b26\u4e32 <code>S</code> \u4e2d\u53ea\u542b\u6709\u6570\u5b57\u3002</li>\n</ol>\n", "tags_en": ["Greedy", "String", "Backtracking"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u5b57\u7b26\u4e32", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> splitIntoFibonacci(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> splitIntoFibonacci(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def splitIntoFibonacci(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def splitIntoFibonacci(self, S: str) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* splitIntoFibonacci(char * S, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> SplitIntoFibonacci(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number[]}\n */\nvar splitIntoFibonacci = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[]}\ndef split_into_fibonacci(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func splitIntoFibonacci(_ S: String) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func splitIntoFibonacci(S string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def splitIntoFibonacci(S: String): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun splitIntoFibonacci(S: String): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn split_into_fibonacci(s: String) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function splitIntoFibonacci($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function splitIntoFibonacci(S: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0873", "frontend_question_id": "0843", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/guess-the-word", "url_en": "https://leetcode.com/problems/guess-the-word", "relative_path_cn": "/leetcode/0800-0899/0843.Guess%20the%20Word/README.md", "relative_path_en": "/leetcode/0800-0899/0843.Guess%20the%20Word/README_EN.md", "title_cn": "\u731c\u731c\u8fd9\u4e2a\u5355\u8bcd", "title_en": "Guess the Word", "question_title_slug": "guess-the-word", "content_en": "<p>This problem is an&nbsp;<strong><em>interactive problem</em></strong>&nbsp;new to the LeetCode platform.</p>\r\n\r\n<p>We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as <strong>secret</strong>.</p>\r\n\r\n<p>You may call <code>master.guess(word)</code>&nbsp;to guess a word.&nbsp; The guessed word should have&nbsp;type <code>string</code>&nbsp;and must be from the original list&nbsp;with 6 lowercase letters.</p>\r\n\r\n<p>This function returns an&nbsp;<code>integer</code>&nbsp;type, representing&nbsp;the number of exact matches (value and position) of your guess to the <strong>secret word</strong>.&nbsp; Also, if your guess is not in the given wordlist, it will return <code>-1</code> instead.</p>\r\n\r\n<p>For each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or less calls to <code>master.guess</code>&nbsp;and at least one of these guesses was the <strong>secret</strong>, you pass the testcase.</p>\r\n\r\n<p>Besides the example test case below, there will be 5&nbsp;additional test cases, each with 100 words in the word list.&nbsp; The letters of each word in those testcases were chosen&nbsp;independently at random from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>, such that every word in the given word lists is unique.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong>&nbsp;secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]\r\n\r\n<strong>Explanation:</strong>\r\n\r\n<code>master.guess(&quot;aaaaaa&quot;)</code> returns -1, because&nbsp;<code>&quot;aaaaaa&quot;</code>&nbsp;is not in wordlist.\r\n<code>master.guess(&quot;acckzz&quot;) </code>returns 6, because&nbsp;<code>&quot;acckzz&quot;</code> is secret and has all 6&nbsp;matches.\r\n<code>master.guess(&quot;ccbazz&quot;)</code> returns 3, because<code>&nbsp;&quot;ccbazz&quot;</code>&nbsp;has 3 matches.\r\n<code>master.guess(&quot;eiowzz&quot;)</code> returns 2, because&nbsp;<code>&quot;eiowzz&quot;</code>&nbsp;has 2&nbsp;matches.\r\n<code>master.guess(&quot;abcczz&quot;)</code> returns 4, because&nbsp;<code>&quot;abcczz&quot;</code> has 4 matches.\r\n\r\nWe made 5 calls to&nbsp;master.guess and one of them was the secret, so we pass the test case.\r\n</pre>\r\n\r\n<p><strong>Note:</strong>&nbsp; Any solutions that attempt to circumvent the judge&nbsp;will result in disqualification.</p>\r\n", "content_cn": "<p>\u8fd9\u4e2a\u95ee\u9898\u662f LeetCode \u5e73\u53f0\u65b0\u589e\u7684<strong><em>\u4ea4\u4e92\u5f0f\u95ee\u9898 </em></strong>\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7531\u4e00\u4e9b\u72ec\u7279\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f 6 \u4e2a\u5b57\u6bcd\u957f\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u5c06\u88ab\u9009\u4f5c<strong>\u79d8\u5bc6</strong>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8c03\u7528 <code>master.guess(word)</code> \u6765\u731c\u5355\u8bcd\u3002\u4f60\u6240\u731c\u7684\u5355\u8bcd\u5e94\u5f53\u662f\u5b58\u5728\u4e8e\u539f\u5217\u8868\u5e76\u4e14\u7531 6 \u4e2a\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u7c7b\u578b<code>\u5b57\u7b26\u4e32</code>\u3002</p>\n\n<p>\u6b64\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a<code>\u6574\u578b\u6570\u5b57</code>\uff0c\u8868\u793a\u4f60\u7684\u731c\u6d4b\u4e0e<strong>\u79d8\u5bc6\u5355\u8bcd</strong>\u7684\u51c6\u786e\u5339\u914d\uff08\u503c\u548c\u4f4d\u7f6e\u540c\u65f6\u5339\u914d\uff09\u7684\u6570\u76ee\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f60\u7684\u731c\u6d4b\u4e0d\u5728\u7ed9\u5b9a\u7684\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u5b83\u5c06\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f60\u6709 10 \u6b21\u673a\u4f1a\u6765\u731c\u51fa\u8fd9\u4e2a\u5355\u8bcd\u3002\u5f53\u6240\u6709\u8c03\u7528\u90fd\u7ed3\u675f\u65f6\uff0c\u5982\u679c\u60a8\u5bf9 <code>master.guess</code> \u7684\u8c03\u7528\u4e0d\u8d85\u8fc7 10 \u6b21\uff0c\u5e76\u4e14\u81f3\u5c11\u6709\u4e00\u6b21\u731c\u5230<strong>\u79d8\u5bc6</strong>\uff0c\u90a3\u4e48\u60a8\u5c06\u901a\u8fc7\u8be5\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n\n<p>\u9664\u4e86\u4e0b\u9762\u793a\u4f8b\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7528\u4f8b\u5916\uff0c\u8fd8\u4f1a\u6709 5 \u4e2a\u989d\u5916\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u5217\u8868\u4e2d\u5c06\u4f1a\u6709 100 \u4e2a\u5355\u8bcd\u3002\u8fd9\u4e9b\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u6bcd\u90fd\u662f\u4ece <code>&#39;a&#39;</code> \u5230 <code>&#39;z&#39;</code>&nbsp;\u4e2d\u968f\u673a\u9009\u53d6\u7684\uff0c\u5e76\u4e14\u4fdd\u8bc1\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u552f\u4e00\u7684\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong>&nbsp;secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]\n\n<strong>\u89e3\u91ca:</strong>\n\n<code>master.guess(&quot;aaaaaa&quot;)</code> \u8fd4\u56de -1, \u56e0\u4e3a&nbsp;<code>&quot;aaaaaa&quot;</code>&nbsp;\u4e0d\u5728 wordlist \u4e2d.\n<code>master.guess(&quot;acckzz&quot;) \u8fd4\u56de</code> 6, \u56e0\u4e3a&nbsp;<code>&quot;acckzz&quot;</code> \u5c31\u662f<strong>\u79d8\u5bc6</strong>\uff0c6\u4e2a\u5b57\u6bcd\u5b8c\u5168\u5339\u914d\u3002\n<code>master.guess(&quot;ccbazz&quot;)</code> \u8fd4\u56de 3, \u56e0\u4e3a<code>&nbsp;&quot;ccbazz&quot;</code>&nbsp;\u6709 3 \u4e2a\u5339\u914d\u9879\u3002\n<code>master.guess(&quot;eiowzz&quot;)</code> \u8fd4\u56de 2, \u56e0\u4e3a&nbsp;<code>&quot;eiowzz&quot;</code>&nbsp;\u6709 2 \u4e2a\u5339\u914d\u9879\u3002\n<code>master.guess(&quot;abcczz&quot;)</code> \u8fd4\u56de 4, \u56e0\u4e3a&nbsp;<code>&quot;abcczz&quot;</code> \u6709 4 \u4e2a\u5339\u914d\u9879\u3002\n\n\u6211\u4eec\u8c03\u7528\u4e86 5 \u6b21master.guess\uff0c\u5176\u4e2d\u4e00\u6b21\u731c\u5230\u4e86<strong>\u79d8\u5bc6</strong>\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u4e86\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4efb\u4f55\u8bd5\u56fe\u7ed5\u8fc7\u8bc4\u5224\u7684\u89e3\u51b3\u65b9\u6848\u90fd\u5c06\u5bfc\u81f4\u6bd4\u8d5b\u8d44\u683c\u88ab\u53d6\u6d88\u3002</p>\n", "tags_en": ["Minimax"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *   public:\n *     int guess(string word);\n * };\n */\nclass Solution {\npublic:\n    void findSecretWord(vector<string>& wordlist, Master& master) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface Master {\n *     public int guess(String word) {}\n * }\n */\nclass Solution {\n    public void findSecretWord(String[] wordlist, Master master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is Master's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class Master(object):\n#    def guess(self, word):\n#        \"\"\"\n#        :type word: str\n#        :rtype int\n#        \"\"\"\n\nclass Solution(object):\n    def findSecretWord(self, wordlist, master):\n        \"\"\"\n        :type wordlist: List[Str]\n        :type master: Master\n        :rtype: None\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is Master's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class Master:\n#     def guess(self, word: str) -> int:\n\nclass Solution:\n    def findSecretWord(self, wordlist: List[str], master: 'Master') -> None:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * int guess(Master *, char *word);\n */\nvoid findSecretWord(char** wordlist, int wordlistSize, Master* master) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *     public int Guess(string word);\n * }\n */\nclass Solution {\n    public void FindSecretWord(string[] wordlist, Master master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the master's API interface.\n * // You should not implement it, or speculate about its implementation\n * function Master() {\n *\n *     @param {string[]} wordlist\n *     @param {Master} master\n *     @return {integer}\n *     this.guess = function(word) {\n *         ...\n *     };\n * };\n */\n/**\n * @param {string[]} wordlist\n * @param {Master} master\n * @return {void}\n */\nvar findSecretWord = function(wordlist, master) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "#    This is Master's API interface.\n#    You should not implement it, or speculate about its implementation\n#\n# class Master\n# =begin\n#     :type word: String\n#     :rtype: Integer\n# =end\n#     def guess(word)\n#         ...\n#     end\n# end\n#\n\n# @param {String[]} wordlist\n# @param {Master} master\n# @return {Void}\ndef find_secret_word(wordlist, master)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *     public func guess(word: String) -> Int {}\n * }\n */\nclass Solution {\n    func findSecretWord(_ wordlist: [String], _ master: Master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * type Master struct {\n * }\n *\n * func (this *Master) Guess(word string) int {}\n */\nfunc findSecretWord(wordlist []string, master *Master) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *\n *   def guess(word: String): Int = {}\n *\n * }\n */\nobject Solution {\n    def findSecretWord(wordlist: Array[String], master: Master): Unit = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface Master {\n *     fun guess(word: String): Int {}\n * }\n */\nclass Solution {\n    fun findSecretWord(wordlist: Array<String>, master: Master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * struct Master;\n * impl Master {\n *     fn guess(word:String)->int;\n * };\n */\n\nimpl Solution {\n    pub fn find_secret_word(words: Vec<String>, master: &Master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface Master {\n *     function guess($word) {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param String[] $wordlist\n     * @param Master $master\n     * @return \n     */\n    function findSecretWord($wordlist, $master) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *      guess(word: string): number {}\n * }\n */\n\nfunction findSecretWord(wordlist: string[], master: Master) {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0874", "frontend_question_id": "0844", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/backspace-string-compare", "url_en": "https://leetcode.com/problems/backspace-string-compare", "relative_path_cn": "/leetcode/0800-0899/0844.Backspace%20String%20Compare/README.md", "relative_path_en": "/leetcode/0800-0899/0844.Backspace%20String%20Compare/README_EN.md", "title_cn": "\u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32", "title_en": "Backspace String Compare", "question_title_slug": "backspace-string-compare", "content_en": "<p>Given two&nbsp;strings&nbsp;<code>S</code>&nbsp;and <code>T</code>,&nbsp;return if they are equal when both are typed into empty text editors. <code>#</code> means a backspace character.</p>\n\n<p>Note that after&nbsp;backspacing an empty text, the text will continue empty.</p>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;ab#c&quot;</span>, T = <span id=\"example-input-1-2\">&quot;ad#c&quot;</span>\n<strong>Output: </strong><span id=\"example-output-1\">true\n</span><span><strong>Explanation</strong>: Both S and T become &quot;ac&quot;.</span>\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;ab##&quot;</span>, T = <span id=\"example-input-2-2\">&quot;c#d#&quot;</span>\n<strong>Output: </strong><span id=\"example-output-2\">true\n</span><span><strong>Explanation</strong>: Both S and T become &quot;&quot;.</span>\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;a##c&quot;</span>, T = <span id=\"example-input-3-2\">&quot;#a#c&quot;</span>\n<strong>Output: </strong><span id=\"example-output-3\">true\n</span><span><strong>Explanation</strong>: Both S and T become &quot;c&quot;.</span>\n</pre>\n\n<div>\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-4-1\">&quot;a#c&quot;</span>, T = <span id=\"example-input-4-2\">&quot;b&quot;</span>\n<strong>Output: </strong><span id=\"example-output-4\">false\n</span><span><strong>Explanation</strong>: S becomes &quot;c&quot; while T becomes &quot;b&quot;.</span>\n</pre>\n\n<p><span><strong>Note</strong>:</span></p>\n\n<ul>\n\t<li><code><span>1 &lt;= S.length &lt;= 200</span></code></li>\n\t<li><code><span>1 &lt;= T.length &lt;= 200</span></code></li>\n\t<li><span><code>S</code>&nbsp;and <code>T</code> only contain&nbsp;lowercase letters and <code>&#39;#&#39;</code> characters.</span></li>\n</ul>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Can you solve it in <code>O(N)</code> time and <code>O(1)</code> space?</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n", "content_cn": "<p>\u7ed9\u5b9a <code>S</code> \u548c <code>T</code> \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53\u5b83\u4eec\u5206\u522b\u88ab\u8f93\u5165\u5230\u7a7a\u767d\u7684\u6587\u672c\u7f16\u8f91\u5668\u540e\uff0c\u5224\u65ad\u4e8c\u8005\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 <code>#</code> \u4ee3\u8868\u9000\u683c\u5b57\u7b26\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u5982\u679c\u5bf9\u7a7a\u6587\u672c\u8f93\u5165\u9000\u683c\u5b57\u7b26\uff0c\u6587\u672c\u7ee7\u7eed\u4e3a\u7a7a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ab#c&quot;, T = &quot;ad#c&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;ac&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ab##&quot;, T = &quot;c#d#&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a##c&quot;, T = &quot;#a#c&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;c&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a#c&quot;, T = &quot;b&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>S \u4f1a\u53d8\u6210 &ldquo;c&rdquo;\uff0c\u4f46 T \u4ecd\u7136\u662f &ldquo;b&rdquo;\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= T.length &lt;= 200</code></li>\n\t<li><code>S</code> \u548c <code>T</code> \u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u4ee5\u53ca\u5b57\u7b26 <code>&#39;#&#39;</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u7528 <code>O(N)</code> \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c <code>O(1)</code> \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8be5\u95ee\u9898\u5417\uff1f</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Stack", "Two Pointers"], "tags_cn": ["\u6808", "\u53cc\u6307\u9488"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean backspaceCompare(String S, String T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool backspaceCompare(char * S, char * T){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool BackspaceCompare(string S, string T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */\nvar backspaceCompare = function(S, T) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef backspace_compare(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func backspaceCompare(_ S: String, _ T: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func backspaceCompare(S string, T string) bool {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def backspaceCompare(S: String, T: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun backspaceCompare(S: String, T: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn backspace_compare(s: String, t: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $T\n     * @return Boolean\n     */\n    function backspaceCompare($S, $T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function backspaceCompare(S: string, T: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0875", "frontend_question_id": "0845", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-mountain-in-array", "url_en": "https://leetcode.com/problems/longest-mountain-in-array", "relative_path_cn": "/leetcode/0800-0899/0845.Longest%20Mountain%20in%20Array/README.md", "relative_path_en": "/leetcode/0800-0899/0845.Longest%20Mountain%20in%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u5c71\u8109", "title_en": "Longest Mountain in Array", "question_title_slug": "longest-mountain-in-array", "content_en": "<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some index <code>i</code> (<strong>0-indexed</strong>) with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given an integer array <code>arr</code>,&nbsp;return <em>the length of the longest subarray, which is a mountain</em>.&nbsp;Return <code>0</code> if there is no mountain subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,4,7,3,2,5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The largest mountain is [1,4,7,3,2] which has length 5.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,2,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no mountain.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1&nbsp;&lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Can you solve it using only one pass?</li>\n\t<li>Can you solve it in <code>O(1)</code> space?</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u628a\u6570\u7ec4 A \u4e2d\u7b26\u5408\u4e0b\u5217\u5c5e\u6027\u7684\u4efb\u610f\u8fde\u7eed\u5b50\u6570\u7ec4 B \u79f0\u4e3a &ldquo;<em>\u5c71\u8109&rdquo;</em>\uff1a</p>\n\n<ul>\n\t<li><code>B.length &gt;= 3</code></li>\n\t<li>\u5b58\u5728 <code>0 &lt; i&nbsp;&lt; B.length - 1</code> \u4f7f\u5f97 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>\n</ul>\n\n<p>\uff08\u6ce8\u610f\uff1aB \u53ef\u4ee5\u662f A \u7684\u4efb\u610f\u5b50\u6570\u7ec4\uff0c\u5305\u62ec\u6574\u4e2a\u6570\u7ec4 A\u3002\uff09</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u6700\u957f <em>&ldquo;\u5c71\u8109&rdquo;</em>&nbsp;\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u542b\u6709 &ldquo;<em>\u5c71\u8109&rdquo;&nbsp;</em>\u5219\u8fd4\u56de <code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,4,7,3,2,5]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u7684 &ldquo;\u5c71\u8109&rdquo; \u662f [1,4,7,3,2]\uff0c\u957f\u5ea6\u4e3a 5\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0d\u542b &ldquo;\u5c71\u8109&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestMountain(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestMountain(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestMountain(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint longestMountain(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestMountain(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar longestMountain = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef longest_mountain(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestMountain(_ arr: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestMountain(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestMountain(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestMountain(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_mountain(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function longestMountain($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestMountain(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0876", "frontend_question_id": "0846", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/hand-of-straights", "url_en": "https://leetcode.com/problems/hand-of-straights", "relative_path_cn": "/leetcode/0800-0899/0846.Hand%20of%20Straights/README.md", "relative_path_en": "/leetcode/0800-0899/0846.Hand%20of%20Straights/README_EN.md", "title_cn": "\u4e00\u624b\u987a\u5b50", "title_en": "Hand of Straights", "question_title_slug": "hand-of-straights", "content_en": "<p>Alice has a <code>hand</code> of cards, given as an array of integers.</p>\n\n<p>Now she wants to rearrange the cards into groups so that each group is size <code>W</code>, and consists of <code>W</code> consecutive cards.</p>\n\n<p>Return <code>true</code> if and only if she can.</p>\n\n<p><strong>Note:</strong> This question is the same as&nbsp;1296:&nbsp;<a href=\"https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> hand = [1,2,3,6,2,3,4,7,8], W = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Alice&#39;s hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> hand = [1,2,3,4,5], W = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Alice&#39;s hand can&#39;t be rearranged into groups of 4.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hand.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= hand[i]&nbsp;&lt;= 10^9</code></li>\n\t<li><code>1 &lt;= W &lt;= hand.length</code></li>\n</ul>\n", "content_cn": "<p>\u7231\u4e3d\u4e1d\u6709\u4e00\u624b\uff08<code>hand</code>\uff09\u7531\u6574\u6570\u6570\u7ec4\u7ed9\u5b9a\u7684\u724c\u3002\u00a0</p>\n\n<p>\u73b0\u5728\u5979\u60f3\u628a\u724c\u91cd\u65b0\u6392\u5217\u6210\u7ec4\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7ec4\u7684\u5927\u5c0f\u90fd\u662f <code>W</code>\uff0c\u4e14\u7531 <code>W</code> \u5f20\u8fde\u7eed\u7684\u724c\u7ec4\u6210\u3002</p>\n\n<p>\u5982\u679c\u5979\u53ef\u4ee5\u5b8c\u6210\u5206\u7ec4\u5c31\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u6b64\u9898\u76ee\u4e0e 1296 \u91cd\u590d\uff1a<a href=\"https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\" target=\"_blank\">https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>\n\n<p>\u00a0</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>hand = [1,2,3,6,2,3,4,7,8], W = 3\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u7684\u624b\u724c\u53ef\u4ee5\u88ab\u91cd\u65b0\u6392\u5217\u4e3a <code>[1,2,3]\uff0c[2,3,4]\uff0c[6,7,8]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>hand = [1,2,3,4,5], W = 4\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u7684\u624b\u724c\u65e0\u6cd5\u88ab\u91cd\u65b0\u6392\u5217\u6210\u51e0\u4e2a\u5927\u5c0f\u4e3a 4 \u7684\u7ec4\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= hand.length <= 10000</code></li>\n\t<li><code>0 <= hand[i]\u00a0<= 10^9</code></li>\n\t<li><code>1 <= W <= hand.length</code></li>\n</ul>\n", "tags_en": ["Ordered Map"], "tags_cn": [null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isNStraightHand(vector<int>& hand, int W) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isNStraightHand(int[] hand, int W) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isNStraightHand(self, hand, W):\n        \"\"\"\n        :type hand: List[int]\n        :type W: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isNStraightHand(self, hand: List[int], W: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isNStraightHand(int* hand, int handSize, int W){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsNStraightHand(int[] hand, int W) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} hand\n * @param {number} W\n * @return {boolean}\n */\nvar isNStraightHand = function(hand, W) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} hand\n# @param {Integer} w\n# @return {Boolean}\ndef is_n_straight_hand(hand, w)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isNStraightHand(_ hand: [Int], _ W: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isNStraightHand(hand []int, W int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isNStraightHand(hand: Array[Int], W: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isNStraightHand(hand: IntArray, W: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_n_straight_hand(hand: Vec<i32>, w: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $hand\n     * @param Integer $W\n     * @return Boolean\n     */\n    function isNStraightHand($hand, $W) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isNStraightHand(hand: number[], W: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0877", "frontend_question_id": "0847", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes", "url_en": "https://leetcode.com/problems/shortest-path-visiting-all-nodes", "relative_path_cn": "/leetcode/0800-0899/0847.Shortest%20Path%20Visiting%20All%20Nodes/README.md", "relative_path_en": "/leetcode/0800-0899/0847.Shortest%20Path%20Visiting%20All%20Nodes/README_EN.md", "title_cn": "\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84", "title_en": "Shortest Path Visiting All Nodes", "question_title_slug": "shortest-path-visiting-all-nodes", "content_en": "<p>An undirected, connected graph of N nodes (labeled&nbsp;<code>0, 1, 2, ..., N-1</code>) is given as <code>graph</code>.</p>\r\n\r\n<p><code>graph.length = N</code>, and <code>j != i</code>&nbsp;is in the list&nbsp;<code>graph[i]</code>&nbsp;exactly once, if and only if nodes <code>i</code> and <code>j</code> are connected.</p>\r\n\r\n<p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,2,3],[0],[0],[0]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [1,0,2,0,3]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [0,1,4,2,3]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\r\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u51fa&nbsp;<code>graph</code>&nbsp;\u4e3a\u6709 N \u4e2a\u8282\u70b9\uff08\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>\uff09\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002&nbsp;</p>\n\n<p><code>graph.length = N</code>\uff0c\u4e14\u53ea\u6709\u8282\u70b9 <code>i</code>&nbsp;\u548c <code>j</code>&nbsp;\u8fde\u901a\u65f6\uff0c<code>j != i</code>&nbsp;\u5728\u5217\u8868&nbsp;<code>graph[i]</code>&nbsp;\u4e2d\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u4f60\u53ef\u4ee5\u5728\u4efb\u4e00\u8282\u70b9\u5f00\u59cb\u548c\u505c\u6b62\uff0c\u4e5f\u53ef\u4ee5\u591a\u6b21\u91cd\u8bbf\u8282\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u7528\u8fb9\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[0],[0],[0]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [1,0,2,0,3]</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n", "tags_en": ["Breadth-first Search", "Dynamic Programming"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shortestPathLength(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint shortestPathLength(int** graph, int graphSize, int* graphColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestPathLength(graph [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_path_length(graph: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function shortestPathLength($graph) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestPathLength(graph: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0878", "frontend_question_id": "0848", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shifting-letters", "url_en": "https://leetcode.com/problems/shifting-letters", "relative_path_cn": "/leetcode/0800-0899/0848.Shifting%20Letters/README.md", "relative_path_en": "/leetcode/0800-0899/0848.Shifting%20Letters/README_EN.md", "title_cn": "\u5b57\u6bcd\u79fb\u4f4d", "title_en": "Shifting Letters", "question_title_slug": "shifting-letters", "content_en": "<p>We have a string <code>S</code> of lowercase letters, and an integer array <code>shifts</code>.</p>\r\n\r\n<p>Call the <em>shift</em> of a letter, the next letter in the alphabet, (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>).&nbsp;</p>\r\n\r\n<p>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.</p>\r\n\r\n<p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i+1</code>&nbsp;letters of <code>S</code>, <code>x</code> times.</p>\r\n\r\n<p>Return the final string&nbsp;after all such shifts to <code>S</code> are applied.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abc&quot;, shifts = [3,5,9]\r\n<strong>Output: </strong>&quot;rpl&quot;\r\n<strong>Explanation: </strong>\r\nWe start with &quot;abc&quot;.\r\nAfter shifting the first 1 letters of S by 3, we have &quot;dbc&quot;.\r\nAfter shifting the first 2 letters of S by 5, we have &quot;igc&quot;.\r\nAfter shifting the first 3 letters of S by 9, we have &quot;rpl&quot;, the answer.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>shifts</code>\u3002</p>\n\n<p>\u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 <em>\u79fb\u4f4d</em>\uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c <code>&#39;z&#39;</code>&nbsp;\u5c06\u4f1a\u53d8\u6210&nbsp;<code>&#39;a&#39;</code>\uff09\u3002</p>\n\n<p>\u4f8b\u5982&middot;\uff0c<code>shift(&#39;a&#39;) = &#39;b&#39;</code>\uff0c&nbsp;<code>shift(&#39;t&#39;) = &#39;u&#39;</code>,\uff0c \u4ee5\u53ca&nbsp;<code>shift(&#39;z&#39;) = &#39;a&#39;</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a&nbsp;<code>shifts[i] = x</code>&nbsp;\uff0c \u6211\u4eec\u4f1a\u5c06 <code>S</code>&nbsp;\u4e2d\u7684\u524d&nbsp;<code>i+1</code>&nbsp;\u4e2a\u5b57\u6bcd\u79fb\u4f4d&nbsp;<code>x</code>&nbsp;\u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 <code>S</code> \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;abc&quot;, shifts = [3,5,9]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;rpl&quot;\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u4ee5 &quot;abc&quot; \u5f00\u59cb\u3002\n\u5c06 S \u4e2d\u7684\u7b2c 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 3 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 &quot;dbc&quot;\u3002\n\u518d\u5c06 S \u4e2d\u7684\u524d 2 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 5 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 &quot;igc&quot;\u3002\n\u6700\u540e\u5c06 S \u4e2d\u7684\u8fd9 3 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 9 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7b54\u6848 &quot;rpl&quot;\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shiftingLetters(string S, vector<int>& shifts) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shiftingLetters(String S, int[] shifts) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shiftingLetters(self, S, shifts):\n        \"\"\"\n        :type S: str\n        :type shifts: List[int]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * shiftingLetters(char * S, int* shifts, int shiftsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShiftingLetters(string S, int[] shifts) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(S, shifts) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer[]} shifts\n# @return {String}\ndef shifting_letters(s, shifts)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shiftingLetters(_ S: String, _ shifts: [Int]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shiftingLetters(S string, shifts []int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shiftingLetters(S: String, shifts: Array[Int]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shiftingLetters(S: String, shifts: IntArray): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shifting_letters(s: String, shifts: Vec<i32>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer[] $shifts\n     * @return String\n     */\n    function shiftingLetters($S, $shifts) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shiftingLetters(S: string, shifts: number[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0879", "frontend_question_id": "0849", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximize-distance-to-closest-person", "url_en": "https://leetcode.com/problems/maximize-distance-to-closest-person", "relative_path_cn": "/leetcode/0800-0899/0849.Maximize%20Distance%20to%20Closest%20Person/README.md", "relative_path_en": "/leetcode/0800-0899/0849.Maximize%20Distance%20to%20Closest%20Person/README_EN.md", "title_cn": "\u5230\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb", "title_en": "Maximize Distance to Closest Person", "question_title_slug": "maximize-distance-to-closest-person", "content_en": "<p>You are given an array representing a row of <code>seats</code> where <code>seats[i] = 1</code> represents a person sitting in the <code>i<sup>th</sup></code> seat, and <code>seats[i] = 0</code> represents that the <code>i<sup>th</sup></code> seat is empty <strong>(0-indexed)</strong>.</p>\n\n<p>There is at least one empty seat, and at least one person sitting.</p>\n\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.&nbsp;</p>\n\n<p>Return <em>that maximum distance to the closest person</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/distance.jpg\" style=\"width: 650px; height: 257px;\" />\n<pre>\n<strong>Input:</strong> seats = [1,0,0,0,1,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [1,0,0,0]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>\nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [0,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>seats[i]</code>&nbsp;is <code>0</code> or&nbsp;<code>1</code>.</li>\n\t<li>At least one seat is <strong>empty</strong>.</li>\n\t<li>At least one seat is <strong>occupied</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4\u00a0<code>seats</code> \u8868\u793a\u4e00\u6392\u5ea7\u4f4d\uff0c\u5176\u4e2d <code>seats[i] = 1</code> \u4ee3\u8868\u6709\u4eba\u5750\u5728\u7b2c <code>i</code> \u4e2a\u5ea7\u4f4d\u4e0a\uff0c<code>seats[i] = 0</code> \u4ee3\u8868\u5ea7\u4f4d <code>i</code> \u4e0a\u662f\u7a7a\u7684\uff08<strong>\u4e0b\u6807\u4ece 0 \u5f00\u59cb</strong>\uff09\u3002</p>\n\n<p>\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u5ea7\u4f4d\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4eba\u5df2\u7ecf\u5750\u5728\u5ea7\u4f4d\u4e0a\u3002</p>\n\n<p>\u4e9a\u5386\u514b\u65af\u5e0c\u671b\u5750\u5728\u4e00\u4e2a\u80fd\u591f\u4f7f\u4ed6\u4e0e\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fbe\u5230\u6700\u5927\u5316\u7684\u5ea7\u4f4d\u4e0a\u3002</p>\n\n<p>\u8fd4\u56de\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/distance.jpg\" style=\"width: 650px; height: 257px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>seats = [1,0,0,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u7b2c\u4e8c\u4e2a\u7a7a\u4f4d\uff08seats[2]\uff09\u4e0a\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u8ddd\u79bb\u4e3a 2 \u3002\n\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u5176\u5b83\u4efb\u4f55\u4e00\u4e2a\u7a7a\u4f4d\u4e0a\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u8ddd\u79bb\u4e3a 1 \u3002\n\u56e0\u6b64\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb\u662f 2 \u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>seats = [1,0,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u4e0a\uff0c\u4ed6\u79bb\u6700\u8fd1\u7684\u4eba\u6709 3 \u4e2a\u5ea7\u4f4d\u8fdc\u3002\n\u8fd9\u662f\u53ef\u80fd\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>seats = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 <= seats.length <= 2 * 10<sup>4</sup></code></li>\n\t<li><code>seats[i]</code> \u4e3a <code>0</code> \u6216 <code>1</code></li>\n\t<li>\u81f3\u5c11\u6709\u4e00\u4e2a <strong>\u7a7a\u5ea7\u4f4d</strong></li>\n\t<li>\u81f3\u5c11\u6709\u4e00\u4e2a <strong>\u5ea7\u4f4d\u4e0a\u6709\u4eba</strong></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxDistToClosest(vector<int>& seats) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxDistToClosest(int[] seats) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxDistToClosest(self, seats):\n        \"\"\"\n        :type seats: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxDistToClosest(int* seats, int seatsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxDistToClosest(int[] seats) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} seats\n * @return {number}\n */\nvar maxDistToClosest = function(seats) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} seats\n# @return {Integer}\ndef max_dist_to_closest(seats)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxDistToClosest(_ seats: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxDistToClosest(seats []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxDistToClosest(seats: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxDistToClosest(seats: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_dist_to_closest(seats: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $seats\n     * @return Integer\n     */\n    function maxDistToClosest($seats) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxDistToClosest(seats: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0880", "frontend_question_id": "0850", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rectangle-area-ii", "url_en": "https://leetcode.com/problems/rectangle-area-ii", "relative_path_cn": "/leetcode/0800-0899/0850.Rectangle%20Area%20II/README.md", "relative_path_en": "/leetcode/0800-0899/0850.Rectangle%20Area%20II/README_EN.md", "title_cn": "\u77e9\u5f62\u9762\u79ef II", "title_en": "Rectangle Area II", "question_title_slug": "rectangle-area-ii", "content_en": "<p>We are given a list of (axis-aligned) <code>rectangles</code>. Each <code>rectangle[i] = [x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y<sub>i2</sub>] </code>, where <code>(x<sub>i1</sub>, y<sub>i1</sub>)</code> are the coordinates of the bottom-left corner, and <code>(x<sub>i2</sub>, y<sub>i2</sub>)</code> are the coordinates of the top-right corner of the <code>i<sup>th</sup></code> rectangle.</p>\n\n<p>Find the total area covered by all <code>rectangles</code> in the plane. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"width: 600px; height: 450px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>As illustrated in the picture.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rectangles = [[0,0,1000000000,1000000000]]\n<strong>Output:</strong> 49\n<strong>Explanation: </strong>The answer is 10<sup>18</sup> modulo (10<sup>9</sup> + 7), which is (10<sup>9</sup>)<sup>2</sup> = (-7)<sup>2</sup> = 49.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code><font face=\"monospace\">rectanges[i].length = 4</font></code></li>\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>The total area covered by all rectangles will never exceed <code>2<sup>63</sup> - 1</code> and thus will fit in a <strong>64-bit</strong> signed integer.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\uff08\u8f74\u5bf9\u9f50\u7684\uff09\u77e9\u5f62\u5217\u8868&nbsp;<code>rectangles</code>&nbsp;\u3002 \u5bf9\u4e8e&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]</code>\uff0c\u5176\u4e2d\uff08x1\uff0cy1\uff09\u662f\u77e9\u5f62&nbsp;<code>i</code>&nbsp;\u5de6\u4e0b\u89d2\u7684\u5750\u6807\uff0c\uff08x2\uff0cy2\uff09\u662f\u8be5\u77e9\u5f62\u53f3\u4e0a\u89d2\u7684\u5750\u6807\u3002</p>\n\n<p>\u627e\u51fa\u5e73\u9762\u4e2d\u6240\u6709\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u3002 \u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u592a\u5927\uff0c<strong>\u8bf7\u8fd4\u56de\u5b83\u5bf9 10 ^ 9 + 7 \u53d6\u6a21\u7684\u7ed3\u679c</strong>\u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"height: 360px; width: 480px;\"></p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,1000000000,1000000000]]\n<strong>\u8f93\u51fa\uff1a</strong>49\n<strong>\u89e3\u91ca\uff1a</strong>\u7b54\u6848\u662f 10^18 \u5bf9 (10^9 + 7) \u53d6\u6a21\u7684\u7ed3\u679c\uff0c \u5373 (10^9)^2 &rarr; (-7)^2 = 49 \u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code>rectanges[i].length = 4</code></li>\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\n\t<li>\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u4e0d\u4f1a\u8d85\u8d8a&nbsp;<code>2^63 - 1</code>&nbsp;\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u7528\u4e00\u4e2a&nbsp;64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u6765\u4fdd\u5b58\u9762\u79ef\u7ed3\u679c\u3002</li>\n</ul>\n", "tags_en": ["Segment Tree", "Line Sweep"], "tags_cn": ["\u7ebf\u6bb5\u6811", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int rectangleArea(vector<vector<int>>& rectangles) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int rectangleArea(int[][] rectangles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rectangleArea(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint rectangleArea(int** rectangles, int rectanglesSize, int* rectanglesColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RectangleArea(int[][] rectangles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} rectangles\n * @return {number}\n */\nvar rectangleArea = function(rectangles) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} rectangles\n# @return {Integer}\ndef rectangle_area(rectangles)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rectangleArea(_ rectangles: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rectangleArea(rectangles [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rectangleArea(rectangles: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rectangleArea(rectangles: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rectangle_area(rectangles: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Integer\n     */\n    function rectangleArea($rectangles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rectangleArea(rectangles: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0881", "frontend_question_id": "0851", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/loud-and-rich", "url_en": "https://leetcode.com/problems/loud-and-rich", "relative_path_cn": "/leetcode/0800-0899/0851.Loud%20and%20Rich/README.md", "relative_path_en": "/leetcode/0800-0899/0851.Loud%20and%20Rich/README_EN.md", "title_cn": "\u55a7\u95f9\u548c\u5bcc\u6709", "title_en": "Loud and Rich", "question_title_slug": "loud-and-rich", "content_en": "<p>In a group of N people (labelled <code>0, 1, 2, ..., N-1</code>), each person has different amounts of money, and different levels of quietness.</p>\r\n\r\n<p>For convenience, we&#39;ll call the person with label <code>x</code>, simply &quot;person <code>x</code>&quot;.</p>\r\n\r\n<p>We&#39;ll say that <code>richer[i] = [x, y]</code> if person <code>x</code>&nbsp;definitely has more money than person&nbsp;<code>y</code>.&nbsp; Note that <code>richer</code>&nbsp;may only be a subset of valid observations.</p>\r\n\r\n<p>Also, we&#39;ll say <code>quiet[x] = q</code> if person <font face=\"monospace\">x</font>&nbsp;has quietness <code>q</code>.</p>\r\n\r\n<p>Now, return <code>answer</code>, where <code>answer[x] = y</code> if <code>y</code> is the least quiet person (that is, the person <code>y</code> with the smallest value of <code>quiet[y]</code>), among all people&nbsp;who definitely have&nbsp;equal to or more money than person <code>x</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>richer = <span id=\"example-input-1-1\">[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]]</span>, quiet = <span id=\"example-input-1-2\">[3,2,5,4,6,1,7,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[5,5,2,5,4,5,6,7]</span>\r\n<strong>Explanation: </strong>\r\nanswer[0] = 5.\r\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\r\nThe only person who is quieter (has lower quiet[x]) is person 7, but\r\nit isn&#39;t clear if they have more money than person 0.\r\n\r\nanswer[7] = 7.\r\nAmong all people that definitely have equal to or more money than person 7\r\n(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])\r\nis person 7.\r\n\r\nThe other answers can be filled out with similar reasoning.\r\n</pre>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\r\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>, all <code>quiet[i]</code> are different.</li>\r\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\r\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\r\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\r\n\t<li><code>richer[i]</code>&#39;s are all different.</li>\r\n\t<li>The&nbsp;observations in <code>richer</code> are all logically consistent.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u7ec4 N \u4e2a\u4eba\uff08\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>\uff09\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e0d\u540c\u6570\u76ee\u7684\u94b1\uff0c\u4ee5\u53ca\u4e0d\u540c\u7a0b\u5ea6\u7684\u5b89\u9759\uff08quietness\uff09\u3002</p>\n\n<p>\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u7f16\u53f7\u4e3a&nbsp;<code>x</code>&nbsp;\u7684\u4eba\u7b80\u79f0\u4e3a &quot;person&nbsp;<code>x</code>&nbsp;&quot;\u3002</p>\n\n<p>\u5982\u679c\u80fd\u591f\u80af\u5b9a person&nbsp;<code>x</code>&nbsp;\u6bd4 person&nbsp;<code>y</code>&nbsp;\u66f4\u6709\u94b1\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u8bf4&nbsp;<code>richer[i] = [x, y]</code>&nbsp;\u3002\u6ce8\u610f&nbsp;<code>richer</code>&nbsp;\u53ef\u80fd\u53ea\u662f\u6709\u6548\u89c2\u5bdf\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p>\n\n<p>\u53e6\u5916\uff0c\u5982\u679c person&nbsp;<code>x</code>&nbsp;\u7684\u5b89\u9759\u7a0b\u5ea6\u4e3a&nbsp;<code>q</code>&nbsp;\uff0c\u6211\u4eec\u4f1a\u8bf4&nbsp;<code>quiet[x] = q</code>&nbsp;\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u8fd4\u56de\u7b54\u6848&nbsp;<code>answer</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>answer[x] = y</code>&nbsp;\u7684\u524d\u63d0\u662f\uff0c\u5728\u6240\u6709\u62e5\u6709\u7684\u94b1\u4e0d\u5c11\u4e8e&nbsp;person&nbsp;<code>x</code>&nbsp;\u7684\u4eba\u4e2d\uff0cperson&nbsp;<code>y</code>&nbsp;\u662f\u6700\u5b89\u9759\u7684\u4eba\uff08\u4e5f\u5c31\u662f\u5b89\u9759\u503c&nbsp;<code>quiet[y]</code>&nbsp;\u6700\u5c0f\u7684\u4eba\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>\u8f93\u51fa\uff1a</strong>[5,5,2,5,4,5,6,7]\n<strong>\u89e3\u91ca\uff1a </strong>\nanswer[0] = 5\uff0c\nperson 5 \u6bd4 person 3 \u6709\u66f4\u591a\u7684\u94b1\uff0cperson 3 \u6bd4 person 1 \u6709\u66f4\u591a\u7684\u94b1\uff0cperson 1 \u6bd4 person 0 \u6709\u66f4\u591a\u7684\u94b1\u3002\n\u552f\u4e00\u8f83\u4e3a\u5b89\u9759\uff08\u6709\u8f83\u4f4e\u7684\u5b89\u9759\u503c quiet[x]\uff09\u7684\u4eba\u662f person 7\uff0c\n\u4f46\u662f\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u4ed6\u662f\u5426\u6bd4 person 0 \u66f4\u6709\u94b1\u3002\n\nanswer[7] = 7\uff0c\n\u5728\u6240\u6709\u62e5\u6709\u7684\u94b1\u80af\u5b9a\u4e0d\u5c11\u4e8e person 7 \u7684\u4eba\u4e2d(\u8fd9\u53ef\u80fd\u5305\u62ec person 3\uff0c4\uff0c5\uff0c6 \u4ee5\u53ca 7)\uff0c\n\u6700\u5b89\u9759(\u6709\u8f83\u4f4e\u5b89\u9759\u503c quiet[x])\u7684\u4eba\u662f person 7\u3002\n\n\u5176\u4ed6\u7684\u7b54\u6848\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u63a8\u7406\u6765\u89e3\u91ca\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>\uff0c\u6240\u6709&nbsp;<code>quiet[i]</code>&nbsp;\u90fd\u4e0d\u76f8\u540c\u3002</li>\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\n\t<li><code>richer[i]</code>&nbsp;\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n\t<li>\u5bf9&nbsp;<code>richer</code>&nbsp;\u7684\u89c2\u5bdf\u5728\u903b\u8f91\u4e0a\u662f\u4e00\u81f4\u7684\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] loudAndRich(int[][] richer, int[] quiet) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def loudAndRich(self, richer, quiet):\n        \"\"\"\n        :type richer: List[List[int]]\n        :type quiet: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* loudAndRich(int** richer, int richerSize, int* richerColSize, int* quiet, int quietSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] LoudAndRich(int[][] richer, int[] quiet) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} richer\n * @param {number[]} quiet\n * @return {number[]}\n */\nvar loudAndRich = function(richer, quiet) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} richer\n# @param {Integer[]} quiet\n# @return {Integer[]}\ndef loud_and_rich(richer, quiet)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func loudAndRich(_ richer: [[Int]], _ quiet: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func loudAndRich(richer [][]int, quiet []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def loudAndRich(richer: Array[Array[Int]], quiet: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun loudAndRich(richer: Array<IntArray>, quiet: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn loud_and_rich(richer: Vec<Vec<i32>>, quiet: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $richer\n     * @param Integer[] $quiet\n     * @return Integer[]\n     */\n    function loudAndRich($richer, $quiet) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function loudAndRich(richer: number[][], quiet: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0882", "frontend_question_id": "0852", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/peak-index-in-a-mountain-array", "url_en": "https://leetcode.com/problems/peak-index-in-a-mountain-array", "relative_path_cn": "/leetcode/0800-0899/0852.Peak%20Index%20in%20a%20Mountain%20Array/README.md", "relative_path_en": "/leetcode/0800-0899/0852.Peak%20Index%20in%20a%20Mountain%20Array/README_EN.md", "title_cn": "\u5c71\u8109\u6570\u7ec4\u7684\u5cf0\u9876\u7d22\u5f15", "title_en": "Peak Index in a Mountain Array", "question_title_slug": "peak-index-in-a-mountain-array", "content_en": "<p>Let&#39;s call an array <code>arr</code> a <strong>mountain</strong>&nbsp;if the following properties hold:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with&nbsp;<code>0 &lt; i&nbsp;&lt; arr.length - 1</code>&nbsp;such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i] </code></li>\n\t\t<li><code>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given an integer array arr that is <strong>guaranteed</strong> to be&nbsp;a mountain, return any&nbsp;<code>i</code>&nbsp;such that&nbsp;<code>arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [0,1,0]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [0,2,1,0]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> arr = [0,10,5,2]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> arr = [3,4,5,1]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> arr = [24,69,100,99,79,78,67,36,26,19]\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u628a\u7b26\u5408\u4e0b\u5217\u5c5e\u6027\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u79f0\u4f5c\u5c71\u8109\uff1a</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>\u5b58\u5728 <code>0 &lt; i&nbsp;&lt; A.length - 1</code> \u4f7f\u5f97<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u786e\u5b9a\u4e3a\u5c71\u8109\u7684\u6570\u7ec4\uff0c\u8fd4\u56de\u4efb\u4f55\u6ee1\u8db3&nbsp;<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>&nbsp;\u7684 <code>i</code>&nbsp;\u7684\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,2,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n\t<li>0 &lt;= A[i] &lt;= 10^6</li>\n\t<li>A \u662f\u5982\u4e0a\u5b9a\u4e49\u7684\u5c71\u8109</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int peakIndexInMountainArray(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int peakIndexInMountainArray(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def peakIndexInMountainArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint peakIndexInMountainArray(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PeakIndexInMountainArray(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar peakIndexInMountainArray = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef peak_index_in_mountain_array(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func peakIndexInMountainArray(_ arr: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func peakIndexInMountainArray(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def peakIndexInMountainArray(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun peakIndexInMountainArray(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn peak_index_in_mountain_array(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function peakIndexInMountainArray($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function peakIndexInMountainArray(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0883", "frontend_question_id": "0853", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/car-fleet", "url_en": "https://leetcode.com/problems/car-fleet", "relative_path_cn": "/leetcode/0800-0899/0853.Car%20Fleet/README.md", "relative_path_en": "/leetcode/0800-0899/0853.Car%20Fleet/README_EN.md", "title_cn": "\u8f66\u961f", "title_en": "Car Fleet", "question_title_slug": "car-fleet", "content_en": "<p><code>N</code> cars are going to the same destination along a one lane road.&nbsp; The destination is <code>target</code>&nbsp;miles away.</p>\r\n\r\n<p>Each car <code>i</code>&nbsp;has a constant speed <code>speed[i]</code>&nbsp;(in miles per hour), and initial position <code>position[i]</code>&nbsp;miles towards the target along the road.</p>\r\n\r\n<p>A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.</p>\r\n\r\n<p>The distance between these two cars is ignored - they are assumed to have the same position.</p>\r\n\r\n<p>A <em>car fleet</em> is some non-empty set of cars driving&nbsp;at the same position and same speed.&nbsp; Note that a single car is also a car fleet.</p>\r\n\r\n<p>If a car catches up to a car fleet right at the destination point, it will&nbsp;still be&nbsp;considered as one car fleet.</p>\r\n\r\n<p><br />\r\nHow many car fleets will arrive at the destination?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-1-1\">12</span>, position = <span id=\"example-input-1-2\">[10,8,0,5,3]</span>, speed = <span id=\"example-input-1-3\">[2,4,1,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation</strong>:\r\nThe cars starting at 10 and 8 become a fleet, meeting each other at 12.\r\nThe car starting at 0 doesn&#39;t catch up to any other car, so it is a fleet by itself.\r\nThe cars starting at 5 and 3 become a fleet, meeting each other at 6.\r\nNote that no other cars meet these fleets before the destination, so the answer is 3.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\r\n\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\r\n\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\r\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\r\n\t<li>All initial positions are different.</li>\r\n</ol>", "content_cn": "<p><code>N</code> &nbsp;\u8f86\u8f66\u6cbf\u7740\u4e00\u6761\u8f66\u9053\u9a76\u5411\u4f4d\u4e8e&nbsp;<code>target</code>&nbsp;\u82f1\u91cc\u4e4b\u5916\u7684\u5171\u540c\u76ee\u7684\u5730\u3002</p>\n\n<p>\u6bcf\u8f86\u8f66&nbsp;<code>i</code>&nbsp;\u4ee5\u6052\u5b9a\u7684\u901f\u5ea6&nbsp;<code>speed[i]</code>&nbsp;\uff08\u82f1\u91cc/\u5c0f\u65f6\uff09\uff0c\u4ece\u521d\u59cb\u4f4d\u7f6e&nbsp;<code>position[i]</code>&nbsp;\uff08\u82f1\u91cc\uff09 \u6cbf\u8f66\u9053\u9a76\u5411\u76ee\u7684\u5730\u3002</p>\n\n<p>\u4e00\u8f86\u8f66\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u524d\u9762\u7684\u53e6\u4e00\u8f86\u8f66\uff0c\u4f46\u5b83\u53ef\u4ee5\u8ffd\u4e0a\u53bb\uff0c\u5e76\u4e0e\u524d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u7d27\u63a5\u7740\u884c\u9a76\u3002</p>\n\n<p>\u6b64\u65f6\uff0c\u6211\u4eec\u4f1a\u5ffd\u7565\u8fd9\u4e24\u8f86\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u88ab\u5047\u5b9a\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p><em>\u8f66\u961f&nbsp;</em>\u662f\u4e00\u4e9b\u7531\u884c\u9a76\u5728\u76f8\u540c\u4f4d\u7f6e\u3001\u5177\u6709\u76f8\u540c\u901f\u5ea6\u7684\u8f66\u7ec4\u6210\u7684\u975e\u7a7a\u96c6\u5408\u3002\u6ce8\u610f\uff0c\u4e00\u8f86\u8f66\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8f66\u961f\u3002</p>\n\n<p>\u5373\u4fbf\u4e00\u8f86\u8f66\u5728\u76ee\u7684\u5730\u624d\u8d76\u4e0a\u4e86\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u4ecd\u7136\u4f1a\u88ab\u89c6\u4f5c\u662f\u540c\u4e00\u4e2a\u8f66\u961f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f1a\u6709\u591a\u5c11\u8f66\u961f\u5230\u8fbe\u76ee\u7684\u5730?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece 10 \u548c 8 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 12 \u5904\u76f8\u9047\u3002\n\u4ece 0 \u5904\u5f00\u59cb\u7684\u8f66\u65e0\u6cd5\u8ffd\u4e0a\u5176\u5b83\u8f66\uff0c\u6240\u4ee5\u5b83\u81ea\u5df1\u5c31\u662f\u4e00\u4e2a\u8f66\u961f\u3002\n\u4ece 5 \u548c 3 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 6 \u5904\u76f8\u9047\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5728\u5230\u8fbe\u76ee\u7684\u5730\u4e4b\u524d\u6ca1\u6709\u5176\u5b83\u8f66\u4f1a\u9047\u5230\u8fd9\u4e9b\u8f66\u961f\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3\u3002\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\n\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\n\t<li>\u6240\u6709\u8f66\u7684\u521d\u59cb\u4f4d\u7f6e\u5404\u4e0d\u76f8\u540c\u3002</li>\n</ol>\n", "tags_en": ["Sort"], "tags_cn": ["\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int carFleet(int target, vector<int>& position, vector<int>& speed) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int carFleet(int target, int[] position, int[] speed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def carFleet(self, target, position, speed):\n        \"\"\"\n        :type target: int\n        :type position: List[int]\n        :type speed: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint carFleet(int target, int* position, int positionSize, int* speed, int speedSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CarFleet(int target, int[] position, int[] speed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} target\n * @param {number[]} position\n * @param {number[]} speed\n * @return {number}\n */\nvar carFleet = function(target, position, speed) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} target\n# @param {Integer[]} position\n# @param {Integer[]} speed\n# @return {Integer}\ndef car_fleet(target, position, speed)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func carFleet(_ target: Int, _ position: [Int], _ speed: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func carFleet(target int, position []int, speed []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def carFleet(target: Int, position: Array[Int], speed: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun carFleet(target: Int, position: IntArray, speed: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn car_fleet(target: i32, position: Vec<i32>, speed: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $position\n     * @param Integer[] $speed\n     * @return Integer\n     */\n    function carFleet($target, $position, $speed) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function carFleet(target: number, position: number[], speed: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0884", "frontend_question_id": "0854", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-similar-strings", "url_en": "https://leetcode.com/problems/k-similar-strings", "relative_path_cn": "/leetcode/0800-0899/0854.K-Similar%20Strings/README.md", "relative_path_en": "/leetcode/0800-0899/0854.K-Similar%20Strings/README_EN.md", "title_cn": "\u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32", "title_en": "K-Similar Strings", "question_title_slug": "k-similar-strings", "content_en": "<p>Strings&nbsp;<code>A</code> and <code>B</code> are <code>K</code>-similar (for some non-negative integer <code>K</code>) if we can swap the positions of two letters in <code>A</code> exactly <code>K</code>&nbsp;times so that the resulting string equals <code>B</code>.</p>\r\n\r\n<p>Given two anagrams <code>A</code> and <code>B</code>, return the smallest <code>K</code>&nbsp;for which <code>A</code> and <code>B</code> are <code>K</code>-similar.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">&quot;ab&quot;</span>, B = <span id=\"example-input-1-2\">&quot;ba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">&quot;abc&quot;</span>, B = <span id=\"example-input-2-2\">&quot;bca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">&quot;abac&quot;</span>, B = <span id=\"example-input-3-2\">&quot;baca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">&quot;aabc&quot;</span>, B = <span id=\"example-input-4-2\">&quot;abca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length == B.length &lt;= 20</code></li>\r\n\t<li><code>A</code> and <code>B</code> contain only lowercase letters from the set <code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06 <code>A</code> \u4e2d\u7684\u4e24\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7cbe\u786e\u5730\u4ea4\u6362\u4f4d\u7f6e <code>K</code> \u6b21\u5f97\u5230\u4e0e <code>B</code> \u76f8\u7b49\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u7684\u76f8\u4f3c\u5ea6\u4e3a <code>K</code>\uff08<code>K</code>&nbsp;\u4e3a\u975e\u8d1f\u6574\u6570\uff09\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8fd4\u56de <code>A</code> \u548c <code>B</code>&nbsp;\u7684\u76f8\u4f3c\u5ea6 <code>K</code> \u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;abc&quot;, B = &quot;bca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;abac&quot;, B = &quot;baca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;aabc&quot;, B = &quot;abca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == B.length &lt;= 20</code></li>\n\t<li><code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u53ea\u5305\u542b\u96c6\u5408&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code>&nbsp;\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Breadth-first Search", "Graph"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int kSimilarity(string A, string B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int kSimilarity(String A, String B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kSimilarity(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kSimilarity(self, A: str, B: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint kSimilarity(char * A, char * B){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KSimilarity(string A, string B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} A\n * @param {string} B\n * @return {number}\n */\nvar kSimilarity = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef k_similarity(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kSimilarity(_ A: String, _ B: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kSimilarity(A string, B string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kSimilarity(A: String, B: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kSimilarity(A: String, B: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn k_similarity(a: String, b: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $A\n     * @param String $B\n     * @return Integer\n     */\n    function kSimilarity($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kSimilarity(A: string, B: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0885", "frontend_question_id": "0855", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/exam-room", "url_en": "https://leetcode.com/problems/exam-room", "relative_path_cn": "/leetcode/0800-0899/0855.Exam%20Room/README.md", "relative_path_en": "/leetcode/0800-0899/0855.Exam%20Room/README_EN.md", "title_cn": "\u8003\u573a\u5c31\u5ea7", "title_en": "Exam Room", "question_title_slug": "exam-room", "content_en": "<p>In an exam room, there are <code>N</code> seats in a single row, numbered <code>0, 1, 2, ..., N-1</code>.</p>\r\n\r\n<p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.&nbsp; If there are multiple such seats, they sit in the seat with the lowest number.&nbsp; (Also, if no one is in the room, then the student sits at seat number 0.)</p>\r\n\r\n<p>Return a class <code>ExamRoom(int N)</code>&nbsp;that exposes two functions: <code>ExamRoom.seat()</code>&nbsp;returning an <code>int</code>&nbsp;representing what seat the student sat in, and <code>ExamRoom.leave(int p)</code>&nbsp;representing that the student in seat number <code>p</code>&nbsp;now leaves the room.&nbsp; It is guaranteed that any calls to <code>ExamRoom.leave(p)</code> have a student sitting in seat <code>p</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;]</span>, <span id=\"example-input-1-2\">[[10],[],[],[],[],[4],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,9,4,2,null,5]</span>\r\n<span><strong>Explanation</strong>:\r\nExamRoom(10) -&gt; null\r\nseat() -&gt; 0, no one is in the room, then the student sits at seat number 0.\r\nseat() -&gt; 9, the student sits at the last seat number 9.\r\nseat() -&gt; 4, the student sits at the last seat number 4.\r\nseat() -&gt; 2, the student sits at the last seat number 2.\r\nleave(4) -&gt; null\r\nseat() -&gt; 5, the student sits at the last seat number 5.</span>\r\n</pre>\r\n\r\n<p><span>\u200b\u200b\u200b\u200b\u200b\u200b\u200b</span></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n\t<li><code>ExamRoom.seat()</code> and <code>ExamRoom.leave()</code> will be called at most <code>10^4</code> times across all test cases.</li>\r\n\t<li>Calls to <code>ExamRoom.leave(p)</code> are guaranteed to have a student currently sitting in seat number <code>p</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u8003\u573a\u91cc\uff0c\u4e00\u6392\u6709&nbsp;<code>N</code>&nbsp;\u4e2a\u5ea7\u4f4d\uff0c\u5206\u522b\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;\u3002</p>\n\n<p>\u5f53\u5b66\u751f\u8fdb\u5165\u8003\u573a\u540e\uff0c\u4ed6\u5fc5\u987b\u5750\u5728\u80fd\u591f\u4f7f\u4ed6\u4e0e\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fbe\u5230\u6700\u5927\u5316\u7684\u5ea7\u4f4d\u4e0a\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u5ea7\u4f4d\uff0c\u4ed6\u4f1a\u5750\u5728\u7f16\u53f7\u6700\u5c0f\u7684\u5ea7\u4f4d\u4e0a\u3002(\u53e6\u5916\uff0c\u5982\u679c\u8003\u573a\u91cc\u6ca1\u6709\u4eba\uff0c\u90a3\u4e48\u5b66\u751f\u5c31\u5750\u5728 0 \u53f7\u5ea7\u4f4d\u4e0a\u3002)</p>\n\n<p>\u8fd4\u56de&nbsp;<code>ExamRoom(int N)</code>&nbsp;\u7c7b\uff0c\u5b83\u6709\u4e24\u4e2a\u516c\u5f00\u7684\u51fd\u6570\uff1a\u5176\u4e2d\uff0c\u51fd\u6570&nbsp;<code>ExamRoom.seat()</code>&nbsp;\u4f1a\u8fd4\u56de\u4e00\u4e2a&nbsp;<code>int</code>&nbsp;\uff08\u6574\u578b\u6570\u636e\uff09\uff0c\u4ee3\u8868\u5b66\u751f\u5750\u7684\u4f4d\u7f6e\uff1b\u51fd\u6570&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;\u4ee3\u8868\u5750\u5728\u5ea7\u4f4d <code>p</code> \u4e0a\u7684\u5b66\u751f\u73b0\u5728\u79bb\u5f00\u4e86\u8003\u573a\u3002\u6bcf\u6b21\u8c03\u7528&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;\u65f6\u90fd\u4fdd\u8bc1\u6709\u5b66\u751f\u5750\u5728\u5ea7\u4f4d&nbsp;<code>p</code>&nbsp;\u4e0a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,0,9,4,2,null,5]\n<strong>\u89e3\u91ca\uff1a</strong>\nExamRoom(10) -&gt; null\nseat() -&gt; 0\uff0c\u6ca1\u6709\u4eba\u5728\u8003\u573a\u91cc\uff0c\u90a3\u4e48\u5b66\u751f\u5750\u5728 0 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 9\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 9 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 4\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 4 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 2\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 2 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nleave(4) -&gt; null\nseat() -&gt; 5\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 5 \u53f7\u5ea7\u4f4d\u4e0a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li>\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u6837\u4f8b\u4e2d&nbsp;<code>ExamRoom.seat()</code>&nbsp;\u548c&nbsp;<code>ExamRoom.leave()</code>&nbsp;\u6700\u591a\u88ab\u8c03\u7528&nbsp;<code>10^4</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u4fdd\u8bc1\u5728\u8c03\u7528&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;\u65f6\u6709\u5b66\u751f\u6b63\u5750\u5728\u5ea7\u4f4d <code>p</code> \u4e0a\u3002</li>\n</ol>\n", "tags_en": ["Ordered Map"], "tags_cn": [null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class ExamRoom {\npublic:\n    ExamRoom(int N) {\n\n    }\n    \n    int seat() {\n\n    }\n    \n    void leave(int p) {\n\n    }\n};\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * ExamRoom* obj = new ExamRoom(N);\n * int param_1 = obj->seat();\n * obj->leave(p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class ExamRoom {\n\n    public ExamRoom(int N) {\n\n    }\n    \n    public int seat() {\n\n    }\n    \n    public void leave(int p) {\n\n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * ExamRoom obj = new ExamRoom(N);\n * int param_1 = obj.seat();\n * obj.leave(p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class ExamRoom(object):\n\n    def __init__(self, N):\n        \"\"\"\n        :type N: int\n        \"\"\"\n        \n\n    def seat(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def leave(self, p):\n        \"\"\"\n        :type p: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your ExamRoom object will be instantiated and called as such:\n# obj = ExamRoom(N)\n# param_1 = obj.seat()\n# obj.leave(p)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class ExamRoom:\n\n    def __init__(self, N: int):\n        \n\n    def seat(self) -> int:\n        \n\n    def leave(self, p: int) -> None:\n        \n\n\n# Your ExamRoom object will be instantiated and called as such:\n# obj = ExamRoom(N)\n# param_1 = obj.seat()\n# obj.leave(p)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} ExamRoom;\n\n\nExamRoom* examRoomCreate(int N) {\n    \n}\n\nint examRoomSeat(ExamRoom* obj) {\n  \n}\n\nvoid examRoomLeave(ExamRoom* obj, int p) {\n  \n}\n\nvoid examRoomFree(ExamRoom* obj) {\n    \n}\n\n/**\n * Your ExamRoom struct will be instantiated and called as such:\n * ExamRoom* obj = examRoomCreate(N);\n * int param_1 = examRoomSeat(obj);\n \n * examRoomLeave(obj, p);\n \n * examRoomFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class ExamRoom {\n\n    public ExamRoom(int N) {\n\n    }\n    \n    public int Seat() {\n\n    }\n    \n    public void Leave(int p) {\n\n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * ExamRoom obj = new ExamRoom(N);\n * int param_1 = obj.Seat();\n * obj.Leave(p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n */\nvar ExamRoom = function(N) {\n\n};\n\n/**\n * @return {number}\n */\nExamRoom.prototype.seat = function() {\n\n};\n\n/** \n * @param {number} p\n * @return {void}\n */\nExamRoom.prototype.leave = function(p) {\n\n};\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * var obj = new ExamRoom(N)\n * var param_1 = obj.seat()\n * obj.leave(p)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class ExamRoom\n\n=begin\n    :type n: Integer\n=end\n    def initialize(n)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def seat()\n\n    end\n\n\n=begin\n    :type p: Integer\n    :rtype: Void\n=end\n    def leave(p)\n\n    end\n\n\nend\n\n# Your ExamRoom object will be instantiated and called as such:\n# obj = ExamRoom.new(n)\n# param_1 = obj.seat()\n# obj.leave(p)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass ExamRoom {\n\n    init(_ N: Int) {\n        \n    }\n    \n    func seat() -> Int {\n        \n    }\n    \n    func leave(_ p: Int) {\n        \n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * let obj = ExamRoom(N)\n * let ret_1: Int = obj.seat()\n * obj.leave(p)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type ExamRoom struct {\n\n}\n\n\nfunc Constructor(N int) ExamRoom {\n\n}\n\n\nfunc (this *ExamRoom) Seat() int {\n\n}\n\n\nfunc (this *ExamRoom) Leave(p int)  {\n\n}\n\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * obj := Constructor(N);\n * param_1 := obj.Seat();\n * obj.Leave(p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class ExamRoom(_N: Int) {\n\n    def seat(): Int = {\n\n    }\n\n    def leave(p: Int) {\n\n    }\n\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * var obj = new ExamRoom(N)\n * var param_1 = obj.seat()\n * obj.leave(p)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class ExamRoom(N: Int) {\n\n    fun seat(): Int {\n\n    }\n\n    fun leave(p: Int) {\n\n    }\n\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * var obj = ExamRoom(N)\n * var param_1 = obj.seat()\n * obj.leave(p)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct ExamRoom {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl ExamRoom {\n\n    fn new(N: i32) -> Self {\n        \n    }\n    \n    fn seat(&self) -> i32 {\n        \n    }\n    \n    fn leave(&self, p: i32) {\n        \n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * let obj = ExamRoom::new(N);\n * let ret_1: i32 = obj.seat();\n * obj.leave(p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class ExamRoom {\n    /**\n     * @param Integer $N\n     */\n    function __construct($N) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function seat() {\n        \n    }\n  \n    /**\n     * @param Integer $p\n     * @return NULL\n     */\n    function leave($p) {\n        \n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * $obj = ExamRoom($N);\n * $ret_1 = $obj->seat();\n * $obj->leave($p);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class ExamRoom {\n    constructor(N: number) {\n\n    }\n\n    seat(): number {\n\n    }\n\n    leave(p: number): void {\n\n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * var obj = new ExamRoom(N)\n * var param_1 = obj.seat()\n * obj.leave(p)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0886", "frontend_question_id": "0856", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/score-of-parentheses", "url_en": "https://leetcode.com/problems/score-of-parentheses", "relative_path_cn": "/leetcode/0800-0899/0856.Score%20of%20Parentheses/README.md", "relative_path_en": "/leetcode/0800-0899/0856.Score%20of%20Parentheses/README_EN.md", "title_cn": "\u62ec\u53f7\u7684\u5206\u6570", "title_en": "Score of Parentheses", "question_title_slug": "score-of-parentheses", "content_en": "<p>Given a balanced parentheses string <code>S</code>, compute the score of the string based on the following rule:</p>\r\n\r\n<ul>\r\n\t<li><code>()</code> has score 1</li>\r\n\t<li><code>AB</code> has score <code>A + B</code>, where A and B are balanced parentheses strings.</li>\r\n\t<li><code>(A)</code> has score <code>2 * A</code>, where A is a balanced parentheses string.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;(())&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;()()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">&quot;(()(()))&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">6</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> is a balanced parentheses string, containing only <code>(</code> and <code>)</code>.</li>\r\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u6309\u4e0b\u8ff0\u89c4\u5219\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u5206\u6570\uff1a</p>\n\n<ul>\n\t<li><code>()</code> \u5f97 1 \u5206\u3002</li>\n\t<li><code>AB</code> \u5f97&nbsp;<code>A + B</code>&nbsp;\u5206\uff0c\u5176\u4e2d A \u548c B \u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>(A)</code> \u5f97&nbsp;<code>2 * A</code>&nbsp;\u5206\uff0c\u5176\u4e2d A \u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;()&quot;\n<strong>\u8f93\u51fa\uff1a </strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;(())&quot;\n<strong>\u8f93\u51fa\uff1a </strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;()()&quot;\n<strong>\u8f93\u51fa\uff1a </strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;(()(()))&quot;\n<strong>\u8f93\u51fa\uff1a </strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u4e14\u53ea\u542b\u6709&nbsp;<code>(</code>&nbsp;\u548c&nbsp;<code>)</code>&nbsp;\u3002</li>\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\n</ol>\n", "tags_en": ["Stack", "String"], "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int scoreOfParentheses(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int scoreOfParentheses(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def scoreOfParentheses(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def scoreOfParentheses(self, S: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint scoreOfParentheses(char * S){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ScoreOfParentheses(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar scoreOfParentheses = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef score_of_parentheses(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func scoreOfParentheses(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func scoreOfParentheses(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def scoreOfParentheses(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun scoreOfParentheses(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn score_of_parentheses(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function scoreOfParentheses($S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function scoreOfParentheses(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0887", "frontend_question_id": "0857", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-cost-to-hire-k-workers", "url_en": "https://leetcode.com/problems/minimum-cost-to-hire-k-workers", "relative_path_cn": "/leetcode/0800-0899/0857.Minimum%20Cost%20to%20Hire%20K%20Workers/README.md", "relative_path_en": "/leetcode/0800-0899/0857.Minimum%20Cost%20to%20Hire%20K%20Workers/README_EN.md", "title_cn": "\u96c7\u4f63 K \u540d\u5de5\u4eba\u7684\u6700\u4f4e\u6210\u672c", "title_en": "Minimum Cost to Hire K Workers", "question_title_slug": "minimum-cost-to-hire-k-workers", "content_en": "<p>There are <code>N</code> workers.&nbsp; The <code>i</code>-th worker has a <code>quality[i]</code> and a minimum wage expectation <code>wage[i]</code>.</p>\r\n\r\n<p>Now we want to hire exactly <code>K</code>&nbsp;workers to form a <em>paid group</em>.&nbsp; When hiring a group of K workers, we must pay them according to the following rules:</p>\r\n\r\n<ol>\r\n\t<li>Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.</li>\r\n\t<li>Every worker in the paid group must be paid at least their minimum wage expectation.</li>\r\n</ol>\r\n\r\n<p>Return the least amount of money needed to form a paid group satisfying the above conditions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>quality = <span id=\"example-input-1-1\">[10,20,5]</span>, wage = <span id=\"example-input-1-2\">[70,50,30]</span>, K = <span id=\"example-input-1-3\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">105.00000\r\n<strong>Explanation</strong>: </span><span>We pay 70 to 0-th worker and 35 to 2-th worker.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>quality = <span id=\"example-input-2-1\">[3,1,10,10,1]</span>, wage = <span id=\"example-input-2-2\">[4,8,2,2,7]</span>, K = <span id=\"example-input-2-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">30.66667\r\n<strong>Explanation</strong>: </span><span>We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately.</span> \r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>, where <code>N = quality.length = wage.length</code></li>\r\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\r\n\t<li>Answers within <code>10^-5</code> of the correct answer will be considered correct.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u6709 <code>N</code>&nbsp;\u540d\u5de5\u4eba\u3002&nbsp;\u7b2c&nbsp;<code>i</code>&nbsp;\u540d\u5de5\u4eba\u7684\u5de5\u4f5c\u8d28\u91cf\u4e3a&nbsp;<code>quality[i]</code>&nbsp;\uff0c\u5176\u6700\u4f4e\u671f\u671b\u5de5\u8d44\u4e3a&nbsp;<code>wage[i]</code>&nbsp;\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u60f3\u96c7\u4f63&nbsp;<code>K</code>&nbsp;\u540d\u5de5\u4eba\u7ec4\u6210\u4e00\u4e2a<em>\u5de5\u8d44\u7ec4\u3002</em>\u5728\u96c7\u4f63&nbsp;\u4e00\u7ec4 K \u540d\u5de5\u4eba\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6309\u7167\u4e0b\u8ff0\u89c4\u5219\u5411\u4ed6\u4eec\u652f\u4ed8\u5de5\u8d44\uff1a</p>\n\n<ol>\n\t<li>\u5bf9\u5de5\u8d44\u7ec4\u4e2d\u7684\u6bcf\u540d\u5de5\u4eba\uff0c\u5e94\u5f53\u6309\u5176\u5de5\u4f5c\u8d28\u91cf\u4e0e\u540c\u7ec4\u5176\u4ed6\u5de5\u4eba\u7684\u5de5\u4f5c\u8d28\u91cf\u7684\u6bd4\u4f8b\u6765\u652f\u4ed8\u5de5\u8d44\u3002</li>\n\t<li>\u5de5\u8d44\u7ec4\u4e2d\u7684\u6bcf\u540d\u5de5\u4eba\u81f3\u5c11\u5e94\u5f53\u5f97\u5230\u4ed6\u4eec\u7684\u6700\u4f4e\u671f\u671b\u5de5\u8d44\u3002</li>\n</ol>\n\n<p>\u8fd4\u56de\u7ec4\u6210\u4e00\u4e2a\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u5de5\u8d44\u7ec4\u81f3\u5c11\u9700\u8981\u591a\u5c11\u94b1\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>quality = [10,20,5], wage = [70,50,30], K = 2\n<strong>\u8f93\u51fa\uff1a </strong>105.00000\n<strong>\u89e3\u91ca\uff1a</strong> \u6211\u4eec\u5411 0 \u53f7\u5de5\u4eba\u652f\u4ed8 70\uff0c\u5411 2 \u53f7\u5de5\u4eba\u652f\u4ed8 35\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\n<strong>\u8f93\u51fa\uff1a </strong>30.66667\n<strong>\u89e3\u91ca\uff1a </strong>\u6211\u4eec\u5411 0 \u53f7\u5de5\u4eba\u652f\u4ed8 4\uff0c\u5411 2 \u53f7\u548c 3 \u53f7\u5206\u522b\u652f\u4ed8 13.33333\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>\uff0c\u5176\u4e2d&nbsp;<code>N = quality.length = wage.length</code></li>\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\n\t<li>\u4e0e\u6b63\u786e\u7b54\u6848\u8bef\u5dee\u5728&nbsp;<code>10^-5</code>&nbsp;\u4e4b\u5185\u7684\u7b54\u6848\u5c06\u88ab\u89c6\u4e3a\u6b63\u786e\u7684\u3002</li>\n</ol>\n", "tags_en": ["Heap"], "tags_cn": ["\u5806"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mincostToHireWorkers(self, quality, wage, K):\n        \"\"\"\n        :type quality: List[int]\n        :type wage: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mincostToHireWorkers(self, quality: List[int], wage: List[int], K: int) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble mincostToHireWorkers(int* quality, int qualitySize, int* wage, int wageSize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double MincostToHireWorkers(int[] quality, int[] wage, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} quality\n * @param {number[]} wage\n * @param {number} K\n * @return {number}\n */\nvar mincostToHireWorkers = function(quality, wage, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} quality\n# @param {Integer[]} wage\n# @param {Integer} k\n# @return {Float}\ndef mincost_to_hire_workers(quality, wage, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mincostToHireWorkers(_ quality: [Int], _ wage: [Int], _ K: Int) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func mincostToHireWorkers(quality []int, wage []int, K int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mincostToHireWorkers(quality: Array[Int], wage: Array[Int], K: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mincostToHireWorkers(quality: IntArray, wage: IntArray, K: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mincost_to_hire_workers(quality: Vec<i32>, wage: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $quality\n     * @param Integer[] $wage\n     * @param Integer $K\n     * @return Float\n     */\n    function mincostToHireWorkers($quality, $wage, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mincostToHireWorkers(quality: number[], wage: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0888", "frontend_question_id": "0858", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/mirror-reflection", "url_en": "https://leetcode.com/problems/mirror-reflection", "relative_path_cn": "/leetcode/0800-0899/0858.Mirror%20Reflection/README.md", "relative_path_en": "/leetcode/0800-0899/0858.Mirror%20Reflection/README_EN.md", "title_cn": "\u955c\u9762\u53cd\u5c04", "title_en": "Mirror Reflection", "question_title_slug": "mirror-reflection", "content_en": "<p>There is&nbsp;a special square room with mirrors on each of the four&nbsp;walls.&nbsp; Except for the southwest&nbsp;corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p>\n\n<p>The square room has walls of length <code>p</code>, and a laser ray from the southwest corner&nbsp;first meets the east wall at a distance <code>q</code>&nbsp;from the <code>0</code>th receptor.</p>\n\n<p>Return the number of the receptor that the ray meets first.&nbsp; (It is guaranteed that the ray will meet&nbsp;a receptor eventually.)</p>\n\n<p>&nbsp;</p>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>p = <span id=\"example-input-1-1\">2</span>, q = <span id=\"example-input-1-2\">1</span>\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\n<strong>Explanation: </strong>The ray meets receptor 2 the first time it gets reflected back to the left wall.\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png\" style=\"width: 218px; height: 217px;\" />\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\n\t<li><code>0 &lt;= q &lt;= p</code></li>\n</ol>\n</div>\n", "content_cn": "<p>\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6b63\u65b9\u5f62\u623f\u95f4\uff0c\u6bcf\u9762\u5899\u4e0a\u90fd\u6709\u4e00\u9762\u955c\u5b50\u3002\u9664\u897f\u5357\u89d2\u4ee5\u5916\uff0c\u6bcf\u4e2a\u89d2\u843d\u90fd\u653e\u6709\u4e00\u4e2a\u63a5\u53d7\u5668\uff0c\u7f16\u53f7\u4e3a&nbsp;<code>0</code>\uff0c&nbsp;<code>1</code>\uff0c\u4ee5\u53ca&nbsp;<code>2</code>\u3002</p>\n\n<p>\u6b63\u65b9\u5f62\u623f\u95f4\u7684\u5899\u58c1\u957f\u5ea6\u4e3a&nbsp;<code>p</code>\uff0c\u4e00\u675f\u6fc0\u5149\u4ece\u897f\u5357\u89d2\u5c04\u51fa\uff0c\u9996\u5148\u4f1a\u4e0e\u4e1c\u5899\u76f8\u9047\uff0c\u5165\u5c04\u70b9\u5230\u63a5\u6536\u5668 <code>0</code> \u7684\u8ddd\u79bb\u4e3a <code>q</code> \u3002</p>\n\n<p>\u8fd4\u56de\u5149\u7ebf\u6700\u5148\u9047\u5230\u7684\u63a5\u6536\u5668\u7684\u7f16\u53f7\uff08\u4fdd\u8bc1\u5149\u7ebf\u6700\u7ec8\u4f1a\u9047\u5230\u4e00\u4e2a\u63a5\u6536\u5668\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>p = 2, q = 1\n<strong>\u8f93\u51fa\uff1a </strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\u8fd9\u6761\u5149\u7ebf\u5728\u7b2c\u4e00\u6b21\u88ab\u53cd\u5c04\u56de\u5de6\u8fb9\u7684\u5899\u65f6\u5c31\u9047\u5230\u4e86\u63a5\u6536\u5668 2 \u3002\n<img alt=\"\" src=\"https://ibb.co/mYSFJT\"><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/06/22/reflection.png\" style=\"height: 217px; width: 218px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\n\t<li><code>0 &lt;= q &lt;= p</code></li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mirrorReflection(int p, int q) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mirrorReflection(int p, int q) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mirrorReflection(self, p: int, q: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint mirrorReflection(int p, int q){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MirrorReflection(int p, int q) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar mirrorReflection = function(p, q) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} p\n# @param {Integer} q\n# @return {Integer}\ndef mirror_reflection(p, q)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mirrorReflection(_ p: Int, _ q: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func mirrorReflection(p int, q int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mirrorReflection(p: Int, q: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mirrorReflection(p: Int, q: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mirror_reflection(p: i32, q: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $p\n     * @param Integer $q\n     * @return Integer\n     */\n    function mirrorReflection($p, $q) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mirrorReflection(p: number, q: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0889", "frontend_question_id": "0859", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/buddy-strings", "url_en": "https://leetcode.com/problems/buddy-strings", "relative_path_cn": "/leetcode/0800-0899/0859.Buddy%20Strings/README.md", "relative_path_en": "/leetcode/0800-0899/0859.Buddy%20Strings/README_EN.md", "title_cn": "\u4eb2\u5bc6\u5b57\u7b26\u4e32", "title_en": "Buddy Strings", "question_title_slug": "buddy-strings", "content_en": "<p>Given two strings <code>A</code> and <code>B</code> of lowercase letters, return <code>true</code><em> if you can swap two letters in </em><code>A</code><em> so the result is equal to </em><code>B</code><em>, otherwise, return </em><code>false</code><em>.</em></p>\n\n<p>Swapping letters is defined as taking two indices <code>i</code> and <code>j</code> (0-indexed) such that <code>i != j</code> and swapping the characters at <code>A[i]</code> and <code>A[j]</code>. For example, swapping at indices <code>0</code> and <code>2</code> in <code>&quot;abcd&quot;</code> results in <code>&quot;cbad&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>Output:</strong> true\n<strong>Explanation</strong><strong>:</strong> You can swap A[0] = &#39;a&#39; and A[1] = &#39;b&#39; to get &quot;ba&quot;, which is equal to B.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = &quot;ab&quot;, B = &quot;ab&quot;\n<strong>Output:</strong> false\n<strong>Explanation</strong><strong>:</strong> The only letters you can swap are A[0] = &#39;a&#39; and A[1] = &#39;b&#39;, which results in &quot;ba&quot; != B.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = &quot;aa&quot;, B = &quot;aa&quot;\n<strong>Output:</strong> true\n<strong>Explanation</strong><strong>:</strong> You can swap A[0] = &#39;a&#39; and A[1] = &#39;a&#39; to get &quot;aa&quot;, which is equal to B.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = &quot;aaaaaaabc&quot;, B = &quot;aaaaaaacb&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = &quot;&quot;, B = &quot;aa&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 20000</code></li>\n\t<li><code>A</code> and <code>B</code> consist of lowercase letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32\u00a0<code>A</code>\u00a0\u548c\u00a0<code>B</code>\u00a0\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362 <code>A</code> \u4e2d\u7684\u4e24\u4e2a\u5b57\u6bcd\u5f97\u5230\u4e0e <code>B</code> \u76f8\u7b49\u7684\u7ed3\u679c\uff0c\u5c31\u8fd4\u56de\u00a0<code>true</code>\u00a0\uff1b\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u4ea4\u6362\u5b57\u6bcd\u7684\u5b9a\u4e49\u662f\u53d6\u4e24\u4e2a\u4e0b\u6807 <code>i</code> \u548c <code>j</code> \uff08\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\uff09\uff0c\u53ea\u8981 <code>i!=j</code> \u5c31\u4ea4\u6362 <code>A[i]</code> \u548c <code>A[j]</code> \u5904\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5728 <code>\"abcd\"</code> \u4e2d\u4ea4\u6362\u4e0b\u6807 <code>0</code> \u548c\u4e0b\u6807 <code>2</code> \u7684\u5143\u7d20\u53ef\u4ee5\u751f\u6210 <code>\"cbad\"</code> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a </strong>A = \"ab\", B = \"ba\"\n<strong>\u8f93\u51fa\uff1a </strong>true<strong>\n\u89e3\u91ca\uff1a </strong>\u4f60\u53ef\u4ee5\u4ea4\u6362 A[0] = 'a' \u548c A[1] = 'b' \u751f\u6210 \"ba\"\uff0c\u6b64\u65f6 A \u548c B \u76f8\u7b49\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a </strong>A = \"ab\", B = \"ab\"\n<strong>\u8f93\u51fa\uff1a </strong>false\n<strong>\u89e3\u91ca\uff1a </strong>\u4f60\u53ea\u80fd\u4ea4\u6362 A[0] = 'a' \u548c A[1] = 'b' \u751f\u6210 \"ba\"\uff0c\u6b64\u65f6 A \u548c B \u4e0d\u76f8\u7b49\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a </strong>A = \"aa\", B = \"aa\"\n<strong>\u8f93\u51fa\uff1a </strong>true\n<strong>\u89e3\u91ca\uff1a </strong>\u4f60\u53ef\u4ee5\u4ea4\u6362 A[0] = 'a' \u548c A[1] = 'a' \u751f\u6210 \"aa\"\uff0c\u6b64\u65f6 A \u548c B \u76f8\u7b49\u3002</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a </strong>A = \"aaaaaaabc\", B = \"aaaaaaacb\"\n<strong>\u8f93\u51fa\uff1a </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a </strong>A = \"\", B = \"aa\"\n<strong>\u8f93\u51fa\uff1a </strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 <= A.length <= 20000</code></li>\n\t<li><code>0 <= B.length <= 20000</code></li>\n\t<li><code>A</code>\u00a0\u548c\u00a0<code>B</code>\u00a0\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool buddyStrings(string A, string B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean buddyStrings(String A, String B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def buddyStrings(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool buddyStrings(char * A, char * B){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool BuddyStrings(string A, string B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} A\n * @param {string} B\n * @return {boolean}\n */\nvar buddyStrings = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Boolean}\ndef buddy_strings(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func buddyStrings(_ A: String, _ B: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func buddyStrings(A string, B string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def buddyStrings(A: String, B: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun buddyStrings(A: String, B: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn buddy_strings(a: String, b: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $A\n     * @param String $B\n     * @return Boolean\n     */\n    function buddyStrings($A, $B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function buddyStrings(A: string, B: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0890", "frontend_question_id": "0860", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/lemonade-change", "url_en": "https://leetcode.com/problems/lemonade-change", "relative_path_cn": "/leetcode/0800-0899/0860.Lemonade%20Change/README.md", "relative_path_en": "/leetcode/0800-0899/0860.Lemonade%20Change/README_EN.md", "title_cn": "\u67e0\u6aac\u6c34\u627e\u96f6", "title_en": "Lemonade Change", "question_title_slug": "lemonade-change", "content_en": "<p>At a lemonade stand, each lemonade costs <code>$5</code>.&nbsp;</p>\r\n\r\n<p>Customers are standing in a queue to buy from you, and order one at a time (in the order specified by <code>bills</code>).</p>\r\n\r\n<p>Each customer will only buy one lemonade and&nbsp;pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill.&nbsp; You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.</p>\r\n\r\n<p>Note that you don&#39;t have any change&nbsp;in hand at first.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if you can provide every customer with correct change.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,5,5,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>\r\nFrom the first 3 customers, we collect three $5 bills in order.\r\nFrom the fourth customer, we collect a $10 bill and give back a $5.\r\nFrom the fifth customer, we give a $10 bill and a $5 bill.\r\nSince all customers got correct change, we output true.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,5,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[10,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[5,5,10,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n<strong>Explanation: </strong>\r\nFrom the first two customers in order, we collect two $5 bills.\r\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\r\nFor the last customer, we can't give change of $15 back because we only have two $10 bills.\r\nSince not every customer received correct change, the answer is false.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\r\n\t<li><code>bills[i]</code>&nbsp;will be either&nbsp;<code>5</code>, <code>10</code>, or <code>20</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5728\u67e0\u6aac\u6c34\u644a\u4e0a\uff0c\u6bcf\u4e00\u676f\u67e0\u6aac\u6c34\u7684\u552e\u4ef7\u4e3a&nbsp;<code>5</code>&nbsp;\u7f8e\u5143\u3002</p>\n\n<p>\u987e\u5ba2\u6392\u961f\u8d2d\u4e70\u4f60\u7684\u4ea7\u54c1\uff0c\uff08\u6309\u8d26\u5355 <code>bills</code> \u652f\u4ed8\u7684\u987a\u5e8f\uff09\u4e00\u6b21\u8d2d\u4e70\u4e00\u676f\u3002</p>\n\n<p>\u6bcf\u4f4d\u987e\u5ba2\u53ea\u4e70\u4e00\u676f\u67e0\u6aac\u6c34\uff0c\u7136\u540e\u5411\u4f60\u4ed8 <code>5</code> \u7f8e\u5143\u3001<code>10</code> \u7f8e\u5143\u6216 <code>20</code> \u7f8e\u5143\u3002\u4f60\u5fc5\u987b\u7ed9\u6bcf\u4e2a\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u51c0\u4ea4\u6613\u662f\u6bcf\u4f4d\u987e\u5ba2\u5411\u4f60\u652f\u4ed8 <code>5</code> \u7f8e\u5143\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u4f60\u624b\u5934\u6ca1\u6709\u4efb\u4f55\u96f6\u94b1\u3002</p>\n\n<p>\u5982\u679c\u4f60\u80fd\u7ed9\u6bcf\u4f4d\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u8fd4\u56de&nbsp;<code>true</code>&nbsp;\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>&nbsp;\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,5,10,20]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>\u524d 3 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 3 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7b2c 4 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u5e76\u8fd4\u8fd8 5 \u7f8e\u5143\u3002\n\u7b2c 5 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u627e\u8fd8\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u548c\u4e00\u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7531\u4e8e\u6240\u6709\u5ba2\u6237\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u6211\u4eec\u8f93\u51fa true\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,10]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[10,10]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,10,10,20]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\n\u524d 2 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 2 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684 2 \u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u7136\u540e\u8fd4\u8fd8 5 \u7f8e\u5143\u3002\n\u5bf9\u4e8e\u6700\u540e\u4e00\u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u65e0\u6cd5\u9000\u56de 15 \u7f8e\u5143\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u53ea\u6709\u4e24\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7531\u4e8e\u4e0d\u662f\u6bcf\u4f4d\u987e\u5ba2\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u7b54\u6848\u662f false\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\n\t<li><code>bills[i]</code>&nbsp;\u4e0d\u662f&nbsp;<code>5</code>&nbsp;\u5c31\u662f&nbsp;<code>10</code>&nbsp;\u6216\u662f&nbsp;<code>20</code>&nbsp;</li>\n</ul>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean lemonadeChange(int[] bills) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lemonadeChange(self, bills):\n        \"\"\"\n        :type bills: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool lemonadeChange(int* bills, int billsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool LemonadeChange(int[] bills) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} bills\n * @return {boolean}\n */\nvar lemonadeChange = function(bills) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} bills\n# @return {Boolean}\ndef lemonade_change(bills)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lemonadeChange(_ bills: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lemonadeChange(bills []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lemonadeChange(bills: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lemonadeChange(bills: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn lemonade_change(bills: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $bills\n     * @return Boolean\n     */\n    function lemonadeChange($bills) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lemonadeChange(bills: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0891", "frontend_question_id": "0861", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/score-after-flipping-matrix", "url_en": "https://leetcode.com/problems/score-after-flipping-matrix", "relative_path_cn": "/leetcode/0800-0899/0861.Score%20After%20Flipping%20Matrix/README.md", "relative_path_en": "/leetcode/0800-0899/0861.Score%20After%20Flipping%20Matrix/README_EN.md", "title_cn": "\u7ffb\u8f6c\u77e9\u9635\u540e\u7684\u5f97\u5206", "title_en": "Score After Flipping Matrix", "question_title_slug": "score-after-flipping-matrix", "content_en": "<p>We have a two dimensional matrix&nbsp;<code>A</code> where each value is <code>0</code> or <code>1</code>.</p>\r\n\r\n<p>A move consists of choosing any row or column, and toggling each value in that row or column: changing all <code>0</code>s to <code>1</code>s, and all <code>1</code>s to <code>0</code>s.</p>\r\n\r\n<p>After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p>\r\n\r\n<p>Return the highest possible&nbsp;score.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[0,0,1,1],[1,0,1,0],[1,1,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">39</span>\r\n<strong>Explanation:\r\n</strong>Toggled to <span id=\"example-input-1-1\">[[1,1,1,1],[1,0,0,1],[1,1,1,1]].\r\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\r\n\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\r\n\t<li><code>A[i][j]</code>&nbsp;is <code>0</code> or <code>1</code>.</li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u6709\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635&nbsp;<code>A</code> \u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002</p>\n\n<p>\u79fb\u52a8\u662f\u6307\u9009\u62e9\u4efb\u4e00\u884c\u6216\u5217\uff0c\u5e76\u8f6c\u6362\u8be5\u884c\u6216\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\uff1a\u5c06\u6240\u6709 <code>0</code> \u90fd\u66f4\u6539\u4e3a <code>1</code>\uff0c\u5c06\u6240\u6709 <code>1</code> \u90fd\u66f4\u6539\u4e3a <code>0</code>\u3002</p>\n\n<p>\u5728\u505a\u51fa\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\u540e\uff0c\u5c06\u8be5\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u6765\u89e3\u91ca\uff0c\u77e9\u9635\u7684\u5f97\u5206\u5c31\u662f\u8fd9\u4e9b\u6570\u5b57\u7684\u603b\u548c\u3002</p>\n\n<p>\u8fd4\u56de\u5c3d\u53ef\u80fd\u9ad8\u7684\u5206\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>39\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8f6c\u6362\u4e3a [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\n\t<li><code>A[i][j]</code>&nbsp;\u662f&nbsp;<code>0</code> \u6216&nbsp;<code>1</code></li>\n</ol>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int matrixScore(vector<vector<int>>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int matrixScore(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def matrixScore(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def matrixScore(self, A: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint matrixScore(int** A, int ASize, int* AColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MatrixScore(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar matrixScore = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @return {Integer}\ndef matrix_score(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func matrixScore(_ A: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func matrixScore(A [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def matrixScore(A: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun matrixScore(A: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn matrix_score(a: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function matrixScore($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function matrixScore(A: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0892", "frontend_question_id": "0862", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-subarray-with-sum-at-least-k", "url_en": "https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k", "relative_path_cn": "/leetcode/0800-0899/0862.Shortest%20Subarray%20with%20Sum%20at%20Least%20K/README.md", "relative_path_en": "/leetcode/0800-0899/0862.Shortest%20Subarray%20with%20Sum%20at%20Least%20K/README_EN.md", "title_cn": "\u548c\u81f3\u5c11\u4e3a K \u7684\u6700\u77ed\u5b50\u6570\u7ec4", "title_en": "Shortest Subarray with Sum at Least K", "question_title_slug": "shortest-subarray-with-sum-at-least-k", "content_en": "<p>Return the <strong>length</strong> of the shortest, non-empty, contiguous&nbsp;subarray of <code>A</code> with sum at least <code>K</code>.</p>\r\n\r\n<p>If there is no non-empty subarray with sum at least <code>K</code>, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2]</span>, K = <span id=\"example-input-2-2\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2,-1,2]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\r\n\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u8fd4\u56de <code>A</code> \u7684\u6700\u77ed\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684<strong>\u957f\u5ea6</strong>\uff0c\u8be5\u5b50\u6570\u7ec4\u7684\u548c\u81f3\u5c11\u4e3a <code>K</code> \u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u548c\u81f3\u5c11\u4e3a&nbsp;<code>K</code>&nbsp;\u7684\u975e\u7a7a\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de&nbsp;<code>-1</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2], K = 4\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,-1,2], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\n\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\n</ol>\n", "tags_en": ["Queue", "Binary Search"], "tags_cn": ["\u961f\u5217", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestSubarray(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shortestSubarray(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestSubarray(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestSubarray(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint shortestSubarray(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShortestSubarray(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar shortestSubarray = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef shortest_subarray(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestSubarray(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestSubarray(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestSubarray(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestSubarray(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_subarray(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function shortestSubarray($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestSubarray(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0893", "frontend_question_id": "0863", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree", "url_en": "https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree", "relative_path_cn": "/leetcode/0800-0899/0863.All%20Nodes%20Distance%20K%20in%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0800-0899/0863.All%20Nodes%20Distance%20K%20in%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3a K \u7684\u7ed3\u70b9", "title_en": "All Nodes Distance K in Binary Tree", "question_title_slug": "all-nodes-distance-k-in-binary-tree", "content_en": "<p>We are given a binary tree (with root node&nbsp;<code>root</code>), a <code>target</code> node, and an integer value <code>K</code>.</p>\r\n\r\n<p>Return a list of the values of all&nbsp;nodes that have a distance <code>K</code> from the <code>target</code> node.&nbsp; The answer can be returned in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[3,5,1,6,2,0,8,null,null,7,4]</span>, target = <span id=\"example-input-1-2\">5</span>, K = <span id=\"example-input-1-3\">2</span>\r\n\r\n<strong>Output: </strong><span id=\"example-output-1\">[7,4,1]</span>\r\n\r\n<strong>Explanation: </strong>\r\nThe nodes that are a distance 2 from the target node (with value 5)\r\nhave values 7, 4, and 1.\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"width: 280px; height: 240px;\" />\r\n\r\nNote that the inputs &quot;root&quot; and &quot;target&quot; are actually TreeNodes.\r\nThe descriptions of the inputs above are just serializations of these objects.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The given tree is non-empty.</li>\r\n\t<li>Each node in the tree has unique values&nbsp;<code>0 &lt;= node.val &lt;= 500</code>.</li>\r\n\t<li>The <code>target</code>&nbsp;node is a node in the tree.</li>\r\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff08\u5177\u6709\u6839\u7ed3\u70b9&nbsp;<code>root</code>\uff09\uff0c&nbsp;\u4e00\u4e2a\u76ee\u6807\u7ed3\u70b9&nbsp;<code>target</code>&nbsp;\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u503c <code>K</code> \u3002</p>\n\n<p>\u8fd4\u56de\u5230\u76ee\u6807\u7ed3\u70b9 <code>target</code> \u8ddd\u79bb\u4e3a <code>K</code> \u7684\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u5217\u8868\u3002 \u7b54\u6848\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n<strong>\u8f93\u51fa\uff1a</strong>[7,4,1]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6c42\u7ed3\u70b9\u4e3a\u4e0e\u76ee\u6807\u7ed3\u70b9\uff08\u503c\u4e3a 5\uff09\u8ddd\u79bb\u4e3a 2 \u7684\u7ed3\u70b9\uff0c\n\u503c\u5206\u522b\u4e3a 7\uff0c4\uff0c\u4ee5\u53ca 1\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"height: 240px; width: 280px;\">\n\n\u6ce8\u610f\uff0c\u8f93\u5165\u7684 &quot;root&quot; \u548c &quot;target&quot; \u5b9e\u9645\u4e0a\u662f\u6811\u4e0a\u7684\u7ed3\u70b9\u3002\n\u4e0a\u9762\u7684\u8f93\u5165\u4ec5\u4ec5\u662f\u5bf9\u8fd9\u4e9b\u5bf9\u8c61\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u63cf\u8ff0\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6811\u662f\u975e\u7a7a\u7684\u3002</li>\n\t<li>\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5177\u6709\u552f\u4e00\u7684\u503c&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;\u3002</li>\n\t<li>\u76ee\u6807\u7ed3\u70b9&nbsp;<code>target</code>&nbsp;\u662f\u6811\u4e0a\u7684\u7ed3\u70b9\u3002</li>\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def distanceK(self, root, target, K):\n        \"\"\"\n        :type root: TreeNode\n        :type target: TreeNode\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* distanceK(struct TreeNode* root, struct TreeNode* target, int K, int* returnSize) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<int> DistanceK(TreeNode root, TreeNode target, int K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} target\n * @param {number} K\n * @return {number[]}\n */\nvar distanceK = function(root, target, K) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {TreeNode} target\n# @param {Integer} k\n# @return {Integer[]}\ndef distance_k(root, target, k)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Solution {\n    func distanceK(_ root: TreeNode?, _ target: TreeNode?, _ K: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc distanceK(root *TreeNode, target *TreeNode, K int) []int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def distanceK(root: TreeNode, target: TreeNode, K: Int): List[Int] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun distanceK(root: TreeNode?, target: TreeNode?, K: Int): List<Int> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn distance_k(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, K: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param TreeNode $root\n     * @param TreeNode $target\n     * @param Integer $K\n     * @return Integer[]\n     */\n    function distanceK($root, $target, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction distanceK(root: TreeNode | null, target: TreeNode | null, K: number): number[] {\n\t\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0895", "frontend_question_id": "0864", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-path-to-get-all-keys", "url_en": "https://leetcode.com/problems/shortest-path-to-get-all-keys", "relative_path_cn": "/leetcode/0800-0899/0864.Shortest%20Path%20to%20Get%20All%20Keys/README.md", "relative_path_en": "/leetcode/0800-0899/0864.Shortest%20Path%20to%20Get%20All%20Keys/README_EN.md", "title_cn": "\u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84", "title_en": "Shortest Path to Get All Keys", "question_title_slug": "shortest-path-to-get-all-keys", "content_en": "<p>We are given a 2-dimensional&nbsp;<code>grid</code>.&nbsp;<code>&quot;.&quot;</code> is an empty cell, <code>&quot;#&quot;</code> is&nbsp;a wall, <code>&quot;@&quot;</code> is the starting point, (<code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, ...) are keys, and (<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...) are locks.</p>\r\n\r\n<p>We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.&nbsp; We cannot walk outside the grid, or walk into a wall.&nbsp; If we walk over a key, we pick it up.&nbsp; We can&#39;t walk over a lock unless we have the corresponding key.</p>\r\n\r\n<p>For some <font face=\"monospace\">1 &lt;= K &lt;= 6</font>, there is exactly one lowercase and one uppercase letter of the first <code>K</code> letters of the English alphabet in the grid.&nbsp; This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were&nbsp;chosen in the same order as the English alphabet.</p>\r\n\r\n<p>Return the lowest number of moves to acquire all keys.&nbsp; If&nbsp;it&#39;s impossible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">8</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\r\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\r\n\t<li><code>grid[i][j]</code> contains only<code> &#39;.&#39;</code>, <code>&#39;#&#39;</code>, <code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code> and <code>&#39;A&#39;-&#39;F&#39;</code></li>\r\n\t<li>The number of keys is in <code>[1, 6]</code>.&nbsp; Each key has a different letter and opens exactly one lock.</li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c&nbsp;<code>grid</code>\u3002&nbsp;<code>&quot;.&quot;</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u7a7a\u623f\u95f4\uff0c&nbsp;<code>&quot;#&quot;</code>&nbsp;\u4ee3\u8868\u4e00\u5835\u5899\uff0c&nbsp;<code>&quot;@&quot;</code>&nbsp;\u662f\u8d77\u70b9\uff0c\uff08<code>&quot;a&quot;</code>,&nbsp;<code>&quot;b&quot;</code>, ...\uff09\u4ee3\u8868\u94a5\u5319\uff0c\uff08<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...\uff09\u4ee3\u8868\u9501\u3002</p>\n\n<p>\u6211\u4eec\u4ece\u8d77\u70b9\u5f00\u59cb\u51fa\u53d1\uff0c\u4e00\u6b21\u79fb\u52a8\u662f\u6307\u5411\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4e4b\u4e00\u884c\u8d70\u4e00\u4e2a\u5355\u4f4d\u7a7a\u95f4\u3002\u6211\u4eec\u4e0d\u80fd\u5728\u7f51\u683c\u5916\u9762\u884c\u8d70\uff0c\u4e5f\u65e0\u6cd5\u7a7f\u8fc7\u4e00\u5835\u5899\u3002\u5982\u679c\u9014\u7ecf\u4e00\u4e2a\u94a5\u5319\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u6361\u8d77\u6765\u3002\u9664\u975e\u6211\u4eec\u624b\u91cc\u6709\u5bf9\u5e94\u7684\u94a5\u5319\uff0c\u5426\u5219\u65e0\u6cd5\u901a\u8fc7\u9501\u3002</p>\n\n<p>\u5047\u8bbe K \u4e3a\u94a5\u5319/\u9501\u7684\u4e2a\u6570\uff0c\u4e14\u6ee1\u8db3&nbsp;<code>1 &lt;= K &lt;= 6</code>\uff0c\u5b57\u6bcd\u8868\u4e2d\u7684\u524d K \u4e2a\u5b57\u6bcd\u5728\u7f51\u683c\u4e2d\u90fd\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u4e00\u4e2a\u5c0f\u5199\u548c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u3002\u6362\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u9501\u6709\u552f\u4e00\u5bf9\u5e94\u7684\u94a5\u5319\uff0c\u6bcf\u4e2a\u94a5\u5319\u4e5f\u6709\u552f\u4e00\u5bf9\u5e94\u7684\u9501\u3002\u53e6\u5916\uff0c\u4ee3\u8868\u94a5\u5319\u548c\u9501\u7684\u5b57\u6bcd\u4e92\u4e3a\u5927\u5c0f\u5199\u5e76\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u8fd4\u56de\u83b7\u53d6\u6240\u6709\u94a5\u5319\u6240\u9700\u8981\u7684\u79fb\u52a8\u7684\u6700\u5c11\u6b21\u6570\u3002\u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u6240\u6709\u94a5\u5319\uff0c\u8fd4\u56de&nbsp;<code>-1</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;\u53ea\u542b\u6709&nbsp;<code>&#39;.&#39;</code>,&nbsp;<code>&#39;#&#39;</code>,&nbsp;<code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code>&nbsp;\u4ee5\u53ca&nbsp;<code>&#39;A&#39;-&#39;F&#39;</code></li>\n\t<li>\u94a5\u5319\u7684\u6570\u76ee\u8303\u56f4\u662f&nbsp;<code>[1, 6]</code>\uff0c\u6bcf\u4e2a\u94a5\u5319\u90fd\u5bf9\u5e94\u4e00\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u6b63\u597d\u6253\u5f00\u4e00\u4e2a\u5bf9\u5e94\u7684\u9501\u3002</li>\n</ol>\n", "tags_en": ["Heap", "Breadth-first Search"], "tags_cn": ["\u5806", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestPathAllKeys(vector<string>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shortestPathAllKeys(String[] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint shortestPathAllKeys(char ** grid, int gridSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShortestPathAllKeys(string[] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} grid\n * @return {number}\n */\nvar shortestPathAllKeys = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} grid\n# @return {Integer}\ndef shortest_path_all_keys(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestPathAllKeys(_ grid: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestPathAllKeys(grid []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestPathAllKeys(grid: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestPathAllKeys(grid: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_path_all_keys(grid: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $grid\n     * @return Integer\n     */\n    function shortestPathAllKeys($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestPathAllKeys(grid: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0896", "frontend_question_id": "0865", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes", "url_en": "https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes", "relative_path_cn": "/leetcode/0800-0899/0865.Smallest%20Subtree%20with%20all%20the%20Deepest%20Nodes/README.md", "relative_path_en": "/leetcode/0800-0899/0865.Smallest%20Subtree%20with%20all%20the%20Deepest%20Nodes/README_EN.md", "title_cn": "\u5177\u6709\u6240\u6709\u6700\u6df1\u8282\u70b9\u7684\u6700\u5c0f\u5b50\u6811", "title_en": "Smallest Subtree with all the Deepest Nodes", "question_title_slug": "smallest-subtree-with-all-the-deepest-nodes", "content_en": "<p>Given the <code>root</code> of a binary tree, the depth of each node is <strong>the shortest distance to the root</strong>.</p>\r\n\r\n<p>Return <em>the smallest subtree</em> such that it contains <strong>all the deepest nodes</strong> in the original tree.</p>\r\n\r\n<p>A node is called <strong>the&nbsp;deepest</strong> if it has the largest depth possible among&nbsp;any node in the entire tree.</p>\r\n\r\n<p>The <strong>subtree</strong> of a node is tree consisting of that node, plus the set of all descendants of that node.</p>\r\n\r\n<p><strong>Note:</strong> This question is the same as 1123: <a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\" target=\"_blank\">https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"width: 600px; height: 510px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4]\r\n<strong>Output:</strong> [2,7,4]\r\n<strong>Explanation:</strong> We return the node with value 2, colored in yellow in the diagram.\r\nThe nodes coloured in blue are the deepest nodes of the tree.\r\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [1]\r\n<strong>Output:</strong> [1]\r\n<strong>Explanation:</strong> The root is the deepest node in the tree.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [0,1,3,null,2]\r\n<strong>Output:</strong> [2]\r\n<strong>Explanation:</strong> The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the tree will be in the range <code>[1, 500]</code>.</li>\r\n\t<li><code>0 &lt;= Node.val &lt;= 500</code></li>\r\n\t<li>The values of the nodes in the tree&nbsp;are <strong>unique</strong>.</li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6839\u4e3a\u00a0<code>root</code>\u00a0\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u662f <strong>\u8be5\u8282\u70b9\u5230\u6839\u7684\u6700\u77ed\u8ddd\u79bb</strong> \u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5728 <strong>\u6574\u4e2a\u6811 </strong>\u7684\u4efb\u610f\u8282\u70b9\u4e4b\u95f4\u5177\u6709\u6700\u5927\u7684\u6df1\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u662f <strong>\u6700\u6df1\u7684</strong> \u3002</p>\n\n<p>\u4e00\u4e2a\u8282\u70b9\u7684 <strong>\u5b50\u6811</strong> \u662f\u8be5\u8282\u70b9\u52a0\u4e0a\u5b83\u7684\u6240\u6709\u540e\u4ee3\u7684\u96c6\u5408\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u6ee1\u8db3 <strong>\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5305\u542b\u6240\u6709\u6700\u6df1\u7684\u8282\u70b9</strong> \u8fd9\u4e00\u6761\u4ef6\u7684\u5177\u6709\u6700\u5927\u6df1\u5ea6\u7684\u8282\u70b9\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u672c\u9898\u4e0e\u529b\u6263 1123 \u91cd\u590d\uff1a<a href=\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/\" target=\"_blank\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" height=\"475\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" width=\"560\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [3,5,1,6,2,0,8,null,null,7,4]\n<strong>\u8f93\u51fa\uff1a</strong>[2,7,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u8fd4\u56de\u503c\u4e3a 2 \u7684\u8282\u70b9\uff0c\u5728\u56fe\u4e2d\u7528\u9ec4\u8272\u6807\u8bb0\u3002\n\u5728\u56fe\u4e2d\u7528\u84dd\u8272\u6807\u8bb0\u7684\u662f\u6811\u7684\u6700\u6df1\u7684\u8282\u70b9\u3002\n\u6ce8\u610f\uff0c\u8282\u70b9 5\u30013 \u548c 2 \u5305\u542b\u6811\u4e2d\u6700\u6df1\u7684\u8282\u70b9\uff0c\u4f46\u8282\u70b9 2 \u7684\u5b50\u6811\u6700\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u8fd4\u56de\u5b83\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n<strong>\u89e3\u91ca\uff1a</strong>\u6839\u8282\u70b9\u662f\u6811\u4e2d\u6700\u6df1\u7684\u8282\u70b9\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [0,1,3,null,2]\n<strong>\u8f93\u51fa\uff1a</strong>[2]\n<strong>\u89e3\u91ca\uff1a</strong>\u6811\u4e2d\u6700\u6df1\u7684\u8282\u70b9\u4e3a 2 \uff0c\u6709\u6548\u5b50\u6811\u4e3a\u8282\u70b9 2\u30011 \u548c 0 \u7684\u5b50\u6811\uff0c\u4f46\u8282\u70b9 2 \u7684\u5b50\u6811\u6700\u5c0f\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u7684\u6570\u91cf\u4ecb\u4e8e\u00a01 \u548c\u00a0500 \u4e4b\u95f4\u3002</li>\n\t<li><code>0 <= Node.val <= 500</code></li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002</li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search", "Breadth-first Search", "Recursion"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def subtreeWithAllDeepest(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* subtreeWithAllDeepest(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode SubtreeWithAllDeepest(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar subtreeWithAllDeepest = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {TreeNode}\ndef subtree_with_all_deepest(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func subtreeWithAllDeepest(_ root: TreeNode?) -> TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc subtreeWithAllDeepest(root *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def subtreeWithAllDeepest(root: TreeNode): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun subtreeWithAllDeepest(root: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn subtree_with_all_deepest(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function subtreeWithAllDeepest($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction subtreeWithAllDeepest(root: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0897", "frontend_question_id": "0866", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/prime-palindrome", "url_en": "https://leetcode.com/problems/prime-palindrome", "relative_path_cn": "/leetcode/0800-0899/0866.Prime%20Palindrome/README.md", "relative_path_en": "/leetcode/0800-0899/0866.Prime%20Palindrome/README_EN.md", "title_cn": "\u56de\u6587\u7d20\u6570", "title_en": "Prime Palindrome", "question_title_slug": "prime-palindrome", "content_en": "<p>Find the smallest prime palindrome greater than or equal to <code>N</code>.</p>\r\n\r\n<p>Recall that a&nbsp;number is <em>prime</em> if it&#39;s only divisors are 1 and itself, and it is greater than 1.&nbsp;</p>\r\n\r\n<p>For example, 2,3,5,7,11 and 13 are&nbsp;primes.</p>\r\n\r\n<p>Recall that a number is a <em>palindrome</em> if it reads the same from left to right as it does from right to left.&nbsp;</p>\r\n\r\n<p>For example, 12321 is a palindrome.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">11</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">13</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">101</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\r\n\t<li>The answer is guaranteed to exist and be less than <code>2 * 10^8</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u6c42\u51fa\u5927\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>N</code>&nbsp;\u7684\u6700\u5c0f\u56de\u6587\u7d20\u6570\u3002</p>\n\n<p>\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u5927\u4e8e 1\uff0c\u4e14\u5176\u56e0\u6570\u53ea\u6709 1 \u548c\u5b83\u81ea\u8eab\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f<em>\u7d20\u6570</em>\u3002</p>\n\n<p>\u4f8b\u5982\uff0c2\uff0c3\uff0c5\uff0c7\uff0c11 \u4ee5\u53ca&nbsp;13 \u662f\u7d20\u6570\u3002</p>\n\n<p>\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u4ece\u5de6\u5f80\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5f80\u5de6\u8bfb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f<em>\u56de\u6587\u6570\u3002</em></p>\n\n<p>\u4f8b\u5982\uff0c12321 \u662f\u56de\u6587\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>6\n<strong>\u8f93\u51fa\uff1a</strong>7\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>8\n<strong>\u8f93\u51fa\uff1a</strong>11\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>13\n<strong>\u8f93\u51fa\uff1a</strong>101</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\n\t<li>\u7b54\u6848\u80af\u5b9a\u5b58\u5728\uff0c\u4e14\u5c0f\u4e8e&nbsp;<code>2 * 10^8</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int primePalindrome(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int primePalindrome(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def primePalindrome(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint primePalindrome(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PrimePalindrome(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar primePalindrome = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef prime_palindrome(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func primePalindrome(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func primePalindrome(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def primePalindrome(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun primePalindrome(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn prime_palindrome(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function primePalindrome($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function primePalindrome(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0898", "frontend_question_id": "0867", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/transpose-matrix", "url_en": "https://leetcode.com/problems/transpose-matrix", "relative_path_cn": "/leetcode/0800-0899/0867.Transpose%20Matrix/README.md", "relative_path_en": "/leetcode/0800-0899/0867.Transpose%20Matrix/README_EN.md", "title_cn": "\u8f6c\u7f6e\u77e9\u9635", "title_en": "Transpose Matrix", "question_title_slug": "transpose-matrix", "content_en": "<p>Given a&nbsp;matrix <code>A</code>, return the transpose of <code>A</code>.</p>\r\n\r\n<p>The transpose of a matrix is the matrix flipped over it&#39;s main diagonal, switching the row and column indices of the matrix.</p>\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_transpose.png\" width=\"700\"/>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2,3],[4,5,6],[7,8,9]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,4,7],[2,5,8],[3,6,9]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2,3],[4,5,6]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[1,4],[2,5],[3,6]]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span><strong>Note:</strong></span></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= A.length&nbsp;&lt;= 1000</span></code></li>\r\n\t<li><code><span>1 &lt;= A[0].length&nbsp;&lt;= 1000</span></code></li>\r\n</ol>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u9635&nbsp;<code>A</code>\uff0c&nbsp;\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u7684\u8f6c\u7f6e\u77e9\u9635\u3002</p>\n\n<p>\u77e9\u9635\u7684\u8f6c\u7f6e\u662f\u6307\u5c06\u77e9\u9635\u7684\u4e3b\u5bf9\u89d2\u7ebf\u7ffb\u8f6c\uff0c\u4ea4\u6362\u77e9\u9635\u7684\u884c\u7d22\u5f15\u4e0e\u5217\u7d22\u5f15\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0].length&nbsp;&lt;= 1000</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> transpose(vector<vector<int>>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] transpose(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def transpose(self, A: List[List[int]]) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** transpose(int** A, int ASize, int* AColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] Transpose(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar transpose = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @return {Integer[][]}\ndef transpose(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func transpose(_ A: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func transpose(A [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def transpose(A: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun transpose(A: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn transpose(a: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer[][]\n     */\n    function transpose($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function transpose(A: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0899", "frontend_question_id": "0868", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-gap", "url_en": "https://leetcode.com/problems/binary-gap", "relative_path_cn": "/leetcode/0800-0899/0868.Binary%20Gap/README.md", "relative_path_en": "/leetcode/0800-0899/0868.Binary%20Gap/README_EN.md", "title_cn": "\u4e8c\u8fdb\u5236\u95f4\u8ddd", "title_en": "Binary Gap", "question_title_slug": "binary-gap", "content_en": "<p>Given a positive integer <code>n</code>, find and return <em>the <strong>longest distance</strong> between any two <strong>adjacent</strong> </em><code>1</code><em>&#39;s in the binary representation of </em><code>n</code><em>. If there are no two adjacent </em><code>1</code><em>&#39;s, return </em><code>0</code><em>.</em></p>\n\n<p>Two <code>1</code>&#39;s are <strong>adjacent</strong> if there are only <code>0</code>&#39;s separating them (possibly no <code>0</code>&#39;s). The <b>distance</b> between two <code>1</code>&#39;s is the absolute difference between their bit positions. For example, the two <code>1</code>&#39;s in <code>&quot;1001&quot;</code> have a distance of 3.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 22\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 22 in binary is &quot;10110&quot;.\nThe first adjacent pair of 1&#39;s is &quot;<u>1</u>0<u>1</u>10&quot; with a distance of 2.\nThe second adjacent pair of 1&#39;s is &quot;10<u>11</u>0&quot; with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that &quot;<u>1</u>01<u>1</u>0&quot; is not a valid pair since there is a 1 separating the two 1&#39;s underlined.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 5 in binary is &quot;101&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 6 in binary is &quot;110&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> 8 in binary is &quot;1000&quot;.\nThere aren&#39;t any adjacent pairs of 1&#39;s in the binary representation of 8, so we return 0.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>n</code>\uff0c\u627e\u5230\u5e76\u8fd4\u56de <code>n</code> \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4e24\u4e2a <strong>\u76f8\u90bb</strong> 1 \u4e4b\u95f4\u7684<strong> \u6700\u957f\u8ddd\u79bb </strong>\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4e24\u4e2a\u76f8\u90bb\u7684 1\uff0c\u8fd4\u56de <code>0</code> \u3002</p>\n\n<p>\u5982\u679c\u53ea\u6709 <code>0</code> \u5c06\u4e24\u4e2a <code>1</code> \u5206\u9694\u5f00\uff08\u53ef\u80fd\u4e0d\u5b58\u5728 <code>0</code> \uff09\uff0c\u5219\u8ba4\u4e3a\u8fd9\u4e24\u4e2a 1 \u5f7c\u6b64 <strong>\u76f8\u90bb</strong> \u3002\u4e24\u4e2a <code>1</code> \u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5b83\u4eec\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4f4d\u7f6e\u7684\u7edd\u5bf9\u5dee\u3002\u4f8b\u5982\uff0c<code>\"1001\"</code> \u4e2d\u7684\u4e24\u4e2a <code>1</code> \u7684\u8ddd\u79bb\u4e3a 3 \u3002</p>\n\n<p>\u00a0</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 22\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n22 \u7684\u4e8c\u8fdb\u5236\u662f \"10110\" \u3002\n\u5728 22 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6709\u4e09\u4e2a 1\uff0c\u7ec4\u6210\u4e24\u5bf9\u76f8\u90bb\u7684 1 \u3002\n\u7b2c\u4e00\u5bf9\u76f8\u90bb\u7684 1 \u4e2d\uff0c\u4e24\u4e2a 1 \u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 2 \u3002\n\u7b2c\u4e8c\u5bf9\u76f8\u90bb\u7684 1 \u4e2d\uff0c\u4e24\u4e2a 1 \u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002\n\u7b54\u6848\u53d6\u4e24\u4e2a\u8ddd\u79bb\u4e4b\u4e2d\u6700\u5927\u7684\uff0c\u4e5f\u5c31\u662f 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 5\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n5 \u7684\u4e8c\u8fdb\u5236\u662f \"101\" \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 6\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n6 \u7684\u4e8c\u8fdb\u5236\u662f \"110\" \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 8\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n8 \u7684\u4e8c\u8fdb\u5236\u662f \"1000\" \u3002\n\u5728 8 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6ca1\u6709\u76f8\u90bb\u7684\u4e24\u4e2a 1\uff0c\u6240\u4ee5\u8fd4\u56de 0 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= N <= 10^9</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int binaryGap(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int binaryGap(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def binaryGap(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def binaryGap(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint binaryGap(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BinaryGap(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar binaryGap = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef binary_gap(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func binaryGap(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func binaryGap(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def binaryGap(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun binaryGap(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn binary_gap(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function binaryGap($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function binaryGap(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0900", "frontend_question_id": "0869", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reordered-power-of-2", "url_en": "https://leetcode.com/problems/reordered-power-of-2", "relative_path_cn": "/leetcode/0800-0899/0869.Reordered%20Power%20of%202/README.md", "relative_path_en": "/leetcode/0800-0899/0869.Reordered%20Power%20of%202/README_EN.md", "title_cn": "\u91cd\u65b0\u6392\u5e8f\u5f97\u5230 2 \u7684\u5e42", "title_en": "Reordered Power of 2", "question_title_slug": "reordered-power-of-2", "content_en": "<p>Starting with a positive integer <code>N</code>, we reorder the digits in any order (including the original order) such that the leading digit is not zero.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if we can do this in a way such that the resulting number is a power of 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">24</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">46</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570 <code>N</code>&nbsp;\uff0c\u6211\u4eec\u6309\u4efb\u4f55\u987a\u5e8f\uff08\u5305\u62ec\u539f\u59cb\u987a\u5e8f\uff09\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5e8f\uff0c\u6ce8\u610f\u5176\u524d\u5bfc\u6570\u5b57\u4e0d\u80fd\u4e3a\u96f6\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u5f0f\u5f97\u5230&nbsp;2 \u7684\u5e42\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>10\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>16\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>24\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>46\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool reorderedPowerOf2(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean reorderedPowerOf2(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reorderedPowerOf2(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reorderedPowerOf2(self, N: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool reorderedPowerOf2(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ReorderedPowerOf2(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {boolean}\n */\nvar reorderedPowerOf2 = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef reordered_power_of2(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reorderedPowerOf2(_ N: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reorderedPowerOf2(N int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reorderedPowerOf2(N: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reorderedPowerOf2(N: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reordered_power_of2(n: i32) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Boolean\n     */\n    function reorderedPowerOf2($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reorderedPowerOf2(N: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0901", "frontend_question_id": "0870", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/advantage-shuffle", "url_en": "https://leetcode.com/problems/advantage-shuffle", "relative_path_cn": "/leetcode/0800-0899/0870.Advantage%20Shuffle/README.md", "relative_path_en": "/leetcode/0800-0899/0870.Advantage%20Shuffle/README_EN.md", "title_cn": "\u4f18\u52bf\u6d17\u724c", "title_en": "Advantage Shuffle", "question_title_slug": "advantage-shuffle", "content_en": "<p>Given two arrays <code>A</code> and <code>B</code> of equal size, the <em>advantage of <code>A</code> with respect to <code>B</code></em> is the number of indices <code>i</code>&nbsp;for which <code>A[i] &gt; B[i]</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation of <code>A</code> that maximizes its advantage with respect to <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[2,7,11,15]</span>, B = <span id=\"example-input-1-2\">[1,10,4,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,11,7,15]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[12,24,8,32]</span>, B = <span id=\"example-input-2-2\">[13,25,32,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[24,32,8,12]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\uff0cA \u76f8\u5bf9\u4e8e B \u7684<em>\u4f18\u52bf</em>\u53ef\u4ee5\u7528\u6ee1\u8db3&nbsp;<code>A[i] &gt; B[i]</code>&nbsp;\u7684\u7d22\u5f15 <code>i</code>&nbsp;\u7684\u6570\u76ee\u6765\u63cf\u8ff0\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u7684<strong>\u4efb\u610f</strong>\u6392\u5217\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e <code>B</code>&nbsp;\u7684\u4f18\u52bf\u6700\u5927\u5316\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,7,11,15], B = [1,10,4,11]\n<strong>\u8f93\u51fa\uff1a</strong>[2,11,7,15]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [12,24,8,32], B = [13,25,32,11]\n<strong>\u8f93\u51fa\uff1a</strong>[24,32,8,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Greedy", "Array"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> advantageCount(vector<int>& A, vector<int>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] advantageCount(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def advantageCount(self, A: List[int], B: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* advantageCount(int* A, int ASize, int* B, int BSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] AdvantageCount(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number[]}\n */\nvar advantageCount = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef advantage_count(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func advantageCount(_ A: [Int], _ B: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func advantageCount(A []int, B []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def advantageCount(A: Array[Int], B: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun advantageCount(A: IntArray, B: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn advantage_count(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer[]\n     */\n    function advantageCount($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function advantageCount(A: number[], B: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0902", "frontend_question_id": "0871", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-number-of-refueling-stops", "url_en": "https://leetcode.com/problems/minimum-number-of-refueling-stops", "relative_path_cn": "/leetcode/0800-0899/0871.Minimum%20Number%20of%20Refueling%20Stops/README.md", "relative_path_en": "/leetcode/0800-0899/0871.Minimum%20Number%20of%20Refueling%20Stops/README_EN.md", "title_cn": "\u6700\u4f4e\u52a0\u6cb9\u6b21\u6570", "title_en": "Minimum Number of Refueling Stops", "question_title_slug": "minimum-number-of-refueling-stops", "content_en": "<p>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.</p>\r\n\r\n<p>Along the way, there are gas stations.&nbsp; Each <code>station[i]</code>&nbsp;represents a gas station that is <code>station[i][0]</code> miles east of the starting position, and has <code>station[i][1]</code> liters of gas.</p>\r\n\r\n<p>The car starts with an infinite tank of gas, which initially has&nbsp;<code>startFuel</code>&nbsp;liters of fuel in it.&nbsp; It uses 1 liter of gas per 1 mile that it drives.</p>\r\n\r\n<p>When the car&nbsp;reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.</p>\r\n\r\n<p>What is the least number of refueling stops the car must make in order to reach its destination?&nbsp; If it cannot reach the destination, return <code>-1</code>.</p>\r\n\r\n<p>Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.&nbsp; If the car reaches the destination with 0 fuel left, it is still considered to have arrived.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-1-1\">1</span>, startFuel = <span id=\"example-input-1-2\">1</span>, stations = <span id=\"example-input-1-3\">[]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n<strong>Explanation: </strong>We can reach the target without refueling.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-2-1\">100</span>, startFuel = <span id=\"example-input-2-2\">1</span>, stations = <span id=\"example-input-2-3\">[[10,100]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong>We can&#39;t reach the target (or even the first gas station).\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-3-1\">100</span>, startFuel = <span id=\"example-input-3-2\">10</span>, stations = <span id=\"example-input-3-3\">[[10,60],[20,30],[30,30],[60,40]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n<strong>Explanation: </strong>\r\nWe start with 10 liters of fuel.\r\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\r\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\r\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\r\nWe made 2 refueling stops along the way, so we return 2.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\r\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\r\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u6c7d\u8f66\u4ece\u8d77\u70b9\u51fa\u53d1\u9a76\u5411\u76ee\u7684\u5730\uff0c\u8be5\u76ee\u7684\u5730\u4f4d\u4e8e\u51fa\u53d1\u4f4d\u7f6e\u4e1c\u9762 <code>target</code>&nbsp;\u82f1\u91cc\u5904\u3002</p>\n\n<p>\u6cbf\u9014\u6709\u52a0\u6cb9\u7ad9\uff0c\u6bcf\u4e2a&nbsp;<code>station[i]</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5b83\u4f4d\u4e8e\u51fa\u53d1\u4f4d\u7f6e\u4e1c\u9762&nbsp;<code>station[i][0]</code>&nbsp;\u82f1\u91cc\u5904\uff0c\u5e76\u4e14\u6709&nbsp;<code>station[i][1]</code>&nbsp;\u5347\u6c7d\u6cb9\u3002</p>\n\n<p>\u5047\u8bbe\u6c7d\u8f66\u6cb9\u7bb1\u7684\u5bb9\u91cf\u662f\u65e0\u9650\u7684\uff0c\u5176\u4e2d\u6700\u521d\u6709&nbsp;<code>startFuel</code>&nbsp;\u5347\u71c3\u6599\u3002\u5b83\u6bcf\u884c\u9a76 1 \u82f1\u91cc\u5c31\u4f1a\u7528\u6389 1 \u5347\u6c7d\u6cb9\u3002</p>\n\n<p>\u5f53\u6c7d\u8f66\u5230\u8fbe\u52a0\u6cb9\u7ad9\u65f6\uff0c\u5b83\u53ef\u80fd\u505c\u4e0b\u6765\u52a0\u6cb9\uff0c\u5c06\u6240\u6709\u6c7d\u6cb9\u4ece\u52a0\u6cb9\u7ad9\u8f6c\u79fb\u5230\u6c7d\u8f66\u4e2d\u3002</p>\n\n<p>\u4e3a\u4e86\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u6c7d\u8f66\u6240\u5fc5\u8981\u7684\u6700\u4f4e\u52a0\u6cb9\u6b21\u6570\u662f\u591a\u5c11\uff1f\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u5982\u679c\u6c7d\u8f66\u5230\u8fbe\u52a0\u6cb9\u7ad9\u65f6\u5269\u4f59\u71c3\u6599\u4e3a 0\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728\u90a3\u91cc\u52a0\u6cb9\u3002\u5982\u679c\u6c7d\u8f66\u5230\u8fbe\u76ee\u7684\u5730\u65f6\u5269\u4f59\u71c3\u6599\u4e3a 0\uff0c\u4ecd\u7136\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u5230\u8fbe\u76ee\u7684\u5730\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 1, startFuel = 1, stations = []\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u52a0\u6cb9\u7684\u60c5\u51b5\u4e0b\u5230\u8fbe\u76ee\u7684\u5730\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 100, startFuel = 1, stations = [[10,100]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u65e0\u6cd5\u62b5\u8fbe\u76ee\u7684\u5730\uff0c\u751a\u81f3\u65e0\u6cd5\u5230\u8fbe\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u51fa\u53d1\u65f6\u6709 10 \u5347\u71c3\u6599\u3002\n\u6211\u4eec\u5f00\u8f66\u6765\u5230\u8ddd\u8d77\u70b9 10 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\uff0c\u6d88\u8017 10 \u5347\u71c3\u6599\u3002\u5c06\u6c7d\u6cb9\u4ece 0 \u5347\u52a0\u5230 60 \u5347\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u4ece 10 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\u5f00\u5230 60 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\uff08\u6d88\u8017 50 \u5347\u71c3\u6599\uff09\uff0c\n\u5e76\u5c06\u6c7d\u6cb9\u4ece 10 \u5347\u52a0\u5230 50 \u5347\u3002\u7136\u540e\u6211\u4eec\u5f00\u8f66\u62b5\u8fbe\u76ee\u7684\u5730\u3002\n\u6211\u4eec\u6cbf\u9014\u57281\u4e24\u4e2a\u52a0\u6cb9\u7ad9\u505c\u9760\uff0c\u6240\u4ee5\u8fd4\u56de 2 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\n</ol>\n", "tags_en": ["Heap", "Dynamic Programming"], "tags_cn": ["\u5806", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minRefuelStops(int target, int startFuel, int[][] stations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minRefuelStops(self, target, startFuel, stations):\n        \"\"\"\n        :type target: int\n        :type startFuel: int\n        :type stations: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minRefuelStops(int target, int startFuel, int** stations, int stationsSize, int* stationsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinRefuelStops(int target, int startFuel, int[][] stations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} target\n * @param {number} startFuel\n * @param {number[][]} stations\n * @return {number}\n */\nvar minRefuelStops = function(target, startFuel, stations) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} target\n# @param {Integer} start_fuel\n# @param {Integer[][]} stations\n# @return {Integer}\ndef min_refuel_stops(target, start_fuel, stations)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minRefuelStops(_ target: Int, _ startFuel: Int, _ stations: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minRefuelStops(target int, startFuel int, stations [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minRefuelStops(target: Int, startFuel: Int, stations: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minRefuelStops(target: Int, startFuel: Int, stations: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_refuel_stops(target: i32, start_fuel: i32, stations: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer $startFuel\n     * @param Integer[][] $stations\n     * @return Integer\n     */\n    function minRefuelStops($target, $startFuel, $stations) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minRefuelStops(target: number, startFuel: number, stations: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0904", "frontend_question_id": "0872", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/leaf-similar-trees", "url_en": "https://leetcode.com/problems/leaf-similar-trees", "relative_path_cn": "/leetcode/0800-0899/0872.Leaf-Similar%20Trees/README.md", "relative_path_en": "/leetcode/0800-0899/0872.Leaf-Similar%20Trees/README_EN.md", "title_cn": "\u53f6\u5b50\u76f8\u4f3c\u7684\u6811", "title_en": "Leaf-Similar Trees", "question_title_slug": "leaf-similar-trees", "content_en": "<p>Consider all the leaves of a binary tree, from&nbsp;left to right order, the values of those&nbsp;leaves form a <strong>leaf value sequence</strong><em>.</em></p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"width: 400px; height: 336px;\" /></p>\n\n<p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p>\n\n<p>Two binary trees are considered <em>leaf-similar</em>&nbsp;if their leaf value sequence is the same.</p>\n\n<p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" style=\"width: 750px; height: 297px;\" />\n<pre>\n<strong>Input:</strong> root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [1], root2 = [1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [1], root2 = [2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [1,2], root2 = [2,2]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" style=\"width: 450px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,2,3], root2 = [1,3,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each tree will be in the range <code>[1, 200]</code>.</li>\n\t<li>Both of the given trees will have values in the range <code>[0, 200]</code>.</li>\n</ul>\n", "content_cn": "<p>\u8bf7\u8003\u8651\u4e00\u68f5\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7684\u53f6\u5b50\uff0c\u8fd9\u4e9b\u53f6\u5b50\u7684\u503c\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6392\u5217\u5f62\u6210\u4e00\u4e2a&nbsp;<em>\u53f6\u503c\u5e8f\u5217</em> \u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 240px; width: 300px;\"></p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7ed9\u5b9a\u4e00\u68f5\u53f6\u503c\u5e8f\u5217\u4e3a&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;\u7684\u6811\u3002</p>\n\n<p>\u5982\u679c\u6709\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u53f6\u503c\u5e8f\u5217\u662f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba4\u4e3a\u5b83\u4eec\u662f&nbsp;<em>\u53f6\u76f8\u4f3c&nbsp;</em>\u7684\u3002</p>\n\n<p>\u5982\u679c\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5934\u7ed3\u70b9\u5206\u522b\u4e3a&nbsp;<code>root1</code> \u548c&nbsp;<code>root2</code>&nbsp;\u7684\u6811\u662f\u53f6\u76f8\u4f3c\u7684\uff0c\u5219\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" style=\"height: 297px; width: 750px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1], root2 = [1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1], root2 = [2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1,2], root2 = [2,2]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" style=\"height: 165px; width: 450px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1,2,3], root2 = [1,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u4e24\u68f5\u6811\u53ef\u80fd\u4f1a\u6709&nbsp;<code>1</code>&nbsp;\u5230 <code>200</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u4e24\u68f5\u6811\u4e0a\u7684\u503c\u4ecb\u4e8e <code>0</code> \u5230 <code>200</code> \u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def leafSimilar(self, root1, root2):\n        \"\"\"\n        :type root1: TreeNode\n        :type root2: TreeNode\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool leafSimilar(struct TreeNode* root1, struct TreeNode* root2){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool LeafSimilar(TreeNode root1, TreeNode root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */\nvar leafSimilar = function(root1, root2) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root1\n# @param {TreeNode} root2\n# @return {Boolean}\ndef leaf_similar(root1, root2)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func leafSimilar(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc leafSimilar(root1 *TreeNode, root2 *TreeNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def leafSimilar(root1: TreeNode, root2: TreeNode): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun leafSimilar(root1: TreeNode?, root2: TreeNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn leaf_similar(root1: Option<Rc<RefCell<TreeNode>>>, root2: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root1\n     * @param TreeNode $root2\n     * @return Boolean\n     */\n    function leafSimilar($root1, $root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction leafSimilar(root1: TreeNode | null, root2: TreeNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0905", "frontend_question_id": "0873", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence", "url_en": "https://leetcode.com/problems/length-of-longest-fibonacci-subsequence", "relative_path_cn": "/leetcode/0800-0899/0873.Length%20of%20Longest%20Fibonacci%20Subsequence/README.md", "relative_path_en": "/leetcode/0800-0899/0873.Length%20of%20Longest%20Fibonacci%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217\u7684\u957f\u5ea6", "title_en": "Length of Longest Fibonacci Subsequence", "question_title_slug": "length-of-longest-fibonacci-subsequence", "content_en": "<p>A sequence <code>X_1, X_2, ..., X_n</code>&nbsp;is <em>fibonacci-like</em> if:</p>\r\n\r\n<ul>\r\n\t<li><code>n &gt;= 3</code></li>\r\n\t<li><code>X_i + X_{i+1} = X_{i+2}</code>&nbsp;for all&nbsp;<code>i + 2 &lt;= n</code></li>\r\n</ul>\r\n\r\n<p>Given a <b>strictly increasing</b>&nbsp;array&nbsp;<code>A</code> of positive integers forming a sequence, find the <strong>length</strong> of the longest fibonacci-like subsequence of <code>A</code>.&nbsp; If one does not exist, return 0.</p>\r\n\r\n<p>(<em>Recall that a subsequence is derived from another sequence <code>A</code> by&nbsp;deleting any number of&nbsp;elements (including none)&nbsp;from <code>A</code>, without changing the order of the remaining elements.&nbsp; For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</em>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4,5,6,7,8]\r\n<strong>Output: </strong>5\r\n<strong>Explanation:\r\n</strong>The longest subsequence that is fibonacci-like: [1,2,3,5,8].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,3,7,11,12,14,18]\r\n<strong>Output: </strong>3\r\n<strong>Explanation</strong>:\r\nThe longest subsequence that is fibonacci-like:\r\n[1,11,12], [3,11,14] or [7,11,18].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\r\n\t<li><em>(The time limit has been reduced by 50% for submissions in Java, C, and C++.)</em></li>\r\n</ul>\r\n", "content_cn": "<p>\u5982\u679c\u5e8f\u5217&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff0c\u5c31\u8bf4\u5b83\u662f&nbsp;<em>\u6590\u6ce2\u90a3\u5951\u5f0f&nbsp;</em>\u7684\uff1a</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>\u5bf9\u4e8e\u6240\u6709&nbsp;<code>i + 2 &lt;= n</code>\uff0c\u90fd\u6709&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u4e25\u683c\u9012\u589e</strong>\u7684\u6b63\u6574\u6570\u6570\u7ec4\u5f62\u6210\u5e8f\u5217\uff0c\u627e\u5230 <code>A</code> \u4e2d\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de&nbsp;&nbsp;0 \u3002</p>\n\n<p><em>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b50\u5e8f\u5217\u662f\u4ece\u539f\u5e8f\u5217 <code>A</code>&nbsp;\u4e2d\u6d3e\u751f\u51fa\u6765\u7684\uff0c\u5b83\u4ece <code>A</code>&nbsp;\u4e2d\u5220\u6389\u4efb\u610f\u6570\u91cf\u7684\u5143\u7d20\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\uff09\uff0c\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c&nbsp;<code>[3, 5, 8]</code>&nbsp;\u662f&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5,6,7,8]\n<strong>\u8f93\u51fa: </strong>5\n<strong>\u89e3\u91ca:\n</strong>\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u5b50\u5e8f\u5217\u4e3a\uff1a[1,2,3,5,8] \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,3,7,11,12,14,18]\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca</strong>:\n\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u5b50\u5e8f\u5217\u6709\uff1a\n[1,11,12]\uff0c[3,11,14] \u4ee5\u53ca [7,11,18] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>\uff08\u5bf9\u4e8e\u4ee5 Java\uff0cC\uff0cC++\uff0c\u4ee5\u53ca&nbsp;C# \u7684\u63d0\u4ea4\uff0c\u65f6\u95f4\u9650\u5236\u88ab\u51cf\u5c11\u4e86 50%\uff09</em></li>\n</ul>\n", "tags_en": ["Array", "Dynamic Programming"], "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lenLongestFibSubseq(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lenLongestFibSubseq(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lenLongestFibSubseq(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lenLongestFibSubseq(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint lenLongestFibSubseq(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LenLongestFibSubseq(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar lenLongestFibSubseq = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef len_longest_fib_subseq(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lenLongestFibSubseq(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lenLongestFibSubseq(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lenLongestFibSubseq(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lenLongestFibSubseq(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn len_longest_fib_subseq(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function lenLongestFibSubseq($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lenLongestFibSubseq(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0906", "frontend_question_id": "0874", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/walking-robot-simulation", "url_en": "https://leetcode.com/problems/walking-robot-simulation", "relative_path_cn": "/leetcode/0800-0899/0874.Walking%20Robot%20Simulation/README.md", "relative_path_en": "/leetcode/0800-0899/0874.Walking%20Robot%20Simulation/README_EN.md", "title_cn": "\u6a21\u62df\u884c\u8d70\u673a\u5668\u4eba", "title_en": "Walking Robot Simulation", "question_title_slug": "walking-robot-simulation", "content_en": "<p>A robot on an infinite grid starts at point (0, 0) and faces north.&nbsp; The robot can receive one of three possible types of commands:</p>\r\n\r\n<ul>\r\n\t<li><code>-2</code>: turn left 90 degrees</li>\r\n\t<li><code>-1</code>: turn right 90 degrees</li>\r\n\t<li><code>1 &lt;= x &lt;= 9</code>: move forward <code>x</code> units</li>\r\n</ul>\r\n\r\n<p>Some of the grid squares are obstacles.&nbsp;</p>\r\n\r\n<p>The <code>i</code>-th obstacle is at grid point <code>(obstacles[i][0], obstacles[i][1])</code></p>\r\n\r\n<p>If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)</p>\r\n\r\n<p>Return the <strong>square</strong> of the maximum Euclidean distance that the robot will be from the origin.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>commands = <span id=\"example-input-1-1\">[4,-1,3]</span>, obstacles = <span id=\"example-input-1-2\">[]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">25</span>\r\n<span>Explanation: </span>robot will go to (3, 4)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>commands = <span id=\"example-input-2-1\">[4,-1,4,-2,4]</span>, obstacles = <span id=\"example-input-2-2\">[[2,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">65</span>\r\n<strong>Explanation</strong>: robot will be stuck at (1, 4) before turning left and going to (1, 8)\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\r\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\r\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\r\n\t<li>The answer is guaranteed to be less than <code>2 ^ 31</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u673a\u5668\u4eba\u5728\u4e00\u4e2a\u65e0\u9650\u5927\u5c0f\u7684\u7f51\u683c\u4e0a\u884c\u8d70\uff0c\u4ece\u70b9&nbsp;(0, 0) \u5904\u5f00\u59cb\u51fa\u53d1\uff0c\u9762\u5411\u5317\u65b9\u3002\u8be5\u673a\u5668\u4eba\u53ef\u4ee5\u63a5\u6536\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u547d\u4ee4\uff1a</p>\n\n<ul>\n\t<li><code>-2</code>\uff1a\u5411\u5de6\u8f6c&nbsp;90 \u5ea6</li>\n\t<li><code>-1</code>\uff1a\u5411\u53f3\u8f6c 90 \u5ea6</li>\n\t<li><code>1 &lt;= x &lt;= 9</code>\uff1a\u5411\u524d\u79fb\u52a8&nbsp;<code>x</code>&nbsp;\u4e2a\u5355\u4f4d\u957f\u5ea6</li>\n</ul>\n\n<p>\u5728\u7f51\u683c\u4e0a\u6709\u4e00\u4e9b\u683c\u5b50\u88ab\u89c6\u4e3a\u969c\u788d\u7269\u3002</p>\n\n<p>\u7b2c <code>i</code>&nbsp;\u4e2a\u969c\u788d\u7269\u4f4d\u4e8e\u7f51\u683c\u70b9 &nbsp;<code>(obstacles[i][0], obstacles[i][1])</code></p>\n\n<p>\u673a\u5668\u4eba\u65e0\u6cd5\u8d70\u5230\u969c\u788d\u7269\u4e0a\uff0c\u5b83\u5c06\u4f1a\u505c\u7559\u5728\u969c\u788d\u7269\u7684\u524d\u4e00\u4e2a\u7f51\u683c\u65b9\u5757\u4e0a\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u8be5\u8def\u7ebf\u7684\u5176\u4f59\u90e8\u5206\u3002</p>\n\n<p>\u8fd4\u56de\u4ece\u539f\u70b9\u5230\u673a\u5668\u4eba\u6240\u6709\u7ecf\u8fc7\u7684\u8def\u5f84\u70b9\uff08\u5750\u6807\u4e3a\u6574\u6570\uff09\u7684\u6700\u5927\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>commands = [4,-1,3], obstacles = []\n<strong>\u8f93\u51fa: </strong>25\n<strong>\u89e3\u91ca:</strong> \u673a\u5668\u4eba\u5c06\u4f1a\u5230\u8fbe (3, 4)\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>\u8f93\u51fa: </strong>65\n<strong>\u89e3\u91ca</strong>: \u673a\u5668\u4eba\u5728\u5de6\u8f6c\u8d70\u5230 (1, 8) \u4e4b\u524d\u5c06\u88ab\u56f0\u5728 (1, 4) \u5904\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\n\t<li>\u7b54\u6848\u4fdd\u8bc1\u5c0f\u4e8e&nbsp;<code>2 ^ 31</code></li>\n</ol>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int robotSim(int[] commands, int[][] obstacles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def robotSim(self, commands, obstacles):\n        \"\"\"\n        :type commands: List[int]\n        :type obstacles: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint robotSim(int* commands, int commandsSize, int** obstacles, int obstaclesSize, int* obstaclesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RobotSim(int[] commands, int[][] obstacles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} commands\n * @param {number[][]} obstacles\n * @return {number}\n */\nvar robotSim = function(commands, obstacles) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} commands\n# @param {Integer[][]} obstacles\n# @return {Integer}\ndef robot_sim(commands, obstacles)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func robotSim(_ commands: [Int], _ obstacles: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func robotSim(commands []int, obstacles [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def robotSim(commands: Array[Int], obstacles: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun robotSim(commands: IntArray, obstacles: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn robot_sim(commands: Vec<i32>, obstacles: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $commands\n     * @param Integer[][] $obstacles\n     * @return Integer\n     */\n    function robotSim($commands, $obstacles) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function robotSim(commands: number[], obstacles: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0907", "frontend_question_id": "0875", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/koko-eating-bananas", "url_en": "https://leetcode.com/problems/koko-eating-bananas", "relative_path_cn": "/leetcode/0800-0899/0875.Koko%20Eating%20Bananas/README.md", "relative_path_en": "/leetcode/0800-0899/0875.Koko%20Eating%20Bananas/README_EN.md", "title_cn": "\u7231\u5403\u9999\u8549\u7684\u73c2\u73c2", "title_en": "Koko Eating Bananas", "question_title_slug": "koko-eating-bananas", "content_en": "<p>Koko loves to eat bananas.&nbsp; There are <code>N</code>&nbsp;piles of bananas, the <code>i</code>-th&nbsp;pile has <code>piles[i]</code> bananas.&nbsp; The guards have gone and will come back in <code>H</code> hours.</p>\n\n<p>Koko can decide her bananas-per-hour eating speed of <code>K</code>.&nbsp; Each hour, she chooses some pile of bananas, and eats K bananas from that pile.&nbsp; If the pile has less than <code>K</code> bananas, she eats all of them instead, and won&#39;t eat any more bananas during this hour.</p>\n\n<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.</p>\n\n<p>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> piles = [3,6,7,11], H = 8\n<strong>Output:</strong> 4\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> piles = [30,11,23,4,20], H = 5\n<strong>Output:</strong> 30\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> piles = [30,11,23,4,20], H = 6\n<strong>Output:</strong> 23\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10^4</code></li>\n\t<li><code>piles.length &lt;= H &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10^9</code></li>\n</ul>\n", "content_cn": "<p>\u73c2\u73c2\u559c\u6b22\u5403\u9999\u8549\u3002\u8fd9\u91cc\u6709&nbsp;<code>N</code>&nbsp;\u5806\u9999\u8549\uff0c\u7b2c <code>i</code> \u5806\u4e2d\u6709&nbsp;<code>piles[i]</code>&nbsp;\u6839\u9999\u8549\u3002\u8b66\u536b\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u5c06\u5728&nbsp;<code>H</code>&nbsp;\u5c0f\u65f6\u540e\u56de\u6765\u3002</p>\n\n<p>\u73c2\u73c2\u53ef\u4ee5\u51b3\u5b9a\u5979\u5403\u9999\u8549\u7684\u901f\u5ea6&nbsp;<code>K</code>&nbsp;\uff08\u5355\u4f4d\uff1a\u6839/\u5c0f\u65f6\uff09\u3002\u6bcf\u4e2a\u5c0f\u65f6\uff0c\u5979\u5c06\u4f1a\u9009\u62e9\u4e00\u5806\u9999\u8549\uff0c\u4ece\u4e2d\u5403\u6389 <code>K</code> \u6839\u3002\u5982\u679c\u8fd9\u5806\u9999\u8549\u5c11\u4e8e <code>K</code> \u6839\uff0c\u5979\u5c06\u5403\u6389\u8fd9\u5806\u7684\u6240\u6709\u9999\u8549\uff0c\u7136\u540e\u8fd9\u4e00\u5c0f\u65f6\u5185\u4e0d\u4f1a\u518d\u5403\u66f4\u591a\u7684\u9999\u8549\u3002&nbsp;&nbsp;</p>\n\n<p>\u73c2\u73c2\u559c\u6b22\u6162\u6162\u5403\uff0c\u4f46\u4ecd\u7136\u60f3\u5728\u8b66\u536b\u56de\u6765\u524d\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002</p>\n\n<p>\u8fd4\u56de\u5979\u53ef\u4ee5\u5728 <code>H</code> \u5c0f\u65f6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5c0f\u901f\u5ea6 <code>K</code>\uff08<code>K</code> \u4e3a\u6574\u6570\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [3,6,7,11], H = 8\n<strong>\u8f93\u51fa: </strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [30,11,23,4,20], H = 5\n<strong>\u8f93\u51fa: </strong>30\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [30,11,23,4,20], H = 6\n<strong>\u8f93\u51fa: </strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10^4</code></li>\n\t<li><code>piles.length &lt;= H &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10^9</code></li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int H) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minEatingSpeed(int[] piles, int H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minEatingSpeed(self, piles, H):\n        \"\"\"\n        :type piles: List[int]\n        :type H: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minEatingSpeed(self, piles: List[int], H: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minEatingSpeed(int* piles, int pilesSize, int H){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinEatingSpeed(int[] piles, int H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} piles\n * @param {number} H\n * @return {number}\n */\nvar minEatingSpeed = function(piles, H) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} piles\n# @param {Integer} h\n# @return {Integer}\ndef min_eating_speed(piles, h)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minEatingSpeed(_ piles: [Int], _ H: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minEatingSpeed(piles []int, H int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minEatingSpeed(piles: Array[Int], H: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minEatingSpeed(piles: IntArray, H: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_eating_speed(piles: Vec<i32>, h: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @param Integer $H\n     * @return Integer\n     */\n    function minEatingSpeed($piles, $H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minEatingSpeed(piles: number[], H: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0908", "frontend_question_id": "0876", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/middle-of-the-linked-list", "url_en": "https://leetcode.com/problems/middle-of-the-linked-list", "relative_path_cn": "/leetcode/0800-0899/0876.Middle%20of%20the%20Linked%20List/README.md", "relative_path_en": "/leetcode/0800-0899/0876.Middle%20of%20the%20Linked%20List/README_EN.md", "title_cn": "\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9", "title_en": "Middle of the Linked List", "question_title_slug": "middle-of-the-linked-list", "content_en": "<p>Given a non-empty, singly&nbsp;linked list with head node <code>head</code>, return&nbsp;a&nbsp;middle node of linked list.</p>\r\n\r\n<p>If there are two middle nodes, return the second middle node.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5]</span>\r\n<strong>Output: </strong>Node 3 from this list (Serialization: <span id=\"example-output-1\">[3,4,5]</span>)\r\nThe returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).\r\nNote that we returned a ListNode object ans, such that:\r\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong>Node 4 from this list (Serialization: <span id=\"example-output-2\">[4,5,6]</span>)\r\nSince the list has two middle nodes with values 3 and 4, we return the second one.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the given list will be between <code>1</code>&nbsp;and <code>100</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a <code>head</code>\u00a0\u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002</p>\n\n<p>\u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 3 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[3,4,5])\n\u8fd4\u56de\u7684\u7ed3\u70b9\u503c\u4e3a 3 \u3002 (\u6d4b\u8bc4\u7cfb\u7edf\u5bf9\u8be5\u7ed3\u70b9\u5e8f\u5217\u5316\u8868\u8ff0\u662f [3,4,5])\u3002\n\u6ce8\u610f\uff0c\u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a ListNode \u7c7b\u578b\u7684\u5bf9\u8c61 ans\uff0c\u8fd9\u6837\uff1a\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, \u4ee5\u53ca ans.next.next.next = NULL.\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a02\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 4 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[4,5,6])\n\u7531\u4e8e\u8be5\u5217\u8868\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u503c\u5206\u522b\u4e3a 3 \u548c 4\uff0c\u6211\u4eec\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u94fe\u8868\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e\u00a0<code>1</code>\u00a0\u548c\u00a0<code>100</code>\u00a0\u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* middleNode(struct ListNode* head){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode MiddleNode(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef middle_node(head)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func middleNode(_ head: ListNode?) -> ListNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc middleNode(head *ListNode) *ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def middleNode(head: ListNode): ListNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun middleNode(head: ListNode?): ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn middle_node(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function middleNode($head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction middleNode(head: ListNode | null): ListNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0909", "frontend_question_id": "0877", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/stone-game", "url_en": "https://leetcode.com/problems/stone-game", "relative_path_cn": "/leetcode/0800-0899/0877.Stone%20Game/README.md", "relative_path_en": "/leetcode/0800-0899/0877.Stone%20Game/README_EN.md", "title_cn": "\u77f3\u5b50\u6e38\u620f", "title_en": "Stone Game", "question_title_slug": "stone-game", "content_en": "<p>Alex and Lee play a game with piles of stones.&nbsp; There are an even number of&nbsp;piles <strong>arranged in a row</strong>, and each pile has a positive integer number of stones <code>piles[i]</code>.</p>\n\n<p>The objective of the game is to end with the most&nbsp;stones.&nbsp; The total number of stones is odd, so there are no ties.</p>\n\n<p>Alex and Lee take turns, with Alex starting first.&nbsp; Each turn, a player&nbsp;takes the entire pile of stones from either the beginning or the end of the row.&nbsp; This continues until there are no more piles left, at which point the person with the most stones wins.</p>\n\n<p>Assuming Alex and Lee play optimally, return <code>True</code>&nbsp;if and only if Alex wins the game.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [5,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>\nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> is even.</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles)</code> is odd.</li>\n</ul>\n", "content_cn": "<p>\u4e9a\u5386\u514b\u65af\u548c\u674e\u7528\u51e0\u5806\u77f3\u5b50\u5728\u505a\u6e38\u620f\u3002\u5076\u6570\u5806\u77f3\u5b50<strong>\u6392\u6210\u4e00\u884c</strong>\uff0c\u6bcf\u5806\u90fd\u6709\u6b63\u6574\u6570\u9897\u77f3\u5b50&nbsp;<code>piles[i]</code>&nbsp;\u3002</p>\n\n<p>\u6e38\u620f\u4ee5\u8c01\u624b\u4e2d\u7684\u77f3\u5b50\u6700\u591a\u6765\u51b3\u51fa\u80dc\u8d1f\u3002\u77f3\u5b50\u7684\u603b\u6570\u662f\u5947\u6570\uff0c\u6240\u4ee5\u6ca1\u6709\u5e73\u5c40\u3002</p>\n\n<p>\u4e9a\u5386\u514b\u65af\u548c\u674e\u8f6e\u6d41\u8fdb\u884c\uff0c\u4e9a\u5386\u514b\u65af\u5148\u5f00\u59cb\u3002 \u6bcf\u56de\u5408\uff0c\u73a9\u5bb6\u4ece\u884c\u7684\u5f00\u59cb\u6216\u7ed3\u675f\u5904\u53d6\u8d70\u6574\u5806\u77f3\u5934\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e00\u76f4\u6301\u7eed\u5230\u6ca1\u6709\u66f4\u591a\u7684\u77f3\u5b50\u5806\u4e3a\u6b62\uff0c\u6b64\u65f6\u624b\u4e2d\u77f3\u5b50\u6700\u591a\u7684\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u5047\u8bbe\u4e9a\u5386\u514b\u65af\u548c\u674e\u90fd\u53d1\u6325\u51fa\u6700\u4f73\u6c34\u5e73\uff0c\u5f53\u4e9a\u5386\u514b\u65af\u8d62\u5f97\u6bd4\u8d5b\u65f6\u8fd4\u56de&nbsp;<code>true</code>&nbsp;\uff0c\u5f53\u674e\u8d62\u5f97\u6bd4\u8d5b\u65f6\u8fd4\u56de&nbsp;<code>false</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,3,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4e9a\u5386\u514b\u65af\u5148\u5f00\u59cb\uff0c\u53ea\u80fd\u62ff\u524d 5 \u9897\u6216\u540e 5 \u9897\u77f3\u5b50 \u3002\n\u5047\u8bbe\u4ed6\u53d6\u4e86\u524d 5 \u9897\uff0c\u8fd9\u4e00\u884c\u5c31\u53d8\u6210\u4e86 [3,4,5] \u3002\n\u5982\u679c\u674e\u62ff\u8d70\u524d 3 \u9897\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u662f [4,5]\uff0c\u4e9a\u5386\u514b\u65af\u62ff\u8d70\u540e 5 \u9897\u8d62\u5f97 10 \u5206\u3002\n\u5982\u679c\u674e\u62ff\u8d70\u540e 5 \u9897\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u662f [3,4]\uff0c\u4e9a\u5386\u514b\u65af\u62ff\u8d70\u540e 4 \u9897\u8d62\u5f97 9 \u5206\u3002\n\u8fd9\u8868\u660e\uff0c\u53d6\u524d 5 \u9897\u77f3\u5b50\u5bf9\u4e9a\u5386\u514b\u65af\u6765\u8bf4\u662f\u4e00\u4e2a\u80dc\u5229\u7684\u4e3e\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd4\u56de true \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> \u662f\u5076\u6570\u3002</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles)</code>&nbsp;\u662f\u5947\u6570\u3002</li>\n</ol>\n", "tags_en": ["Minimax", "Math", "Dynamic Programming"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927", "\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool stoneGame(vector<int>& piles) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean stoneGame(int[] piles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool stoneGame(int* piles, int pilesSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool StoneGame(int[] piles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} piles\n# @return {Boolean}\ndef stone_game(piles)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func stoneGame(_ piles: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func stoneGame(piles []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def stoneGame(piles: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun stoneGame(piles: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn stone_game(piles: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $piles\n     * @return Boolean\n     */\n    function stoneGame($piles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function stoneGame(piles: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0910", "frontend_question_id": "0878", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/nth-magical-number", "url_en": "https://leetcode.com/problems/nth-magical-number", "relative_path_cn": "/leetcode/0800-0899/0878.Nth%20Magical%20Number/README.md", "relative_path_en": "/leetcode/0800-0899/0878.Nth%20Magical%20Number/README_EN.md", "title_cn": "\u7b2c N \u4e2a\u795e\u5947\u6570\u5b57", "title_en": "Nth Magical Number", "question_title_slug": "nth-magical-number", "content_en": "<p>A positive integer&nbsp;is <em>magical</em>&nbsp;if it is divisible by either <font face=\"monospace\">A</font>&nbsp;or <font face=\"monospace\">B</font>.</p>\r\n\r\n<p>Return the <font face=\"monospace\">N</font>-th magical number.&nbsp; Since the answer may be very large, <strong>return it modulo </strong><code>10^9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">1</span>, A = <span id=\"example-input-1-2\">2</span>, B = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">4</span>, A = <span id=\"example-input-2-2\">2</span>, B = <span id=\"example-input-2-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">5</span>, A = <span id=\"example-input-3-2\">2</span>, B = <span id=\"example-input-3-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-4-1\">3</span>, A = <span id=\"example-input-4-2\">6</span>, B = <span id=\"example-input-4-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">8</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li>\r\n\t<li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li>\r\n\t<li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5982\u679c\u6b63\u6574\u6570\u53ef\u4ee5\u88ab A \u6216 B \u6574\u9664\uff0c\u90a3\u4e48\u5b83\u662f\u795e\u5947\u7684\u3002</p>\n\n<p>\u8fd4\u56de\u7b2c N \u4e2a\u795e\u5947\u6570\u5b57\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c<strong>\u8fd4\u56de\u5b83\u6a21&nbsp;</strong><code>10^9 + 7</code>&nbsp;<strong>\u7684\u7ed3\u679c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 1, A = 2, B = 3\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 4, A = 2, B = 3\n<strong>\u8f93\u51fa\uff1a</strong>6\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 5, A = 2, B = 4\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, A = 6, B = 4\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li>\n\t<li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li>\n\t<li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li>\n</ol>\n", "tags_en": ["Math", "Binary Search"], "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int nthMagicalNumber(int N, int A, int B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int nthMagicalNumber(int N, int A, int B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nthMagicalNumber(self, N, A, B):\n        \"\"\"\n        :type N: int\n        :type A: int\n        :type B: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nthMagicalNumber(self, N: int, A: int, B: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint nthMagicalNumber(int N, int A, int B){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NthMagicalNumber(int N, int A, int B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number} A\n * @param {number} B\n * @return {number}\n */\nvar nthMagicalNumber = function(N, A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef nth_magical_number(n, a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nthMagicalNumber(_ N: Int, _ A: Int, _ B: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nthMagicalNumber(N int, A int, B int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nthMagicalNumber(N: Int, A: Int, B: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nthMagicalNumber(N: Int, A: Int, B: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn nth_magical_number(n: i32, a: i32, b: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer $A\n     * @param Integer $B\n     * @return Integer\n     */\n    function nthMagicalNumber($N, $A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nthMagicalNumber(N: number, A: number, B: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0911", "frontend_question_id": "0879", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/profitable-schemes", "url_en": "https://leetcode.com/problems/profitable-schemes", "relative_path_cn": "/leetcode/0800-0899/0879.Profitable%20Schemes/README.md", "relative_path_en": "/leetcode/0800-0899/0879.Profitable%20Schemes/README_EN.md", "title_cn": "\u76c8\u5229\u8ba1\u5212", "title_en": "Profitable Schemes", "question_title_slug": "profitable-schemes", "content_en": "<p>There is a group of&nbsp;<code>G</code> members, and a list of various crimes they could commit.</p>\n\n<p>The <code>i<sup>th</sup></code>&nbsp;crime generates a <code>profit[i]</code> and requires <code>group[i]</code>&nbsp;members to participate in it.</p>\n\n<p>If a&nbsp;member participates in one crime, that member can&#39;t participate in another crime.</p>\n\n<p>Let&#39;s call a <em>profitable&nbsp;scheme</em>&nbsp;any subset of these crimes that generates at least <code>P</code> profit, and the total number of&nbsp;members participating in that subset of crimes is at most <code>G</code>.</p>\n\n<p>How many schemes can be chosen?&nbsp; Since the answer may be very&nbsp;large, <strong>return it modulo</strong> <code>10^9 + 7</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>G = <span id=\"example-input-1-1\">5</span>, P = <span id=\"example-input-1-2\">3</span>, group = <span id=\"example-input-1-3\">[2,2]</span>, profit = <span id=\"example-input-1-4\">[2,3]</span>\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\n<strong>Explanation: </strong>\nTo make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>G = <span id=\"example-input-2-1\">10</span>, P = <span id=\"example-input-2-2\">5</span>, group = <span id=\"example-input-2-3\">[2,3,5]</span>, profit = <span id=\"example-input-2-4\">[6,7,8]</span>\n<strong>Output: </strong><span id=\"example-output-2\">7</span>\n<strong>Explanation: </strong>\nTo make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n</pre>\n\n<p>&nbsp;</p>\n</div>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\n</ol>\n\n<div>\n<div>&nbsp;</div>\n</div>\n", "content_cn": "<p>\u5e2e\u6d3e\u91cc\u6709 G \u540d\u6210\u5458\uff0c\u4ed6\u4eec\u53ef\u80fd\u72af\u4e0b\u5404\u79cd\u5404\u6837\u7684\u7f6a\u884c\u3002</p>\n\n<p>\u7b2c&nbsp;<code>i</code>&nbsp;\u79cd\u72af\u7f6a\u4f1a\u4ea7\u751f&nbsp;<code>profit[i]</code>&nbsp;\u7684\u5229\u6da6\uff0c\u5b83\u8981\u6c42&nbsp;<code>group[i]</code>&nbsp;\u540d\u6210\u5458\u5171\u540c\u53c2\u4e0e\u3002</p>\n\n<p>\u8ba9\u6211\u4eec\u628a\u8fd9\u4e9b\u72af\u7f6a\u7684\u4efb\u4f55\u5b50\u96c6\u79f0\u4e3a\u76c8\u5229\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u81f3\u5c11\u4ea7\u751f&nbsp;<code>P</code> \u7684\u5229\u6da6\u3002</p>\n\n<p>\u6709\u591a\u5c11\u79cd\u65b9\u6848\u53ef\u4ee5\u9009\u62e9\uff1f\u56e0\u4e3a\u7b54\u6848\u5f88\u5927\uff0c\u6240\u4ee5<strong>\u8fd4\u56de\u5b83\u6a21&nbsp;</strong><code>10^9 + 7</code><strong>&nbsp;\u7684\u503c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>G = 5, P = 3, group = [2,2], profit = [2,3]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\n\u81f3\u5c11\u4ea7\u751f 3 \u7684\u5229\u6da6\uff0c\u8be5\u5e2e\u6d3e\u53ef\u4ee5\u72af\u4e0b\u7f6a 0 \u548c\u7f6a 1 \uff0c\u6216\u4ec5\u72af\u4e0b\u7f6a 1 \u3002\n\u603b\u7684\u6765\u8bf4\uff0c\u6709\u4e24\u79cd\u65b9\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\n\u81f3\u5c11\u4ea7\u751f 5 \u7684\u5229\u6da6\uff0c\u53ea\u8981\u4ed6\u4eec\u72af\u5176\u4e2d\u4e00\u79cd\u7f6a\u5c31\u884c\uff0c\u6240\u4ee5\u8be5\u5e2e\u6d3e\u53ef\u4ee5\u72af\u4e0b\u4efb\u4f55\u7f6a\u884c \u3002\n\u6709 7 \u79cd\u53ef\u80fd\u7684\u8ba1\u5212\uff1a(0)\uff0c(1)\uff0c(2)\uff0c(0,1)\uff0c(0,2)\uff0c(1,2)\uff0c\u4ee5\u53ca (0,1,2) \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int profitableSchemes(int G, int P, int[] group, int[] profit) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def profitableSchemes(self, G, P, group, profit):\n        \"\"\"\n        :type G: int\n        :type P: int\n        :type group: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint profitableSchemes(int G, int P, int* group, int groupSize, int* profit, int profitSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ProfitableSchemes(int G, int P, int[] group, int[] profit) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} G\n * @param {number} P\n * @param {number[]} group\n * @param {number[]} profit\n * @return {number}\n */\nvar profitableSchemes = function(G, P, group, profit) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} g\n# @param {Integer} p\n# @param {Integer[]} group\n# @param {Integer[]} profit\n# @return {Integer}\ndef profitable_schemes(g, p, group, profit)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func profitableSchemes(_ G: Int, _ P: Int, _ group: [Int], _ profit: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func profitableSchemes(G int, P int, group []int, profit []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def profitableSchemes(G: Int, P: Int, group: Array[Int], profit: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun profitableSchemes(G: Int, P: Int, group: IntArray, profit: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn profitable_schemes(g: i32, p: i32, group: Vec<i32>, profit: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $G\n     * @param Integer $P\n     * @param Integer[] $group\n     * @param Integer[] $profit\n     * @return Integer\n     */\n    function profitableSchemes($G, $P, $group, $profit) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function profitableSchemes(G: number, P: number, group: number[], profit: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0916", "frontend_question_id": "0880", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/decoded-string-at-index", "url_en": "https://leetcode.com/problems/decoded-string-at-index", "relative_path_cn": "/leetcode/0800-0899/0880.Decoded%20String%20at%20Index/README.md", "relative_path_en": "/leetcode/0800-0899/0880.Decoded%20String%20at%20Index/README_EN.md", "title_cn": "\u7d22\u5f15\u5904\u7684\u89e3\u7801\u5b57\u7b26\u4e32", "title_en": "Decoded String at Index", "question_title_slug": "decoded-string-at-index", "content_en": "<p>An encoded string <code>S</code> is given.&nbsp; To find and write the <em>decoded</em> string to a tape, the encoded string is read <strong>one character at a time</strong>&nbsp;and the following steps are taken:</p>\n\n<ul>\n\t<li>If the character read is a letter, that letter is written onto the tape.</li>\n\t<li>If the character read is a digit (say <code>d</code>), the entire current tape is repeatedly written&nbsp;<code>d-1</code>&nbsp;more times in total.</li>\n</ul>\n\n<p>Now for some encoded string <code>S</code>, and an index <code>K</code>, find and return the <code>K</code>-th letter (1 indexed) in the decoded string.</p>\n\n<p>&nbsp;</p>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;leet2code3&quot;</span>, K = <span id=\"example-input-1-2\">10</span>\n<strong>Output: </strong><span id=\"example-output-1\">&quot;o&quot;</span>\n<strong>Explanation: </strong>\nThe decoded string is &quot;leetleetcodeleetleetcodeleetleetcode&quot;.\nThe 10th letter in the string is &quot;o&quot;.\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;ha22&quot;</span>, K = <span id=\"example-input-2-2\">5</span>\n<strong>Output: </strong><span id=\"example-output-2\">&quot;h&quot;</span>\n<strong>Explanation: </strong>\nThe decoded string is &quot;hahahaha&quot;.  The 5th letter is &quot;h&quot;.\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;a2345678999999999999999&quot;</span>, K = <span id=\"example-input-3-2\">1</span>\n<strong>Output: </strong><span id=\"example-output-3\">&quot;a&quot;</span>\n<strong>Explanation: </strong>\nThe decoded string is &quot;a&quot; repeated 8301530446056247680 times.  The 1st letter is &quot;a&quot;.\n</pre>\n</div>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;will only contain lowercase letters and digits <code>2</code> through <code>9</code>.</li>\n\t<li><code>S</code>&nbsp;starts with a letter.</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>It&#39;s guaranteed that <code>K</code>&nbsp;is less than or equal to the length of the decoded string.</li>\n\t<li>The decoded string is guaranteed to have less than <code>2^63</code> letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7f16\u7801\u5b57\u7b26\u4e32 <code>S</code>\u3002\u8bf7\u4f60\u627e\u51fa<em> </em><strong>\u89e3\u7801\u5b57\u7b26\u4e32</strong> \u5e76\u5c06\u5176\u5199\u5165\u78c1\u5e26\u3002\u89e3\u7801\u65f6\uff0c\u4ece\u7f16\u7801\u5b57\u7b26\u4e32\u4e2d<strong> \u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 </strong>\uff0c\u5e76\u91c7\u53d6\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u6240\u8bfb\u7684\u5b57\u7b26\u662f\u5b57\u6bcd\uff0c\u5219\u5c06\u8be5\u5b57\u6bcd\u5199\u5728\u78c1\u5e26\u4e0a\u3002</li>\n\t<li>\u5982\u679c\u6240\u8bfb\u7684\u5b57\u7b26\u662f\u6570\u5b57\uff08\u4f8b\u5982 <code>d</code>\uff09\uff0c\u5219\u6574\u4e2a\u5f53\u524d\u78c1\u5e26\u603b\u5171\u4f1a\u88ab\u91cd\u590d\u5199&nbsp;<code>d-1</code> \u6b21\u3002</li>\n</ul>\n\n<p>\u73b0\u5728\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f16\u7801\u5b57\u7b26\u4e32 <code>S</code> \u548c\u7d22\u5f15 <code>K</code>\uff0c\u67e5\u627e\u5e76\u8fd4\u56de\u89e3\u7801\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c&nbsp;<code>K</code>&nbsp;\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;leet2code3&quot;, K = 10\n<strong>\u8f93\u51fa\uff1a</strong>&quot;o&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;leetleetcodeleetleetcodeleetleetcode&quot;\u3002\n\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c 10 \u4e2a\u5b57\u6bcd\u662f &quot;o&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ha22&quot;, K = 5\n<strong>\u8f93\u51fa\uff1a</strong>&quot;h&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;hahahaha&quot;\u3002\u7b2c 5 \u4e2a\u5b57\u6bcd\u662f &quot;h&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a2345678999999999999999&quot;, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;a&quot; \u91cd\u590d 8301530446056247680 \u6b21\u3002\u7b2c 1 \u4e2a\u5b57\u6bcd\u662f &quot;a&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u4e0e\u6570\u5b57 <code>2</code> \u5230 <code>9</code> \u3002</li>\n\t<li><code>S</code>&nbsp;\u4ee5\u5b57\u6bcd\u5f00\u5934\u3002</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>\u9898\u76ee\u4fdd\u8bc1 <code>K</code> \u5c0f\u4e8e\u6216\u7b49\u4e8e\u89e3\u7801\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4fdd\u8bc1\u5c11\u4e8e&nbsp;<code>2^63</code>&nbsp;\u4e2a\u5b57\u6bcd\u3002</li>\n</ul>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string decodeAtIndex(string S, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String decodeAtIndex(String S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def decodeAtIndex(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * decodeAtIndex(char * S, int K){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string DecodeAtIndex(string S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar decodeAtIndex = function(S, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func decodeAtIndex(_ S: String, _ K: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func decodeAtIndex(S string, K int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def decodeAtIndex(S: String, K: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun decodeAtIndex(S: String, K: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn decode_at_index(s: String, k: i32) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function decodeAtIndex($S, $K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function decodeAtIndex(S: string, K: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0917", "frontend_question_id": "0881", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/boats-to-save-people", "url_en": "https://leetcode.com/problems/boats-to-save-people", "relative_path_cn": "/leetcode/0800-0899/0881.Boats%20to%20Save%20People/README.md", "relative_path_en": "/leetcode/0800-0899/0881.Boats%20to%20Save%20People/README_EN.md", "title_cn": "\u6551\u751f\u8247", "title_en": "Boats to Save People", "question_title_slug": "boats-to-save-people", "content_en": "<p>The <code>i</code>-th person has weight <code>people[i]</code>, and each boat can carry a maximum weight of <code>limit</code>.</p>\r\n\r\n<p>Each boat carries at most 2 people at the same time, provided the sum of the&nbsp;weight of those people is at most <code>limit</code>.</p>\r\n\r\n<p>Return the minimum number of boats to carry every given person.&nbsp; (It is guaranteed each person can be carried by a boat.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-1-1\">[1,2]</span>, limit = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>1 boat (1, 2)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-2-1\">[3,2,2,1]</span>, limit = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation</strong>: 3 boats (1, 2), (2) and (3)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-3-1\">[3,5,3,4]</span>, limit = <span id=\"example-input-3-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation</strong>: 4 boats (3), (3), (4), (5)</pre>\r\n\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7b2c&nbsp;<code>i</code>&nbsp;\u4e2a\u4eba\u7684\u4f53\u91cd\u4e3a&nbsp;<code>people[i]</code>\uff0c\u6bcf\u8258\u8239\u53ef\u4ee5\u627f\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a&nbsp;<code>limit</code>\u3002</p>\n\n<p>\u6bcf\u8258\u8239\u6700\u591a\u53ef\u540c\u65f6\u8f7d\u4e24\u4eba\uff0c\u4f46\u6761\u4ef6\u662f\u8fd9\u4e9b\u4eba\u7684\u91cd\u91cf\u4e4b\u548c\u6700\u591a\u4e3a&nbsp;<code>limit</code>\u3002</p>\n\n<p>\u8fd4\u56de\u8f7d\u5230\u6bcf\u4e00\u4e2a\u4eba\u6240\u9700\u7684\u6700\u5c0f\u8239\u6570\u3002(\u4fdd\u8bc1\u6bcf\u4e2a\u4eba\u90fd\u80fd\u88ab\u8239\u8f7d)\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [1,2], limit = 3\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>1 \u8258\u8239\u8f7d (1, 2)\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [3,2,2,1], limit = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u8258\u8239\u5206\u522b\u8f7d (1, 2), (2) \u548c (3)\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [3,5,3,4], limit = 5\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>4 \u8258\u8239\u5206\u522b\u8f7d (3), (3), (4), (5)</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\n</ul>\n", "tags_en": ["Greedy", "Two Pointers"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numRescueBoats(vector<int>& people, int limit) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numRescueBoats(int[] people, int limit) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numRescueBoats(self, people, limit):\n        \"\"\"\n        :type people: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numRescueBoats(int* people, int peopleSize, int limit){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumRescueBoats(int[] people, int limit) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} people\n# @param {Integer} limit\n# @return {Integer}\ndef num_rescue_boats(people, limit)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numRescueBoats(_ people: [Int], _ limit: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numRescueBoats(people []int, limit int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numRescueBoats(people: Array[Int], limit: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numRescueBoats(people: IntArray, limit: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_rescue_boats(people: Vec<i32>, limit: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $people\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numRescueBoats($people, $limit) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numRescueBoats(people: number[], limit: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0918", "frontend_question_id": "0882", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reachable-nodes-in-subdivided-graph", "url_en": "https://leetcode.com/problems/reachable-nodes-in-subdivided-graph", "relative_path_cn": "/leetcode/0800-0899/0882.Reachable%20Nodes%20In%20Subdivided%20Graph/README.md", "relative_path_en": "/leetcode/0800-0899/0882.Reachable%20Nodes%20In%20Subdivided%20Graph/README_EN.md", "title_cn": "\u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u7ed3\u70b9", "title_en": "Reachable Nodes In Subdivided Graph", "question_title_slug": "reachable-nodes-in-subdivided-graph", "content_en": "<p>Starting with an&nbsp;<strong>undirected</strong> graph (the &quot;original graph&quot;) with nodes from <code>0</code> to <code>N-1</code>, subdivisions are made to some of the edges.</p>\r\n\r\n<p>The graph is given as follows: <code>edges[k]</code> is a list of integer pairs <code>(i, j, n)</code> such that <code>(i, j)</code> is an edge of the original graph,</p>\r\n\r\n<p>and <code>n</code> is the total number of <strong>new</strong> nodes on that edge.&nbsp;</p>\r\n\r\n<p>Then, the edge <code>(i, j)</code> is deleted from the original graph,&nbsp;<code>n</code>&nbsp;new nodes <code>(x_1, x_2, ..., x_n)</code> are added to the original graph,</p>\r\n\r\n<p>and <code>n+1</code> new&nbsp;edges <code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;are added to the original&nbsp;graph.</p>\r\n\r\n<p>Now, you start at node <code>0</code>&nbsp;from the original graph, and in each move, you travel along one&nbsp;edge.&nbsp;</p>\r\n\r\n<p>Return how many nodes you can reach in at most <code>M</code> moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-1-1\">[[0,1,10],[0,2,1],[1,2,2]]</span>, M = <span id=\"example-input-1-2\">6</span>, N = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">13</span>\r\n<strong>Explanation: </strong>\r\nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\r\n<span><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"width: 487px; height: 200px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-2-1\">[[0,1,4],[1,2,6],[0,2,8],[1,3,1]]</span>, M = <span id=\"example-input-2-2\">10</span>, N = <span id=\"example-input-2-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\r\n\t<li>There does not exist any&nbsp;<code>i != j</code> for which <code>edges[i][0] == edges[j][0]</code> and <code>edges[i][1] == edges[j][1]</code>.</li>\r\n\t<li>The original graph&nbsp;has no parallel edges.</li>\r\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\r\n\t<li><code><font face=\"monospace\">1 &lt;= N &lt;= 3000</font></code></li>\r\n\t<li>A reachable node is a node that can be travelled to&nbsp;using at most&nbsp;M moves starting from&nbsp;node 0.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u4ece\u5177\u6709&nbsp;<code>0</code> \u5230 <code>N-1</code> \u7684\u7ed3\u70b9\u7684<strong>\u65e0\u5411</strong>\u56fe\uff08&ldquo;\u539f\u59cb\u56fe&rdquo;\uff09\u5f00\u59cb\uff0c\u5bf9\u4e00\u4e9b\u8fb9\u8fdb\u884c\u7ec6\u5206\u3002</p>\n\n<p>\u8be5\u56fe\u7ed9\u51fa\u5982\u4e0b\uff1a<code>edges[k]</code>&nbsp;\u662f\u6574\u6570\u5bf9&nbsp;<code>(i, j, n)</code>&nbsp;\u7ec4\u6210\u7684\u5217\u8868\uff0c\u4f7f&nbsp;<code>(i, j)</code> \u662f\u539f\u59cb\u56fe\u7684\u8fb9\u3002</p>\n\n<p><code>n</code> \u662f\u8be5\u8fb9\u4e0a<strong>\u65b0</strong>\u7ed3\u70b9\u7684\u603b\u6570</p>\n\n<p>\u7136\u540e\uff0c\u5c06\u8fb9&nbsp;<code>(i, j)</code>&nbsp;\u4ece\u539f\u59cb\u56fe\u4e2d\u5220\u9664\uff0c\u5c06&nbsp;<code>n</code>&nbsp;\u4e2a\u65b0\u7ed3\u70b9&nbsp;<code>(x_1, x_2, ..., x_n)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\uff0c</p>\n\n<p>\u5c06&nbsp;<code>n+1</code>&nbsp;\u6761\u65b0\u8fb9&nbsp;<code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u4f60\u5c06\u4ece\u539f\u59cb\u56fe\u4e2d\u7684\u7ed3\u70b9&nbsp;<code>0</code>&nbsp;\u5904\u51fa\u53d1\uff0c\u5e76\u4e14\u6bcf\u6b21\u79fb\u52a8\uff0c\u4f60\u90fd\u5c06\u6cbf\u7740\u4e00\u6761\u8fb9\u884c\u8fdb\u3002</p>\n\n<p>\u8fd4\u56de\u6700\u591a <code>M</code> \u6b21\u79fb\u52a8\u53ef\u4ee5\u8fbe\u5230\u7684\u7ed3\u70b9\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\n<strong>\u8f93\u51fa\uff1a</strong>13\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728 M = 6 \u6b21\u79fb\u52a8\u4e4b\u540e\u5728\u6700\u7ec8\u56fe\u4e2d\u53ef\u5230\u8fbe\u7684\u7ed3\u70b9\u5982\u4e0b\u6240\u793a\u3002\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"height: 200px; width: 487px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\n<strong>\u8f93\u51fa\uff1a</strong>23</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\n\t<li>\u4e0d\u5b58\u5728\u4efb\u4f55&nbsp;<code>i != j</code>&nbsp;\u60c5\u51b5\u4e0b&nbsp;<code>edges[i][0] == edges[j][0]</code>&nbsp;\u4e14&nbsp;<code>edges[i][1] == edges[j][1]</code>.</li>\n\t<li>\u539f\u59cb\u56fe\u6ca1\u6709\u5e73\u884c\u7684\u8fb9\u3002</li>\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= N &lt;= 3000</code></li>\n\t<li>\u53ef\u5230\u8fbe\u7ed3\u70b9\u662f\u53ef\u4ee5\u4ece\u7ed3\u70b9 <code>0</code> \u5f00\u59cb\u4f7f\u7528\u6700\u591a <code>M</code> \u6b21\u79fb\u52a8\u5230\u8fbe\u7684\u7ed3\u70b9\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Heap"], "tags_cn": ["\u5806"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int M, int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int reachableNodes(int[][] edges, int M, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reachableNodes(self, edges, M, N):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type M: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reachableNodes(self, edges: List[List[int]], M: int, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint reachableNodes(int** edges, int edgesSize, int* edgesColSize, int M, int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ReachableNodes(int[][] edges, int M, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} edges\n * @param {number} M\n * @param {number} N\n * @return {number}\n */\nvar reachableNodes = function(edges, M, N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} edges\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef reachable_nodes(edges, m, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reachableNodes(_ edges: [[Int]], _ M: Int, _ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reachableNodes(edges [][]int, M int, N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reachableNodes(edges: Array[Array[Int]], M: Int, N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reachableNodes(edges: Array<IntArray>, M: Int, N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reachable_nodes(edges: Vec<Vec<i32>>, m: i32, n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $M\n     * @param Integer $N\n     * @return Integer\n     */\n    function reachableNodes($edges, $M, $N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reachableNodes(edges: number[][], M: number, N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0919", "frontend_question_id": "0883", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/projection-area-of-3d-shapes", "url_en": "https://leetcode.com/problems/projection-area-of-3d-shapes", "relative_path_cn": "/leetcode/0800-0899/0883.Projection%20Area%20of%203D%20Shapes/README.md", "relative_path_en": "/leetcode/0800-0899/0883.Projection%20Area%20of%203D%20Shapes/README_EN.md", "title_cn": "\u4e09\u7ef4\u5f62\u4f53\u6295\u5f71\u9762\u79ef", "title_en": "Projection Area of 3D Shapes", "question_title_slug": "projection-area-of-3d-shapes", "content_en": "<p>On a&nbsp;<code>N&nbsp;*&nbsp;N</code> grid, we place some&nbsp;<code>1 * 1 * 1&nbsp;</code>cubes that are axis-aligned with the x, y, and z axes.</p>\r\n\r\n<p>Each value&nbsp;<code>v = grid[i][j]</code>&nbsp;represents a tower of&nbsp;<code>v</code>&nbsp;cubes placed on top of grid cell <code>(i, j)</code>.</p>\r\n\r\n<p>Now we view the&nbsp;<em>projection</em>&nbsp;of these cubes&nbsp;onto the xy, yz, and zx planes.</p>\r\n\r\n<p>A projection is like a shadow, that&nbsp;maps our 3 dimensional figure to a 2 dimensional plane.&nbsp;</p>\r\n\r\n<p>Here, we are viewing the &quot;shadow&quot; when looking at the cubes from the top, the front, and the side.</p>\r\n\r\n<p>Return the total area of all three projections.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2],[3,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\r\n<strong>Explanation: </strong>\r\nHere are the three projections (&quot;shadows&quot;) of the shape made with each axis-aligned plane.\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 749px; height: 200px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[1,0],[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">8</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[1,1,1],[1,0,1],[1,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">14</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[[2,2,2],[2,1,2],[2,2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">21</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><span><strong>Note:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5728&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;\u7684\u7f51\u683c\u4e2d\uff0c\u6211\u4eec\u653e\u7f6e\u4e86\u4e00\u4e9b\u4e0e x\uff0cy\uff0cz \u4e09\u8f74\u5bf9\u9f50\u7684&nbsp;<code>1 * 1 * 1</code>&nbsp;\u7acb\u65b9\u4f53\u3002</p>\n\n<p>\u6bcf\u4e2a\u503c&nbsp;<code>v = grid[i][j]</code>&nbsp;\u8868\u793a <code>v</code>&nbsp;\u4e2a\u6b63\u65b9\u4f53\u53e0\u653e\u5728\u5355\u5143\u683c&nbsp;<code>(i, j)</code>&nbsp;\u4e0a\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u67e5\u770b\u8fd9\u4e9b\u7acb\u65b9\u4f53\u5728 xy\u3001yz&nbsp;\u548c zx&nbsp;\u5e73\u9762\u4e0a\u7684<em>\u6295\u5f71</em>\u3002</p>\n\n<p>\u6295\u5f71\u5c31\u50cf\u5f71\u5b50\uff0c\u5c06\u4e09\u7ef4\u5f62\u4f53\u6620\u5c04\u5230\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u3002</p>\n\n<p>\u5728\u8fd9\u91cc\uff0c\u4ece\u9876\u90e8\u3001\u524d\u9762\u548c\u4fa7\u9762\u770b\u7acb\u65b9\u4f53\u65f6\uff0c\u6211\u4eec\u4f1a\u770b\u5230&ldquo;\u5f71\u5b50&rdquo;\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u6709\u4e09\u4e2a\u6295\u5f71\u7684\u603b\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[3,4]]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8fd9\u91cc\u6709\u8be5\u5f62\u4f53\u5728\u4e09\u4e2a\u8f74\u5bf9\u9f50\u5e73\u9762\u4e0a\u7684\u4e09\u4e2a\u6295\u5f71(&ldquo;\u9634\u5f71\u90e8\u5206&rdquo;)\u3002\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"height: 200px; width: 749px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0],[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>14\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int projectionArea(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int projectionArea(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint projectionArea(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ProjectionArea(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar projectionArea = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef projection_area(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func projectionArea(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func projectionArea(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def projectionArea(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun projectionArea(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function projectionArea($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function projectionArea(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0920", "frontend_question_id": "0884", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/uncommon-words-from-two-sentences", "url_en": "https://leetcode.com/problems/uncommon-words-from-two-sentences", "relative_path_cn": "/leetcode/0800-0899/0884.Uncommon%20Words%20from%20Two%20Sentences/README.md", "relative_path_en": "/leetcode/0800-0899/0884.Uncommon%20Words%20from%20Two%20Sentences/README_EN.md", "title_cn": "\u4e24\u53e5\u8bdd\u4e2d\u7684\u4e0d\u5e38\u89c1\u5355\u8bcd", "title_en": "Uncommon Words from Two Sentences", "question_title_slug": "uncommon-words-from-two-sentences", "content_en": "<p>We are given two sentences <code>A</code> and <code>B</code>.&nbsp; (A <em>sentence</em>&nbsp;is a string of space separated words.&nbsp; Each <em>word</em> consists only of lowercase letters.)</p>\r\n\r\n<p>A word is <em>uncommon</em>&nbsp;if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p>\r\n\r\n<p>Return a list of all uncommon words.&nbsp;</p>\r\n\r\n<p>You may return the list in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">&quot;this apple is sweet&quot;</span>, B = <span id=\"example-input-1-2\">&quot;this apple is sour&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;sweet&quot;,&quot;sour&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">&quot;apple apple&quot;</span>, B = <span id=\"example-input-2-2\">&quot;banana&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;banana&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 200</code></li>\r\n\t<li><code>0 &lt;= B.length &lt;= 200</code></li>\r\n\t<li><code>A</code> and <code>B</code> both contain only spaces and lowercase letters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u53e5\u5b50&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u3002&nbsp;\uff08<em>\u53e5\u5b50</em>\u662f\u4e00\u4e32\u7531\u7a7a\u683c\u5206\u9694\u7684\u5355\u8bcd\u3002\u6bcf\u4e2a<em>\u5355\u8bcd</em>\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\uff09</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5355\u8bcd\u5728\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5728\u53e6\u4e00\u4e2a\u53e5\u5b50\u4e2d\u5374\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5355\u8bcd\u5c31\u662f<em>\u4e0d\u5e38\u89c1\u7684</em>\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u6709\u4e0d\u5e38\u7528\u5355\u8bcd\u7684\u5217\u8868\u3002</p>\n\n<p>\u60a8\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;this apple is sweet&quot;, B = &quot;this apple is sour&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;sweet&quot;,&quot;sour&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;apple apple&quot;, B = &quot;banana&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;banana&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 200</code></li>\n\t<li><code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u53ea\u5305\u542b\u7a7a\u683c\u548c\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> uncommonFromSentences(string A, string B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] uncommonFromSentences(String A, String B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def uncommonFromSentences(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def uncommonFromSentences(self, A: str, B: str) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** uncommonFromSentences(char * A, char * B, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] UncommonFromSentences(string A, string B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} A\n * @param {string} B\n * @return {string[]}\n */\nvar uncommonFromSentences = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {String[]}\ndef uncommon_from_sentences(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func uncommonFromSentences(_ A: String, _ B: String) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func uncommonFromSentences(A string, B string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def uncommonFromSentences(A: String, B: String): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun uncommonFromSentences(A: String, B: String): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn uncommon_from_sentences(a: String, b: String) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $A\n     * @param String $B\n     * @return String[]\n     */\n    function uncommonFromSentences($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function uncommonFromSentences(A: string, B: string): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0921", "frontend_question_id": "0885", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/spiral-matrix-iii", "url_en": "https://leetcode.com/problems/spiral-matrix-iii", "relative_path_cn": "/leetcode/0800-0899/0885.Spiral%20Matrix%20III/README.md", "relative_path_en": "/leetcode/0800-0899/0885.Spiral%20Matrix%20III/README_EN.md", "title_cn": "\u87ba\u65cb\u77e9\u9635 III", "title_en": "Spiral Matrix III", "question_title_slug": "spiral-matrix-iii", "content_en": "<p>On a 2 dimensional grid with <code>R</code> rows and <code>C</code> columns, we start at <code>(r0, c0)</code> facing east.</p>\r\n\r\n<p>Here, the north-west corner of the grid is at the&nbsp;first row and column, and the south-east corner of the grid is at the last row and column.</p>\r\n\r\n<p>Now, we walk in a clockwise spiral shape to visit every position in this grid.&nbsp;</p>\r\n\r\n<p>Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.)&nbsp;</p>\r\n\r\n<p>Eventually, we reach all <code>R * C</code> spaces of the grid.</p>\r\n\r\n<p>Return a list of coordinates representing the positions of the grid in the order they were visited.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-1-1\">1</span>, C = <span id=\"example-input-1-2\">4</span>, r0 = <span id=\"example-input-1-3\">0</span>, c0 = <span id=\"example-input-1-4\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,0],[0,1],[0,2],[0,3]]</span>\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png\" style=\"width: 174px; height: 99px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-2-1\">5</span>, C = <span id=\"example-input-2-2\">6</span>, r0 = <span id=\"example-input-2-3\">1</span>, c0 = <span id=\"example-input-2-4\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]</span>\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png\" style=\"width: 202px; height: 142px;\" />\r\n</pre>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\r\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\r\n</ol>\r\n</div>\r\n</div>", "content_cn": "<p>\u5728&nbsp;<code>R</code>&nbsp;\u884c&nbsp;<code>C</code>&nbsp;\u5217\u7684\u77e9\u9635\u4e0a\uff0c\u6211\u4eec\u4ece&nbsp;<code>(r0, c0)</code>&nbsp;\u9762\u671d\u4e1c\u9762\u5f00\u59cb</p>\n\n<p>\u8fd9\u91cc\uff0c\u7f51\u683c\u7684\u897f\u5317\u89d2\u4f4d\u4e8e\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\uff0c\u7f51\u683c\u7684\u4e1c\u5357\u89d2\u4f4d\u4e8e\u6700\u540e\u4e00\u884c\u6700\u540e\u4e00\u5217\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u4ee5\u987a\u65f6\u9488\u6309\u87ba\u65cb\u72b6\u884c\u8d70\uff0c\u8bbf\u95ee\u6b64\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6bcf\u5f53\u6211\u4eec\u79fb\u52a8\u5230\u7f51\u683c\u7684\u8fb9\u754c\u4e4b\u5916\u65f6\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u5728\u7f51\u683c\u4e4b\u5916\u884c\u8d70\uff08\u4f46\u7a0d\u540e\u53ef\u80fd\u4f1a\u8fd4\u56de\u5230\u7f51\u683c\u8fb9\u754c\uff09\u3002</p>\n\n<p>\u6700\u7ec8\uff0c\u6211\u4eec\u5230\u8fc7\u7f51\u683c\u7684\u6240\u6709&nbsp;<code>R * C</code>&nbsp;\u4e2a\u7a7a\u95f4\u3002</p>\n\n<p>\u6309\u7167\u8bbf\u95ee\u987a\u5e8f\u8fd4\u56de\u8868\u793a\u7f51\u683c\u4f4d\u7f6e\u7684\u5750\u6807\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>R = 1, C = 4, r0 = 0, c0 = 0\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0],[0,1],[0,2],[0,3]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_1.png\" style=\"height: 99px; width: 174px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>R = 5, C = 6, r0 = 1, c0 = 4\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_2.png\" style=\"height: 142px; width: 202px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def spiralMatrixIII(self, R, C, r0, c0):\n        \"\"\"\n        :type R: int\n        :type C: int\n        :type r0: int\n        :type c0: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def spiralMatrixIII(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** spiralMatrixIII(int R, int C, int r0, int c0, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] SpiralMatrixIII(int R, int C, int r0, int c0) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} R\n * @param {number} C\n * @param {number} r0\n * @param {number} c0\n * @return {number[][]}\n */\nvar spiralMatrixIII = function(R, C, r0, c0) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} r\n# @param {Integer} c\n# @param {Integer} r0\n# @param {Integer} c0\n# @return {Integer[][]}\ndef spiral_matrix_iii(r, c, r0, c0)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func spiralMatrixIII(_ R: Int, _ C: Int, _ r0: Int, _ c0: Int) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func spiralMatrixIII(R int, C int, r0 int, c0 int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def spiralMatrixIII(R: Int, C: Int, r0: Int, c0: Int): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun spiralMatrixIII(R: Int, C: Int, r0: Int, c0: Int): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn spiral_matrix_iii(r: i32, c: i32, r0: i32, c0: i32) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $R\n     * @param Integer $C\n     * @param Integer $r0\n     * @param Integer $c0\n     * @return Integer[][]\n     */\n    function spiralMatrixIII($R, $C, $r0, $c0) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function spiralMatrixIII(R: number, C: number, r0: number, c0: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0922", "frontend_question_id": "0886", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/possible-bipartition", "url_en": "https://leetcode.com/problems/possible-bipartition", "relative_path_cn": "/leetcode/0800-0899/0886.Possible%20Bipartition/README.md", "relative_path_en": "/leetcode/0800-0899/0886.Possible%20Bipartition/README_EN.md", "title_cn": "\u53ef\u80fd\u7684\u4e8c\u5206\u6cd5", "title_en": "Possible Bipartition", "question_title_slug": "possible-bipartition", "content_en": "<p>Given a set of <code>N</code>&nbsp;people (numbered <code>1, 2, ..., N</code>), we would like to split everyone into two groups of <strong>any</strong> size.</p>\r\n\r\n<p>Each person may dislike some other people, and they should not go into the same group.&nbsp;</p>\r\n\r\n<p>Formally, if <code>dislikes[i] = [a, b]</code>, it means it is not allowed to put the people numbered <code>a</code> and <code>b</code> into the same group.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if it is possible to split everyone into two groups in this way.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">4</span>, dislikes = <span id=\"example-input-1-2\">[[1,2],[1,3],[2,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation</strong>: group1 [1,4], group2 [2,3]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">3</span>, dislikes = <span id=\"example-input-2-2\">[[1,2],[1,3],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">5</span>, dislikes = <span id=\"example-input-3-2\">[[1,2],[2,3],[3,4],[4,5],[1,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 2000</code></li>\r\n\t<li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>\r\n\t<li><code>dislikes[i].length == 2</code></li>\r\n\t<li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>\r\n\t<li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>\r\n\t<li>There does not exist <code>i != j</code> for which <code>dislikes[i] == dislikes[j]</code>.</li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u00a0<code>N</code>\u00a0\u4eba\uff08\u7f16\u53f7\u4e3a\u00a0<code>1, 2, ..., N</code>\uff09\uff0c\u00a0\u6211\u4eec\u60f3\u628a\u6bcf\u4e2a\u4eba\u5206\u8fdb<strong>\u4efb\u610f</strong>\u5927\u5c0f\u7684\u4e24\u7ec4\u3002</p>\n\n<p>\u6bcf\u4e2a\u4eba\u90fd\u53ef\u80fd\u4e0d\u559c\u6b22\u5176\u4ed6\u4eba\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e0d\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u7ec4\u3002</p>\n\n<p>\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c <code>dislikes[i] = [a, b]</code>\uff0c\u8868\u793a\u4e0d\u5141\u8bb8\u5c06\u7f16\u53f7\u4e3a <code>a</code> \u548c <code>b</code> \u7684\u4eba\u5f52\u5165\u540c\u4e00\u7ec4\u3002</p>\n\n<p>\u5f53\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u5c06\u6240\u6709\u4eba\u5206\u8fdb\u4e24\u7ec4\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>\u00a0</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>group1 [1,4], group2 [2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= N <= 2000</code></li>\n\t<li><code>0 <= dislikes.length <= 10000</code></li>\n\t<li><code>dislikes[i].length == 2</code></li>\n\t<li><code>1 <= dislikes[i][j] <= N</code></li>\n\t<li><code>dislikes[i][0] < dislikes[i][1]</code></li>\n\t<li>\u5bf9\u4e8e <code>dislikes[i] == dislikes[j]</code> \u4e0d\u5b58\u5728 <code>i != j</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean possibleBipartition(int N, int[][] dislikes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def possibleBipartition(self, N, dislikes):\n        \"\"\"\n        :type N: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool possibleBipartition(int N, int** dislikes, int dislikesSize, int* dislikesColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool PossibleBipartition(int N, int[][] dislikes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number[][]} dislikes\n * @return {boolean}\n */\nvar possibleBipartition = function(N, dislikes) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func possibleBipartition(_ N: Int, _ dislikes: [[Int]]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func possibleBipartition(N int, dislikes [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def possibleBipartition(N: Int, dislikes: Array[Array[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun possibleBipartition(N: Int, dislikes: Array<IntArray>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn possible_bipartition(n: i32, dislikes: Vec<Vec<i32>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $dislikes\n     * @return Boolean\n     */\n    function possibleBipartition($N, $dislikes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function possibleBipartition(N: number, dislikes: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0923", "frontend_question_id": "0887", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/super-egg-drop", "url_en": "https://leetcode.com/problems/super-egg-drop", "relative_path_cn": "/leetcode/0800-0899/0887.Super%20Egg%20Drop/README.md", "relative_path_en": "/leetcode/0800-0899/0887.Super%20Egg%20Drop/README_EN.md", "title_cn": "\u9e21\u86cb\u6389\u843d", "title_en": "Super Egg Drop", "question_title_slug": "super-egg-drop", "content_en": "<p>You are given <code>K</code> eggs, and you have access to a building with <code>N</code> floors from <code>1</code> to <code>N</code>.&nbsp;</p>\r\n\r\n<p>Each egg is identical in function, and if an egg breaks, you cannot drop it&nbsp;again.</p>\r\n\r\n<p>You know that there exists a floor <code>F</code> with <code>0 &lt;= F &lt;= N</code> such that any egg dropped at a floor higher than <code>F</code> will break, and any egg dropped at or below floor <code>F</code> will not break.</p>\r\n\r\n<p>Each <em>move</em>, you may take an egg (if you have an unbroken one) and drop it from any floor <code>X</code> (with&nbsp;<code>1 &lt;= X &lt;= N</code>).&nbsp;</p>\r\n\r\n<p>Your goal is to know&nbsp;<strong>with certainty</strong>&nbsp;what the value of <code>F</code> is.</p>\r\n\r\n<p>What is the minimum number of moves that you need to know with certainty&nbsp;what <code>F</code> is, regardless of the initial value of <code>F</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-1-1\">1</span>, N = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\r\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\r\nIf it didn&#39;t break, then we know with certainty F = 2.\r\nHence, we needed 2 moves in the worst case to know what F is with certainty.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-2-1\">2</span>, N = 6\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-3-1\">3</span>, N = <span id=\"example-input-3-2\">14</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u4f60\u5c06\u83b7\u5f97&nbsp;<code>K</code>&nbsp;\u4e2a\u9e21\u86cb\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528\u4e00\u680b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>N</code>&nbsp;&nbsp;\u5171\u6709 <code>N</code>&nbsp;\u5c42\u697c\u7684\u5efa\u7b51\u3002</p>\n\n<p>\u6bcf\u4e2a\u86cb\u7684\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u86cb\u788e\u4e86\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u628a\u5b83\u6389\u4e0b\u53bb\u3002</p>\n\n<p>\u4f60\u77e5\u9053\u5b58\u5728\u697c\u5c42&nbsp;<code>F</code> \uff0c\u6ee1\u8db3&nbsp;<code>0 &lt;= F &lt;= N</code> \u4efb\u4f55\u4ece\u9ad8\u4e8e <code>F</code>&nbsp;\u7684\u697c\u5c42\u843d\u4e0b\u7684\u9e21\u86cb\u90fd\u4f1a\u788e\uff0c\u4ece&nbsp;<code>F</code>&nbsp;\u697c\u5c42\u6216\u6bd4\u5b83\u4f4e\u7684\u697c\u5c42\u843d\u4e0b\u7684\u9e21\u86cb\u90fd\u4e0d\u4f1a\u7834\u3002</p>\n\n<p>\u6bcf\u6b21<em>\u79fb\u52a8</em>\uff0c\u4f60\u53ef\u4ee5\u53d6\u4e00\u4e2a\u9e21\u86cb\uff08\u5982\u679c\u4f60\u6709\u5b8c\u6574\u7684\u9e21\u86cb\uff09\u5e76\u628a\u5b83\u4ece\u4efb\u4e00\u697c\u5c42&nbsp;<code>X</code>&nbsp;\u6254\u4e0b\uff08\u6ee1\u8db3&nbsp;<code>1 &lt;= X &lt;= N</code>\uff09\u3002</p>\n\n<p>\u4f60\u7684\u76ee\u6807\u662f<strong>\u786e\u5207\u5730</strong>\u77e5\u9053 <code>F</code> \u7684\u503c\u662f\u591a\u5c11\u3002</p>\n\n<p>\u65e0\u8bba <code>F</code> \u7684\u521d\u59cb\u503c\u5982\u4f55\uff0c\u4f60\u786e\u5b9a <code>F</code> \u7684\u503c\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 1, N = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9e21\u86cb\u4ece 1 \u697c\u6389\u843d\u3002\u5982\u679c\u5b83\u788e\u4e86\uff0c\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 0 \u3002\n\u5426\u5219\uff0c\u9e21\u86cb\u4ece 2 \u697c\u6389\u843d\u3002\u5982\u679c\u5b83\u788e\u4e86\uff0c\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 1 \u3002\n\u5982\u679c\u5b83\u6ca1\u788e\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 2 \u3002\n\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u9700\u8981\u79fb\u52a8 2 \u6b21\u4ee5\u786e\u5b9a F \u662f\u591a\u5c11\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 2, N = 6\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 3, N = 14\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n</ol>\n", "tags_en": ["Math", "Binary Search", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int superEggDrop(int K, int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int superEggDrop(int K, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def superEggDrop(self, K, N):\n        \"\"\"\n        :type K: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint superEggDrop(int K, int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SuperEggDrop(int K, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} K\n * @param {number} N\n * @return {number}\n */\nvar superEggDrop = function(K, N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} n\n# @return {Integer}\ndef super_egg_drop(k, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func superEggDrop(_ K: Int, _ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func superEggDrop(K int, N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def superEggDrop(K: Int, N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun superEggDrop(K: Int, N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn super_egg_drop(k: i32, n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $K\n     * @param Integer $N\n     * @return Integer\n     */\n    function superEggDrop($K, $N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function superEggDrop(K: number, N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0924", "frontend_question_id": "0888", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/fair-candy-swap", "url_en": "https://leetcode.com/problems/fair-candy-swap", "relative_path_cn": "/leetcode/0800-0899/0888.Fair%20Candy%20Swap/README.md", "relative_path_en": "/leetcode/0800-0899/0888.Fair%20Candy%20Swap/README_EN.md", "title_cn": "\u516c\u5e73\u7684\u7cd6\u679c\u4ea4\u6362", "title_en": "Fair Candy Swap", "question_title_slug": "fair-candy-swap", "content_en": "<p>Alice and Bob have candy bars of different sizes: <code>A[i]</code> is the size of the <code>i</code>-th bar of candy that Alice has, and <code>B[j]</code> is the size of the <code>j</code>-th bar of candy that Bob has.</p>\r\n\r\n<p>Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total&nbsp;amount of candy.&nbsp; (<em>The total amount of candy&nbsp;a person has is the sum of the sizes of candy&nbsp;bars they have.</em>)</p>\r\n\r\n<p>Return an integer array <code>ans</code>&nbsp;where <code>ans[0]</code> is the size of the candy bar that Alice must exchange, and <code>ans[1]</code> is the size of the candy bar that Bob must exchange.</p>\r\n\r\n<p>If there are multiple answers, you may return any one of them.&nbsp; It is guaranteed an answer exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,1]</span>, B = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2]</span>, B = <span id=\"example-input-2-2\">[2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2]</span>, B = <span id=\"example-input-3-2\">[1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[1,2,5]</span>, B = <span id=\"example-input-4-2\">[2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[5,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><span><code>1 &lt;= A.length &lt;= 10000</code></span></li>\r\n\t<li><span><code>1 &lt;= B.length &lt;= 10000</code></span></li>\r\n\t<li><code><span>1 &lt;= A[i] &lt;= 100000</span></code></li>\r\n\t<li><code><span>1 &lt;= B[i] &lt;= 100000</span></code></li>\r\n\t<li>It is guaranteed that Alice and Bob have different total amounts of&nbsp;candy.</li>\r\n\t<li>It is guaranteed there exists an&nbsp;answer.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u6709\u4e0d\u540c\u5927\u5c0f\u7684\u7cd6\u679c\u68d2\uff1a<code>A[i]</code> \u662f\u7231\u4e3d\u4e1d\u62e5\u6709\u7684\u7b2c <code>i</code>&nbsp;\u5757\u7cd6\u7684\u5927\u5c0f\uff0c<code>B[j]</code> \u662f\u9c8d\u52c3\u62e5\u6709\u7684\u7b2c <code>j</code>&nbsp;\u5757\u7cd6\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u56e0\u4e3a\u4ed6\u4eec\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u60f3\u4ea4\u6362\u4e00\u4e2a\u7cd6\u679c\u68d2\uff0c\u8fd9\u6837\u4ea4\u6362\u540e\uff0c\u4ed6\u4eec\u90fd\u6709\u76f8\u540c\u7684\u7cd6\u679c\u603b\u91cf\u3002<em>\uff08\u4e00\u4e2a\u4eba\u62e5\u6709\u7684\u7cd6\u679c\u603b\u91cf\u662f\u4ed6\u4eec\u62e5\u6709\u7684\u7cd6\u679c\u68d2\u5927\u5c0f\u7684\u603b\u548c\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>ans</code>\uff0c\u5176\u4e2d <code>ans[0]</code> \u662f\u7231\u4e3d\u4e1d\u5fc5\u987b\u4ea4\u6362\u7684\u7cd6\u679c\u68d2\u7684\u5927\u5c0f\uff0c<code>ans[1]</code>&nbsp;\u662f Bob \u5fc5\u987b\u4ea4\u6362\u7684\u7cd6\u679c\u68d2\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\u4fdd\u8bc1\u7b54\u6848\u5b58\u5728\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1], B = [2,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2], B = [2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2], B = [1,3]\n<strong>\u8f93\u51fa\uff1a</strong>[2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,5], B = [2,4]\n<strong>\u8f93\u51fa\uff1a</strong>[5,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\n\t<li><code>1 &lt;= B[i] &lt;= 100000</code></li>\n\t<li>\u4fdd\u8bc1\u7231\u4e3d\u4e1d\u4e0e\u9c8d\u52c3\u7684\u7cd6\u679c\u603b\u91cf\u4e0d\u540c\u3002</li>\n\t<li>\u7b54\u6848\u80af\u5b9a\u5b58\u5728\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> fairCandySwap(vector<int>& A, vector<int>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] fairCandySwap(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fairCandySwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fairCandySwap(self, A: List[int], B: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* fairCandySwap(int* A, int ASize, int* B, int BSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FairCandySwap(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number[]}\n */\nvar fairCandySwap = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef fair_candy_swap(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fairCandySwap(_ A: [Int], _ B: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fairCandySwap(A []int, B []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fairCandySwap(A: Array[Int], B: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fairCandySwap(A: IntArray, B: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fair_candy_swap(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer[]\n     */\n    function fairCandySwap($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fairCandySwap(A: number[], B: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0925", "frontend_question_id": "0889", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal", "url_en": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal", "relative_path_cn": "/leetcode/0800-0899/0889.Construct%20Binary%20Tree%20from%20Preorder%20and%20Postorder%20Traversal/README.md", "relative_path_en": "/leetcode/0800-0899/0889.Construct%20Binary%20Tree%20from%20Preorder%20and%20Postorder%20Traversal/README_EN.md", "title_cn": "\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811", "title_en": "Construct Binary Tree from Preorder and Postorder Traversal", "question_title_slug": "construct-binary-tree-from-preorder-and-postorder-traversal", "content_en": "<p>Return any binary tree that matches the given preorder and postorder traversals.</p>\r\n\r\n<p>Values in the traversals&nbsp;<code>pre</code> and <code>post</code>&nbsp;are distinct&nbsp;positive integers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>pre = <span id=\"example-input-1-1\">[1,2,4,5,3,6,7]</span>, post = <span id=\"example-input-1-2\">[4,5,2,6,7,3,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4,5,6,7]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\r\n\t<li><code>pre[]</code> and <code>post[]</code>&nbsp;are both permutations of <code>1, 2, ..., pre.length</code>.</li>\r\n\t<li>It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</li>\r\n</ul>\r\n</div>\r\n", "content_cn": "<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5339\u914d\u7684\u4efb\u4f55\u4e8c\u53c9\u6811\u3002</p>\n\n<p>&nbsp;<code>pre</code>&nbsp;\u548c&nbsp;<code>post</code>&nbsp;\u904d\u5386\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\n\t<li><code>pre[]</code>&nbsp;\u548c&nbsp;<code>post[]</code>&nbsp;\u90fd\u662f&nbsp;<code>1, 2, ..., pre.length</code>&nbsp;\u7684\u6392\u5217</li>\n\t<li>\u6bcf\u4e2a\u8f93\u5165\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u7b54\u6848\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u53ef\u4ee5\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def constructFromPrePost(self, pre, post):\n        \"\"\"\n        :type pre: List[int]\n        :type post: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* constructFromPrePost(int* pre, int preSize, int* post, int postSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConstructFromPrePost(int[] pre, int[] post) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} pre\n * @param {number[]} post\n * @return {TreeNode}\n */\nvar constructFromPrePost = function(pre, post) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer[]} pre\n# @param {Integer[]} post\n# @return {TreeNode}\ndef construct_from_pre_post(pre, post)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func constructFromPrePost(_ pre: [Int], _ post: [Int]) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc constructFromPrePost(pre []int, post []int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def constructFromPrePost(pre: Array[Int], post: Array[Int]): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun constructFromPrePost(pre: IntArray, post: IntArray): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn construct_from_pre_post(pre: Vec<i32>, post: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer[] $pre\n     * @param Integer[] $post\n     * @return TreeNode\n     */\n    function constructFromPrePost($pre, $post) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction constructFromPrePost(pre: number[], post: number[]): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0926", "frontend_question_id": "0890", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-and-replace-pattern", "url_en": "https://leetcode.com/problems/find-and-replace-pattern", "relative_path_cn": "/leetcode/0800-0899/0890.Find%20and%20Replace%20Pattern/README.md", "relative_path_en": "/leetcode/0800-0899/0890.Find%20and%20Replace%20Pattern/README_EN.md", "title_cn": "\u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f", "title_en": "Find and Replace Pattern", "question_title_slug": "find-and-replace-pattern", "content_en": "<p>You have a list of&nbsp;<code>words</code> and a <code>pattern</code>, and you want to know which words in <code>words</code> matches the pattern.</p>\r\n\r\n<p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p>\r\n\r\n<p>(<em>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</em>)</p>\r\n\r\n<p>Return a list of the words in <code>words</code>&nbsp;that match the given pattern.&nbsp;</p>\r\n\r\n<p>You may return the answer in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-1-1\">[&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;]</span>, pattern = <span id=\"example-input-1-2\">&quot;abb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;mee&quot;,&quot;aqq&quot;]</span>\r\n<strong><span>Explanation: </span></strong>&quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \r\n&quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation,\r\nsince a and b map to the same letter.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\r\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\r\n</ul>\r\n</div>\r\n", "content_cn": "<p>\u4f60\u6709\u4e00\u4e2a\u5355\u8bcd\u5217\u8868&nbsp;<code>words</code>&nbsp;\u548c\u4e00\u4e2a\u6a21\u5f0f&nbsp;&nbsp;<code>pattern</code>\uff0c\u4f60\u60f3\u77e5\u9053 <code>words</code> \u4e2d\u7684\u54ea\u4e9b\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002</p>\n\n<p>\u5982\u679c\u5b58\u5728\u5b57\u6bcd\u7684\u6392\u5217 <code>p</code>&nbsp;\uff0c\u4f7f\u5f97\u5c06\u6a21\u5f0f\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd <code>x</code> \u66ff\u6362\u4e3a <code>p(x)</code> \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u5355\u8bcd\u4e0e\u6a21\u5f0f\u662f\u5339\u914d\u7684\u3002</p>\n\n<p><em>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b57\u6bcd\u7684\u6392\u5217\u662f\u4ece\u5b57\u6bcd\u5230\u5b57\u6bcd\u7684\u53cc\u5c04\uff1a\u6bcf\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6ca1\u6709\u4e24\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de <code>words</code> \u4e2d\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u5339\u914d\u7684\u5355\u8bcd\u5217\u8868\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;mee&quot;,&quot;aqq&quot;]\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;mee&quot; \u4e0e\u6a21\u5f0f\u5339\u914d\uff0c\u56e0\u4e3a\u5b58\u5728\u6392\u5217 {a -&gt; m, b -&gt; e, ...}\u3002\n&quot;ccc&quot; \u4e0e\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a {a -&gt; c, b -&gt; c, ...} \u4e0d\u662f\u6392\u5217\u3002\n\u56e0\u4e3a a \u548c b \u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findAndReplacePattern(char ** words, int wordsSize, char * pattern, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindAndReplacePattern(string[] words, string pattern) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} pattern\n * @return {string[]}\n */\nvar findAndReplacePattern = function(words, pattern) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} pattern\n# @return {String[]}\ndef find_and_replace_pattern(words, pattern)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findAndReplacePattern(_ words: [String], _ pattern: String) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findAndReplacePattern(words []string, pattern string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findAndReplacePattern(words: Array[String], pattern: String): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findAndReplacePattern(words: Array<String>, pattern: String): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_and_replace_pattern(words: Vec<String>, pattern: String) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $pattern\n     * @return String[]\n     */\n    function findAndReplacePattern($words, $pattern) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findAndReplacePattern(words: string[], pattern: string): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0927", "frontend_question_id": "0891", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-subsequence-widths", "url_en": "https://leetcode.com/problems/sum-of-subsequence-widths", "relative_path_cn": "/leetcode/0800-0899/0891.Sum%20of%20Subsequence%20Widths/README.md", "relative_path_en": "/leetcode/0800-0899/0891.Sum%20of%20Subsequence%20Widths/README_EN.md", "title_cn": "\u5b50\u5e8f\u5217\u5bbd\u5ea6\u4e4b\u548c", "title_en": "Sum of Subsequence Widths", "question_title_slug": "sum-of-subsequence-widths", "content_en": "<p>Given an array of integers <code>A</code>, consider all non-empty subsequences of <code>A</code>.</p>\r\n\r\n<p>For any sequence S, let the&nbsp;<em>width</em>&nbsp;of S be the difference between the maximum and minimum element of S.</p>\r\n\r\n<p>Return the sum of the widths of all subsequences of A.&nbsp;</p>\r\n\r\n<p>As the answer may be very large, <strong>return the answer modulo 10^9 + 7</strong>.</p>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation:\r\n</strong>Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\r\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\r\nThe sum of these widths is 6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 20000</code></li>\r\n</ul>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code> \uff0c\u8003\u8651 <code>A</code> \u7684\u6240\u6709\u975e\u7a7a\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u5bf9\u4e8e\u4efb\u610f\u5e8f\u5217 S \uff0c\u8bbe S \u7684\u5bbd\u5ea6\u662f S \u7684\u6700\u5927\u5143\u7d20\u548c\u6700\u5c0f\u5143\u7d20\u7684\u5dee\u3002</p>\n\n<p>\u8fd4\u56de A \u7684\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5bbd\u5ea6\u4e4b\u548c\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8bf7<strong>\u8fd4\u56de\u7b54\u6848\u6a21 10^9+7</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5b50\u5e8f\u5217\u4e3a [1]\uff0c[2]\uff0c[3]\uff0c[2,1]\uff0c[2,3]\uff0c[1,3]\uff0c[2,1,3] \u3002\n\u76f8\u5e94\u7684\u5bbd\u5ea6\u662f 0\uff0c0\uff0c0\uff0c1\uff0c1\uff0c2\uff0c2 \u3002\n\u8fd9\u4e9b\u5bbd\u5ea6\u4e4b\u548c\u662f 6 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 20000</code></li>\n</ul>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int sumSubseqWidths(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sumSubseqWidths(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint sumSubseqWidths(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SumSubseqWidths(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar sumSubseqWidths = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef sum_subseq_widths(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sumSubseqWidths(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sumSubseqWidths(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sumSubseqWidths(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sumSubseqWidths(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sum_subseq_widths(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function sumSubseqWidths($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sumSubseqWidths(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0928", "frontend_question_id": "0892", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/surface-area-of-3d-shapes", "url_en": "https://leetcode.com/problems/surface-area-of-3d-shapes", "relative_path_cn": "/leetcode/0800-0899/0892.Surface%20Area%20of%203D%20Shapes/README.md", "relative_path_en": "/leetcode/0800-0899/0892.Surface%20Area%20of%203D%20Shapes/README_EN.md", "title_cn": "\u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef", "title_en": "Surface Area of 3D Shapes", "question_title_slug": "surface-area-of-3d-shapes", "content_en": "<p>On a&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;grid, we place some&nbsp;<code>1 * 1 * 1&nbsp;</code>cubes.</p>\r\n\r\n<p>Each value&nbsp;<code>v = grid[i][j]</code>&nbsp;represents a tower of&nbsp;<code>v</code>&nbsp;cubes placed on top of grid cell&nbsp;<code>(i, j)</code>.</p>\r\n\r\n<p>Return the total surface area of the resulting shapes.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2],[3,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">34</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[1,0],[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">16</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[1,1,1],[1,0,1],[1,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">32</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[[2,2,2],[2,1,2],[2,2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">46</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5728&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;\u7684\u7f51\u683c\u4e0a\uff0c\u6211\u4eec\u653e\u7f6e\u4e00\u4e9b&nbsp;<code>1 * 1 * 1&nbsp;</code>&nbsp;\u7684\u7acb\u65b9\u4f53\u3002</p>\n\n<p>\u6bcf\u4e2a\u503c&nbsp;<code>v = grid[i][j]</code>&nbsp;\u8868\u793a&nbsp;<code>v</code>&nbsp;\u4e2a\u6b63\u65b9\u4f53\u53e0\u653e\u5728\u5bf9\u5e94\u5355\u5143\u683c&nbsp;<code>(i, j)</code>&nbsp;\u4e0a\u3002</p>\n\n<p>\u8bf7\u4f60\u8fd4\u56de\u6700\u7ec8\u5f62\u4f53\u7684\u8868\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2]]\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[3,4]]\n<strong>\u8f93\u51fa\uff1a</strong>34\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0],[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>16\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>32\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n", "tags_en": ["Geometry", "Math"], "tags_cn": ["\u51e0\u4f55", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int surfaceArea(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int surfaceArea(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def surfaceArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint surfaceArea(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SurfaceArea(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar surfaceArea = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef surface_area(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func surfaceArea(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func surfaceArea(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def surfaceArea(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun surfaceArea(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn surface_area(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function surfaceArea($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function surfaceArea(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0929", "frontend_question_id": "0893", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/groups-of-special-equivalent-strings", "url_en": "https://leetcode.com/problems/groups-of-special-equivalent-strings", "relative_path_cn": "/leetcode/0800-0899/0893.Groups%20of%20Special-Equivalent%20Strings/README.md", "relative_path_en": "/leetcode/0800-0899/0893.Groups%20of%20Special-Equivalent%20Strings/README_EN.md", "title_cn": "\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\u7ec4", "title_en": "Groups of Special-Equivalent Strings", "question_title_slug": "groups-of-special-equivalent-strings", "content_en": "<p>You are given an array <code>A</code> of strings.</p>\r\n\r\n<p>A <em>move&nbsp;onto <code>S</code></em> consists of swapping any two even indexed characters of <code>S</code>, or any two odd indexed characters of <code>S</code>.</p>\r\n\r\n<p>Two strings <code>S</code> and <code>T</code> are&nbsp;<em>special-equivalent</em>&nbsp;if after any number of <em>moves onto <code>S</code></em>, <code>S == T</code>.</p>\r\n\r\n<p>For example, <code>S = &quot;zzxy&quot;</code> and <code>T = &quot;xyzz&quot;</code> are special-equivalent because we may make the moves <code>&quot;zzxy&quot; -&gt; &quot;xzzy&quot; -&gt; &quot;xyzz&quot;</code>&nbsp;that swap <code>S[0]</code> and <code>S[2]</code>, then <code>S[1]</code> and <code>S[3]</code>.</p>\r\n\r\n<p>Now, a <em>group of special-equivalent strings from <code>A</code></em>&nbsp;is a non-empty subset of&nbsp;A such that:</p>\r\n\r\n<ol>\r\n\t<li>Every pair of strings in the group are special equivalent, and;</li>\r\n\t<li>The group is the largest size possible (ie., there isn&#39;t a string S not in the group such that S is special equivalent to every string in the group)</li>\r\n</ol>\r\n\r\n<p>Return the number of groups of special-equivalent strings from <code>A</code>.</p>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;abcd&quot;,&quot;cdab&quot;,&quot;cbad&quot;,&quot;xyzz&quot;,&quot;zzxy&quot;,&quot;zzyx&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nOne group is [&quot;abcd&quot;, &quot;cdab&quot;, &quot;cbad&quot;], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.\r\n\r\nThe other two groups are [&quot;xyzz&quot;, &quot;zzxy&quot;] and [&quot;zzyx&quot;].  Note that in particular, &quot;zzxy&quot; is not special equivalent to &quot;zzyx&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\r\n\t<li>All <code>A[i]</code> have the same length.</li>\r\n\t<li>All <code>A[i]</code> consist of only lowercase letters.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 <code>A</code>\u3002</p>\n\n<p>\u6bcf\u6b21\u79fb\u52a8\u90fd\u53ef\u4ee5\u4ea4\u6362 S \u7684\u4efb\u610f\u4e24\u4e2a\u5076\u6570\u4e0b\u6807\u7684\u5b57\u7b26\u6216\u4efb\u610f\u4e24\u4e2a\u5947\u6570\u4e0b\u6807\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u5982\u679c\u7ecf\u8fc7\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\uff0cS == T\uff0c\u90a3\u4e48\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>S</code> \u548c <code>T</code> \u662f <strong>\u7279\u6b8a\u7b49\u4ef7 </strong>\u7684\u3002</p>\n\n<p>\u4f8b\u5982\uff0c<code>S = &quot;zzxy&quot;</code> \u548c <code>T = &quot;xyzz&quot;</code> \u662f\u4e00\u5bf9\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5148\u4ea4\u6362 <code>S[0]</code> \u548c <code>S[2]</code>\uff0c\u7136\u540e\u4ea4\u6362 <code>S[1]</code> \u548c <code>S[3]</code>\uff0c\u4f7f\u5f97 <code>&quot;zzxy&quot; -&gt; &quot;xzzy&quot; -&gt; &quot;xyzz&quot;</code> \u3002</p>\n\n<p>\u73b0\u5728\u89c4\u5b9a\uff0c<strong><code>A</code> </strong>\u7684 <strong>\u4e00\u7ec4\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32 </strong>\u5c31\u662f <code>A</code> \u7684\u4e00\u4e2a\u540c\u65f6\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u975e\u7a7a\u5b50\u96c6\uff1a</p>\n\n<ol>\n\t<li>\u8be5\u7ec4\u4e2d\u7684\u6bcf\u4e00\u5bf9\u5b57\u7b26\u4e32\u90fd\u662f<strong> \u7279\u6b8a\u7b49\u4ef7 </strong>\u7684</li>\n\t<li>\u8be5\u7ec4\u5b57\u7b26\u4e32\u5df2\u7ecf\u6db5\u76d6\u4e86\u8be5\u7c7b\u522b\u4e2d\u7684\u6240\u6709\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\uff0c\u5bb9\u91cf\u8fbe\u5230\u7406\u8bba\u4e0a\u7684\u6700\u5927\u503c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0d\u5728\u8be5\u7ec4\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5c31 <strong>\u4e0d\u4f1a</strong> \u4e0e\u8be5\u7ec4\u5185\u4efb\u4f55\u5b57\u7b26\u4e32\u7279\u6b8a\u7b49\u4ef7\uff09</li>\n</ol>\n\n<p>\u8fd4\u56de <code>A</code>&nbsp;\u4e2d\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\u7ec4\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;abcd&quot;,&quot;cdab&quot;,&quot;cbad&quot;,&quot;xyzz&quot;,&quot;zzxy&quot;,&quot;zzyx&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5176\u4e2d\u4e00\u7ec4\u4e3a [&quot;abcd&quot;, &quot;cdab&quot;, &quot;cbad&quot;]\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u6210\u5bf9\u7684\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\uff0c\u4e14\u6ca1\u6709\u5176\u4ed6\u5b57\u7b26\u4e32\u4e0e\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7279\u6b8a\u7b49\u4ef7\u3002\n\u53e6\u5916\u4e24\u7ec4\u5206\u522b\u662f [&quot;xyzz&quot;, &quot;zzxy&quot;] \u548c [&quot;zzyx&quot;]\u3002\u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c&quot;zzxy&quot; \u4e0d\u4e0e &quot;zzyx&quot; \u7279\u6b8a\u7b49\u4ef7\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u7ec4 [&quot;abc&quot;,&quot;cba&quot;]\uff0c[&quot;acb&quot;,&quot;bca&quot;]\uff0c[&quot;bac&quot;,&quot;cab&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n\t<li>\u6240\u6709&nbsp;<code>A[i]</code>&nbsp;\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u6240\u6709&nbsp;<code>A[i]</code>&nbsp;\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSpecialEquivGroups(vector<string>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSpecialEquivGroups(String[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSpecialEquivGroups(self, A: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSpecialEquivGroups(char ** A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSpecialEquivGroups(string[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @return {number}\n */\nvar numSpecialEquivGroups = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @return {Integer}\ndef num_special_equiv_groups(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func numSpecialEquivGroups(_ A: [String]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSpecialEquivGroups(A []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSpecialEquivGroups(A: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSpecialEquivGroups(A: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_special_equiv_groups(a: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @return Integer\n     */\n    function numSpecialEquivGroups($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSpecialEquivGroups(A: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0930", "frontend_question_id": "0894", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/all-possible-full-binary-trees", "url_en": "https://leetcode.com/problems/all-possible-full-binary-trees", "relative_path_cn": "/leetcode/0800-0899/0894.All%20Possible%20Full%20Binary%20Trees/README.md", "relative_path_en": "/leetcode/0800-0899/0894.All%20Possible%20Full%20Binary%20Trees/README_EN.md", "title_cn": "\u6240\u6709\u53ef\u80fd\u7684\u6ee1\u4e8c\u53c9\u6811", "title_en": "All Possible Full Binary Trees", "question_title_slug": "all-possible-full-binary-trees", "content_en": "<p>A <em>full binary tree</em>&nbsp;is a binary tree where each node has exactly 0 or 2&nbsp;children.</p>\r\n\r\n<p>Return a list of all possible full binary trees with <code>N</code> nodes.&nbsp; Each element of the answer is the root node of one possible tree.</p>\r\n\r\n<p>Each <code>node</code> of each&nbsp;tree in the answer <strong>must</strong> have <code>node.val = 0</code>.</p>\r\n\r\n<p>You may return the final list of trees in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]</span>\r\n<strong>Explanation:</strong>\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png\" style=\"width: 700px; height: 400px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 20</code></li>\r\n</ul>\r\n", "content_cn": "<p><em>\u6ee1\u4e8c\u53c9\u6811</em>\u662f\u4e00\u7c7b\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6070\u597d\u6709 0 \u6216 2 \u4e2a\u5b50\u7ed3\u70b9\u3002</p>\n\n<p>\u8fd4\u56de\u5305\u542b <code>N</code> \u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u53ef\u80fd\u6ee1\u4e8c\u53c9\u6811\u7684\u5217\u8868\u3002 \u7b54\u6848\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u53ef\u80fd\u6811\u7684\u6839\u7ed3\u70b9\u3002</p>\n\n<p>\u7b54\u6848\u4e2d\u6bcf\u4e2a\u6811\u7684\u6bcf\u4e2a<code>\u7ed3\u70b9</code>\u90fd<strong>\u5fc5\u987b</strong>\u6709 <code>node.val=0</code>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u6811\u7684\u6700\u7ec8\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>7\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n<strong>\u89e3\u91ca\uff1a</strong>\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/fivetrees.png\" style=\"height: 400px; width: 700px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 20</code></li>\n</ul>\n", "tags_en": ["Tree", "Recursion"], "tags_cn": ["\u6811", "\u9012\u5f52"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> allPossibleFBT(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<TreeNode> allPossibleFBT(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def allPossibleFBT(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def allPossibleFBT(self, N: int) -> List[TreeNode]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** allPossibleFBT(int N, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> AllPossibleFBT(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number} N\n * @return {TreeNode[]}\n */\nvar allPossibleFBT = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer} n\n# @return {TreeNode[]}\ndef all_possible_fbt(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func allPossibleFBT(_ N: Int) -> [TreeNode?] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc allPossibleFBT(N int) []*TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def allPossibleFBT(N: Int): List[TreeNode] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun allPossibleFBT(N: Int): List<TreeNode?> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn all_possible_fbt(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $N\n     * @return TreeNode[]\n     */\n    function allPossibleFBT($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction allPossibleFBT(N: number): Array<TreeNode | null> {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0931", "frontend_question_id": "0895", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-frequency-stack", "url_en": "https://leetcode.com/problems/maximum-frequency-stack", "relative_path_cn": "/leetcode/0800-0899/0895.Maximum%20Frequency%20Stack/README.md", "relative_path_en": "/leetcode/0800-0899/0895.Maximum%20Frequency%20Stack/README_EN.md", "title_cn": "\u6700\u5927\u9891\u7387\u6808", "title_en": "Maximum Frequency Stack", "question_title_slug": "maximum-frequency-stack", "content_en": "<p>Implement <code>FreqStack</code>, a class which simulates the operation of a stack-like data structure.</p>\r\n\r\n<p><code>FreqStack</code>&nbsp;has two functions:</p>\r\n\r\n<ul>\r\n\t<li><code>push(int x)</code>, which pushes an integer <code>x</code> onto the stack.</li>\r\n\t<li><code>pop()</code>, which <strong>removes</strong> and returns the most frequent element in the stack.\r\n\t<ul>\r\n\t\t<li>If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>\r\n<span id=\"example-input-1-1\">[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]</span>,\r\n<span id=\"example-input-1-2\">[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,null,null,null,null,null,5,7,5,4]</span>\r\n<strong>Explanation</strong>:\r\nAfter making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:\r\n\r\npop() -&gt; returns 5, as 5 is the most frequent.\r\nThe stack becomes [5,7,5,7,4].\r\n\r\npop() -&gt; returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.\r\nThe stack becomes [5,7,5,4].\r\n\r\npop() -&gt; returns 5.\r\nThe stack becomes [5,7,4].\r\n\r\npop() -&gt; returns 4.\r\nThe stack becomes [5,7].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Calls to <code>FreqStack.push(int x)</code>&nbsp;will be such that <code>0 &lt;= x &lt;= 10^9</code>.</li>\r\n\t<li>It is guaranteed that <code>FreqStack.pop()</code> won&#39;t be called if the stack has zero elements.</li>\r\n\t<li>The total number of <code>FreqStack.push</code> calls will not exceed <code>10000</code> in a single test case.</li>\r\n\t<li>The total number of <code>FreqStack.pop</code>&nbsp;calls will not exceed <code>10000</code> in a single test case.</li>\r\n\t<li>The total number of <code>FreqStack.push</code> and <code>FreqStack.pop</code> calls will not exceed <code>150000</code> across all test cases.</li>\r\n</ul>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n", "content_cn": "<p>\u5b9e\u73b0 <code>FreqStack</code>\uff0c\u6a21\u62df\u7c7b\u4f3c\u6808\u7684\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u7684\u4e00\u4e2a\u7c7b\u3002</p>\n\n<p><code>FreqStack</code>&nbsp;\u6709\u4e24\u4e2a\u51fd\u6570\uff1a</p>\n\n<ul>\n\t<li><code>push(int x)</code>\uff0c\u5c06\u6574\u6570&nbsp;<code>x</code>&nbsp;\u63a8\u5165\u6808\u4e2d\u3002</li>\n\t<li><code>pop()</code>\uff0c\u5b83<strong>\u79fb\u9664</strong>\u5e76\u8fd4\u56de\u6808\u4e2d\u51fa\u73b0\u6700\u9891\u7e41\u7684\u5143\u7d20\u3002\n\t<ul>\n\t\t<li>\u5982\u679c\u6700\u9891\u7e41\u7684\u5143\u7d20\u4e0d\u53ea\u4e00\u4e2a\uff0c\u5219\u79fb\u9664\u5e76\u8fd4\u56de\u6700\u63a5\u8fd1\u6808\u9876\u7684\u5143\u7d20\u3002</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6267\u884c\u516d\u6b21 .push \u64cd\u4f5c\u540e\uff0c\u6808\u81ea\u5e95\u5411\u4e0a\u4e3a [5,7,5,7,4,5]\u3002\u7136\u540e\uff1a\n\npop() -&gt; \u8fd4\u56de 5\uff0c\u56e0\u4e3a 5 \u662f\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u3002\n\u6808\u53d8\u6210 [5,7,5,7,4]\u3002\n\npop() -&gt; \u8fd4\u56de 7\uff0c\u56e0\u4e3a 5 \u548c 7 \u90fd\u662f\u9891\u7387\u6700\u9ad8\u7684\uff0c\u4f46 7 \u6700\u63a5\u8fd1\u6808\u9876\u3002\n\u6808\u53d8\u6210 [5,7,5,4]\u3002\n\npop() -&gt; \u8fd4\u56de 5 \u3002\n\u6808\u53d8\u6210 [5,7,4]\u3002\n\npop() -&gt; \u8fd4\u56de 4 \u3002\n\u6808\u53d8\u6210 [5,7]\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5bf9&nbsp;<code>FreqStack.push(int x)</code>&nbsp;\u7684\u8c03\u7528\u4e2d&nbsp;<code>0 &lt;= x &lt;= 10^9</code>\u3002</li>\n\t<li>\u5982\u679c\u6808\u7684\u5143\u7d20\u6570\u76ee\u4e3a\u96f6\uff0c\u5219\u4fdd\u8bc1\u4e0d\u4f1a\u8c03\u7528&nbsp; <code>FreqStack.pop()</code>\u3002</li>\n\t<li>\u5355\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.push</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u5355\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.pop</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u6240\u6709\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.push</code>&nbsp;\u548c <code>FreqStack.pop</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>150000</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Stack", "Hash Table"], "tags_cn": ["\u6808", "\u54c8\u5e0c\u8868"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class FreqStack {\npublic:\n    FreqStack() {\n\n    }\n    \n    void push(int x) {\n\n    }\n    \n    int pop() {\n\n    }\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack* obj = new FreqStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class FreqStack {\n\n    public FreqStack() {\n\n    }\n    \n    public void push(int x) {\n\n    }\n    \n    public int pop() {\n\n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class FreqStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class FreqStack:\n\n    def __init__(self):\n        \n\n    def push(self, x: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FreqStack;\n\n\nFreqStack* freqStackCreate() {\n    \n}\n\nvoid freqStackPush(FreqStack* obj, int x) {\n  \n}\n\nint freqStackPop(FreqStack* obj) {\n  \n}\n\nvoid freqStackFree(FreqStack* obj) {\n    \n}\n\n/**\n * Your FreqStack struct will be instantiated and called as such:\n * FreqStack* obj = freqStackCreate();\n * freqStackPush(obj, x);\n \n * int param_2 = freqStackPop(obj);\n \n * freqStackFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class FreqStack {\n\n    public FreqStack() {\n\n    }\n    \n    public void Push(int x) {\n\n    }\n    \n    public int Pop() {\n\n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar FreqStack = function() {\n\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nFreqStack.prototype.push = function(x) {\n\n};\n\n/**\n * @return {number}\n */\nFreqStack.prototype.pop = function() {\n\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class FreqStack\n    def initialize()\n\n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n\n    end\n\n\nend\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack.new()\n# obj.push(x)\n# param_2 = obj.pop()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass FreqStack {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * let obj = FreqStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type FreqStack struct {\n\n}\n\n\nfunc Constructor() FreqStack {\n\n}\n\n\nfunc (this *FreqStack) Push(x int)  {\n\n}\n\n\nfunc (this *FreqStack) Pop() int {\n\n}\n\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class FreqStack() {\n\n    def push(x: Int) {\n\n    }\n\n    def pop(): Int = {\n\n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class FreqStack() {\n\n    fun push(x: Int) {\n\n    }\n\n    fun pop(): Int {\n\n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct FreqStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FreqStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, x: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * let obj = FreqStack::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class FreqStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * $obj = FreqStack();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class FreqStack {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0932", "frontend_question_id": "0896", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/monotonic-array", "url_en": "https://leetcode.com/problems/monotonic-array", "relative_path_cn": "/leetcode/0800-0899/0896.Monotonic%20Array/README.md", "relative_path_en": "/leetcode/0800-0899/0896.Monotonic%20Array/README_EN.md", "title_cn": "\u5355\u8c03\u6570\u5217", "title_en": "Monotonic Array", "question_title_slug": "monotonic-array", "content_en": "<p>An array is <em>monotonic</em> if it is either monotone increasing or monotone decreasing.</p>\r\n\r\n<p>An array <code>A</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>A[i] &lt;= A[j]</code>.&nbsp; An array <code>A</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>A[i] &gt;= A[j]</code>.</p>\r\n\r\n<p>Return <code>true</code> if and only if the given array <code>A</code> is monotonic.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[6,5,4,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,2,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[1,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5982\u679c\u6570\u7ec4\u662f\u5355\u8c03\u9012\u589e\u6216\u5355\u8c03\u9012\u51cf\u7684\uff0c\u90a3\u4e48\u5b83\u662f<em>\u5355\u8c03\u7684</em>\u3002</p>\n\n<p>\u5982\u679c\u5bf9\u4e8e\u6240\u6709 <code>i &lt;= j</code>\uff0c<code>A[i] &lt;= A[j]</code>\uff0c\u90a3\u4e48\u6570\u7ec4 <code>A</code> \u662f\u5355\u8c03\u9012\u589e\u7684\u3002 \u5982\u679c\u5bf9\u4e8e\u6240\u6709 <code>i &lt;= j</code>\uff0c<code>A[i]&gt; = A[j]</code>\uff0c\u90a3\u4e48\u6570\u7ec4 <code>A</code> \u662f\u5355\u8c03\u9012\u51cf\u7684\u3002</p>\n\n<p>\u5f53\u7ed9\u5b9a\u7684\u6570\u7ec4 <code>A</code>&nbsp;\u662f\u5355\u8c03\u6570\u7ec4\u65f6\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[6,5,4,4]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isMonotonic(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isMonotonic(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isMonotonic(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isMonotonic(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsMonotonic(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar isMonotonic = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Boolean}\ndef is_monotonic(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isMonotonic(_ A: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isMonotonic(A []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isMonotonic(A: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isMonotonic(A: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_monotonic(a: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Boolean\n     */\n    function isMonotonic($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isMonotonic(A: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0933", "frontend_question_id": "0897", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/increasing-order-search-tree", "url_en": "https://leetcode.com/problems/increasing-order-search-tree", "relative_path_cn": "/leetcode/0800-0899/0897.Increasing%20Order%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0800-0899/0897.Increasing%20Order%20Search%20Tree/README_EN.md", "title_cn": "\u9012\u589e\u987a\u5e8f\u67e5\u627e\u6811", "title_en": "Increasing Order Search Tree", "question_title_slug": "increasing-order-search-tree", "content_en": "<p>Given the <code>root</code> of a binary search tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\" style=\"width: 600px; height: 350px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\r\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\" style=\"width: 300px; height: 114px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [5,1,7]\r\n<strong>Output:</strong> [1,null,5,null,7]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>\r\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\r\n</ul>", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6811\uff0c\u8bf7\u4f60 <strong>\u6309\u4e2d\u5e8f\u904d\u5386</strong> \u91cd\u65b0\u6392\u5217\u6811\uff0c\u4f7f\u6811\u4e2d\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9\u73b0\u5728\u662f\u6811\u7684\u6839\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u6ca1\u6709\u5de6\u5b50\u7ed3\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u53f3\u5b50\u7ed3\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b \uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,3,6,2,4,null,8,1,null,null,null,7,9]\n\n       5\n      / \\\n    3    6\n   / \\    \\\n  2   4    8\n&nbsp;/        / \\ \n1        7   9\n\n<strong>\u8f93\u51fa\uff1a</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n 1\n&nbsp; \\\n&nbsp;  2\n&nbsp;   \\\n&nbsp;    3\n&nbsp;     \\\n&nbsp;      4\n&nbsp;       \\\n&nbsp;        5\n&nbsp;         \\\n&nbsp;          6\n&nbsp;           \\\n&nbsp;            7\n&nbsp;             \\\n&nbsp;              8\n&nbsp;               \\\n                 9  </pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e <code>1</code> \u548c&nbsp;<code>100</code> \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ece <code>0</code> \u5230 <code>1000</code> \u8303\u56f4\u5185\u7684\u552f\u4e00\u6574\u6570\u503c\u3002</li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search", "Recursion"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode increasingBST(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def increasingBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* increasingBST(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode IncreasingBST(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar increasingBST = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {TreeNode}\ndef increasing_bst(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func increasingBST(_ root: TreeNode?) -> TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc increasingBST(root *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def increasingBST(root: TreeNode): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun increasingBST(root: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn increasing_bst(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function increasingBST($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction increasingBST(root: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0934", "frontend_question_id": "0898", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bitwise-ors-of-subarrays", "url_en": "https://leetcode.com/problems/bitwise-ors-of-subarrays", "relative_path_cn": "/leetcode/0800-0899/0898.Bitwise%20ORs%20of%20Subarrays/README.md", "relative_path_en": "/leetcode/0800-0899/0898.Bitwise%20ORs%20of%20Subarrays/README_EN.md", "title_cn": "\u5b50\u6570\u7ec4\u6309\u4f4d\u6216\u64cd\u4f5c", "title_en": "Bitwise ORs of Subarrays", "question_title_slug": "bitwise-ors-of-subarrays", "content_en": "<p>We have an array <code>arr</code> of non-negative integers.</p>\n\n<p>For every (contiguous) subarray <code>sub = [arr[i], arr[i + 1], ..., arr[j]]</code> (with <code>i &lt;= j</code>), we take the bitwise OR of all the elements in <code>sub</code>, obtaining a result <code>arr[i] | arr[i + 1] | ... | arr[j]</code>.</p>\n\n<p>Return the number of possible results. Results that occur more than once are only counted once in the final answer</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one possible result: 0.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The possible results are 1, 2, 3, 4, 6, and 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\uff08\u8fde\u7eed\u7684\uff09\u5b50\u6570\u7ec4&nbsp;<code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> \uff08&nbsp;<code>i &lt;= j</code>\uff09\uff0c\u6211\u4eec\u5bf9&nbsp;<code>B</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u6216\u64cd\u4f5c\uff0c\u83b7\u5f97\u7ed3\u679c&nbsp;<code>A[i] | A[i+1] | ... | A[j]</code>\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u80fd\u7ed3\u679c\u7684\u6570\u91cf\u3002 \uff08\u591a\u6b21\u51fa\u73b0\u7684\u7ed3\u679c\u5728\u6700\u7ec8\u7b54\u6848\u4e2d\u4ec5\u8ba1\u7b97\u4e00\u6b21\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ea\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c 0 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u5b50\u6570\u7ec4\u4e3a [1]\uff0c[1]\uff0c[2]\uff0c[1, 1]\uff0c[1, 2]\uff0c[1, 1, 2]\u3002\n\u4ea7\u751f\u7684\u7ed3\u679c\u4e3a 1\uff0c1\uff0c2\uff0c1\uff0c3\uff0c3 \u3002\n\u6709\u4e09\u4e2a\u552f\u4e00\u503c\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u7ed3\u679c\u662f 1\uff0c2\uff0c3\uff0c4\uff0c6\uff0c\u4ee5\u53ca 7 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Bit Manipulation", "Dynamic Programming"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarrayBitwiseORs(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int subarrayBitwiseORs(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def subarrayBitwiseORs(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint subarrayBitwiseORs(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SubarrayBitwiseORs(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar subarrayBitwiseORs = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef subarray_bitwise_o_rs(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func subarrayBitwiseORs(_ arr: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func subarrayBitwiseORs(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def subarrayBitwiseORs(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun subarrayBitwiseORs(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn subarray_bitwise_o_rs(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function subarrayBitwiseORs($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function subarrayBitwiseORs(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0935", "frontend_question_id": "0899", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/orderly-queue", "url_en": "https://leetcode.com/problems/orderly-queue", "relative_path_cn": "/leetcode/0800-0899/0899.Orderly%20Queue/README.md", "relative_path_en": "/leetcode/0800-0899/0899.Orderly%20Queue/README_EN.md", "title_cn": "\u6709\u5e8f\u961f\u5217", "title_en": "Orderly Queue", "question_title_slug": "orderly-queue", "content_en": "<p>A string <code>S</code> of lowercase letters is given.&nbsp; Then, we may make any number of <em>moves</em>.</p>\r\n\r\n<p>In each move, we&nbsp;choose one&nbsp;of the first <code>K</code> letters (starting from the left), remove it,&nbsp;and place it at the end of the string.</p>\r\n\r\n<p>Return the lexicographically smallest string we could have after any number of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;cba&quot;</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;acb&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;c&quot;) to the end, obtaining the string &quot;bac&quot;.\r\nIn the second move, we move the 1st character (&quot;b&quot;) to the end, obtaining the final result &quot;acb&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;baaca&quot;</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;aaabc&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;b&quot;) to the end, obtaining the string &quot;aacab&quot;.\r\nIn the second move, we move the 3rd character (&quot;c&quot;) to the end, obtaining the final result &quot;aaabc&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\r\n\t<li><code>S</code>&nbsp;consists of lowercase letters only.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6b21\u6570\u7684<em>\u79fb\u52a8</em>\u3002</p>\n\n<p>\u5728\u6bcf\u6b21\u79fb\u52a8\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u524d <code>K</code> \u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff08\u4ece\u5de6\u4fa7\u5f00\u59cb\uff09\uff0c\u5c06\u5176\u4ece\u539f\u4f4d\u7f6e\u79fb\u9664\uff0c\u5e76\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002</p>\n\n<p>\u8fd4\u56de\u6211\u4eec\u5728\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\u4e4b\u540e\u53ef\u4ee5\u62e5\u6709\u7684\u6309\u5b57\u5178\u987a\u5e8f\u6392\u5217\u7684\u6700\u5c0f\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;cba&quot;, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;acb&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728\u7b2c\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;c&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u5b57\u7b26\u4e32 &ldquo;bac&rdquo;\u3002\n\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;b&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c &ldquo;acb&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;baaca&quot;, K = 3\n<strong>\u8f93\u51fa\uff1a</strong>&quot;aaabc&quot;\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5728\u7b2c\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;b&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u5b57\u7b26\u4e32 &ldquo;aacab&rdquo;\u3002\n\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e09\u4e2a\u5b57\u7b26\uff08&ldquo;c&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c &ldquo;aaabc&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>S</code>&nbsp;\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n", "tags_en": ["Math", "String"], "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string orderlyQueue(string S, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String orderlyQueue(String S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def orderlyQueue(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def orderlyQueue(self, S: str, K: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * orderlyQueue(char * S, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string OrderlyQueue(string S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar orderlyQueue = function(S, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef orderly_queue(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func orderlyQueue(_ S: String, _ K: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func orderlyQueue(S string, K int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def orderlyQueue(S: String, K: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun orderlyQueue(S: String, K: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn orderly_queue(s: String, k: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function orderlyQueue($S, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function orderlyQueue(S: string, K: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}]}