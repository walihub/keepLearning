{"leetcode": [{"question_id": "0936", "frontend_question_id": "0900", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rle-iterator", "url_en": "https://leetcode.com/problems/rle-iterator", "relative_path_cn": "/leetcode/0900-0999/0900.RLE%20Iterator/README.md", "relative_path_en": "/leetcode/0900-0999/0900.RLE%20Iterator/README_EN.md", "title_cn": "RLE \u8fed\u4ee3\u5668", "title_en": "RLE Iterator", "question_title_slug": "rle-iterator", "content_en": "<p>Write an iterator that iterates through a run-length encoded sequence.</p>\r\n\r\n<p>The iterator is initialized by <code>RLEIterator(int[] A)</code>, where <code>A</code> is a run-length encoding of some&nbsp;sequence.&nbsp; More specifically,&nbsp;for all even <code>i</code>,&nbsp;<code>A[i]</code> tells us the number of times that the non-negative integer value <code>A[i+1]</code> is repeated in the sequence.</p>\r\n\r\n<p>The iterator supports one function:&nbsp;<code>next(int n)</code>, which exhausts the next <code>n</code> elements&nbsp;(<code>n &gt;= 1</code>) and returns the last element exhausted in this way.&nbsp; If there is no element left to exhaust, <code>next</code>&nbsp;returns <code>-1</code> instead.</p>\r\n\r\n<p>For example, we start with <code>A = [3,8,0,9,2,5]</code>, which is a run-length encoding of the sequence <code>[8,8,8,5,5]</code>.&nbsp; This is because the sequence can be read as&nbsp;&quot;three eights, zero nines, two fives&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,8,8,5,-1]</span>\r\n<strong>Explanation: </strong>\r\nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\r\nThis maps to the sequence [8,8,8,5,5].\r\nRLEIterator.next is then called 4 times:\r\n\r\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\r\n\r\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\r\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>A.length</code>&nbsp;is an even integer.</li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li>There are at most <code>1000</code> calls to <code>RLEIterator.next(int n)</code> per test case.</li>\r\n\t<li>Each call to&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;will have <code>1 &lt;= n &lt;= 10^9</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u904d\u5386\u6e38\u7a0b\u7f16\u7801\u5e8f\u5217\u7684\u8fed\u4ee3\u5668\u3002</p>\n\n<p>\u8fed\u4ee3\u5668\u7531 <code>RLEIterator(int[] A)</code> \u521d\u59cb\u5316\uff0c\u5176\u4e2d&nbsp;<code>A</code>&nbsp;\u662f\u67d0\u4e2a\u5e8f\u5217\u7684\u6e38\u7a0b\u7f16\u7801\u3002\u66f4\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u6240\u6709\u5076\u6570 <code>i</code>\uff0c<code>A[i]</code> \u544a\u8bc9\u6211\u4eec\u5728\u5e8f\u5217\u4e2d\u91cd\u590d\u975e\u8d1f\u6574\u6570\u503c <code>A[i + 1]</code> \u7684\u6b21\u6570\u3002</p>\n\n<p>\u8fed\u4ee3\u5668\u652f\u6301\u4e00\u4e2a\u51fd\u6570\uff1a<code>next(int n)</code>\uff0c\u5b83\u8017\u5c3d\u63a5\u4e0b\u6765\u7684&nbsp; <code>n</code> \u4e2a\u5143\u7d20\uff08<code>n &gt;= 1</code>\uff09\u5e76\u8fd4\u56de\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8017\u53bb\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6ca1\u6709\u5269\u4f59\u7684\u5143\u7d20\u53ef\u4f9b\u8017\u5c3d\uff0c\u5219&nbsp; <code>next</code>&nbsp;\u8fd4\u56de&nbsp;<code>-1</code> \u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u6211\u4eec\u4ee5&nbsp;<code>A = [3,8,0,9,2,5]</code>&nbsp;\u5f00\u59cb\uff0c\u8fd9\u662f\u5e8f\u5217&nbsp;<code>[8,8,8,5,5]</code>&nbsp;\u7684\u6e38\u7a0b\u7f16\u7801\u3002\u8fd9\u662f\u56e0\u4e3a\u8be5\u5e8f\u5217\u53ef\u4ee5\u8bfb\u4f5c &ldquo;\u4e09\u4e2a\u516b\uff0c\u96f6\u4e2a\u4e5d\uff0c\u4e24\u4e2a\u4e94&rdquo;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,8,8,5,-1]\n<strong>\u89e3\u91ca\uff1a</strong>\nRLEIterator \u7531 RLEIterator([3,8,0,9,2,5]) \u521d\u59cb\u5316\u3002\n\u8fd9\u6620\u5c04\u5230\u5e8f\u5217 [8,8,8,5,5]\u3002\n\u7136\u540e\u8c03\u7528 RLEIterator.next 4\u6b21\u3002\n\n.next(2) \u8017\u53bb\u5e8f\u5217\u7684 2 \u4e2a\u9879\uff0c\u8fd4\u56de 8\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [8, 5, 5]\u3002\n\n.next(1) \u8017\u53bb\u5e8f\u5217\u7684 1 \u4e2a\u9879\uff0c\u8fd4\u56de 8\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [5, 5]\u3002\n\n.next(1) \u8017\u53bb\u5e8f\u5217\u7684 1 \u4e2a\u9879\uff0c\u8fd4\u56de 5\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [5]\u3002\n\n.next(2) \u8017\u53bb\u5e8f\u5217\u7684 2 \u4e2a\u9879\uff0c\u8fd4\u56de -1\u3002 \u8fd9\u662f\u7531\u4e8e\u7b2c\u4e00\u4e2a\u88ab\u8017\u53bb\u7684\u9879\u662f 5\uff0c\n\u4f46\u7b2c\u4e8c\u4e2a\u9879\u5e76\u4e0d\u5b58\u5728\u3002\u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u8981\u8017\u53bb\u7684\u9879\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u8fd4\u56de -1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>A.length</code>&nbsp;\u662f\u5076\u6570\u3002</li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>1000</code>&nbsp;\u6b21&nbsp;<code>RLEIterator.next(int n)</code>\u3002</li>\n\t<li>\u6bcf\u6b21\u8c03\u7528&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class RLEIterator {\npublic:\n    RLEIterator(vector<int>& A) {\n\n    }\n    \n    int next(int n) {\n\n    }\n};\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator* obj = new RLEIterator(A);\n * int param_1 = obj->next(n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class RLEIterator {\n\n    public RLEIterator(int[] A) {\n\n    }\n    \n    public int next(int n) {\n\n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = new RLEIterator(A);\n * int param_1 = obj.next(n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class RLEIterator(object):\n\n    def __init__(self, A):\n        \"\"\"\n        :type A: List[int]\n        \"\"\"\n        \n\n    def next(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator(A)\n# param_1 = obj.next(n)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class RLEIterator:\n\n    def __init__(self, A: List[int]):\n        \n\n    def next(self, n: int) -> int:\n        \n\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator(A)\n# param_1 = obj.next(n)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} RLEIterator;\n\n\nRLEIterator* rLEIteratorCreate(int* A, int ASize) {\n    \n}\n\nint rLEIteratorNext(RLEIterator* obj, int n) {\n  \n}\n\nvoid rLEIteratorFree(RLEIterator* obj) {\n    \n}\n\n/**\n * Your RLEIterator struct will be instantiated and called as such:\n * RLEIterator* obj = rLEIteratorCreate(A, ASize);\n * int param_1 = rLEIteratorNext(obj, n);\n \n * rLEIteratorFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class RLEIterator {\n\n    public RLEIterator(int[] A) {\n\n    }\n    \n    public int Next(int n) {\n\n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = new RLEIterator(A);\n * int param_1 = obj.Next(n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n */\nvar RLEIterator = function(A) {\n\n};\n\n/** \n * @param {number} n\n * @return {number}\n */\nRLEIterator.prototype.next = function(n) {\n\n};\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class RLEIterator\n\n=begin\n    :type a: Integer[]\n=end\n    def initialize(a)\n\n    end\n\n\n=begin\n    :type n: Integer\n    :rtype: Integer\n=end\n    def next(n)\n\n    end\n\n\nend\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator.new(a)\n# param_1 = obj.next(n)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass RLEIterator {\n\n    init(_ A: [Int]) {\n        \n    }\n    \n    func next(_ n: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * let obj = RLEIterator(A)\n * let ret_1: Int = obj.next(n)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type RLEIterator struct {\n\n}\n\n\nfunc Constructor(A []int) RLEIterator {\n\n}\n\n\nfunc (this *RLEIterator) Next(n int) int {\n\n}\n\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * obj := Constructor(A);\n * param_1 := obj.Next(n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class RLEIterator(_A: Array[Int]) {\n\n    def next(n: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class RLEIterator(A: IntArray) {\n\n    fun next(n: Int): Int {\n\n    }\n\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = RLEIterator(A)\n * var param_1 = obj.next(n)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct RLEIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RLEIterator {\n\n    fn new(A: Vec<i32>) -> Self {\n        \n    }\n    \n    fn next(&self, n: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * let obj = RLEIterator::new(A);\n * let ret_1: i32 = obj.next(n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class RLEIterator {\n    /**\n     * @param Integer[] $A\n     */\n    function __construct($A) {\n        \n    }\n  \n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function next($n) {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * $obj = RLEIterator($A);\n * $ret_1 = $obj->next($n);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class RLEIterator {\n    constructor(A: number[]) {\n\n    }\n\n    next(n: number): number {\n\n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(A)\n * var param_1 = obj.next(n)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0937", "frontend_question_id": "0901", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/online-stock-span", "url_en": "https://leetcode.com/problems/online-stock-span", "relative_path_cn": "/leetcode/0900-0999/0901.Online%20Stock%20Span/README.md", "relative_path_en": "/leetcode/0900-0999/0901.Online%20Stock%20Span/README_EN.md", "title_cn": "\u80a1\u7968\u4ef7\u683c\u8de8\u5ea6", "title_en": "Online Stock Span", "question_title_slug": "online-stock-span", "content_en": "<p>Write a class <code>StockSpanner</code> which collects daily price quotes for some stock, and returns the <em>span</em>&nbsp;of that stock&#39;s price for the current day.</p>\r\n\r\n<p>The span of the stock&#39;s price today&nbsp;is defined as the maximum number of consecutive days (starting from today and going backwards)&nbsp;for which the price of the stock was less than or equal to today&#39;s price.</p>\r\n\r\n<p>For example, if the price of a stock over the next 7 days were <code>[100, 80, 60, 70, 60, 75, 85]</code>, then the stock spans would be <code>[1, 1, 1, 2, 1, 4, 6]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[],[100],[80],[60],[70],[60],[75],[85]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,1,1,2,1,4,6]</span>\r\n<strong>Explanation: </strong>\r\nFirst, S = StockSpanner() is initialized.  Then:\r\nS.next(100) is called and returns 1,\r\nS.next(80) is called and returns 1,\r\nS.next(60) is called and returns 1,\r\nS.next(70) is called and returns 2,\r\nS.next(60) is called and returns 1,\r\nS.next(75) is called and returns 4,\r\nS.next(85) is called and returns 6.\r\n\r\nNote that (for example) S.next(75) returned 4, because the last 4 prices\r\n(including today&#39;s price of 75) were less than or equal to today&#39;s price.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Calls to <code>StockSpanner.next(int price)</code> will have <code>1 &lt;= price &lt;= 10^5</code>.</li>\r\n\t<li>There will be at most <code>10000</code> calls to <code>StockSpanner.next</code>&nbsp;per test case.</li>\r\n\t<li>There will be at most <code>150000</code> calls to <code>StockSpanner.next</code> across all test cases.</li>\r\n\t<li>The total&nbsp;time limit for this problem has been reduced by 75% for&nbsp;C++, and 50% for all other languages.</li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a <code>StockSpanner</code> \u7c7b\uff0c\u5b83\u6536\u96c6\u67d0\u4e9b\u80a1\u7968\u7684\u6bcf\u65e5\u62a5\u4ef7\uff0c\u5e76\u8fd4\u56de\u8be5\u80a1\u7968\u5f53\u65e5\u4ef7\u683c\u7684\u8de8\u5ea6\u3002</p>\n\n<p>\u4eca\u5929\u80a1\u7968\u4ef7\u683c\u7684\u8de8\u5ea6\u88ab\u5b9a\u4e49\u4e3a\u80a1\u7968\u4ef7\u683c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4eca\u5929\u4ef7\u683c\u7684\u6700\u5927\u8fde\u7eed\u65e5\u6570\uff08\u4ece\u4eca\u5929\u5f00\u59cb\u5f80\u56de\u6570\uff0c\u5305\u62ec\u4eca\u5929\uff09\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u672a\u67657\u5929\u80a1\u7968\u7684\u4ef7\u683c\u662f <code>[100, 80, 60, 70, 60, 75, 85]</code>\uff0c\u90a3\u4e48\u80a1\u7968\u8de8\u5ea6\u5c06\u662f <code>[1, 1, 1, 2, 1, 4, 6]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,1,1,2,1,4,6]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9996\u5148\uff0c\u521d\u59cb\u5316 S = StockSpanner()\uff0c\u7136\u540e\uff1a\nS.next(100) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(80) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(60) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(70) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 2\uff0c\nS.next(60) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(75) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 4\uff0c\nS.next(85) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 6\u3002\n\n\u6ce8\u610f (\u4f8b\u5982) S.next(75) \u8fd4\u56de 4\uff0c\u56e0\u4e3a\u622a\u81f3\u4eca\u5929\u7684\u6700\u540e 4 \u4e2a\u4ef7\u683c\n(\u5305\u62ec\u4eca\u5929\u7684\u4ef7\u683c 75) \u5c0f\u4e8e\u6216\u7b49\u4e8e\u4eca\u5929\u7684\u4ef7\u683c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8c03\u7528&nbsp;<code>StockSpanner.next(int price)</code>&nbsp;\u65f6\uff0c\u5c06\u6709&nbsp;<code>1 &lt;= price &lt;= 10^5</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u53ef\u4ee5\u8c03\u7528&nbsp; <code>10000</code> \u6b21 <code>StockSpanner.next</code>\u3002</li>\n\t<li>\u5728\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u6700\u591a\u8c03\u7528&nbsp;<code>150000</code>&nbsp;\u6b21&nbsp;<code>StockSpanner.next</code>\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u603b\u65f6\u95f4\u9650\u5236\u51cf\u5c11\u4e86 50%\u3002</li>\n</ol>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class StockSpanner {\npublic:\n    StockSpanner() {\n\n    }\n    \n    int next(int price) {\n\n    }\n};\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner* obj = new StockSpanner();\n * int param_1 = obj->next(price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class StockSpanner {\n\n    public StockSpanner() {\n\n    }\n    \n    public int next(int price) {\n\n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.next(price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class StockSpanner(object):\n\n    def __init__(self):\n        \n\n    def next(self, price):\n        \"\"\"\n        :type price: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner()\n# param_1 = obj.next(price)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class StockSpanner:\n\n    def __init__(self):\n        \n\n    def next(self, price: int) -> int:\n        \n\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner()\n# param_1 = obj.next(price)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} StockSpanner;\n\n\nStockSpanner* stockSpannerCreate() {\n    \n}\n\nint stockSpannerNext(StockSpanner* obj, int price) {\n  \n}\n\nvoid stockSpannerFree(StockSpanner* obj) {\n    \n}\n\n/**\n * Your StockSpanner struct will be instantiated and called as such:\n * StockSpanner* obj = stockSpannerCreate();\n * int param_1 = stockSpannerNext(obj, price);\n \n * stockSpannerFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class StockSpanner {\n\n    public StockSpanner() {\n\n    }\n    \n    public int Next(int price) {\n\n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.Next(price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar StockSpanner = function() {\n\n};\n\n/** \n * @param {number} price\n * @return {number}\n */\nStockSpanner.prototype.next = function(price) {\n\n};\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = new StockSpanner()\n * var param_1 = obj.next(price)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class StockSpanner\n    def initialize()\n\n    end\n\n\n=begin\n    :type price: Integer\n    :rtype: Integer\n=end\n    def next(price)\n\n    end\n\n\nend\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner.new()\n# param_1 = obj.next(price)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass StockSpanner {\n\n    init() {\n        \n    }\n    \n    func next(_ price: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * let obj = StockSpanner()\n * let ret_1: Int = obj.next(price)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type StockSpanner struct {\n\n}\n\n\nfunc Constructor() StockSpanner {\n\n}\n\n\nfunc (this *StockSpanner) Next(price int) int {\n\n}\n\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Next(price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class StockSpanner() {\n\n    def next(price: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = new StockSpanner()\n * var param_1 = obj.next(price)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class StockSpanner() {\n\n    fun next(price: Int): Int {\n\n    }\n\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = StockSpanner()\n * var param_1 = obj.next(price)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct StockSpanner {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl StockSpanner {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn next(&self, price: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * let obj = StockSpanner::new();\n * let ret_1: i32 = obj.next(price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class StockSpanner {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $price\n     * @return Integer\n     */\n    function next($price) {\n        \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * $obj = StockSpanner();\n * $ret_1 = $obj->next($price);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class StockSpanner {\n    constructor() {\n\n    }\n\n    next(price: number): number {\n\n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = new StockSpanner()\n * var param_1 = obj.next(price)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0938", "frontend_question_id": "0902", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/numbers-at-most-n-given-digit-set", "url_en": "https://leetcode.com/problems/numbers-at-most-n-given-digit-set", "relative_path_cn": "/leetcode/0900-0999/0902.Numbers%20At%20Most%20N%20Given%20Digit%20Set/README.md", "relative_path_en": "/leetcode/0900-0999/0902.Numbers%20At%20Most%20N%20Given%20Digit%20Set/README_EN.md", "title_cn": "\u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408", "title_en": "Numbers At Most N Given Digit Set", "question_title_slug": "numbers-at-most-n-given-digit-set", "content_en": "<p>Given an array of <code>digits</code> which is sorted in <strong>non-decreasing</strong> order. You can write numbers using each <code>digits[i]</code> as many times as we want. For example, if <code>digits = [&#39;1&#39;,&#39;3&#39;,&#39;5&#39;]</code>, we may write numbers such as <code>&#39;13&#39;</code>, <code>&#39;551&#39;</code>, and <code>&#39;1351315&#39;</code>.</p>\n\n<p>Return <em>the number of positive integers that can be generated </em>that are less than or equal to a given integer <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], n = 100\n<strong>Output:</strong> 20\n<strong>Explanation: </strong>\nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], n = 1000000000\n<strong>Output:</strong> 29523\n<strong>Explanation: </strong>\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;7&quot;], n = 8\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 9</code></li>\n\t<li><code>digits[i].length == 1</code></li>\n\t<li><code>digits[i]</code> is a digit from&nbsp;<code>&#39;1&#39;</code>&nbsp;to <code>&#39;9&#39;</code>.</li>\n\t<li>All the values in&nbsp;<code>digits</code> are <strong>unique</strong>.</li>\n\t<li><code>digits</code> is sorted in&nbsp;<strong>non-decreasing</strong> order.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u7ec4<strong>\u6392\u5e8f\u7684</strong>\u6570\u5b57 <code>D</code>\uff0c\u5b83\u662f&nbsp; <code>{&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}</code>&nbsp;\u7684\u975e\u7a7a\u5b50\u96c6\u3002\uff08\u8bf7\u6ce8\u610f\uff0c<code>&#39;0&#39;</code> \u4e0d\u5305\u62ec\u5728\u5185\u3002\uff09</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u7528\u8fd9\u4e9b\u6570\u5b57\u8fdb\u884c\u7ec4\u5408\u5199\u6570\u5b57\uff0c\u60f3\u7528\u591a\u5c11\u6b21\u5c31\u7528\u591a\u5c11\u6b21\u3002\u4f8b\u5982&nbsp;<code>D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u50cf&nbsp;<code>&#39;13&#39;, &#39;551&#39;, &#39;1351315&#39;</code>&nbsp;\u8fd9\u6837\u7684\u6570\u5b57\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u7528 <code>D</code> \u4e2d\u7684\u6570\u5b57\u5199\u51fa\u7684\u5c0f\u4e8e\u6216\u7b49\u4e8e <code>N</code> \u7684\u6b63\u6574\u6570\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>D = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], N = 100\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u5199\u51fa\u7684 20 \u4e2a\u6570\u5b57\u662f\uff1a\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>D = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], N = 1000000000\n<strong>\u8f93\u51fa\uff1a</strong>29523\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u53ef\u4ee5\u5199 3 \u4e2a\u4e00\u4f4d\u6570\u5b57\uff0c9 \u4e2a\u4e24\u4f4d\u6570\u5b57\uff0c27 \u4e2a\u4e09\u4f4d\u6570\u5b57\uff0c\n81 \u4e2a\u56db\u4f4d\u6570\u5b57\uff0c243 \u4e2a\u4e94\u4f4d\u6570\u5b57\uff0c729 \u4e2a\u516d\u4f4d\u6570\u5b57\uff0c\n2187 \u4e2a\u4e03\u4f4d\u6570\u5b57\uff0c6561 \u4e2a\u516b\u4f4d\u6570\u5b57\u548c 19683 \u4e2a\u4e5d\u4f4d\u6570\u5b57\u3002\n\u603b\u5171\uff0c\u53ef\u4ee5\u4f7f\u7528D\u4e2d\u7684\u6570\u5b57\u5199\u51fa 29523 \u4e2a\u6574\u6570\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>D</code> \u662f\u6309\u6392\u5e8f\u987a\u5e8f\u7684\u6570\u5b57 <code>&#39;1&#39;-&#39;9&#39;</code> \u7684\u5b50\u96c6\u3002</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int atMostNGivenDigitSet(vector<string>& digits, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int atMostNGivenDigitSet(String[] digits, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def atMostNGivenDigitSet(self, digits, n):\n        \"\"\"\n        :type digits: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint atMostNGivenDigitSet(char ** digits, int digitsSize, int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int AtMostNGivenDigitSet(string[] digits, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} digits\n * @param {number} n\n * @return {number}\n */\nvar atMostNGivenDigitSet = function(digits, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} digits\n# @param {Integer} n\n# @return {Integer}\ndef at_most_n_given_digit_set(digits, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func atMostNGivenDigitSet(_ digits: [String], _ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func atMostNGivenDigitSet(digits []string, n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def atMostNGivenDigitSet(digits: Array[String], n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun atMostNGivenDigitSet(digits: Array<String>, n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn at_most_n_given_digit_set(digits: Vec<String>, n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $digits\n     * @param Integer $n\n     * @return Integer\n     */\n    function atMostNGivenDigitSet($digits, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function atMostNGivenDigitSet(digits: string[], n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0939", "frontend_question_id": "0903", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-permutations-for-di-sequence", "url_en": "https://leetcode.com/problems/valid-permutations-for-di-sequence", "relative_path_cn": "/leetcode/0900-0999/0903.Valid%20Permutations%20for%20DI%20Sequence/README.md", "relative_path_en": "/leetcode/0900-0999/0903.Valid%20Permutations%20for%20DI%20Sequence/README_EN.md", "title_cn": "DI \u5e8f\u5217\u7684\u6709\u6548\u6392\u5217", "title_en": "Valid Permutations for DI Sequence", "question_title_slug": "valid-permutations-for-di-sequence", "content_en": "<p>We are given <code>S</code>, a length <code>n</code> string of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>. (These letters stand for &quot;decreasing&quot; and &quot;increasing&quot;.)</p>\r\n\r\n<p>A&nbsp;<em>valid permutation</em>&nbsp;is a permutation <code>P[0], P[1], ..., P[n]</code> of integers&nbsp;<code>{0, 1, ..., n}</code>, such that for all <code>i</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &#39;D&#39;</code>, then <code>P[i] &gt; P[i+1]</code>, and;</li>\r\n\t<li>If <code>S[i] == &#39;I&#39;</code>, then <code>P[i] &lt; P[i+1]</code>.</li>\r\n</ul>\r\n\r\n<p>How many valid permutations are there?&nbsp; Since the answer may be large, <strong>return your answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;DID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong>\r\nThe 5 valid permutations of (0, 1, 2, 3) are:\r\n(1, 0, 3, 2)\r\n(2, 0, 3, 1)\r\n(2, 1, 3, 0)\r\n(3, 0, 2, 1)\r\n(3, 1, 2, 0)\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\r\n\t<li><code>S</code> consists only of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n", "content_cn": "<p>\u6211\u4eec\u7ed9\u51fa <code>S</code>\uff0c\u4e00\u4e2a\u6e90\u4e8e&nbsp;<code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u7684\u957f\u5ea6\u4e3a <code>n</code>&nbsp;\u7684\u5b57\u7b26\u4e32 \u3002\uff08\u8fd9\u4e9b\u5b57\u6bcd\u4ee3\u8868 &ldquo;\u51cf\u5c11&rdquo; \u548c &ldquo;\u589e\u52a0&rdquo;\u3002\uff09<br>\n<em>\u6709\u6548\u6392\u5217</em>&nbsp;\u662f\u5bf9\u6574\u6570 <code>{0, 1, ..., n}</code>&nbsp;\u7684\u4e00\u4e2a\u6392\u5217&nbsp;<code>P[0], P[1], ..., P[n]</code>\uff0c\u4f7f\u5f97\u5bf9\u6240\u6709\u7684&nbsp;<code>i</code>\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c <code>S[i] == &#39;D&#39;</code>\uff0c\u90a3\u4e48&nbsp;<code>P[i] &gt; P[i+1]</code>\uff0c\u4ee5\u53ca\uff1b</li>\n\t<li>\u5982\u679c <code>S[i] == &#39;I&#39;</code>\uff0c\u90a3\u4e48 <code>P[i] &lt; P[i+1]</code>\u3002</li>\n</ul>\n\n<p>\u6709\u591a\u5c11\u4e2a\u6709\u6548\u6392\u5217\uff1f\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u8bf7<strong>\u8fd4\u56de\u4f60\u7684\u7b54\u6848\u6a21</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;DID&quot;\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n(0, 1, 2, 3) \u7684\u4e94\u4e2a\u6709\u6548\u6392\u5217\u662f\uff1a\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>S</code> \u4ec5\u7531\u96c6\u5408 <code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u4e2d\u7684\u5b57\u7b26\u7ec4\u6210\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Divide and Conquer", "Dynamic Programming"], "tags_cn": ["\u5206\u6cbb\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numPermsDISequence(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numPermsDISequence(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numPermsDISequence(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numPermsDISequence(self, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numPermsDISequence(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumPermsDISequence(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar numPermsDISequence = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef num_perms_di_sequence(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numPermsDISequence(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numPermsDISequence(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numPermsDISequence(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numPermsDISequence(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_perms_di_sequence(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function numPermsDISequence($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numPermsDISequence(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0940", "frontend_question_id": "0904", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/fruit-into-baskets", "url_en": "https://leetcode.com/problems/fruit-into-baskets", "relative_path_cn": "/leetcode/0900-0999/0904.Fruit%20Into%20Baskets/README.md", "relative_path_en": "/leetcode/0900-0999/0904.Fruit%20Into%20Baskets/README_EN.md", "title_cn": "\u6c34\u679c\u6210\u7bee", "title_en": "Fruit Into Baskets", "question_title_slug": "fruit-into-baskets", "content_en": "<p>In a row of trees, the <code>i</code>-th tree&nbsp;produces&nbsp;fruit with type&nbsp;<code>tree[i]</code>.</p>\r\n\r\n<p>You <strong>start at any tree&nbsp;of your choice</strong>, then repeatedly perform the following steps:</p>\r\n\r\n<ol>\r\n\t<li>Add one piece of fruit from this tree to your baskets.&nbsp; If you cannot, stop.</li>\r\n\t<li>Move to the next tree to the right of the current tree.&nbsp; If there is no tree to the right, stop.</li>\r\n</ol>\r\n\r\n<p>Note that you do not have any choice after the initial choice of starting tree:&nbsp;you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.</p>\r\n\r\n<p>You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.</p>\r\n\r\n<p>What is the total amount of fruit you can collect with this procedure?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong><span>Explanation: </span></strong><span>We can collect [1,2,1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,1,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [1,2,2].\r\nIf we started at the first tree, we would only collect [0, 1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,3,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [2,3,2,2].</span>\r\n<span>If we started at the first tree, we would only collect [1, 2].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,3,3,1,2,1,1,2,3,3,4]</span>\r\n<strong>Output: </strong>5<span id=\"example-output-4\">\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [1,2,1,1,2].</span>\r\n<span>If we started at the first tree or the eighth tree, we would only collect 4 fruits.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u6392\u6811\u4e2d\uff0c\u7b2c <code>i</code> \u68f5\u6811\u4ea7\u751f&nbsp;<code>tree[i]</code> \u578b\u7684\u6c34\u679c\u3002<br>\n\u4f60\u53ef\u4ee5<strong>\u4ece\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u6811\u5f00\u59cb</strong>\uff0c\u7136\u540e\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>\n\n<ol>\n\t<li>\u628a\u8fd9\u68f5\u6811\u4e0a\u7684\u6c34\u679c\u653e\u8fdb\u4f60\u7684\u7bee\u5b50\u91cc\u3002\u5982\u679c\u4f60\u505a\u4e0d\u5230\uff0c\u5c31\u505c\u4e0b\u6765\u3002</li>\n\t<li>\u79fb\u52a8\u5230\u5f53\u524d\u6811\u53f3\u4fa7\u7684\u4e0b\u4e00\u68f5\u6811\u3002\u5982\u679c\u53f3\u8fb9\u6ca1\u6709\u6811\uff0c\u5c31\u505c\u4e0b\u6765\u3002</li>\n</ol>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u5728\u9009\u62e9\u4e00\u9897\u6811\u540e\uff0c\u4f60\u6ca1\u6709\u4efb\u4f55\u9009\u62e9\uff1a\u4f60\u5fc5\u987b\u6267\u884c\u6b65\u9aa4 1\uff0c\u7136\u540e\u6267\u884c\u6b65\u9aa4 2\uff0c\u7136\u540e\u8fd4\u56de\u6b65\u9aa4 1\uff0c\u7136\u540e\u6267\u884c\u6b65\u9aa4 2\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3\u505c\u6b62\u3002</p>\n\n<p>\u4f60\u6709\u4e24\u4e2a\u7bee\u5b50\uff0c\u6bcf\u4e2a\u7bee\u5b50\u53ef\u4ee5\u643a\u5e26\u4efb\u4f55\u6570\u91cf\u7684\u6c34\u679c\uff0c\u4f46\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7bee\u5b50\u53ea\u643a\u5e26\u4e00\u79cd\u7c7b\u578b\u7684\u6c34\u679c\u3002</p>\n\n<p>\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u4f60\u80fd\u6536\u96c6\u7684\u6c34\u679c\u6811\u7684\u6700\u5927\u603b\u91cf\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,2]\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 [0, 1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [2,3,2,2]\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 [1, 2]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,3,3,1,2,1,1,2,3,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,1,1,2]\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u6216\u7b2c\u516b\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 4 \u68f5\u6c34\u679c\u6811\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\n</ul>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int totalFruit(vector<int>& tree) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int totalFruit(int[] tree) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def totalFruit(self, tree):\n        \"\"\"\n        :type tree: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def totalFruit(self, tree: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint totalFruit(int* tree, int treeSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int TotalFruit(int[] tree) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} tree\n * @return {number}\n */\nvar totalFruit = function(tree) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} tree\n# @return {Integer}\ndef total_fruit(tree)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func totalFruit(_ tree: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func totalFruit(tree []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def totalFruit(tree: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun totalFruit(tree: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn total_fruit(tree: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $tree\n     * @return Integer\n     */\n    function totalFruit($tree) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function totalFruit(tree: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0941", "frontend_question_id": "0905", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sort-array-by-parity", "url_en": "https://leetcode.com/problems/sort-array-by-parity", "relative_path_cn": "/leetcode/0900-0999/0905.Sort%20Array%20By%20Parity/README.md", "relative_path_en": "/leetcode/0900-0999/0905.Sort%20Array%20By%20Parity/README_EN.md", "title_cn": "\u6309\u5947\u5076\u6392\u5e8f\u6570\u7ec4", "title_en": "Sort Array By Parity", "question_title_slug": "sort-array-by-parity", "content_en": "<p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,4,3,1]</span>\r\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c&nbsp;<code>A</code> \u7684\u6240\u6709\u5076\u6570\u5143\u7d20\u4e4b\u540e\u8ddf\u7740\u6240\u6709\u5947\u6570\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8fd4\u56de\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u4efb\u4f55\u6570\u7ec4\u4f5c\u4e3a\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,3,1]\n\u8f93\u51fa [4,2,3,1]\uff0c[2,4,1,3] \u548c [4,2,1,3] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortArrayByParity(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sortArrayByParity(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortArrayByParity(self, A: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArrayByParity(int* A, int ASize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SortArrayByParity(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar sortArrayByParity = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef sort_array_by_parity(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortArrayByParity(_ A: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sortArrayByParity(A []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortArrayByParity(A: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortArrayByParity(A: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_array_by_parity(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function sortArrayByParity($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortArrayByParity(A: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0942", "frontend_question_id": "0906", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/super-palindromes", "url_en": "https://leetcode.com/problems/super-palindromes", "relative_path_cn": "/leetcode/0900-0999/0906.Super%20Palindromes/README.md", "relative_path_en": "/leetcode/0900-0999/0906.Super%20Palindromes/README_EN.md", "title_cn": "\u8d85\u7ea7\u56de\u6587\u6570", "title_en": "Super Palindromes", "question_title_slug": "super-palindromes", "content_en": "<p>Let&#39;s say a positive integer is a&nbsp;<em>superpalindrome</em>&nbsp;if it is a palindrome, and it is also the square of a palindrome.</p>\r\n\r\n<p>Now, given two positive&nbsp;integers <code>L</code> and <code>R</code> (represented as strings), return the number of superpalindromes in the inclusive range <code>[L, R]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>L = <span id=\"example-input-1-1\">&quot;4&quot;</span>, R = <span id=\"example-input-1-2\">&quot;1000&quot;</span>\r\n<strong>Output: </strong>4\r\n<span><strong>Explanation</strong>: </span>4, 9, 121, and 484 are superpalindromes.\r\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\r\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\r\n\t<li><code>L</code> and <code>R</code> are strings representing integers in the range <code>[1, 10^18)</code>.</li>\r\n\t<li><code>int(L) &lt;= int(R)</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n", "content_cn": "<p>\u5982\u679c\u4e00\u4e2a\u6b63\u6574\u6570\u81ea\u8eab\u662f\u56de\u6587\u6570\uff0c\u800c\u4e14\u5b83\u4e5f\u662f\u4e00\u4e2a\u56de\u6587\u6570\u7684\u5e73\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u6570\u4e3a\u8d85\u7ea7\u56de\u6587\u6570\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570&nbsp;<code>L</code> \u548c&nbsp;<code>R</code> \uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\uff09\uff0c\u8fd4\u56de\u5305\u542b\u5728\u8303\u56f4 <code>[L, R]</code> \u4e2d\u7684\u8d85\u7ea7\u56de\u6587\u6570\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>L = &quot;4&quot;, R = &quot;1000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a\n</strong>4\uff0c9\uff0c121\uff0c\u4ee5\u53ca 484 \u662f\u8d85\u7ea7\u56de\u6587\u6570\u3002\n\u6ce8\u610f 676 \u4e0d\u662f\u4e00\u4e2a\u8d85\u7ea7\u56de\u6587\u6570\uff1a 26 * 26 = 676\uff0c\u4f46\u662f 26 \u4e0d\u662f\u56de\u6587\u6570\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\n\t<li><code>L</code> \u548c&nbsp;<code>R</code>&nbsp;\u662f\u8868\u793a&nbsp;<code>[1, 10^18)</code>&nbsp;\u8303\u56f4\u7684\u6574\u6570\u7684\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>int(L) &lt;= int(R)</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int superpalindromesInRange(string L, string R) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int superpalindromesInRange(String L, String R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def superpalindromesInRange(self, L: str, R: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint superpalindromesInRange(char * L, char * R){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SuperpalindromesInRange(string L, string R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} L\n * @param {string} R\n * @return {number}\n */\nvar superpalindromesInRange = function(L, R) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} l\n# @param {String} r\n# @return {Integer}\ndef superpalindromes_in_range(l, r)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func superpalindromesInRange(_ L: String, _ R: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func superpalindromesInRange(L string, R string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def superpalindromesInRange(L: String, R: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun superpalindromesInRange(L: String, R: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn superpalindromes_in_range(l: String, r: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $L\n     * @param String $R\n     * @return Integer\n     */\n    function superpalindromesInRange($L, $R) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function superpalindromesInRange(L: string, R: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0943", "frontend_question_id": "0907", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-subarray-minimums", "url_en": "https://leetcode.com/problems/sum-of-subarray-minimums", "relative_path_cn": "/leetcode/0900-0999/0907.Sum%20of%20Subarray%20Minimums/README.md", "relative_path_en": "/leetcode/0900-0999/0907.Sum%20of%20Subarray%20Minimums/README_EN.md", "title_cn": "\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e4b\u548c", "title_en": "Sum of Subarray Minimums", "question_title_slug": "sum-of-subarray-minimums", "content_en": "<p>Given an array of integers <code>A</code>, find the sum of <code>min(B)</code>, where <code>B</code> ranges over&nbsp;every (contiguous) subarray of <code>A</code>.</p>\r\n\r\n<p>Since the answer may be large, <strong>return the answer modulo <code>10^9 + 7</code>.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">17</span>\r\n<strong>Explanation:</strong> Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \r\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.&nbsp; Sum is 17.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 30000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,1,2,4]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [11,81,94,43,3]\n<strong>Output:</strong> 444\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u627e\u5230 <code>min(B)</code>&nbsp;\u7684\u603b\u548c\uff0c\u5176\u4e2d <code>B</code> \u7684\u8303\u56f4\u4e3a&nbsp;<code>A</code> \u7684\u6bcf\u4e2a\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u56e0\u6b64<strong>\u8fd4\u56de\u7b54\u6848\u6a21 <code>10^9 + 7</code></strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5b50\u6570\u7ec4\u4e3a<strong> </strong>[3]\uff0c[1]\uff0c[2]\uff0c[4]\uff0c[3,1]\uff0c[1,2]\uff0c[2,4]\uff0c[3,1,2]\uff0c[1,2,4]\uff0c[3,1,2,4]\u3002 \n\u6700\u5c0f\u503c\u4e3a 3\uff0c1\uff0c2\uff0c4\uff0c1\uff0c1\uff0c2\uff0c1\uff0c1\uff0c1\uff0c\u548c\u4e3a 17\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 30000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Stack", "Array"], "tags_cn": ["\u6808", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int sumSubarrayMins(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sumSubarrayMins(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint sumSubarrayMins(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SumSubarrayMins(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar sumSubarrayMins = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef sum_subarray_mins(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sumSubarrayMins(_ arr: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sumSubarrayMins(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sumSubarrayMins(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sumSubarrayMins(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sum_subarray_mins(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function sumSubarrayMins($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sumSubarrayMins(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0944", "frontend_question_id": "0908", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-range-i", "url_en": "https://leetcode.com/problems/smallest-range-i", "relative_path_cn": "/leetcode/0900-0999/0908.Smallest%20Range%20I/README.md", "relative_path_en": "/leetcode/0900-0999/0908.Smallest%20Range%20I/README_EN.md", "title_cn": "\u6700\u5c0f\u5dee\u503c I", "title_en": "Smallest Range I", "question_title_slug": "smallest-range-i", "content_en": "<p>Given an array <code>A</code> of integers, for each integer <code>A[i]</code> we may choose any <code>x</code> with <code>-K &lt;= x &lt;= K</code>, and add <code>x</code> to <code>A[i]</code>.</p>\r\n\r\n<p>After this process, we have some array <code>B</code>.</p>\r\n\r\n<p>Return the smallest possible difference between the maximum value of <code>B</code>&nbsp;and the minimum value of <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0\r\n<strong>Explanation</strong>: B = [1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[0,10]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: B = [2,8]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[1,3,6]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: B = [3,3,3] or B = [4,4,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8bf7\u4f60\u7ed9\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 <code>A[i]</code> \u90fd\u52a0\u4e0a\u4e00\u4e2a\u4efb\u610f\u6570\u5b57 <code>x</code> \uff08<code>-K &lt;= x &lt;= K</code>\uff09\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u6570\u7ec4 <code>B</code> \u3002</p>\n\n<p>\u8fd4\u56de\u6570\u7ec4 <code>B</code> \u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u5dee\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1], K = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,10], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>B = [2,8]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,3,6], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [3,3,3] \u6216 B = [4,4,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestRangeI(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int smallestRangeI(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestRangeI(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint smallestRangeI(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SmallestRangeI(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar smallestRangeI = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef smallest_range_i(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestRangeI(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestRangeI(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestRangeI(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestRangeI(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_range_i(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function smallestRangeI($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestRangeI(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0945", "frontend_question_id": "0909", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/snakes-and-ladders", "url_en": "https://leetcode.com/problems/snakes-and-ladders", "relative_path_cn": "/leetcode/0900-0999/0909.Snakes%20and%20Ladders/README.md", "relative_path_en": "/leetcode/0900-0999/0909.Snakes%20and%20Ladders/README_EN.md", "title_cn": "\u86c7\u68af\u68cb", "title_en": "Snakes and Ladders", "question_title_slug": "snakes-and-ladders", "content_en": "<p>On an N x N <code>board</code>, the numbers from <code>1</code> to <code>N*N</code> are written&nbsp;<em>boustrophedonically</em>&nbsp;<strong>starting from the bottom&nbsp;left of the board</strong>, and alternating direction each row.&nbsp; For example, for a 6 x 6 board, the numbers are written as follows:</p>\r\n\r\n<pre>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/09/23/snakes.png\" style=\"width: 254px; height: 200px;\" />\r\n</pre>\r\n\r\n<p>You start on square <code>1</code> of the board (which is always in the last row and&nbsp;first column).&nbsp; Each move, starting from square <code>x</code>, consists of the following:</p>\r\n\r\n<ul>\r\n\t<li>You choose a destination square <code>S</code> with number&nbsp;<code>x+1</code>, <code>x+2</code>, <code>x+3</code>, <code>x+4</code>, <code>x+5</code>, or <code>x+6</code>, provided this&nbsp;number is&nbsp;<code>&lt;=&nbsp;N*N</code>.\r\n\r\n\t<ul>\r\n\t\t<li>(This choice simulates the result of a standard 6-sided die roll: ie., there are always <strong>at most 6 destinations, regardless of the size of the board</strong>.)</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>If <code>S</code>&nbsp;has a snake or ladder, you move to the destination of that snake or ladder.&nbsp; Otherwise, you move to <code>S</code>.</li>\r\n</ul>\r\n\r\n<p>A board square on row <code>r</code> and column <code>c</code>&nbsp;has a &quot;snake or ladder&quot; if <code>board[r][c] != -1</code>.&nbsp; The destination of that snake or ladder is <code>board[r][c]</code>.</p>\r\n\r\n<p>Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another&nbsp;snake or ladder, you do <strong>not</strong> continue moving.&nbsp; (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at&nbsp;`3`, because you do <strong>not</strong> continue moving to `4`.)</p>\r\n\r\n<p>Return the least number of moves required to reach square <font face=\"monospace\">N*N</font>.&nbsp; If it is not possible, return <code>-1</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,35,-1,-1,13,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,15,-1,-1,-1,-1]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation: </strong>\r\nAt the beginning, you start at square 1 [at row 5, column 0].\r\nYou decide to move to square 2, and must take the ladder to square 15.\r\nYou then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.\r\nYou then decide to move to square 14, and must take the ladder to square 35.\r\nYou then decide to move to square 36, ending the game.\r\nIt can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li>\r\n\t<li><code>board[i][j]</code>&nbsp;is between <code>1</code> and <code>N*N</code> or is equal to <code>-1</code>.</li>\r\n\t<li>The board&nbsp;square with number <code>1</code> has no snake or ladder.</li>\r\n\t<li>The board square with number <code>N*N</code> has no snake or ladder.</li>\r\n</ol>\r\n", "content_cn": "<p>N x N \u7684\u68cb\u76d8&nbsp;<code>board</code> \u4e0a\uff0c\u6309\u4ece&nbsp;<code>1</code> \u5230 <code>N*N</code>&nbsp;\u7684\u6570\u5b57\u7ed9\u65b9\u683c\u7f16\u53f7\uff0c\u7f16\u53f7<strong> \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb</strong>\uff0c\u6bcf\u4e00\u884c\u4ea4\u66ff\u65b9\u5411\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4e00\u5757 6 x 6 \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u7f16\u53f7\u5982\u4e0b\uff1a</p>\n\n<pre><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/31/snakes.png\" style=\"height: 200px; width: 254px;\">\n</pre>\n\n<p><code>r</code> \u884c <code>c</code> \u5217\u7684\u68cb\u76d8\uff0c\u6309\u524d\u8ff0\u65b9\u6cd5\u7f16\u53f7\uff0c\u68cb\u76d8\u683c\u4e2d\u53ef\u80fd\u5b58\u5728 &ldquo;\u86c7&rdquo; \u6216 &ldquo;\u68af\u5b50&rdquo;\uff1b\u5982\u679c <code>board[r][c] != -1</code>\uff0c\u90a3\u4e2a\u86c7\u6216\u68af\u5b50\u7684\u76ee\u7684\u5730\u5c06\u4f1a\u662f <code>board[r][c]</code>\u3002</p>\n\n<p>\u73a9\u5bb6\u4ece\u68cb\u76d8\u4e0a\u7684\u65b9\u683c&nbsp;<code>1</code> \uff08\u603b\u662f\u5728\u6700\u540e\u4e00\u884c\u3001\u7b2c\u4e00\u5217\uff09\u5f00\u59cb\u51fa\u53d1\u3002</p>\n\n<p>\u6bcf\u4e00\u56de\u5408\uff0c\u73a9\u5bb6\u9700\u8981\u4ece\u5f53\u524d\u65b9\u683c <code>x</code> \u5f00\u59cb\u51fa\u53d1\uff0c\u6309\u4e0b\u8ff0\u8981\u6c42\u524d\u8fdb\uff1a</p>\n\n<ul>\n\t<li>\u9009\u5b9a\u76ee\u6807\u65b9\u683c\uff1a\u9009\u62e9\u4ece\u7f16\u53f7 <code>x+1</code>\uff0c<code>x+2</code>\uff0c<code>x+3</code>\uff0c<code>x+4</code>\uff0c<code>x+5</code>\uff0c\u6216\u8005 <code>x+6</code> \u7684\u65b9\u683c\u4e2d\u9009\u51fa\u4e00\u4e2a\u76ee\u6807\u65b9\u683c <code>s</code> \uff0c\u76ee\u6807\u65b9\u683c\u7684\u7f16\u53f7 <code>&lt;= N*N</code>\u3002\n\n\t<ul>\n\t\t<li>\u8be5\u9009\u62e9\u6a21\u62df\u4e86\u63b7\u9ab0\u5b50\u7684\u60c5\u666f\uff0c\u65e0\u8bba\u68cb\u76d8\u5927\u5c0f\u5982\u4f55\uff0c\u4f60\u7684\u76ee\u7684\u5730\u8303\u56f4\u4e5f\u53ea\u80fd\u5904\u4e8e\u533a\u95f4 <code>[x+1, x+6]</code> \u4e4b\u95f4\u3002</li>\n\t</ul>\n\t</li>\n\t<li>\u4f20\u9001\u73a9\u5bb6\uff1a\u5982\u679c\u76ee\u6807\u65b9\u683c <code>S</code> \u5904\u5b58\u5728\u86c7\u6216\u68af\u5b50\uff0c\u90a3\u4e48\u73a9\u5bb6\u4f1a\u4f20\u9001\u5230\u86c7\u6216\u68af\u5b50\u7684\u76ee\u7684\u5730\u3002\u5426\u5219\uff0c\u73a9\u5bb6\u4f20\u9001\u5230\u76ee\u6807\u65b9\u683c <code>S</code>\u3002&nbsp;</li>\n</ul>\n\n<p>\u6ce8\u610f\uff0c\u73a9\u5bb6\u5728\u6bcf\u56de\u5408\u7684\u524d\u8fdb\u8fc7\u7a0b\u4e2d\u6700\u591a\u53ea\u80fd\u722c\u8fc7\u86c7\u6216\u68af\u5b50\u4e00\u6b21\uff1a\u5c31\u7b97\u76ee\u7684\u5730\u662f\u53e6\u4e00\u6761\u86c7\u6216\u68af\u5b50\u7684\u8d77\u70b9\uff0c\u4f60\u4e5f\u4e0d\u4f1a\u7ee7\u7eed\u79fb\u52a8\u3002</p>\n\n<p>\u8fd4\u56de\u8fbe\u5230\u65b9\u683c N*N \u6240\u9700\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9996\u5148\uff0c\u4ece\u65b9\u683c 1 [\u7b2c 5 \u884c\uff0c\u7b2c 0 \u5217] \u5f00\u59cb\u3002\n\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 2\uff0c\u5e76\u5fc5\u987b\u722c\u8fc7\u68af\u5b50\u79fb\u52a8\u5230\u5230\u65b9\u683c 15\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 17 [\u7b2c 3 \u884c\uff0c\u7b2c 5 \u5217]\uff0c\u5fc5\u987b\u722c\u8fc7\u86c7\u5230\u65b9\u683c 13\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 14\uff0c\u4e14\u5fc5\u987b\u901a\u8fc7\u68af\u5b50\u79fb\u52a8\u5230\u65b9\u683c 35\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 36, \u6e38\u620f\u7ed3\u675f\u3002\n\u53ef\u4ee5\u8bc1\u660e\u4f60\u9700\u8981\u81f3\u5c11 4 \u6b21\u79fb\u52a8\u624d\u80fd\u5230\u8fbe\u7b2c N*N \u4e2a\u65b9\u683c\uff0c\u6240\u4ee5\u7b54\u6848\u662f 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li>\n\t<li><code>board[i][j]</code>&nbsp;\u4ecb\u4e8e&nbsp;<code>1</code>&nbsp;\u548c&nbsp;<code>N*N</code>&nbsp;\u4e4b\u95f4\u6216\u8005\u7b49\u4e8e&nbsp;<code>-1</code>\u3002</li>\n\t<li>\u7f16\u53f7\u4e3a&nbsp;<code>1</code>&nbsp;\u7684\u65b9\u683c\u4e0a\u6ca1\u6709\u86c7\u6216\u68af\u5b50\u3002</li>\n\t<li>\u7f16\u53f7\u4e3a&nbsp;<code>N*N</code>&nbsp;\u7684\u65b9\u683c\u4e0a\u6ca1\u6709\u86c7\u6216\u68af\u5b50\u3002</li>\n</ul>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int snakesAndLadders(vector<vector<int>>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int snakesAndLadders(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def snakesAndLadders(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint snakesAndLadders(int** board, int boardSize, int* boardColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SnakesAndLadders(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar snakesAndLadders = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @return {Integer}\ndef snakes_and_ladders(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func snakesAndLadders(_ board: [[Int]]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func snakesAndLadders(board [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def snakesAndLadders(board: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun snakesAndLadders(board: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn snakes_and_ladders(board: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function snakesAndLadders($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function snakesAndLadders(board: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0946", "frontend_question_id": "0910", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-range-ii", "url_en": "https://leetcode.com/problems/smallest-range-ii", "relative_path_cn": "/leetcode/0900-0999/0910.Smallest%20Range%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0910.Smallest%20Range%20II/README_EN.md", "title_cn": "\u6700\u5c0f\u5dee\u503c II", "title_en": "Smallest Range II", "question_title_slug": "smallest-range-ii", "content_en": "<p>Given an array <code>A</code> of integers, for each integer <code>A[i]</code> we need to choose <strong>either&nbsp;<code>x = -K</code>&nbsp;or <code>x = K</code></strong>, and add <code>x</code> to <code>A[i] <strong>(only once)</strong></code>.</p>\r\n\r\n<p>After this process, we have some array <code>B</code>.</p>\r\n\r\n<p>Return the smallest possible difference between the maximum value of <code>B</code>&nbsp;and the minimum value of <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n<span><strong>Explanation</strong>: B = [1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[0,10]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span><strong>Explanation</strong>: B = [2,8]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[1,3,6]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<span><strong>Explanation</strong>: B = [4,6,3]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6574\u6570 <code>A[i]</code>\uff0c\u53ef\u4ee5\u9009\u62e9<strong>\u00a0<code>x = -K</code>\u00a0\u6216\u662f\u00a0<code>x = K</code></strong> \uff08<code><strong>K</strong></code> \u603b\u662f\u975e\u8d1f\u6574\u6570\uff09\uff0c\u5e76\u5c06\u00a0<code>x</code>\u00a0\u52a0\u5230\u00a0<code>A[i]</code>\u00a0\u4e2d\u3002</p>\n\n<p>\u5728\u6b64\u8fc7\u7a0b\u4e4b\u540e\uff0c\u5f97\u5230\u6570\u7ec4\u00a0<code>B</code>\u3002</p>\n\n<p>\u8fd4\u56de <code>B</code>\u00a0\u7684\u6700\u5927\u503c\u548c <code>B</code>\u00a0\u7684\u6700\u5c0f\u503c\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u5dee\u503c\u3002</p>\n\n<p>\u00a0</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>A = [1], K = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>A = [0,10], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>B = [2,8]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>A = [1,3,6], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>B = [4,6,3]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= A.length <= 10000</code></li>\n\t<li><code>0 <= A[i] <= 10000</code></li>\n\t<li><code>0 <= K <= 10000</code></li>\n</ul>\n", "tags_en": ["Greedy", "Math"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestRangeII(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int smallestRangeII(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestRangeII(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestRangeII(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint smallestRangeII(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SmallestRangeII(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar smallestRangeII = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef smallest_range_ii(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestRangeII(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestRangeII(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestRangeII(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestRangeII(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_range_ii(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function smallestRangeII($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestRangeII(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0947", "frontend_question_id": "0911", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/online-election", "url_en": "https://leetcode.com/problems/online-election", "relative_path_cn": "/leetcode/0900-0999/0911.Online%20Election/README.md", "relative_path_en": "/leetcode/0900-0999/0911.Online%20Election/README_EN.md", "title_cn": "\u5728\u7ebf\u9009\u4e3e", "title_en": "Online Election", "question_title_slug": "online-election", "content_en": "<p>In an election, the <code>i</code>-th&nbsp;vote was cast for <code>persons[i]</code> at time <code>times[i]</code>.</p>\r\n\r\n<p>Now, we would like to implement the following query function: <code>TopVotedCandidate.q(int t)</code> will return the number of the person that was leading the election at time <code>t</code>.&nbsp;&nbsp;</p>\r\n\r\n<p>Votes cast at time <code>t</code> will count towards our query.&nbsp; In the case of a tie, the most recent vote (among tied candidates) wins.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;TopVotedCandidate&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;]</span>, <span id=\"example-input-1-2\">[[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,1,1,0,0,1]</span>\r\n<strong>Explanation: </strong>\r\nAt time 3, the votes are [0], and 0 is leading.\r\nAt time 12, the votes are [0,1,1], and 1 is leading.\r\nAt time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\r\nThis continues for 3 more queries at time 15, 24, and 8.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= persons[i] &lt;= persons.length</code></li>\r\n\t<li><code>times</code>&nbsp;is a strictly increasing array with all elements in <code>[0, 10^9]</code>.</li>\r\n\t<li><code>TopVotedCandidate.q</code> is called at most <code>10000</code> times per test case.</li>\r\n\t<li><code>TopVotedCandidate.q(int t)</code> is always called with <code>t &gt;= times[0]</code>.</li>\r\n</ol>\r\n</div>\r\n", "content_cn": "<p>\u5728\u9009\u4e3e\u4e2d\uff0c\u7b2c&nbsp;<code>i</code>&nbsp;\u5f20\u7968\u662f\u5728\u65f6\u95f4\u4e3a&nbsp;<code>times[i]</code>&nbsp;\u65f6\u6295\u7ed9&nbsp;<code>persons[i]</code>&nbsp;\u7684\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u4e0b\u9762\u7684\u67e5\u8be2\u51fd\u6570\uff1a <code>TopVotedCandidate.q(int t)</code> \u5c06\u8fd4\u56de\u5728&nbsp;<code>t</code> \u65f6\u523b\u4e3b\u5bfc\u9009\u4e3e\u7684\u5019\u9009\u4eba\u7684\u7f16\u53f7\u3002</p>\n\n<p>\u5728&nbsp;<code>t</code> \u65f6\u523b\u6295\u51fa\u7684\u9009\u7968\u4e5f\u5c06\u88ab\u8ba1\u5165\u6211\u4eec\u7684\u67e5\u8be2\u4e4b\u4e2d\u3002\u5728\u5e73\u5c40\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u8fd1\u83b7\u5f97\u6295\u7968\u7684\u5019\u9009\u4eba\u5c06\u4f1a\u83b7\u80dc\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;TopVotedCandidate&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,0,1,1,0,0,1]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u65f6\u95f4\u4e3a 3\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0]\uff0c\u7f16\u53f7\u4e3a 0 \u7684\u5019\u9009\u4eba\u9886\u5148\u3002\n\u65f6\u95f4\u4e3a 12\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0,1,1]\uff0c\u7f16\u53f7\u4e3a 1 \u7684\u5019\u9009\u4eba\u9886\u5148\u3002\n\u65f6\u95f4\u4e3a 25\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0,1,1,0,0,1]\uff0c\u7f16\u53f7\u4e3a 1 \u7684\u5019\u9009\u4eba\u9886\u5148\uff08\u56e0\u4e3a\u6700\u8fd1\u7684\u6295\u7968\u7ed3\u679c\u662f\u5e73\u5c40\uff09\u3002\n\u5728\u65f6\u95f4 15\u300124 \u548c 8 \u5904\u7ee7\u7eed\u6267\u884c 3 \u4e2a\u67e5\u8be2\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= persons[i] &lt;= persons.length</code></li>\n\t<li><code>times</code>&nbsp;\u662f\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4\uff0c\u6240\u6709\u5143\u7d20\u90fd\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u8303\u56f4\u4e2d\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>10000</code>&nbsp;\u6b21&nbsp;<code>TopVotedCandidate.q</code>\u3002</li>\n\t<li><code>TopVotedCandidate.q(int t)</code>&nbsp;\u88ab\u8c03\u7528\u65f6\u603b\u662f\u6ee1\u8db3&nbsp;<code>t &gt;= times[0]</code>\u3002</li>\n</ol>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class TopVotedCandidate {\npublic:\n    TopVotedCandidate(vector<int>& persons, vector<int>& times) {\n\n    }\n    \n    int q(int t) {\n\n    }\n};\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj->q(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n\n    }\n    \n    public int q(int t) {\n\n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.q(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class TopVotedCandidate(object):\n\n    def __init__(self, persons, times):\n        \"\"\"\n        :type persons: List[int]\n        :type times: List[int]\n        \"\"\"\n        \n\n    def q(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        \n\n    def q(self, t: int) -> int:\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} TopVotedCandidate;\n\n\nTopVotedCandidate* topVotedCandidateCreate(int* persons, int personsSize, int* times, int timesSize) {\n    \n}\n\nint topVotedCandidateQ(TopVotedCandidate* obj, int t) {\n  \n}\n\nvoid topVotedCandidateFree(TopVotedCandidate* obj) {\n    \n}\n\n/**\n * Your TopVotedCandidate struct will be instantiated and called as such:\n * TopVotedCandidate* obj = topVotedCandidateCreate(persons, personsSize, times, timesSize);\n * int param_1 = topVotedCandidateQ(obj, t);\n \n * topVotedCandidateFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n\n    }\n    \n    public int Q(int t) {\n\n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.Q(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} persons\n * @param {number[]} times\n */\nvar TopVotedCandidate = function(persons, times) {\n\n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nTopVotedCandidate.prototype.q = function(t) {\n\n};\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class TopVotedCandidate\n\n=begin\n    :type persons: Integer[]\n    :type times: Integer[]\n=end\n    def initialize(persons, times)\n\n    end\n\n\n=begin\n    :type t: Integer\n    :rtype: Integer\n=end\n    def q(t)\n\n    end\n\n\nend\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate.new(persons, times)\n# param_1 = obj.q(t)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass TopVotedCandidate {\n\n    init(_ persons: [Int], _ times: [Int]) {\n        \n    }\n    \n    func q(_ t: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * let obj = TopVotedCandidate(persons, times)\n * let ret_1: Int = obj.q(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type TopVotedCandidate struct {\n\n}\n\n\nfunc Constructor(persons []int, times []int) TopVotedCandidate {\n\n}\n\n\nfunc (this *TopVotedCandidate) Q(t int) int {\n\n}\n\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * obj := Constructor(persons, times);\n * param_1 := obj.Q(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class TopVotedCandidate(_persons: Array[Int], _times: Array[Int]) {\n\n    def q(t: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class TopVotedCandidate(persons: IntArray, times: IntArray) {\n\n    fun q(t: Int): Int {\n\n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct TopVotedCandidate {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TopVotedCandidate {\n\n    fn new(persons: Vec<i32>, times: Vec<i32>) -> Self {\n        \n    }\n    \n    fn q(&self, t: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * let obj = TopVotedCandidate::new(persons, times);\n * let ret_1: i32 = obj.q(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class TopVotedCandidate {\n    /**\n     * @param Integer[] $persons\n     * @param Integer[] $times\n     */\n    function __construct($persons, $times) {\n        \n    }\n  \n    /**\n     * @param Integer $t\n     * @return Integer\n     */\n    function q($t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * $obj = TopVotedCandidate($persons, $times);\n * $ret_1 = $obj->q($t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class TopVotedCandidate {\n    constructor(persons: number[], times: number[]) {\n\n    }\n\n    q(t: number): number {\n\n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0948", "frontend_question_id": "0912", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sort-an-array", "url_en": "https://leetcode.com/problems/sort-an-array", "relative_path_cn": "/leetcode/0900-0999/0912.Sort%20an%20Array/README.md", "relative_path_en": "/leetcode/0900-0999/0912.Sort%20an%20Array/README_EN.md", "title_cn": "\u6392\u5e8f\u6570\u7ec4", "title_en": "Sort an Array", "question_title_slug": "sort-an-array", "content_en": "<p>Given an array of integers <code>nums</code>, sort the array in ascending order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,2,3,1]\n<strong>Output:</strong> [1,2,3,5]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,1,1,2,0,0]\n<strong>Output:</strong> [0,0,1,1,2,5]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50000</code></li>\n\t<li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u8bf7\u4f60\u5c06\u8be5\u6570\u7ec4\u5347\u5e8f\u6392\u5217\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [5,2,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,5]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [5,1,1,2,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,2,5]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= nums.length &lt;= 50000</code></li>\n\t<li><code>-50000 &lt;= nums[i] &lt;= 50000</code></li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sortArray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArray(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SortArray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef sort_array(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortArray(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sortArray(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortArray(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortArray(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortArray($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortArray(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0949", "frontend_question_id": "0913", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cat-and-mouse", "url_en": "https://leetcode.com/problems/cat-and-mouse", "relative_path_cn": "/leetcode/0900-0999/0913.Cat%20and%20Mouse/README.md", "relative_path_en": "/leetcode/0900-0999/0913.Cat%20and%20Mouse/README_EN.md", "title_cn": "\u732b\u548c\u8001\u9f20", "title_en": "Cat and Mouse", "question_title_slug": "cat-and-mouse", "content_en": "<p>A game on an <strong>undirected</strong> graph is played by two players, Mouse and Cat, who alternate turns.</p>\n\n<p>The graph is given as follows: <code>graph[a]</code> is a list of all nodes <code>b</code> such that <code>ab</code> is an edge of the graph.</p>\n\n<p>The mouse starts at node <code>1</code> and goes first, the cat starts at node <code>2</code> and goes second, and there is a hole at node <code>0</code>.</p>\n\n<p>During each player&#39;s turn, they <strong>must</strong> travel along one&nbsp;edge of the graph that meets where they are.&nbsp; For example, if the Mouse is at node 1, it <strong>must</strong> travel to any node in <code>graph[1]</code>.</p>\n\n<p>Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)</p>\n\n<p>Then, the game can end in three&nbsp;ways:</p>\n\n<ul>\n\t<li>If ever the Cat occupies the same node as the Mouse, the Cat wins.</li>\n\t<li>If ever the Mouse reaches the Hole, the Mouse wins.</li>\n\t<li>If ever a position is repeated (i.e., the players are in the same position as a previous turn, and&nbsp;it is the same player&#39;s turn to move), the game is a draw.</li>\n</ul>\n\n<p>Given a <code>graph</code>, and assuming both players play optimally, return</p>\n\n<ul>\n\t<li><code>1</code>&nbsp;if the mouse wins the game,</li>\n\t<li><code>2</code>&nbsp;if the cat wins the game, or</li>\n\t<li><code>0</code>&nbsp;if the game is a draw.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0],[3],[0,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= graph.length &lt;= 50</code></li>\n\t<li><code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li>\n\t<li><code>graph[i][j] != i</code></li>\n\t<li><code>graph[i]</code> is unique.</li>\n\t<li>The mouse and the cat can always move.&nbsp;</li>\n</ul>\n", "content_cn": "<p>\u4e24\u4e2a\u73a9\u5bb6\u5206\u522b\u626e\u6f14\u732b\uff08Cat\uff09\u548c\u8001\u9f20\uff08Mouse\uff09\u5728<strong>\u65e0\u5411</strong>\u56fe\u4e0a\u8fdb\u884c\u6e38\u620f\uff0c\u4ed6\u4eec\u8f6e\u6d41\u884c\u52a8\u3002</p>\n\n<p>\u8be5\u56fe\u6309\u4e0b\u8ff0\u89c4\u5219\u7ed9\u51fa\uff1a<code>graph[a]</code>&nbsp;\u662f\u6240\u6709\u7ed3\u70b9 <code>b</code> \u7684\u5217\u8868\uff0c\u4f7f\u5f97 <code>ab</code> \u662f\u56fe\u7684\u4e00\u6761\u8fb9\u3002</p>\n\n<p>\u8001\u9f20\u4ece\u7ed3\u70b9 1 \u5f00\u59cb\u5e76\u7387\u5148\u51fa\u53d1\uff0c\u732b\u4ece\u7ed3\u70b9 2 \u5f00\u59cb\u4e14\u968f\u540e\u51fa\u53d1\uff0c\u5728\u7ed3\u70b9 0 \u5904\u6709\u4e00\u4e2a\u6d1e\u3002</p>\n\n<p>\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u56de\u5408\u4e2d\uff0c\u4ed6\u4eec<strong>\u5fc5\u987b</strong>\u6cbf\u7740\u4e0e\u4ed6\u4eec\u6240\u5728\u4f4d\u7f6e\u76f8\u543b\u5408\u7684\u56fe\u7684\u4e00\u6761\u8fb9\u79fb\u52a8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8001\u9f20\u4f4d\u4e8e\u7ed3\u70b9 <code>1</code>\uff0c\u90a3\u4e48\u5b83\u53ea\u80fd\u79fb\u52a8\u5230&nbsp;<code>graph[1]</code>&nbsp;\u4e2d\u7684\uff08\u4efb\u4f55\uff09\u7ed3\u70b9\u53bb\u3002</p>\n\n<p>\u6b64\u5916\uff0c\u732b\u65e0\u6cd5\u79fb\u52a8\u5230\u6d1e\uff08\u7ed3\u70b9 0\uff09\u91cc\u3002</p>\n\n<p>\u7136\u540e\uff0c\u6e38\u620f\u5728\u51fa\u73b0\u4ee5\u4e0b\u4e09\u79cd\u60c5\u5f62\u4e4b\u4e00\u65f6\u7ed3\u675f\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u732b\u548c\u8001\u9f20\u5360\u636e\u76f8\u540c\u7684\u7ed3\u70b9\uff0c\u732b\u83b7\u80dc\u3002</li>\n\t<li>\u5982\u679c\u8001\u9f20\u8eb2\u5165\u6d1e\u91cc\uff0c\u8001\u9f20\u83b7\u80dc\u3002</li>\n\t<li>\u5982\u679c\u67d0\u4e00\u4f4d\u7f6e\u91cd\u590d\u51fa\u73b0\uff08\u5373\uff0c\u73a9\u5bb6\u4eec\u7684\u4f4d\u7f6e\u548c\u79fb\u52a8\u987a\u5e8f\u90fd\u4e0e\u4e0a\u4e00\u4e2a\u56de\u5408\u76f8\u540c\uff09\uff0c\u6e38\u620f\u5e73\u5c40\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a&nbsp;<code>graph</code>\uff0c\u5e76\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u90fd\u4ee5\u6700\u4f73\u72b6\u6001\u53c2\u4e0e\u6e38\u620f\uff0c\u5982\u679c\u8001\u9f20\u83b7\u80dc\uff0c\u5219\u8fd4\u56de&nbsp;<code>1</code>\uff1b\u5982\u679c\u732b\u83b7\u80dc\uff0c\u5219\u8fd4\u56de <code>2</code>\uff1b\u5982\u679c\u5e73\u5c40\uff0c\u5219\u8fd4\u56de <code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n4---3---1\n|&nbsp; &nbsp;|\n2---5\n&nbsp;\\&nbsp;/\n&nbsp; 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= graph.length &lt;= 200</code></li>\n\t<li>\u4fdd\u8bc1 <code>graph[1]</code>&nbsp;\u975e\u7a7a\u3002</li>\n\t<li>\u4fdd\u8bc1&nbsp;<code>graph[2]</code>&nbsp;\u5305\u542b\u975e\u96f6\u5143\u7d20\u3002</li>\n</ol>\n", "tags_en": ["Breadth-first Search", "Minimax"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u6781\u5c0f\u5316\u6781\u5927"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int catMouseGame(vector<vector<int>>& graph) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int catMouseGame(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def catMouseGame(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint catMouseGame(int** graph, int graphSize, int* graphColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CatMouseGame(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar catMouseGame = function(graph) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer}\ndef cat_mouse_game(graph)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func catMouseGame(_ graph: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func catMouseGame(graph [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def catMouseGame(graph: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun catMouseGame(graph: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn cat_mouse_game(graph: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function catMouseGame($graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function catMouseGame(graph: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0950", "frontend_question_id": "0914", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/x-of-a-kind-in-a-deck-of-cards", "url_en": "https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards", "relative_path_cn": "/leetcode/0900-0999/0914.X%20of%20a%20Kind%20in%20a%20Deck%20of%20Cards/README.md", "relative_path_en": "/leetcode/0900-0999/0914.X%20of%20a%20Kind%20in%20a%20Deck%20of%20Cards/README_EN.md", "title_cn": "\u5361\u724c\u5206\u7ec4", "title_en": "X of a Kind in a Deck of Cards", "question_title_slug": "x-of-a-kind-in-a-deck-of-cards", "content_en": "<p>In a deck of cards, each card has an integer written on it.</p>\n\n<p>Return <code>true</code> if and only if you can choose&nbsp;<code>X &gt;= 2</code> such that&nbsp;it is possible to split the entire deck&nbsp;into 1 or more groups of cards, where:</p>\n\n<ul>\n\t<li>Each group has exactly <code>X</code> cards.</li>\n\t<li>All the cards in each group have the same integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,2,3,4,4,3,2,1]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Possible partition [1,1],[2,2],[3,3],[4,4].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,1,1,2,2,2,3,3]\n<strong>Output:</strong> false&acute;\n<strong>Explanation</strong>: No possible partition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1]\n<strong>Output:</strong> false\n<strong>Explanation</strong>: No possible partition.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,1]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Possible partition [1,1].\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,1,2,2,2,2]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Possible partition [1,1],[2,2],[2,2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deck.length &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= deck[i] &lt;&nbsp;10^4</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u526f\u724c\uff0c\u6bcf\u5f20\u724c\u4e0a\u90fd\u5199\u7740\u4e00\u4e2a\u6574\u6570\u3002</p>\n\n<p>\u6b64\u65f6\uff0c\u4f60\u9700\u8981\u9009\u5b9a\u4e00\u4e2a\u6570\u5b57 <code>X</code>\uff0c\u4f7f\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u526f\u724c\u6309\u4e0b\u8ff0\u89c4\u5219\u5206\u6210 1 \u7ec4\u6216\u66f4\u591a\u7ec4\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u7ec4\u90fd\u6709&nbsp;<code>X</code>&nbsp;\u5f20\u724c\u3002</li>\n\t<li>\u7ec4\u5185\u6240\u6709\u7684\u724c\u4e0a\u90fd\u5199\u7740\u76f8\u540c\u7684\u6574\u6570\u3002</li>\n</ul>\n\n<p>\u4ec5\u5f53\u4f60\u53ef\u9009\u7684 <code>X &gt;= 2</code> \u65f6\u8fd4\u56de&nbsp;<code>true</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,4,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\uff0c[2,2]\uff0c[3,3]\uff0c[4,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,2,2,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u6ee1\u8db3\u8981\u6c42\u7684\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u6ee1\u8db3\u8981\u6c42\u7684\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,2,2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\uff0c[2,2]\uff0c[2,2]\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= deck.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= deck[i] &lt;&nbsp;10000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool hasGroupsSizeX(vector<int>& deck) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean hasGroupsSizeX(int[] deck) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hasGroupsSizeX(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hasGroupsSizeX(self, deck: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool hasGroupsSizeX(int* deck, int deckSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool HasGroupsSizeX(int[] deck) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} deck\n * @return {boolean}\n */\nvar hasGroupsSizeX = function(deck) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} deck\n# @return {Boolean}\ndef has_groups_size_x(deck)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hasGroupsSizeX(_ deck: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hasGroupsSizeX(deck []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hasGroupsSizeX(deck: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hasGroupsSizeX(deck: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn has_groups_size_x(deck: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $deck\n     * @return Boolean\n     */\n    function hasGroupsSizeX($deck) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hasGroupsSizeX(deck: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0951", "frontend_question_id": "0915", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/partition-array-into-disjoint-intervals", "url_en": "https://leetcode.com/problems/partition-array-into-disjoint-intervals", "relative_path_cn": "/leetcode/0900-0999/0915.Partition%20Array%20into%20Disjoint%20Intervals/README.md", "relative_path_en": "/leetcode/0900-0999/0915.Partition%20Array%20into%20Disjoint%20Intervals/README_EN.md", "title_cn": "\u5206\u5272\u6570\u7ec4", "title_en": "Partition Array into Disjoint Intervals", "question_title_slug": "partition-array-into-disjoint-intervals", "content_en": "<p>Given an array <code>A</code>, partition it&nbsp;into two (contiguous) subarrays&nbsp;<code>left</code>&nbsp;and <code>right</code>&nbsp;so that:</p>\r\n\r\n<ul>\r\n\t<li>Every element in <code>left</code>&nbsp;is less than or equal to every element in <code>right</code>.</li>\r\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\r\n\t<li><code>left</code>&nbsp;has the smallest possible size.</li>\r\n</ul>\r\n\r\n<p>Return the <strong>length</strong> of <code>left</code> after such a partitioning.&nbsp; It is guaranteed that such a partitioning exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,0,3,8,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>left = [5,0,3], right = [8,6]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1,0,6,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>left = [1,1,1,0], right = [6,12]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li>It is guaranteed there is at least one way to partition <code>A</code> as described.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\uff08\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff09\u7684\u8fde\u7eed\u5b50\u6570\u7ec4&nbsp;<code>left</code>&nbsp;\u548c&nbsp;<code>right</code>\uff0c&nbsp;\u4f7f\u5f97\uff1a</p>\n\n<ul>\n\t<li><code>left</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>right</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</li>\n\t<li><code>left</code> \u548c&nbsp;<code>right</code>&nbsp;\u90fd\u662f\u975e\u7a7a\u7684\u3002</li>\n\t<li><code>left</code>&nbsp;\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002</li>\n</ul>\n\n<p>\u5728\u5b8c\u6210\u8fd9\u6837\u7684\u5206\u7ec4\u540e\u8fd4\u56de&nbsp;<code>left</code>&nbsp;\u7684<strong>\u957f\u5ea6</strong>\u3002\u53ef\u4ee5\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\u65b9\u6cd5\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,0,3,8,6]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>left = [5,0,3]\uff0cright = [8,6]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,0,6,12]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>left = [1,1,1,0]\uff0cright = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u6309\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u5bf9 <code>A</code> \u8fdb\u884c\u5212\u5206\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int partitionDisjoint(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int partitionDisjoint(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def partitionDisjoint(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def partitionDisjoint(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint partitionDisjoint(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PartitionDisjoint(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar partitionDisjoint = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef partition_disjoint(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func partitionDisjoint(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func partitionDisjoint(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def partitionDisjoint(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun partitionDisjoint(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn partition_disjoint(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function partitionDisjoint($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function partitionDisjoint(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0952", "frontend_question_id": "0916", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/word-subsets", "url_en": "https://leetcode.com/problems/word-subsets", "relative_path_cn": "/leetcode/0900-0999/0916.Word%20Subsets/README.md", "relative_path_en": "/leetcode/0900-0999/0916.Word%20Subsets/README_EN.md", "title_cn": "\u5355\u8bcd\u5b50\u96c6", "title_en": "Word Subsets", "question_title_slug": "word-subsets", "content_en": "<p>We are given two arrays <code>A</code> and <code>B</code> of words.&nbsp; Each word is a string of lowercase letters.</p>\r\n\r\n<p>Now, say that&nbsp;word <code>b</code> is a subset of word <code>a</code><strong>&nbsp;</strong>if every letter in <code>b</code> occurs in <code>a</code>, <strong>including multiplicity</strong>.&nbsp; For example, <code>&quot;wrr&quot;</code> is a subset of <code>&quot;warrior&quot;</code>, but is not a subset of <code>&quot;world&quot;</code>.</p>\r\n\r\n<p>Now say a word <code>a</code> from <code>A</code> is <em>universal</em> if for every <code>b</code> in <code>B</code>, <code>b</code>&nbsp;is a subset of <code>a</code>.&nbsp;</p>\r\n\r\n<p>Return a list of all universal words in <code>A</code>.&nbsp; You can return the words in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-1-2\">[&quot;e&quot;,&quot;o&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-2-2\">[&quot;l&quot;,&quot;e&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-3-2\">[&quot;e&quot;,&quot;oo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[&quot;facebook&quot;,&quot;google&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-4-2\">[&quot;lo&quot;,&quot;eo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-5-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-5-2\">[&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">[&quot;facebook&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li>\r\n\t<li><code>A[i]</code> and <code>B[i]</code> consist only of lowercase letters.</li>\r\n\t<li>All words in <code>A[i]</code> are unique: there isn&#39;t <code>i != j</code> with <code>A[i] == A[j]</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u6211\u4eec\u7ed9\u51fa\u4e24\u4e2a\u5355\u8bcd\u6570\u7ec4 <code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\u3002\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u4e00\u4e32\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u5982\u679c&nbsp;<code>b</code> \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u51fa\u73b0\u5728 <code>a</code> \u4e2d\uff0c<strong>\u5305\u62ec\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd</strong>\uff0c\u90a3\u4e48\u79f0\u5355\u8bcd <code>b</code> \u662f\u5355\u8bcd <code>a</code> \u7684\u5b50\u96c6\u3002 \u4f8b\u5982\uff0c&ldquo;wrr&rdquo; \u662f &ldquo;warrior&rdquo; \u7684\u5b50\u96c6\uff0c\u4f46\u4e0d\u662f &ldquo;world&rdquo; \u7684\u5b50\u96c6\u3002</p>\n\n<p>\u5982\u679c\u5bf9 <code>B</code> \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd&nbsp;<code>b</code>\uff0c<code>b</code> \u90fd\u662f <code>a</code> \u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u6211\u4eec\u79f0&nbsp;<code>A</code> \u4e2d\u7684\u5355\u8bcd <code>a</code> \u662f<em>\u901a\u7528\u7684</em>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de&nbsp;<code>A</code> \u4e2d\u6240\u6709\u7684\u901a\u7528\u5355\u8bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;o&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;l&quot;,&quot;e&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;oo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;google&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;lo&quot;,&quot;eo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li>\n\t<li><code>A[i]</code>&nbsp;\u548c&nbsp;<code>B[i]</code>&nbsp;\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li><code>A[i]</code>&nbsp;\u4e2d\u6240\u6709\u7684\u5355\u8bcd\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u5b58\u5728&nbsp;<code>i != j</code>&nbsp;\u4f7f\u5f97&nbsp;<code>A[i] == A[j]</code>\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> wordSubsets(String[] A, String[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wordSubsets(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wordSubsets(self, A: List[str], B: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** wordSubsets(char ** A, int ASize, char ** B, int BSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> WordSubsets(string[] A, string[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @param {string[]} B\n * @return {string[]}\n */\nvar wordSubsets = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @param {String[]} b\n# @return {String[]}\ndef word_subsets(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wordSubsets(_ A: [String], _ B: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func wordSubsets(A []string, B []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wordSubsets(A: Array[String], B: Array[String]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wordSubsets(A: Array<String>, B: Array<String>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn word_subsets(a: Vec<String>, b: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @param String[] $B\n     * @return String[]\n     */\n    function wordSubsets($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function wordSubsets(A: string[], B: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0953", "frontend_question_id": "0917", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-only-letters", "url_en": "https://leetcode.com/problems/reverse-only-letters", "relative_path_cn": "/leetcode/0900-0999/0917.Reverse%20Only%20Letters/README.md", "relative_path_en": "/leetcode/0900-0999/0917.Reverse%20Only%20Letters/README_EN.md", "title_cn": "\u4ec5\u4ec5\u53cd\u8f6c\u5b57\u6bcd", "title_en": "Reverse Only Letters", "question_title_slug": "reverse-only-letters", "content_en": "<p>Given a string <code>S</code>, return the &quot;reversed&quot; string where all characters that are not a letter&nbsp;stay in the same place, and all letters reverse their positions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;ab-cd&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;dc-ba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;a-bC-dEf-ghIj&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;j-Ih-gfE-dCba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;Test1ng-Leet=code-Q!&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;Qedo1ct-eeLg=ntse-T!&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length &lt;= 100</code></li>\r\n\t<li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li>\r\n\t<li><code>S</code> doesn&#39;t contain <code>\\</code> or <code>&quot;</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8fd4\u56de&nbsp;&ldquo;\u53cd\u8f6c\u540e\u7684&rdquo;&nbsp;\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u90fd\u4fdd\u7559\u5728\u539f\u5730\uff0c\u800c\u6240\u6709\u5b57\u6bcd\u7684\u4f4d\u7f6e\u53d1\u751f\u53cd\u8f6c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;ab-cd&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;dc-ba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;a-bC-dEf-ghIj&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;j-Ih-gfE-dCba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;Test1ng-Leet=code-Q!&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;Qedo1ct-eeLg=ntse-T!&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 100</code></li>\n\t<li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li>\n\t<li><code>S</code> \u4e2d\u4e0d\u5305\u542b&nbsp;<code>\\</code> or <code>&quot;</code></li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseOnlyLetters(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reverseOnlyLetters(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseOnlyLetters(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseOnlyLetters(self, S: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * reverseOnlyLetters(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReverseOnlyLetters(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar reverseOnlyLetters = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reverse_only_letters(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseOnlyLetters(_ S: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseOnlyLetters(S string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseOnlyLetters(S: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseOnlyLetters(S: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_only_letters(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String\n     */\n    function reverseOnlyLetters($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverseOnlyLetters(S: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0954", "frontend_question_id": "0918", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-sum-circular-subarray", "url_en": "https://leetcode.com/problems/maximum-sum-circular-subarray", "relative_path_cn": "/leetcode/0900-0999/0918.Maximum%20Sum%20Circular%20Subarray/README.md", "relative_path_en": "/leetcode/0900-0999/0918.Maximum%20Sum%20Circular%20Subarray/README_EN.md", "title_cn": "\u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c", "title_en": "Maximum Sum Circular Subarray", "question_title_slug": "maximum-sum-circular-subarray", "content_en": "<p>Given a <strong>circular&nbsp;array</strong>&nbsp;<strong>C</strong> of integers represented by&nbsp;<code>A</code>, find the maximum possible sum of a non-empty subarray of <strong>C</strong>.</p>\r\n\r\n<p>Here, a&nbsp;<em>circular&nbsp;array</em> means the end of the array connects to the beginning of the array.&nbsp; (Formally, <code>C[i] = A[i]</code> when <code>0 &lt;= i &lt; A.length</code>, and <code>C[i+A.length] = C[i]</code>&nbsp;when&nbsp;<code>i &gt;= 0</code>.)</p>\r\n\r\n<p>Also, a subarray may only include each element of the fixed buffer <code>A</code> at most once.&nbsp; (Formally, for a subarray <code>C[i], C[i+1], ..., C[j]</code>, there does not exist <code>i &lt;= k1, k2 &lt;= j</code> with <code>k1 % A.length&nbsp;= k2 % A.length</code>.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,-2,3,-2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3\r\n<strong>Explanation: </strong>Subarray [3] has maximum sum 3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,-3,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [5,5] has maximum sum </span><span>5 + 5 = 10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[3,-1,2,-1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4\r\n<strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [2,-1,3] has maximum sum </span><span>2 + (-1) + 3 = 4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,-2,2,-3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">3\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [3] and [3,-2,2] both have maximum sum </span><span>3</span>\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[-2,-3,-1]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">-1\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [-1] has maximum sum -1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ol>\r\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u6570\u7ec4 <code>A</code>&nbsp;\u8868\u793a\u7684<strong>\u73af\u5f62\u6570\u7ec4 <code>C</code></strong>\uff0c\u6c42 <code><strong>C</strong></code>&nbsp;\u7684\u975e\u7a7a\u5b50\u6570\u7ec4\u7684\u6700\u5927\u53ef\u80fd\u548c\u3002</p>\n\n<p>\u5728\u6b64\u5904\uff0c<em>\u73af\u5f62\u6570\u7ec4</em>\u610f\u5473\u7740\u6570\u7ec4\u7684\u672b\u7aef\u5c06\u4f1a\u4e0e\u5f00\u5934\u76f8\u8fde\u5448\u73af\u72b6\u3002\uff08\u5f62\u5f0f\u4e0a\uff0c\u5f53<code>0 &lt;= i &lt; A.length</code>&nbsp;\u65f6&nbsp;<code>C[i] = A[i]</code>\uff0c\u4e14\u5f53&nbsp;<code>i &gt;= 0</code>&nbsp;\u65f6&nbsp;<code>C[i+A.length] = C[i]</code>\uff09</p>\n\n<p>\u6b64\u5916\uff0c\u5b50\u6570\u7ec4\u6700\u591a\u53ea\u80fd\u5305\u542b\u56fa\u5b9a\u7f13\u51b2\u533a <code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u6b21\u3002\uff08\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u4e8e\u5b50\u6570\u7ec4&nbsp;<code>C[i], C[i+1], ..., C[j]</code>\uff0c\u4e0d\u5b58\u5728&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;\u5176\u4e2d&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,-2,3,-2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [3] \u5f97\u5230\u6700\u5927\u548c 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,-3,5]\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [5,5] \u5f97\u5230\u6700\u5927\u548c 5 + 5 = 10\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,-1,2,-1]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [2,-1,3] \u5f97\u5230\u6700\u5927\u548c 2 + (-1) + 3 = 4\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,-2,2,-3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [3] \u548c [3,-2,2] \u90fd\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u548c 3\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-2,-3,-1]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [-1] \u5f97\u5230\u6700\u5927\u548c -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxSubarraySumCircular(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSubarraySumCircular(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSubarraySumCircular(self, A: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxSubarraySumCircular(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxSubarraySumCircular(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxSubarraySumCircular = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef max_subarray_sum_circular(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSubarraySumCircular(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSubarraySumCircular(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSubarraySumCircular(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSubarraySumCircular(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_subarray_sum_circular(a: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function maxSubarraySumCircular($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSubarraySumCircular(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0955", "frontend_question_id": "0919", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/complete-binary-tree-inserter", "url_en": "https://leetcode.com/problems/complete-binary-tree-inserter", "relative_path_cn": "/leetcode/0900-0999/0919.Complete%20Binary%20Tree%20Inserter/README.md", "relative_path_en": "/leetcode/0900-0999/0919.Complete%20Binary%20Tree%20Inserter/README_EN.md", "title_cn": "\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668", "title_en": "Complete Binary Tree Inserter", "question_title_slug": "complete-binary-tree-inserter", "content_en": "<p>A <em>complete</em> binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>\r\n\r\n<p>Write a data structure&nbsp;<code>CBTInserter</code>&nbsp;that is initialized with a complete binary tree and supports the following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>CBTInserter(TreeNode root)</code> initializes the data structure on a given tree&nbsp;with head node <code>root</code>;</li>\r\n\t<li><code>CBTInserter.insert(int v)</code> will insert a <code>TreeNode</code>&nbsp;into the tree with value <code>node.val =&nbsp;v</code>&nbsp;so that the tree remains complete, <strong>and returns the value of the parent of the inserted <code>TreeNode</code></strong>;</li>\r\n\t<li><code>CBTInserter.get_root()</code> will return the head node of the tree.</li>\r\n</ul>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[[1]],[2],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,[1,2]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[[1,2,3,4,5,6]],[7],[8],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,3,4,[1,2,3,4,5,6,7,8]]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The initial given tree is complete and contains between <code>1</code> and <code>1000</code> nodes.</li>\r\n\t<li><code>CBTInserter.insert</code> is called at most <code>10000</code> times per test case.</li>\r\n\t<li>Every value of a given or inserted node is between <code>0</code> and <code>5000</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u6bcf\u4e00\u5c42\uff08\u9664\u6700\u540e\u4e00\u5c42\u5916\uff09\u90fd\u662f\u5b8c\u5168\u586b\u5145\uff08\u5373\uff0c\u8282\u70b9\u6570\u8fbe\u5230\u6700\u5927\uff09\u7684\uff0c\u5e76\u4e14\u6240\u6709\u7684\u8282\u70b9\u90fd\u5c3d\u53ef\u80fd\u5730\u96c6\u4e2d\u5728\u5de6\u4fa7\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784&nbsp;<code>CBTInserter</code>\uff0c\u5b83\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;\u4f7f\u7528\u5934\u8282\u70b9\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u7ed9\u5b9a\u6811\u521d\u59cb\u5316\u8be5\u6570\u636e\u7ed3\u6784\uff1b</li>\n\t<li><code>CBTInserter.insert(int v)</code>&nbsp; \u5411\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u8282\u70b9\u7c7b\u578b\u4e3a <code>TreeNode</code>\uff0c\u503c\u4e3a <code>v</code> \u3002\u4f7f\u6811\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u72b6\u6001\uff0c<strong>\u5e76\u8fd4\u56de\u63d2\u5165\u7684\u65b0\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u503c</strong>\uff1b</li>\n\t<li><code>CBTInserter.get_root()</code> \u5c06\u8fd4\u56de\u6811\u7684\u5934\u8282\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,[1,2]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6700\u521d\u7ed9\u5b9a\u7684\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4e14\u5305\u542b&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>1000</code>&nbsp;\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>CBTInserter.insert</code>&nbsp; \u64cd\u4f5c&nbsp;<code>10000</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u7ed9\u5b9a\u8282\u70b9\u6216\u63d2\u5165\u8282\u70b9\u7684\u6bcf\u4e2a\u503c\u90fd\u5728&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>5000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass CBTInserter {\npublic:\n    CBTInserter(TreeNode* root) {\n\n    }\n    \n    int insert(int v) {\n\n    }\n    \n    TreeNode* get_root() {\n\n    }\n};\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * CBTInserter* obj = new CBTInserter(root);\n * int param_1 = obj->insert(v);\n * TreeNode* param_2 = obj->get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass CBTInserter {\n\n    public CBTInserter(TreeNode root) {\n\n    }\n    \n    public int insert(int v) {\n\n    }\n    \n    public TreeNode get_root() {\n\n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * CBTInserter obj = new CBTInserter(root);\n * int param_1 = obj.insert(v);\n * TreeNode param_2 = obj.get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass CBTInserter(object):\n\n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n        \n\n    def insert(self, v):\n        \"\"\"\n        :type v: int\n        :rtype: int\n        \"\"\"\n        \n\n    def get_root(self):\n        \"\"\"\n        :rtype: TreeNode\n        \"\"\"\n        \n\n\n# Your CBTInserter object will be instantiated and called as such:\n# obj = CBTInserter(root)\n# param_1 = obj.insert(v)\n# param_2 = obj.get_root()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass CBTInserter:\n\n    def __init__(self, root: TreeNode):\n        \n\n    def insert(self, v: int) -> int:\n        \n\n    def get_root(self) -> TreeNode:\n        \n\n\n# Your CBTInserter object will be instantiated and called as such:\n# obj = CBTInserter(root)\n# param_1 = obj.insert(v)\n# param_2 = obj.get_root()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n\ntypedef struct {\n    \n} CBTInserter;\n\n\nCBTInserter* cBTInserterCreate(struct TreeNode* root) {\n    \n}\n\nint cBTInserterInsert(CBTInserter* obj, int v) {\n  \n}\n\nstruct TreeNode* cBTInserterGet_root(CBTInserter* obj) {\n  \n}\n\nvoid cBTInserterFree(CBTInserter* obj) {\n    \n}\n\n/**\n * Your CBTInserter struct will be instantiated and called as such:\n * CBTInserter* obj = cBTInserterCreate(root);\n * int param_1 = cBTInserterInsert(obj, v);\n \n * struct TreeNode* param_2 = cBTInserterGet_root(obj);\n \n * cBTInserterFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class CBTInserter {\n\n    public CBTInserter(TreeNode root) {\n\n    }\n    \n    public int Insert(int v) {\n\n    }\n    \n    public TreeNode Get_root() {\n\n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * CBTInserter obj = new CBTInserter(root);\n * int param_1 = obj.Insert(v);\n * TreeNode param_2 = obj.Get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n */\nvar CBTInserter = function(root) {\n\n};\n\n/** \n * @param {number} v\n * @return {number}\n */\nCBTInserter.prototype.insert = function(v) {\n\n};\n\n/**\n * @return {TreeNode}\n */\nCBTInserter.prototype.get_root = function() {\n\n};\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * var obj = new CBTInserter(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\nclass CBTInserter\n\n=begin\n    :type root: TreeNode\n=end\n    def initialize(root)\n\n    end\n\n\n=begin\n    :type v: Integer\n    :rtype: Integer\n=end\n    def insert(v)\n\n    end\n\n\n=begin\n    :rtype: TreeNode\n=end\n    def get_root()\n\n    end\n\n\nend\n\n# Your CBTInserter object will be instantiated and called as such:\n# obj = CBTInserter.new(root)\n# param_1 = obj.insert(v)\n# param_2 = obj.get_root()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass CBTInserter {\n\n    init(_ root: TreeNode?) {\n        \n    }\n    \n    func insert(_ v: Int) -> Int {\n        \n    }\n    \n    func get_root() -> TreeNode? {\n        \n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * let obj = CBTInserter(root)\n * let ret_1: Int = obj.insert(v)\n * let ret_2: TreeNode? = obj.get_root()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype CBTInserter struct {\n\n}\n\n\nfunc Constructor(root *TreeNode) CBTInserter {\n\n}\n\n\nfunc (this *CBTInserter) Insert(v int) int {\n\n}\n\n\nfunc (this *CBTInserter) Get_root() *TreeNode {\n\n}\n\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * obj := Constructor(root);\n * param_1 := obj.Insert(v);\n * param_2 := obj.Get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nclass CBTInserter(_root: TreeNode) {\n\n    def insert(v: Int): Int = {\n\n    }\n\n    def get_root(): TreeNode = {\n\n    }\n\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * var obj = new CBTInserter(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass CBTInserter(root: TreeNode?) {\n\n    fun insert(v: Int): Int {\n\n    }\n\n    fun get_root(): TreeNode? {\n\n    }\n\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * var obj = CBTInserter(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nstruct CBTInserter {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl CBTInserter {\n\n    fn new(root: Option<Rc<RefCell<TreeNode>>>) -> Self {\n        \n    }\n    \n    fn insert(&self, v: i32) -> i32 {\n        \n    }\n    \n    fn get_root(&self) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * let obj = CBTInserter::new(root);\n * let ret_1: i32 = obj.insert(v);\n * let ret_2: Option<Rc<RefCell<TreeNode>>> = obj.get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass CBTInserter {\n    /**\n     * @param TreeNode $root\n     */\n    function __construct($root) {\n        \n    }\n  \n    /**\n     * @param Integer $v\n     * @return Integer\n     */\n    function insert($v) {\n        \n    }\n  \n    /**\n     * @return TreeNode\n     */\n    function get_root() {\n        \n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * $obj = CBTInserter($root);\n * $ret_1 = $obj->insert($v);\n * $ret_2 = $obj->get_root();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nclass CBTInserter {\n    constructor(root: TreeNode | null) {\n\n    }\n\n    insert(v: number): number {\n\n    }\n\n    get_root(): TreeNode | null {\n\n    }\n}\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * var obj = new CBTInserter(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0956", "frontend_question_id": "0920", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-music-playlists", "url_en": "https://leetcode.com/problems/number-of-music-playlists", "relative_path_cn": "/leetcode/0900-0999/0920.Number%20of%20Music%20Playlists/README.md", "relative_path_en": "/leetcode/0900-0999/0920.Number%20of%20Music%20Playlists/README_EN.md", "title_cn": "\u64ad\u653e\u5217\u8868\u7684\u6570\u91cf", "title_en": "Number of Music Playlists", "question_title_slug": "number-of-music-playlists", "content_en": "<p>Your music player contains <code>N</code>&nbsp;different songs and she wants to listen to <code>L</code><strong> </strong>(not necessarily different) songs during your trip. &nbsp;You&nbsp;create&nbsp;a playlist so&nbsp;that:</p>\r\n\r\n<ul>\r\n\t<li>Every song is played at least once</li>\r\n\t<li>A song can only be played again only if&nbsp;<code>K</code>&nbsp;other songs have been played</li>\r\n</ul>\r\n\r\n<p>Return the number of possible playlists.&nbsp; <strong>As the answer can be very large, return it modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">3</span>, L = <span id=\"example-input-1-2\">3</span>, K = <span id=\"example-input-1-3\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6\r\n<strong>Explanation</strong>: </span><span>There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">2</span>, L = <span id=\"example-input-2-2\">3</span>, K = <span id=\"example-input-2-3\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: </span><span>There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">2</span>, L = <span id=\"example-input-3-2\">3</span>, K = <span id=\"example-input-3-3\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2\r\n<strong>Explanation</strong>: </span><span>There are 2 possible playlists. [1, 2, 1], [2, 1, 2]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u4f60\u7684\u97f3\u4e50\u64ad\u653e\u5668\u91cc\u6709&nbsp;<code>N</code>&nbsp;\u9996\u4e0d\u540c\u7684\u6b4c\uff0c\u5728\u65c5\u9014\u4e2d\uff0c\u4f60\u7684\u65c5\u4f34\u60f3\u8981\u542c <code>L</code>&nbsp;\u9996\u6b4c\uff08\u4e0d\u4e00\u5b9a\u4e0d\u540c\uff0c\u5373\uff0c\u5141\u8bb8\u6b4c\u66f2\u91cd\u590d\uff09\u3002\u8bf7\u4f60\u4e3a\u5979\u6309\u5982\u4e0b\u89c4\u5219\u521b\u5efa\u4e00\u4e2a\u64ad\u653e\u5217\u8868\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u9996\u6b4c\u81f3\u5c11\u64ad\u653e\u4e00\u6b21\u3002</li>\n\t<li>\u4e00\u9996\u6b4c\u53ea\u6709\u5728\u5176\u4ed6 <code>K</code> \u9996\u6b4c\u64ad\u653e\u5b8c\u4e4b\u540e\u624d\u80fd\u518d\u6b21\u64ad\u653e\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u7684\u64ad\u653e\u5217\u8868\u7684\u6570\u91cf\u3002<strong>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8bf7\u8fd4\u56de\u5b83\u6a21&nbsp;<code>10^9 + 7</code>&nbsp;\u7684\u7ed3\u679c\u3002</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, L = 3, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 6 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 2, 3]\uff0c[1, 3, 2]\uff0c[2, 1, 3]\uff0c[2, 3, 1]\uff0c[3, 1, 2]\uff0c[3, 2, 1].\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, L = 3, K = 0\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 6 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 1, 2]\uff0c[1, 2, 1]\uff0c[2, 1, 1]\uff0c[2, 2, 1]\uff0c[2, 1, 2]\uff0c[1, 2, 2]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, L = 3, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 2 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 2, 1]\uff0c[2, 1, 2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numMusicPlaylists(int N, int L, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numMusicPlaylists(int N, int L, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numMusicPlaylists(self, N, L, K):\n        \"\"\"\n        :type N: int\n        :type L: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numMusicPlaylists(self, N: int, L: int, K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numMusicPlaylists(int N, int L, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumMusicPlaylists(int N, int L, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number} L\n * @param {number} K\n * @return {number}\n */\nvar numMusicPlaylists = function(N, L, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} l\n# @param {Integer} k\n# @return {Integer}\ndef num_music_playlists(n, l, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numMusicPlaylists(_ N: Int, _ L: Int, _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numMusicPlaylists(N int, L int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numMusicPlaylists(N: Int, L: Int, K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numMusicPlaylists(N: Int, L: Int, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_music_playlists(n: i32, l: i32, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer $L\n     * @param Integer $K\n     * @return Integer\n     */\n    function numMusicPlaylists($N, $L, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numMusicPlaylists(N: number, L: number, K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0957", "frontend_question_id": "0921", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid", "url_en": "https://leetcode.com/problems/minimum-add-to-make-parentheses-valid", "relative_path_cn": "/leetcode/0900-0999/0921.Minimum%20Add%20to%20Make%20Parentheses%20Valid/README.md", "relative_path_en": "/leetcode/0900-0999/0921.Minimum%20Add%20to%20Make%20Parentheses%20Valid/README_EN.md", "title_cn": "\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0", "title_en": "Minimum Add to Make Parentheses Valid", "question_title_slug": "minimum-add-to-make-parentheses-valid", "content_en": "<p>Given a string&nbsp;<code>S</code> of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> parentheses, we add the minimum number of parentheses ( <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>, and in any positions ) so that the resulting parentheses string is valid.</p>\r\n\r\n<p>Formally, a parentheses string is valid if and only if:</p>\r\n\r\n<ul>\r\n\t<li>It is the empty string, or</li>\r\n\t<li>It can be written as <code>AB</code>&nbsp;(<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li>\r\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li>\r\n</ul>\r\n\r\n<p>Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;())&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;(((&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">&quot;()))((&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">4</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length &lt;= 1000</code></li>\r\n\t<li><code>S</code> only consists of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> characters.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531&nbsp;<code>&#39;(&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;)&#39;</code>&nbsp;\u62ec\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6700\u5c11\u7684\u62ec\u53f7\uff08 <code>&#39;(&#39;</code>&nbsp;\u6216\u662f&nbsp;<code>&#39;)&#39;</code>\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff09\uff0c\u4ee5\u4f7f\u5f97\u5230\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u6709\u6548\u3002</p>\n\n<p>\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u53ea\u6709\u6ee1\u8db3\u4e0b\u9762\u51e0\u70b9\u4e4b\u4e00\uff0c\u62ec\u53f7\u5b57\u7b26\u4e32\u624d\u662f\u6709\u6548\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5b83\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005</li>\n\t<li>\u5b83\u53ef\u4ee5\u88ab\u5199\u6210&nbsp;<code>AB</code>&nbsp;\uff08<code>A</code>&nbsp;\u4e0e&nbsp;<code>B</code>&nbsp;\u8fde\u63a5\uff09, \u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u662f\u6709\u6548\u5b57\u7b26\u4e32\uff0c\u6216\u8005</li>\n\t<li>\u5b83\u53ef\u4ee5\u88ab\u5199\u4f5c&nbsp;<code>(A)</code>\uff0c\u5176\u4e2d&nbsp;<code>A</code>&nbsp;\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e3a\u4f7f\u7ed3\u679c\u5b57\u7b26\u4e32\u6709\u6548\u800c\u5fc5\u987b\u6dfb\u52a0\u7684\u6700\u5c11\u62ec\u53f7\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;())&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;(((&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;()&quot;\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;()))((&quot;\n<strong>\u8f93\u51fa\uff1a</strong>4</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 1000</code></li>\n\t<li><code>S</code> \u53ea\u5305\u542b&nbsp;<code>&#39;(&#39;</code> \u548c&nbsp;<code>&#39;)&#39;</code>&nbsp;\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Stack", "Greedy"], "tags_cn": ["\u6808", "\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minAddToMakeValid(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minAddToMakeValid(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minAddToMakeValid(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minAddToMakeValid(self, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minAddToMakeValid(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinAddToMakeValid(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar minAddToMakeValid = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef min_add_to_make_valid(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minAddToMakeValid(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minAddToMakeValid(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minAddToMakeValid(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minAddToMakeValid(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_add_to_make_valid(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function minAddToMakeValid($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minAddToMakeValid(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0958", "frontend_question_id": "0922", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sort-array-by-parity-ii", "url_en": "https://leetcode.com/problems/sort-array-by-parity-ii", "relative_path_cn": "/leetcode/0900-0999/0922.Sort%20Array%20By%20Parity%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0922.Sort%20Array%20By%20Parity%20II/README_EN.md", "title_cn": "\u6309\u5947\u5076\u6392\u5e8f\u6570\u7ec4 II", "title_en": "Sort Array By Parity II", "question_title_slug": "sort-array-by-parity-ii", "content_en": "<p>Given an array <code>A</code>&nbsp;of non-negative integers, half of the integers in A are odd, and half of the integers are even.</p>\r\n\r\n<p>Sort the array so that whenever <code>A[i]</code> is odd, <code>i</code> is odd; and whenever <code>A[i]</code> is even, <code>i</code> is even.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[4,2,5,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[4,5,2,7]</span>\r\n<strong>Explanation: </strong>[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>A.length % 2 == 0</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c A \u4e2d\u4e00\u534a\u6574\u6570\u662f\u5947\u6570\uff0c\u4e00\u534a\u6574\u6570\u662f\u5076\u6570\u3002</p>\n\n<p>\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u5f53&nbsp;<code>A[i]</code> \u4e3a\u5947\u6570\u65f6\uff0c<code>i</code>&nbsp;\u4e5f\u662f\u5947\u6570\uff1b\u5f53&nbsp;<code>A[i]</code>&nbsp;\u4e3a\u5076\u6570\u65f6\uff0c <code>i</code> \u4e5f\u662f\u5076\u6570\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u6570\u7ec4\u4f5c\u4e3a\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,2,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>[4,5,2,7]\n<strong>\u89e3\u91ca\uff1a</strong>[4,7,2,5]\uff0c[2,5,4,7]\uff0c[2,7,4,5] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>A.length % 2 == 0</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Sort", "Array"], "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sortArrayByParityII(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortArrayByParityII(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortArrayByParityII(self, A: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArrayByParityII(int* A, int ASize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SortArrayByParityII(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar sortArrayByParityII = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef sort_array_by_parity_ii(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortArrayByParityII(_ A: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sortArrayByParityII(A []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortArrayByParityII(A: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortArrayByParityII(A: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sort_array_by_parity_ii(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function sortArrayByParityII($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortArrayByParityII(A: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0959", "frontend_question_id": "0923", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/3sum-with-multiplicity", "url_en": "https://leetcode.com/problems/3sum-with-multiplicity", "relative_path_cn": "/leetcode/0900-0999/0923.3Sum%20With%20Multiplicity/README.md", "relative_path_en": "/leetcode/0900-0999/0923.3Sum%20With%20Multiplicity/README_EN.md", "title_cn": "\u4e09\u6570\u4e4b\u548c\u7684\u591a\u79cd\u53ef\u80fd", "title_en": "3Sum With Multiplicity", "question_title_slug": "3sum-with-multiplicity", "content_en": "<p>Given an integer array <code>A</code>, and an integer <code>target</code>, return the number of&nbsp;tuples&nbsp;<code>i, j, k</code>&nbsp; such that <code>i &lt; j &lt; k</code> and&nbsp;<code>A[i] + A[j] + A[k] == target</code>.</p>\n\n<p>As the answer can be very large, return it <strong>modulo</strong>&nbsp;<code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>Output:</strong> 20\n<strong>Explanation: </strong>\nEnumerating by the values (A[i], A[j], A[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [1,1,2,2,2,2], target = 5\n<strong>Output:</strong> 12\n<strong>Explanation: </strong>\nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 3000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570&nbsp;<code>target</code>&nbsp;\u4f5c\u4e3a\u76ee\u6807\u503c\uff0c\u8fd4\u56de\u6ee1\u8db3 <code>i &lt; j &lt; k</code> \u4e14&nbsp;<code>A[i] + A[j] + A[k] == target</code>&nbsp;\u7684\u5143\u7ec4&nbsp;<code>i, j, k</code>&nbsp;\u7684\u6570\u91cf\u3002</p>\n\n<p>\u7531\u4e8e\u7ed3\u679c\u4f1a\u975e\u5e38\u5927\uff0c\u8bf7\u8fd4\u56de <code>\u7ed3\u679c\u9664\u4ee5 10^9 + 7 \u7684\u4f59\u6570</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6309\u503c\u679a\u4e3e\uff08A[i]\uff0cA[j]\uff0cA[k]\uff09\uff1a\n(1, 2, 5) \u51fa\u73b0 8 \u6b21\uff1b\n(1, 3, 4) \u51fa\u73b0 8 \u6b21\uff1b\n(2, 2, 4) \u51fa\u73b0 2 \u6b21\uff1b\n(2, 3, 3) \u51fa\u73b0 2 \u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,2,2,2,2], target = 5\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\nA[i] = 1\uff0cA[j] = A[k] = 2 \u51fa\u73b0 12 \u6b21\uff1a\n\u6211\u4eec\u4ece [1,1] \u4e2d\u9009\u62e9\u4e00\u4e2a 1\uff0c\u6709 2 \u79cd\u60c5\u51b5\uff0c\n\u4ece [2,2,2,2] \u4e2d\u9009\u51fa\u4e24\u4e2a 2\uff0c\u6709 6 \u79cd\u60c5\u51b5\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 3000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\n</ol>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int threeSumMulti(vector<int>& A, int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int threeSumMulti(int[] A, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def threeSumMulti(self, A, target):\n        \"\"\"\n        :type A: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def threeSumMulti(self, A: List[int], target: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint threeSumMulti(int* A, int ASize, int target){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ThreeSumMulti(int[] A, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} target\n * @return {number}\n */\nvar threeSumMulti = function(A, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_multi(a, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func threeSumMulti(_ A: [Int], _ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func threeSumMulti(A []int, target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def threeSumMulti(A: Array[Int], target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun threeSumMulti(A: IntArray, target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn three_sum_multi(a: Vec<i32>, target: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumMulti($A, $target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function threeSumMulti(A: number[], target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0960", "frontend_question_id": "0924", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimize-malware-spread", "url_en": "https://leetcode.com/problems/minimize-malware-spread", "relative_path_cn": "/leetcode/0900-0999/0924.Minimize%20Malware%20Spread/README.md", "relative_path_en": "/leetcode/0900-0999/0924.Minimize%20Malware%20Spread/README_EN.md", "title_cn": "\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad", "title_en": "Minimize Malware Spread", "question_title_slug": "minimize-malware-spread", "content_en": "<p>In a network of nodes, each node <code>i</code> is directly connected to another node <code>j</code> if and only if&nbsp;<code>graph[i][j] = 1</code>.</p>\n\n<p>Some nodes <code>initial</code> are initially infected by malware.&nbsp; Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.&nbsp; This spread of malware will continue until no more nodes can be infected in this manner.</p>\n\n<p>Suppose <code>M(initial)</code>&nbsp;is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>\n\n<p>We will&nbsp;remove one node from the initial list.&nbsp; Return the node that if removed, would minimize&nbsp;<code>M(initial)</code>.&nbsp; If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p>\n\n<p>Note that if a node was removed from the <code>initial</code>&nbsp;list of infected nodes, it may still be infected later as a result of the malware spread.</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>Output: </strong>0\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>Output: </strong>0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>Output: </strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] == 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt;= graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ul>\n", "content_cn": "<p>\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53 <code>graph[i][j] = 1</code>&nbsp;\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9&nbsp;<code>i</code>&nbsp;\u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9 <code>j</code>\u3002</p>\n\n<p>\u4e00\u4e9b\u8282\u70b9&nbsp;<code>initial</code>&nbsp;\u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002</p>\n\n<p>\u5047\u8bbe <code>M(initial)</code> \u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316 <code>M(initial)</code>\uff0c&nbsp;\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5df2\u4ece\u53d7\u611f\u67d3\u8282\u70b9\u7684\u5217\u8868 <code>initial</code> \u4e2d\u5220\u9664\uff0c\u5b83\u4ee5\u540e\u53ef\u80fd\u4ecd\u7136\u56e0\u6076\u610f\u8f6f\u4ef6\u4f20\u64ad\u800c\u53d7\u5230\u611f\u67d3\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] == 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minMalwareSpread(int[][] graph, int[] initial) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minMalwareSpread(self, graph, initial):\n        \"\"\"\n        :type graph: List[List[int]]\n        :type initial: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinMalwareSpread(int[][] graph, int[] initial) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @param {number[]} initial\n * @return {number}\n */\nvar minMalwareSpread = function(graph, initial) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @param {Integer[]} initial\n# @return {Integer}\ndef min_malware_spread(graph, initial)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minMalwareSpread(graph [][]int, initial []int) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @param Integer[] $initial\n     * @return Integer\n     */\n    function minMalwareSpread($graph, $initial) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minMalwareSpread(graph: number[][], initial: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0961", "frontend_question_id": "0925", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/long-pressed-name", "url_en": "https://leetcode.com/problems/long-pressed-name", "relative_path_cn": "/leetcode/0900-0999/0925.Long%20Pressed%20Name/README.md", "relative_path_en": "/leetcode/0900-0999/0925.Long%20Pressed%20Name/README_EN.md", "title_cn": "\u957f\u6309\u952e\u5165", "title_en": "Long Pressed Name", "question_title_slug": "long-pressed-name", "content_en": "<p>Your friend is typing his <code>name</code> into a keyboard. Sometimes, when typing a character <code>c</code>, the key might get <em>long pressed</em>, and the character will be typed 1 or more times.</p>\n\n<p>You examine the <code>typed</code> characters of the keyboard. Return <code>True</code> if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> name = &quot;alex&quot;, typed = &quot;aaleex&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>&#39;a&#39; and &#39;e&#39; in &#39;alex&#39; were long pressed.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>&#39;e&#39; must have been pressed twice, but it wasn&#39;t in the typed output.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> name = &quot;leelee&quot;, typed = &quot;lleeelee&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> name = &quot;laiden&quot;, typed = &quot;laiden&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>It&#39;s not necessary to long press any character.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= name.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= typed.length &lt;= 1000</code></li>\n\t<li><code>name</code> and <code>typed</code> contain only lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u7684\u670b\u53cb\u6b63\u5728\u4f7f\u7528\u952e\u76d8\u8f93\u5165\u4ed6\u7684\u540d\u5b57&nbsp;<code>name</code>\u3002\u5076\u5c14\uff0c\u5728\u952e\u5165\u5b57\u7b26&nbsp;<code>c</code>&nbsp;\u65f6\uff0c\u6309\u952e\u53ef\u80fd\u4f1a\u88ab<em>\u957f\u6309</em>\uff0c\u800c\u5b57\u7b26\u53ef\u80fd\u88ab\u8f93\u5165 1 \u6b21\u6216\u591a\u6b21\u3002</p>\n\n<p>\u4f60\u5c06\u4f1a\u68c0\u67e5\u952e\u76d8\u8f93\u5165\u7684\u5b57\u7b26&nbsp;<code>typed</code>\u3002\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u53ef\u80fd\u662f\u4f60\u7684\u670b\u53cb\u7684\u540d\u5b57\uff08\u5176\u4e2d\u4e00\u4e9b\u5b57\u7b26\u53ef\u80fd\u88ab\u957f\u6309\uff09\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de&nbsp;<code>True</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;alex&quot;, typed = &quot;aaleex&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>&#39;alex&#39; \u4e2d\u7684 &#39;a&#39; \u548c &#39;e&#39; \u88ab\u957f\u6309\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>&#39;e&#39; \u4e00\u5b9a\u9700\u8981\u88ab\u952e\u5165\u4e24\u6b21\uff0c\u4f46\u5728 typed \u7684\u8f93\u51fa\u4e2d\u4e0d\u662f\u8fd9\u6837\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;leelee&quot;, typed = &quot;lleeelee&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;laiden&quot;, typed = &quot;laiden&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u957f\u6309\u540d\u5b57\u4e2d\u7684\u5b57\u7b26\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>name.length &lt;= 1000</code></li>\n\t<li><code>typed.length &lt;= 1000</code></li>\n\t<li><code>name</code> \u548c&nbsp;<code>typed</code>&nbsp;\u7684\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Two Pointers", "String"], "tags_cn": ["\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isLongPressedName(string name, string typed) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isLongPressedName(String name, String typed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isLongPressedName(self, name, typed):\n        \"\"\"\n        :type name: str\n        :type typed: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isLongPressedName(char * name, char * typed){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsLongPressedName(string name, string typed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} name\n * @param {string} typed\n * @return {boolean}\n */\nvar isLongPressedName = function(name, typed) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} name\n# @param {String} typed\n# @return {Boolean}\ndef is_long_pressed_name(name, typed)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isLongPressedName(_ name: String, _ typed: String) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isLongPressedName(name string, typed string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isLongPressedName(name: String, typed: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isLongPressedName(name: String, typed: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_long_pressed_name(name: String, typed: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $name\n     * @param String $typed\n     * @return Boolean\n     */\n    function isLongPressedName($name, $typed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isLongPressedName(name: string, typed: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0962", "frontend_question_id": "0926", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flip-string-to-monotone-increasing", "url_en": "https://leetcode.com/problems/flip-string-to-monotone-increasing", "relative_path_cn": "/leetcode/0900-0999/0926.Flip%20String%20to%20Monotone%20Increasing/README.md", "relative_path_en": "/leetcode/0900-0999/0926.Flip%20String%20to%20Monotone%20Increasing/README_EN.md", "title_cn": "\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5230\u5355\u8c03\u9012\u589e", "title_en": "Flip String to Monotone Increasing", "question_title_slug": "flip-string-to-monotone-increasing", "content_en": "<p>A string of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s is <em>monotone increasing</em> if it consists of some number of <code>&#39;0&#39;</code>s (possibly 0), followed by some number of <code>&#39;1&#39;</code>s (also possibly 0.)</p>\r\n\r\n<p>We are given a string <code>S</code> of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s, and we may flip any <code>&#39;0&#39;</code> to a <code>&#39;1&#39;</code> or a <code>&#39;1&#39;</code> to a <code>&#39;0&#39;</code>.</p>\r\n\r\n<p>Return the minimum number of flips to make <code>S</code>&nbsp;monotone increasing.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;00110&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>We flip the last digit to get 00111.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;010110&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>We flip to get 011111, or alternatively 000111.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;00011000&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n<strong>Explanation: </strong>We flip to get 00000000.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\r\n\t<li><code>S</code> only consists of <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code> characters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u5982\u679c\u4e00\u4e2a\u7531&nbsp;<code>&#39;0&#39;</code> \u548c <code>&#39;1&#39;</code>&nbsp;\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u662f\u4ee5\u4e00\u4e9b <code>&#39;0&#39;</code>\uff08\u53ef\u80fd\u6ca1\u6709 <code>&#39;0&#39;</code>\uff09\u540e\u9762\u8ddf\u7740\u4e00\u4e9b <code>&#39;1&#39;</code>\uff08\u4e5f\u53ef\u80fd\u6ca1\u6709 <code>&#39;1&#39;</code>\uff09\u7684\u5f62\u5f0f\u7ec4\u6210\u7684\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u662f<em>\u5355\u8c03\u9012\u589e</em>\u7684\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7531\u5b57\u7b26 <code>&#39;0&#39;</code> \u548c <code>&#39;1&#39;</code>&nbsp;\u7ec4\u6210\u7684\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u4f55&nbsp;<code>&#39;0&#39;</code> \u7ffb\u8f6c\u4e3a&nbsp;<code>&#39;1&#39;</code>&nbsp;\u6216\u8005\u5c06&nbsp;<code>&#39;1&#39;</code>&nbsp;\u7ffb\u8f6c\u4e3a&nbsp;<code>&#39;0&#39;</code>\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f <code>S</code> \u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;00110&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u6700\u540e\u4e00\u4f4d\u5f97\u5230 00111.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;010110&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u5f97\u5230 011111\uff0c\u6216\u8005\u662f 000111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;00011000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u5f97\u5230 00000000\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> \u4e2d\u53ea\u5305\u542b\u5b57\u7b26&nbsp;<code>&#39;0&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;1&#39;</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFlipsMonoIncr(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minFlipsMonoIncr(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minFlipsMonoIncr(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minFlipsMonoIncr(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinFlipsMonoIncr(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar minFlipsMonoIncr = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef min_flips_mono_incr(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minFlipsMonoIncr(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minFlipsMonoIncr(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minFlipsMonoIncr(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minFlipsMonoIncr(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_flips_mono_incr(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function minFlipsMonoIncr($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minFlipsMonoIncr(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0963", "frontend_question_id": "0927", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/three-equal-parts", "url_en": "https://leetcode.com/problems/three-equal-parts", "relative_path_cn": "/leetcode/0900-0999/0927.Three%20Equal%20Parts/README.md", "relative_path_en": "/leetcode/0900-0999/0927.Three%20Equal%20Parts/README_EN.md", "title_cn": "\u4e09\u7b49\u5206", "title_en": "Three Equal Parts", "question_title_slug": "three-equal-parts", "content_en": "<p>Given an array <code>A</code> of <code>0</code>s and <code>1</code>s, divide the array into 3 non-empty parts such that all of these parts represent the same binary value.</p>\r\n\r\n<p>If it is possible, return <strong>any</strong> <code>[i, j]</code>&nbsp;with <code>i+1 &lt; j</code>, such that:</p>\r\n\r\n<ul>\r\n\t<li><code>A[0], A[1], ..., A[i]</code> is the first part;</li>\r\n\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code> is the second part, and</li>\r\n\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> is the third part.</li>\r\n\t<li>All three parts have equal binary value.</li>\r\n</ul>\r\n\r\n<p>If it is not possible, return <code>[-1, -1]</code>.</p>\r\n\r\n<p>Note that the entire part is used when considering what binary value it represents.&nbsp; For example, <code>[1,1,0]</code>&nbsp;represents <code>6</code>&nbsp;in decimal,&nbsp;not <code>3</code>.&nbsp; Also, leading zeros are allowed, so&nbsp;<code>[0,1,1]</code> and <code>[1,1]</code> represent the same value.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,0,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[-1,-1]</span></pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>A[i] == 0</code>&nbsp;or <code>A[i] == 1</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 <code>0</code> \u548c <code>1</code> \u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5c06\u6570\u7ec4\u5206\u6210 3&nbsp;\u4e2a\u975e\u7a7a\u7684\u90e8\u5206\uff0c\u4f7f\u5f97\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u8868\u793a\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u503c\u3002</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u505a\u5230\uff0c\u8bf7\u8fd4\u56de<strong>\u4efb\u4f55</strong>&nbsp;<code>[i, j]</code>\uff0c\u5176\u4e2d <code>i+1 &lt; j</code>\uff0c\u8fd9\u6837\u4e00\u6765\uff1a</p>\n\n<ul>\n\t<li><code>A[0], A[1], ..., A[i]</code>&nbsp;\u7ec4\u6210\u7b2c\u4e00\u90e8\u5206\uff1b</li>\n\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code>&nbsp;\u4f5c\u4e3a\u7b2c\u4e8c\u90e8\u5206\uff1b</li>\n\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> \u662f\u7b2c\u4e09\u90e8\u5206\u3002</li>\n\t<li>\u8fd9\u4e09\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u503c\u76f8\u7b49\u3002</li>\n</ul>\n\n<p>\u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u8fd4\u56de&nbsp;<code>[-1, -1]</code>\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u5728\u8003\u8651\u6bcf\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u5f53\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53\u3002\u4f8b\u5982\uff0c<code>[1,1,0]</code>&nbsp;\u8868\u793a\u5341\u8fdb\u5236\u4e2d\u7684&nbsp;<code>6</code>\uff0c\u800c\u4e0d\u4f1a\u662f&nbsp;<code>3</code>\u3002\u6b64\u5916\uff0c\u524d\u5bfc\u96f6\u4e5f\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u6240\u4ee5&nbsp;<code>[0,1,1]</code> \u548c&nbsp;<code>[1,1]</code>&nbsp;\u8868\u793a\u76f8\u540c\u7684\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>[0,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>[1,1,0,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>[-1,-1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A[i] == 0</code>&nbsp;\u6216&nbsp;<code>A[i] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Greedy", "Math", "Binary Search"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> threeEqualParts(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] threeEqualParts(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def threeEqualParts(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def threeEqualParts(self, A: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* threeEqualParts(int* A, int ASize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ThreeEqualParts(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar threeEqualParts = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer[]}\ndef three_equal_parts(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func threeEqualParts(_ A: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func threeEqualParts(A []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def threeEqualParts(A: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun threeEqualParts(A: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn three_equal_parts(a: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer[]\n     */\n    function threeEqualParts($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function threeEqualParts(A: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0964", "frontend_question_id": "0928", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimize-malware-spread-ii", "url_en": "https://leetcode.com/problems/minimize-malware-spread-ii", "relative_path_cn": "/leetcode/0900-0999/0928.Minimize%20Malware%20Spread%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0928.Minimize%20Malware%20Spread%20II/README_EN.md", "title_cn": "\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad II", "title_en": "Minimize Malware Spread II", "question_title_slug": "minimize-malware-spread-ii", "content_en": "<p>(This problem is the same as <em>Minimize Malware Spread</em>, with the differences bolded.)</p>\r\n\r\n<p>In a network of nodes, each node <code>i</code> is directly connected to another node <code>j</code> if and only if&nbsp;<code>graph[i][j] = 1</code>.</p>\r\n\r\n<p>Some nodes <code>initial</code> are initially infected by malware.&nbsp; Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.&nbsp; This spread of malware will continue until no more nodes can be infected in this manner.</p>\r\n\r\n<p>Suppose <code>M(initial)</code>&nbsp;is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>\r\n\r\n<p>We will&nbsp;remove one node from the initial list, <strong>completely removing it and any connections from this node to any other node</strong>.&nbsp; Return the node that if removed, would minimize&nbsp;<code>M(initial)</code>.&nbsp; If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-1-1\">[[1,1,0],[1,1,0],[0,0,1]]</span>, initial = <span id=\"example-input-1-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-2-1\">[[1,1,0],[1,1,1],[0,1,1]]</span>, initial = <span id=\"example-input-2-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-3-1\">[[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]</span>, initial = <span id=\"example-input-3-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\r\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\r\n\t<li><code>graph[i][i] = 1</code></li>\r\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\r\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>(\u8fd9\u4e2a\u95ee\u9898\u4e0e&nbsp;<em>\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad&nbsp;</em>\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u540c\u4e4b\u5904\u7528\u7c97\u4f53\u8868\u793a\u3002)</p>\n\n<p>\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53&nbsp;<code>graph[i][j] = 1</code>&nbsp;\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9&nbsp;<code>i</code>&nbsp;\u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9&nbsp;<code>j</code>\u3002</p>\n\n<p>\u4e00\u4e9b\u8282\u70b9&nbsp;<code>initial</code>&nbsp;\u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002</p>\n\n<p>\u5047\u8bbe&nbsp;<code>M(initial)</code>&nbsp;\u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c<strong>\u5e76\u5b8c\u5168\u79fb\u9664\u8be5\u8282\u70b9\u4ee5\u53ca\u4ece\u8be5\u8282\u70b9\u5230\u4efb\u4f55\u5176\u4ed6\u8282\u70b9\u7684\u4efb\u4f55\u8fde\u63a5\u3002</strong>\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316&nbsp;<code>M(initial)</code>\uff0c&nbsp;\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>\u8f93\u5165\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] = 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ol>\n", "tags_en": ["Depth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minMalwareSpread(int[][] graph, int[] initial) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minMalwareSpread(self, graph, initial):\n        \"\"\"\n        :type graph: List[List[int]]\n        :type initial: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinMalwareSpread(int[][] graph, int[] initial) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @param {number[]} initial\n * @return {number}\n */\nvar minMalwareSpread = function(graph, initial) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @param {Integer[]} initial\n# @return {Integer}\ndef min_malware_spread(graph, initial)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minMalwareSpread(graph [][]int, initial []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @param Integer[] $initial\n     * @return Integer\n     */\n    function minMalwareSpread($graph, $initial) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minMalwareSpread(graph: number[][], initial: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0965", "frontend_question_id": "0929", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/unique-email-addresses", "url_en": "https://leetcode.com/problems/unique-email-addresses", "relative_path_cn": "/leetcode/0900-0999/0929.Unique%20Email%20Addresses/README.md", "relative_path_en": "/leetcode/0900-0999/0929.Unique%20Email%20Addresses/README_EN.md", "title_cn": "\u72ec\u7279\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740", "title_en": "Unique Email Addresses", "question_title_slug": "unique-email-addresses", "content_en": "<p>Every email consists of a local name and a domain name, separated by the @ sign.</p>\r\n\r\n<p>For example, in <code>alice@leetcode.com</code>,&nbsp;<code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.</p>\r\n\r\n<p>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.</p>\r\n\r\n<p>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.&nbsp; For example, <code>&quot;alice.z@leetcode.com&quot;</code> and <code>&quot;alicez@leetcode.com&quot;</code> forward to the same email address.&nbsp; (Note that this rule does not apply for domain names.)</p>\r\n\r\n<p>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be&nbsp;<strong>ignored</strong>. This allows certain emails to be filtered, for example&nbsp;<code>m.y+name@email.com</code>&nbsp;will be forwarded to&nbsp;<code>my@email.com</code>.&nbsp; (Again, this rule does not apply for domain names.)</p>\r\n\r\n<p>It is possible to use both of these rules at the same time.</p>\r\n\r\n<p>Given a list of <code>emails</code>, we send one email to each address in the list.&nbsp;&nbsp;How many different addresses actually receive mails?&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong><span>Explanation:</span></strong><span>&nbsp;&quot;</span><span id=\"example-input-1-1\">testemail@leetcode.com&quot; and &quot;testemail@lee.tcode.com&quot; </span>actually receive mails\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\r\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\r\n\t<li>Each <code>emails[i]</code> contains exactly one <code>&#39;@&#39;</code> character.</li>\r\n\t<li>All local and domain names are non-empty.</li>\r\n\t<li>Local names do not start with a <code>&#39;+&#39;</code> character.</li>\r\n</ul>\r\n</div>\r\n", "content_cn": "<p>\u6bcf\u5c01\u7535\u5b50\u90ae\u4ef6\u90fd\u7531\u4e00\u4e2a\u672c\u5730\u540d\u79f0\u548c\u4e00\u4e2a\u57df\u540d\u7ec4\u6210\uff0c\u4ee5 @ \u7b26\u53f7\u5206\u9694\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5728&nbsp;<code>alice@leetcode.com</code>\u4e2d\uff0c&nbsp;<code>alice</code>&nbsp;\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c&nbsp;<code>leetcode.com</code>&nbsp;\u662f\u57df\u540d\u3002</p>\n\n<p>\u9664\u4e86\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\u8fd8\u53ef\u80fd\u5305\u542b <code>&#39;.&#39;</code> \u6216 <code>&#39;+&#39;</code>\u3002</p>\n\n<p>\u5982\u679c\u5728\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684<strong>\u672c\u5730\u540d\u79f0</strong>\u90e8\u5206\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u4e4b\u95f4\u6dfb\u52a0\u53e5\u70b9\uff08<code>&#39;.&#39;</code>\uff09\uff0c\u5219\u53d1\u5f80\u90a3\u91cc\u7684\u90ae\u4ef6\u5c06\u4f1a\u8f6c\u53d1\u5230\u672c\u5730\u540d\u79f0\u4e2d\u6ca1\u6709\u70b9\u7684\u540c\u4e00\u5730\u5740\u3002\u4f8b\u5982\uff0c<code>&quot;alice.z@leetcode.com&rdquo;</code> \u548c <code>&ldquo;alicez@leetcode.com&rdquo;</code>&nbsp;\u4f1a\u8f6c\u53d1\u5230\u540c\u4e00\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u6b64\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u57df\u540d\u3002\uff09</p>\n\n<p>\u5982\u679c\u5728<strong>\u672c\u5730\u540d\u79f0</strong>\u4e2d\u6dfb\u52a0\u52a0\u53f7\uff08<code>&#39;+&#39;</code>\uff09\uff0c\u5219\u4f1a\u5ffd\u7565\u7b2c\u4e00\u4e2a\u52a0\u53f7\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u5141\u8bb8\u8fc7\u6ee4\u67d0\u4e9b\u7535\u5b50\u90ae\u4ef6\uff0c\u4f8b\u5982 <code>m.y+name@email.com</code> \u5c06\u8f6c\u53d1\u5230 <code>my@email.com</code>\u3002 \uff08\u540c\u6837\uff0c\u6b64\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u57df\u540d\u3002\uff09</p>\n\n<p>\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u4e2a\u89c4\u5219\u3002</p>\n\n<p>\u7ed9\u5b9a\u7535\u5b50\u90ae\u4ef6\u5217\u8868 <code>emails</code>\uff0c\u6211\u4eec\u4f1a\u5411\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5730\u5740\u53d1\u9001\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u5b9e\u9645\u6536\u5230\u90ae\u4ef6\u7684\u4e0d\u540c\u5730\u5740\u6709\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5b9e\u9645\u6536\u5230\u90ae\u4ef6\u7684\u662f &quot;testemail@leetcode.com&quot; \u548c &quot;testemail@lee.tcode.com&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\n\t<li>\u6bcf\u5c01 <code>emails[i]</code> \u90fd\u5305\u542b\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a <code>&#39;@&#39;</code> \u5b57\u7b26\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numUniqueEmails(String[] emails) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numUniqueEmails(char ** emails, int emailsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumUniqueEmails(string[] emails) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} emails\n * @return {number}\n */\nvar numUniqueEmails = function(emails) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} emails\n# @return {Integer}\ndef num_unique_emails(emails)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func numUniqueEmails(_ emails: [String]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numUniqueEmails(emails []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numUniqueEmails(emails: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numUniqueEmails(emails: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_unique_emails(emails: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $emails\n     * @return Integer\n     */\n    function numUniqueEmails($emails) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numUniqueEmails(emails: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0966", "frontend_question_id": "0930", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-subarrays-with-sum", "url_en": "https://leetcode.com/problems/binary-subarrays-with-sum", "relative_path_cn": "/leetcode/0900-0999/0930.Binary%20Subarrays%20With%20Sum/README.md", "relative_path_en": "/leetcode/0900-0999/0930.Binary%20Subarrays%20With%20Sum/README_EN.md", "title_cn": "\u548c\u76f8\u540c\u7684\u4e8c\u5143\u5b50\u6570\u7ec4", "title_en": "Binary Subarrays With Sum", "question_title_slug": "binary-subarrays-with-sum", "content_en": "<p>In an array <code>A</code> of <code>0</code>s and <code>1</code>s, how many <strong>non-empty</strong> subarrays have sum <code>S</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,0,1,0,1]</span>, S = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe 4 subarrays are bolded below:\r\n[<strong>1,0,1</strong>,0,1]\r\n[<strong>1,0,1,0</strong>,1]\r\n[1,<strong>0,1,0,1</strong>]\r\n[1,0,<strong>1,0,1</strong>]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length &lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\r\n\t<li><code>A[i]</code>&nbsp;is either <code>0</code>&nbsp;or <code>1</code>.</li>\r\n</ol>", "content_cn": "<p>\u5728\u7531\u82e5\u5e72&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp; \u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u548c\u4e3a <code>S</code>&nbsp;\u7684<strong>\u975e\u7a7a</strong>\u5b50\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,0,1,0,1], S = 2\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5982\u4e0b\u9762\u9ed1\u4f53\u6240\u793a\uff0c\u6709 4 \u4e2a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u5b50\u6570\u7ec4\uff1a\n[<strong>1,0,1</strong>,0,1]\n[<strong>1,0,1,0</strong>,1]\n[1,<strong>0,1,0,1</strong>]\n[1,0,<strong>1,0,1</strong>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 30000</code></li>\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\n\t<li><code>A[i]</code>&nbsp;\u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code></li>\n</ol>\n", "tags_en": ["Hash Table", "Two Pointers"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSubarraysWithSum(vector<int>& A, int S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSubarraysWithSum(int[] A, int S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSubarraysWithSum(self, A, S):\n        \"\"\"\n        :type A: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSubarraysWithSum(self, A: List[int], S: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSubarraysWithSum(int* A, int ASize, int S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSubarraysWithSum(int[] A, int S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} S\n * @return {number}\n */\nvar numSubarraysWithSum = function(A, S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} s\n# @return {Integer}\ndef num_subarrays_with_sum(a, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSubarraysWithSum(_ A: [Int], _ S: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSubarraysWithSum(A []int, S int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSubarraysWithSum(A: Array[Int], S: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSubarraysWithSum(A: IntArray, S: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_subarrays_with_sum(a: Vec<i32>, s: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $S\n     * @return Integer\n     */\n    function numSubarraysWithSum($A, $S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSubarraysWithSum(A: number[], S: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0967", "frontend_question_id": "0931", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-falling-path-sum", "url_en": "https://leetcode.com/problems/minimum-falling-path-sum", "relative_path_cn": "/leetcode/0900-0999/0931.Minimum%20Falling%20Path%20Sum/README.md", "relative_path_en": "/leetcode/0900-0999/0931.Minimum%20Falling%20Path%20Sum/README_EN.md", "title_cn": "\u4e0b\u964d\u8def\u5f84\u6700\u5c0f\u548c", "title_en": "Minimum Falling Path Sum", "question_title_slug": "minimum-falling-path-sum", "content_en": "<p>Given a <strong>square</strong> array of integers <code>A</code>, we want the <strong>minimum</strong> sum of a <em>falling path</em> through <code>A</code>.</p>\n\n<p>A falling path starts at any element in the first row, and chooses one element from each row.&nbsp; The next row&#39;s choice must be in a column that is different from the previous row&#39;s column by at most one.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2,3],[4,5,6],[7,8,9]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">12</span>\n<strong>Explanation: </strong>\nThe possible falling paths are:\n</pre>\n\n<ul>\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\n</ul>\n\n<p>The falling path with the smallest sum is <code>[1,4,7]</code>, so the answer is <code>12</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u65b9\u5f62</strong>\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u60f3\u8981\u5f97\u5230\u901a\u8fc7 <code>A</code> \u7684<em>\u4e0b\u964d\u8def\u5f84</em>\u7684<strong>\u6700\u5c0f</strong>\u548c\u3002</p>\n\n<p>\u4e0b\u964d\u8def\u5f84\u53ef\u4ee5\u4ece\u7b2c\u4e00\u884c\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u5f00\u59cb\uff0c\u5e76\u4ece\u6bcf\u4e00\u884c\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u4e0b\u4e00\u884c\u9009\u62e9\u7684\u5143\u7d20\u548c\u5f53\u524d\u884c\u6240\u9009\u5143\u7d20\u6700\u591a\u76f8\u9694\u4e00\u5217\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u4e0b\u964d\u8def\u5f84\u6709\uff1a\n</pre>\n\n<ul>\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\n</ul>\n\n<p>\u548c\u6700\u5c0f\u7684\u4e0b\u964d\u8def\u5f84\u662f&nbsp;<code>[1,4,7]</code>\uff0c\u6240\u4ee5\u7b54\u6848\u662f&nbsp;<code>12</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minFallingPathSum(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minFallingPathSum(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minFallingPathSum(self, A: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minFallingPathSum(int** A, int ASize, int* AColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinFallingPathSum(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar minFallingPathSum = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @return {Integer}\ndef min_falling_path_sum(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minFallingPathSum(_ A: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minFallingPathSum(A [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minFallingPathSum(A: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minFallingPathSum(A: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_falling_path_sum(a: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function minFallingPathSum($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minFallingPathSum(A: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0968", "frontend_question_id": "0932", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/beautiful-array", "url_en": "https://leetcode.com/problems/beautiful-array", "relative_path_cn": "/leetcode/0900-0999/0932.Beautiful%20Array/README.md", "relative_path_en": "/leetcode/0900-0999/0932.Beautiful%20Array/README_EN.md", "title_cn": "\u6f02\u4eae\u6570\u7ec4", "title_en": "Beautiful Array", "question_title_slug": "beautiful-array", "content_en": "<p>For some fixed <code>N</code>, an array <code>A</code> is <em>beautiful</em> if it is a permutation of the integers <code>1, 2, ..., N</code>, such that:</p>\r\n\r\n<p>For every <code>i &lt; j</code>, there is <strong>no</strong>&nbsp;<code>k</code> with <code>i &lt; k &lt; j</code>&nbsp;such that <code>A[k] * 2 = A[i] + A[j]</code>.</p>\r\n\r\n<p>Given <code>N</code>, return <strong>any</strong> beautiful array <code>A</code>.&nbsp; (It is guaranteed that one exists.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,1,4,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span>[3,1,2,5,4]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\r\n</ul>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>", "content_cn": "<p>\u5bf9\u4e8e\u67d0\u4e9b\u56fa\u5b9a\u7684&nbsp;<code>N</code>\uff0c\u5982\u679c\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u662f\u6574\u6570&nbsp;<code>1, 2, ..., N</code>&nbsp;\u7ec4\u6210\u7684\u6392\u5217\uff0c\u4f7f\u5f97\uff1a</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a&nbsp;<code>i &lt; j</code>\uff0c\u90fd<strong>\u4e0d\u5b58\u5728</strong>&nbsp;<code>k</code> \u6ee1\u8db3&nbsp;<code>i &lt; k &lt; j</code>&nbsp;\u4f7f\u5f97&nbsp;<code>A[k] * 2 = A[i] + A[j]</code>\u3002</p>\n\n<p>\u90a3\u4e48\u6570\u7ec4 <code>A</code>&nbsp;\u662f\u6f02\u4eae\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u7ed9\u5b9a&nbsp;<code>N</code>\uff0c\u8fd4\u56de<strong>\u4efb\u610f</strong>\u6f02\u4eae\u6570\u7ec4&nbsp;<code>A</code>\uff08\u4fdd\u8bc1\u5b58\u5728\u4e00\u4e2a\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>[2,1,4,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>5\n<strong>\u8f93\u51fa\uff1a</strong>[3,1,2,5,4]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Divide and Conquer"], "tags_cn": ["\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> beautifulArray(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] beautifulArray(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def beautifulArray(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulArray(int N, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] BeautifulArray(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number[]}\n */\nvar beautifulArray = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef beautiful_array(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func beautifulArray(_ N: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func beautifulArray(N int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def beautifulArray(N: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun beautifulArray(N: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn beautiful_array(n: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer[]\n     */\n    function beautifulArray($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function beautifulArray(N: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0969", "frontend_question_id": "0933", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-recent-calls", "url_en": "https://leetcode.com/problems/number-of-recent-calls", "relative_path_cn": "/leetcode/0900-0999/0933.Number%20of%20Recent%20Calls/README.md", "relative_path_en": "/leetcode/0900-0999/0933.Number%20of%20Recent%20Calls/README_EN.md", "title_cn": "\u6700\u8fd1\u7684\u8bf7\u6c42\u6b21\u6570", "title_en": "Number of Recent Calls", "question_title_slug": "number-of-recent-calls", "content_en": "<p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p>\n\n<p>Implement the <code>RecentCounter</code> class:</p>\n\n<ul>\n\t<li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li>\n\t<li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li>\n</ul>\n\n<p>It is <strong>guaranteed</strong> that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]\n[[], [1], [100], [3001], [3002]]\n<strong>Output</strong>\n[null, 1, 2, 3, 3]\n\n<strong>Explanation</strong>\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [<u>1</u>], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [<u>1</u>, <u>100</u>], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [<u>1</u>, <u>100</u>, <u>3001</u>], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, <u>100</u>, <u>3001</u>, <u>3002</u>], range is [2,3002], return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li>\n\t<li>Each test case will call <code>ping</code> with <strong>strictly increasing</strong> values of <code>t</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>ping</code>.</li>\n</ul>\n", "content_cn": "<p>\u5199\u4e00\u4e2a\u00a0<code>RecentCounter</code>\u00a0\u7c7b\u6765\u8ba1\u7b97\u7279\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u6700\u8fd1\u7684\u8bf7\u6c42\u3002</p>\n\n<p>\u8bf7\u4f60\u5b9e\u73b0 <code>RecentCounter</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>RecentCounter()</code> \u521d\u59cb\u5316\u8ba1\u6570\u5668\uff0c\u8bf7\u6c42\u6570\u4e3a 0 \u3002</li>\n\t<li><code>int ping(int t)</code> \u5728\u65f6\u95f4 <code>t</code> \u6dfb\u52a0\u4e00\u4e2a\u65b0\u8bf7\u6c42\uff0c\u5176\u4e2d <code>t</code> \u8868\u793a\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u67d0\u4e2a\u65f6\u95f4\uff0c\u5e76\u8fd4\u56de\u8fc7\u53bb <code>3000</code> \u6beb\u79d2\u5185\u53d1\u751f\u7684\u6240\u6709\u8bf7\u6c42\u6570\uff08\u5305\u62ec\u65b0\u8bf7\u6c42\uff09\u3002\u786e\u5207\u5730\u8bf4\uff0c\u8fd4\u56de\u5728 <code>[t-3000, t]</code> \u5185\u53d1\u751f\u7684\u8bf7\u6c42\u6570\u3002</li>\n</ul>\n\n<p><strong>\u4fdd\u8bc1</strong> \u6bcf\u6b21\u5bf9 <code>ping</code> \u7684\u8c03\u7528\u90fd\u4f7f\u7528\u6bd4\u4e4b\u524d\u66f4\u5927\u7684 <code>t</code> \u503c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null, 1, 2, 3, 3]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [<strong>1</strong>]\uff0c\u8303\u56f4\u662f [-2999,1]\uff0c\u8fd4\u56de 1\nrecentCounter.ping(100);   // requests = [<strong>1</strong>, <strong>100</strong>]\uff0c\u8303\u56f4\u662f [-2900,100]\uff0c\u8fd4\u56de 2\nrecentCounter.ping(3001);  // requests = [<strong>1</strong>, <strong>100</strong>, <strong>3001</strong>]\uff0c\u8303\u56f4\u662f [1,3001]\uff0c\u8fd4\u56de 3\nrecentCounter.ping(3002);  // requests = [1, <strong>100</strong>, <strong>3001</strong>, <strong>3002</strong>]\uff0c\u8303\u56f4\u662f [2,3002]\uff0c\u8fd4\u56de 3\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= t <= 10<sup>9</sup></code></li>\n\t<li>\u4fdd\u8bc1\u6bcf\u6b21\u5bf9 <code>ping</code> \u8c03\u7528\u6240\u4f7f\u7528\u7684 <code>t</code> \u503c\u90fd <strong>\u4e25\u683c\u9012\u589e</strong></li>\n\t<li>\u81f3\u591a\u8c03\u7528 <code>ping</code> \u65b9\u6cd5 <code>10<sup>4</sup></code> \u6b21</li>\n</ul>\n", "tags_en": ["Queue"], "tags_cn": ["\u961f\u5217"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class RecentCounter {\npublic:\n    RecentCounter() {\n\n    }\n    \n    int ping(int t) {\n\n    }\n};\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter* obj = new RecentCounter();\n * int param_1 = obj->ping(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class RecentCounter {\n\n    public RecentCounter() {\n\n    }\n    \n    public int ping(int t) {\n\n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter obj = new RecentCounter();\n * int param_1 = obj.ping(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class RecentCounter(object):\n\n    def __init__(self):\n\n\n    def ping(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class RecentCounter:\n\n    def __init__(self):\n\n\n    def ping(self, t: int) -> int:\n\n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} RecentCounter;\n\n\nRecentCounter* recentCounterCreate() {\n\n}\n\nint recentCounterPing(RecentCounter* obj, int t) {\n\n}\n\nvoid recentCounterFree(RecentCounter* obj) {\n\n}\n\n/**\n * Your RecentCounter struct will be instantiated and called as such:\n * RecentCounter* obj = recentCounterCreate();\n * int param_1 = recentCounterPing(obj, t);\n \n * recentCounterFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class RecentCounter {\n\n    public RecentCounter() {\n\n    }\n    \n    public int Ping(int t) {\n\n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter obj = new RecentCounter();\n * int param_1 = obj.Ping(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar RecentCounter = function() {\n\n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nRecentCounter.prototype.ping = function(t) {\n\n};\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class RecentCounter\n    def initialize()\n\n    end\n\n\n=begin\n    :type t: Integer\n    :rtype: Integer\n=end\n    def ping(t)\n\n    end\n\n\nend\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter.new()\n# param_1 = obj.ping(t)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass RecentCounter {\n\n    init() {\n        \n    }\n    \n    func ping(_ t: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * let obj = RecentCounter()\n * let ret_1: Int = obj.ping(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type RecentCounter struct {\n\n}\n\n\nfunc Constructor() RecentCounter {\n\n}\n\n\nfunc (this *RecentCounter) Ping(t int) int {\n\n}\n\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Ping(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class RecentCounter() {\n\n    def ping(t: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class RecentCounter() {\n\n    fun ping(t: Int): Int {\n\n    }\n\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * var obj = RecentCounter()\n * var param_1 = obj.ping(t)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct RecentCounter {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RecentCounter {\n\n    fn new() -> Self {\n\n    }\n    \n    fn ping(&self, t: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * let obj = RecentCounter::new();\n * let ret_1: i32 = obj.ping(t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class RecentCounter {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $t\n     * @return Integer\n     */\n    function ping($t) {\n\n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * $obj = RecentCounter();\n * $ret_1 = $obj->ping($t);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class RecentCounter {\n    constructor() {\n\n    }\n\n    ping(t: number): number {\n\n    }\n}\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0971", "frontend_question_id": "0934", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-bridge", "url_en": "https://leetcode.com/problems/shortest-bridge", "relative_path_cn": "/leetcode/0900-0999/0934.Shortest%20Bridge/README.md", "relative_path_en": "/leetcode/0900-0999/0934.Shortest%20Bridge/README_EN.md", "title_cn": "\u6700\u77ed\u7684\u6865", "title_en": "Shortest Bridge", "question_title_slug": "shortest-bridge", "content_en": "<p>In a given 2D binary array <code>A</code>, there are two islands.&nbsp; (An island is a 4-directionally connected group of&nbsp;<code>1</code>s not connected to any other 1s.)</p>\n\n<p>Now, we may change <code>0</code>s to <code>1</code>s so as to connect the two islands together to form 1 island.</p>\n\n<p>Return the smallest number of <code>0</code>s that must be flipped.&nbsp; (It is guaranteed that the answer is at least 1.)</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> A = [[0,1],[1,0]]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> A = [[0,1,0],[0,0,0],[0,0,1]]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= A.length == A[0].length &lt;= 100</code></li>\n\t<li><code>A[i][j] == 0</code> or <code>A[i][j] == 1</code></li>\n</ul>\n", "content_cn": "<p>\u5728\u7ed9\u5b9a\u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\uff0c\u5b58\u5728\u4e24\u5ea7\u5c9b\u3002\uff08\u5c9b\u662f\u7531\u56db\u9762\u76f8\u8fde\u7684 <code>1</code> \u5f62\u6210\u7684\u4e00\u4e2a\u6700\u5927\u7ec4\u3002\uff09</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06&nbsp;<code>0</code>&nbsp;\u53d8\u4e3a&nbsp;<code>1</code>\uff0c\u4ee5\u4f7f\u4e24\u5ea7\u5c9b\u8fde\u63a5\u8d77\u6765\uff0c\u53d8\u6210\u4e00\u5ea7\u5c9b\u3002</p>\n\n<p>\u8fd4\u56de\u5fc5\u987b\u7ffb\u8f6c\u7684&nbsp;<code>0</code> \u7684\u6700\u5c0f\u6570\u76ee\u3002\uff08\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u81f3\u5c11\u662f 1\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1,0],[0,0,0],[0,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length =&nbsp;A[0].length &lt;= 100</code></li>\n\t<li><code>A[i][j] == 0</code> \u6216&nbsp;<code>A[i][j] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int shortestBridge(vector<vector<int>>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int shortestBridge(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestBridge(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestBridge(self, A: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint shortestBridge(int** A, int ASize, int* AColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ShortestBridge(int[][] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @return {number}\n */\nvar shortestBridge = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @return {Integer}\ndef shortest_bridge(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestBridge(_ A: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestBridge(A [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestBridge(A: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestBridge(A: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_bridge(a: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @return Integer\n     */\n    function shortestBridge($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestBridge(A: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0972", "frontend_question_id": "0935", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/knight-dialer", "url_en": "https://leetcode.com/problems/knight-dialer", "relative_path_cn": "/leetcode/0900-0999/0935.Knight%20Dialer/README.md", "relative_path_en": "/leetcode/0900-0999/0935.Knight%20Dialer/README_EN.md", "title_cn": "\u9a91\u58eb\u62e8\u53f7\u5668", "title_en": "Knight Dialer", "question_title_slug": "knight-dialer", "content_en": "<p>The chess knight has a <strong>unique movement</strong>,&nbsp;it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an <strong>L</strong>). The possible movements of chess knight are shown in this diagaram:</p>\n\n<p>A chess knight can move as indicated in the chess diagram below:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/18/chess.jpg\" style=\"width: 402px; height: 402px;\" />\n<p>We have a chess knight and a phone pad as shown below, the knight <strong>can only stand on a numeric cell</strong>&nbsp;(i.e. blue cell).</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/18/phone.jpg\" style=\"width: 242px; height: 322px;\" />\n<p>Given an integer <code>n</code>, return how many distinct phone numbers of length <code>n</code> we can dial.</p>\n\n<p>You are allowed to place the knight <strong>on any numeric cell</strong> initially and then you should perform <code>n - 1</code> jumps to dial a number of length <code>n</code>. All jumps should be <strong>valid</strong> knight jumps.</p>\n\n<p>As the answer may be very large, <strong>return the answer modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 46\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 104\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3131\n<strong>Output:</strong> 136006598\n<strong>Explanation:</strong> Please take care of the mod.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n</ul>\n", "content_cn": "<p>\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u9a91\u58eb\u53ef\u4ee5\u6309\u4e0b\u56fe\u6240\u793a\u8fdb\u884c\u79fb\u52a8\uff1a</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/knight.png\" style=\"height: 150px; width: 150px;\">&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/keypad.png\" style=\"height: 150px; width: 134px;\"></p>\n\n<p><br>\n\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c06&nbsp;&ldquo;\u9a91\u58eb&rdquo; \u653e\u5728\u7535\u8bdd\u62e8\u53f7\u76d8\u7684\u4efb\u610f\u6570\u5b57\u952e\uff08\u5982\u4e0a\u56fe\u6240\u793a\uff09\u4e0a\uff0c\u63a5\u4e0b\u6765\uff0c\u9a91\u58eb\u5c06\u4f1a\u8df3&nbsp;N-1 \u6b65\u3002\u6bcf\u4e00\u6b65\u5fc5\u987b\u662f\u4ece\u4e00\u4e2a\u6570\u5b57\u952e\u8df3\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u952e\u3002</p>\n\n<p>\u6bcf\u5f53\u5b83\u843d\u5728\u4e00\u4e2a\u952e\u4e0a\uff08\u5305\u62ec\u9a91\u58eb\u7684\u521d\u59cb\u4f4d\u7f6e\uff09\uff0c\u90fd\u4f1a\u62e8\u51fa\u952e\u6240\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u603b\u5171\u6309\u4e0b&nbsp;<code>N</code> \u4f4d\u6570\u5b57\u3002</p>\n\n<p>\u4f60\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u62e8\u51fa\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u53f7\u7801\uff1f</p>\n\n<p>\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c<strong>\u6240\u4ee5\u8f93\u51fa\u7b54\u6848\u6a21&nbsp;<code>10^9 + 7</code></strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>20\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 5000</code></li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int knightDialer(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int knightDialer(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def knightDialer(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def knightDialer(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint knightDialer(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KnightDialer(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar knightDialer = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef knight_dialer(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func knightDialer(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func knightDialer(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def knightDialer(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun knightDialer(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn knight_dialer(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function knightDialer($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function knightDialer(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0973", "frontend_question_id": "0936", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/stamping-the-sequence", "url_en": "https://leetcode.com/problems/stamping-the-sequence", "relative_path_cn": "/leetcode/0900-0999/0936.Stamping%20The%20Sequence/README.md", "relative_path_en": "/leetcode/0900-0999/0936.Stamping%20The%20Sequence/README_EN.md", "title_cn": "\u6233\u5370\u5e8f\u5217", "title_en": "Stamping The Sequence", "question_title_slug": "stamping-the-sequence", "content_en": "<p>You want to form a <code>target</code>&nbsp;string of <strong>lowercase letters</strong>.</p>\r\n\r\n<p>At the beginning, your sequence is <code>target.length</code>&nbsp;<code>&#39;?&#39;</code> marks.&nbsp; You also have a <code>stamp</code>&nbsp;of lowercase letters.</p>\r\n\r\n<p>On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.&nbsp; You can make up to <code>10 * target.length</code> turns.</p>\r\n\r\n<p>For example, if the initial sequence is <font face=\"monospace\">&quot;?????&quot;</font>, and your stamp is <code>&quot;abc&quot;</code>,&nbsp; then you may make <font face=\"monospace\">&quot;abc??&quot;, &quot;?abc?&quot;, &quot;??abc&quot;&nbsp;</font>in the first turn.&nbsp; (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)</p>\r\n\r\n<p>If the sequence is possible to stamp, then return an array of&nbsp;the index of the left-most letter being stamped at each turn.&nbsp; If the sequence is not possible to stamp, return an empty array.</p>\r\n\r\n<p>For example, if the sequence is <font face=\"monospace\">&quot;ababc&quot;</font>, and the stamp is <code>&quot;abc&quot;</code>, then we could return the answer <code>[0, 2]</code>, corresponding to the moves <font face=\"monospace\">&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot;</font>.</p>\r\n\r\n<p>Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within <code>10 * target.length</code>&nbsp;moves.&nbsp; Any answers specifying more than this number of moves&nbsp;will not be accepted.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stamp = <span id=\"example-input-1-1\">&quot;abc&quot;</span>, target = <span id=\"example-input-1-2\">&quot;ababc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,2]</span>\r\n([1,0,2] would also be accepted as an answer, as well as some other answers.)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stamp = <span id=\"example-input-2-1\">&quot;</span><span id=\"example-input-2-2\">abca</span><span>&quot;</span>, target = <span id=\"example-input-2-2\">&quot;</span><span>aabcaca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[3,0,1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n</div>\r\n</div>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\r\n\t<li><code>stamp</code> and <code>target</code> only contain lowercase letters.</li>\r\n</ol>", "content_cn": "<p>\u4f60\u60f3\u8981\u7528<strong>\u5c0f\u5199\u5b57\u6bcd</strong>\u7ec4\u6210\u4e00\u4e2a\u76ee\u6807\u5b57\u7b26\u4e32&nbsp;<code>target</code>\u3002&nbsp;</p>\n\n<p>\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u5e8f\u5217\u7531&nbsp;<code>target.length</code>&nbsp;\u4e2a&nbsp;<code>&#39;?&#39;</code>&nbsp;\u8bb0\u53f7\u7ec4\u6210\u3002\u800c\u4f60\u6709\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5370\u7ae0&nbsp;<code>stamp</code>\u3002</p>\n\n<p>\u5728\u6bcf\u4e2a\u56de\u5408\uff0c\u4f60\u53ef\u4ee5\u5c06\u5370\u7ae0\u653e\u5728\u5e8f\u5217\u4e0a\uff0c\u5e76\u5c06\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u66ff\u6362\u4e3a\u5370\u7ae0\u4e0a\u7684\u76f8\u5e94\u5b57\u6bcd\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u8fdb\u884c&nbsp;<code>10 * target.length</code>&nbsp; \u4e2a\u56de\u5408\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u521d\u59cb\u5e8f\u5217\u4e3a &quot;?????&quot;\uff0c\u800c\u4f60\u7684\u5370\u7ae0 <code>stamp</code>&nbsp;\u662f&nbsp;<code>&quot;abc&quot;</code>\uff0c\u90a3\u4e48\u5728\u7b2c\u4e00\u56de\u5408\uff0c\u4f60\u53ef\u4ee5\u5f97\u5230&nbsp;&quot;abc??&quot;\u3001&quot;?abc?&quot;\u3001&quot;??abc&quot;\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5370\u7ae0\u5fc5\u987b\u5b8c\u5168\u5305\u542b\u5728\u5e8f\u5217\u7684\u8fb9\u754c\u5185\u624d\u80fd\u76d6\u4e0b\u53bb\u3002\uff09</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u5370\u51fa\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u7531\u6bcf\u4e2a\u56de\u5408\u4e2d\u88ab\u5370\u4e0b\u7684\u6700\u5de6\u8fb9\u5b57\u6bcd\u7684\u7d22\u5f15\u7ec4\u6210\u3002\u5982\u679c\u4e0d\u80fd\u5370\u51fa\u5e8f\u5217\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u5e8f\u5217\u662f &quot;ababc&quot;\uff0c\u5370\u7ae0\u662f <code>&quot;abc&quot;</code>\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e0e\u64cd\u4f5c&nbsp;&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot; \u76f8\u5bf9\u5e94\u7684\u7b54\u6848 <code>[0, 2]</code>\uff1b</p>\n\n<p>\u53e6\u5916\uff0c\u5982\u679c\u53ef\u4ee5\u5370\u51fa\u5e8f\u5217\uff0c\u90a3\u4e48\u9700\u8981\u4fdd\u8bc1\u53ef\u4ee5\u5728 <code>10 * target.length</code>&nbsp;\u4e2a\u56de\u5408\u5185\u5b8c\u6210\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u6570\u5b57\u7684\u7b54\u6848\u5c06\u4e0d\u88ab\u63a5\u53d7\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,2]\n\uff08[1,0,2] \u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u53ef\u80fd\u7684\u7ed3\u679c\u4e5f\u5c06\u4f5c\u4e3a\u7b54\u6848\u88ab\u63a5\u53d7\uff09\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[3,0,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> \u548c&nbsp;<code>target</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Greedy", "String"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> movesToStamp(string stamp, string target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] movesToStamp(String stamp, String target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def movesToStamp(self, stamp, target):\n        \"\"\"\n        :type stamp: str\n        :type target: str\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* movesToStamp(char * stamp, char * target, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MovesToStamp(string stamp, string target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} stamp\n * @param {string} target\n * @return {number[]}\n */\nvar movesToStamp = function(stamp, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} stamp\n# @param {String} target\n# @return {Integer[]}\ndef moves_to_stamp(stamp, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func movesToStamp(_ stamp: String, _ target: String) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func movesToStamp(stamp string, target string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def movesToStamp(stamp: String, target: String): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun movesToStamp(stamp: String, target: String): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn moves_to_stamp(stamp: String, target: String) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $stamp\n     * @param String $target\n     * @return Integer[]\n     */\n    function movesToStamp($stamp, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function movesToStamp(stamp: string, target: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0974", "frontend_question_id": "0937", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reorder-data-in-log-files", "url_en": "https://leetcode.com/problems/reorder-data-in-log-files", "relative_path_cn": "/leetcode/0900-0999/0937.Reorder%20Data%20in%20Log%20Files/README.md", "relative_path_en": "/leetcode/0900-0999/0937.Reorder%20Data%20in%20Log%20Files/README_EN.md", "title_cn": "\u91cd\u65b0\u6392\u5217\u65e5\u5fd7\u6587\u4ef6", "title_en": "Reorder Data in Log Files", "question_title_slug": "reorder-data-in-log-files", "content_en": "<p>You have an array of <code>logs</code>.&nbsp; Each log is a space delimited string of words.</p>\n\n<p>For each log, the first word in each log is an alphanumeric <em>identifier</em>.&nbsp; Then, either:</p>\n\n<ul>\n\t<li>Each word after the identifier will consist only of lowercase letters, or;</li>\n\t<li>Each word after the identifier will consist only of digits.</li>\n</ul>\n\n<p>We will call these two varieties of logs <em>letter-logs</em> and <em>digit-logs</em>.&nbsp; It is guaranteed that each log has at least one word after its identifier.</p>\n\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.&nbsp; The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.&nbsp; The digit-logs should be put in their original order.</p>\n\n<p>Return the final order of the logs.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n<strong>Output:</strong> [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code> is guaranteed to have an identifier, and a word after the identifier.</li>\n</ol>\n", "content_cn": "<p>\u4f60\u6709\u4e00\u4e2a\u65e5\u5fd7\u6570\u7ec4 <code>logs</code>\u3002\u6bcf\u6761\u65e5\u5fd7\u90fd\u662f\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u5b57\u4e32\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u6761\u65e5\u5fd7\uff0c\u5176\u7b2c\u4e00\u4e2a\u5b57\u4e3a\u5b57\u6bcd\u4e0e\u6570\u5b57\u6df7\u5408\u7684<em> </em><strong>\u6807\u8bc6\u7b26</strong> \uff0c\u9664\u6807\u8bc6\u7b26\u4e4b\u5916\u7684\u6240\u6709\u5b57\u4e3a\u8fd9\u4e00\u6761\u65e5\u5fd7\u7684 <strong>\u5185\u5bb9</strong> \u3002</p>\n\n<ul>\n\t<li>\u9664\u6807\u8bc6\u7b26\u4e4b\u5916\uff0c\u6240\u6709\u5b57\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\uff0c\u79f0\u4e3a <strong>\u5b57\u6bcd\u65e5\u5fd7</strong></li>\n\t<li>\u9664\u6807\u8bc6\u7b26\u4e4b\u5916\uff0c\u6240\u6709\u5b57\u5747\u7531\u6570\u5b57\u7ec4\u6210\u7684\uff0c\u79f0\u4e3a <strong>\u6570\u5b57\u65e5\u5fd7</strong></li>\n</ul>\n\n<p>\u9898\u76ee\u6240\u7528\u6570\u636e\u4fdd\u8bc1\u6bcf\u4e2a\u65e5\u5fd7\u5728\u5176\u6807\u8bc6\u7b26\u540e\u9762\u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u3002</p>\n\n<p>\u8bf7\u6309\u4e0b\u8ff0\u89c4\u5219\u5c06\u65e5\u5fd7\u91cd\u65b0\u6392\u5e8f\uff1a</p>\n\n<ul>\n\t<li>\u6240\u6709 <strong>\u5b57\u6bcd\u65e5\u5fd7</strong> \u90fd\u6392\u5728 <strong>\u6570\u5b57\u65e5\u5fd7</strong> \u4e4b\u524d\u3002</li>\n\t<li><strong>\u5b57\u6bcd\u65e5\u5fd7</strong> \u5728\u5185\u5bb9\u4e0d\u540c\u65f6\uff0c\u5ffd\u7565\u6807\u8bc6\u7b26\u540e\uff0c\u6309\u5185\u5bb9\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\uff1b\u5728\u5185\u5bb9\u76f8\u540c\u65f6\uff0c\u6309\u6807\u8bc6\u7b26\u6392\u5e8f\uff1b</li>\n\t<li><strong>\u6570\u5b57\u65e5\u5fd7</strong> \u5e94\u8be5\u6309\u539f\u6765\u7684\u987a\u5e8f\u6392\u5217\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u65e5\u5fd7\u7684\u6700\u7ec8\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b \uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code>&nbsp;\u4fdd\u8bc1\u6709\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u5e76\u4e14\u6807\u8bc6\u7b26\u540e\u9762\u6709\u4e00\u4e2a\u5b57\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> reorderLogFiles(vector<string>& logs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] reorderLogFiles(String[] logs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reorderLogFiles(self, logs):\n        \"\"\"\n        :type logs: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** reorderLogFiles(char ** logs, int logsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] ReorderLogFiles(string[] logs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} logs\n * @return {string[]}\n */\nvar reorderLogFiles = function(logs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} logs\n# @return {String[]}\ndef reorder_log_files(logs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func reorderLogFiles(_ logs: [String]) -> [String] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reorderLogFiles(logs []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reorderLogFiles(logs: Array[String]): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reorderLogFiles(logs: Array<String>): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reorder_log_files(logs: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $logs\n     * @return String[]\n     */\n    function reorderLogFiles($logs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reorderLogFiles(logs: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0975", "frontend_question_id": "0938", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-sum-of-bst", "url_en": "https://leetcode.com/problems/range-sum-of-bst", "relative_path_cn": "/leetcode/0900-0999/0938.Range%20Sum%20of%20BST/README.md", "relative_path_en": "/leetcode/0900-0999/0938.Range%20Sum%20of%20BST/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8303\u56f4\u548c", "title_en": "Range Sum of BST", "question_title_slug": "range-sum-of-bst", "content_en": "<p>Given the <code>root</code> node of a binary search tree, return <em>the sum of values of all nodes with a value in the range <code>[low, high]</code></em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg\" style=\"width: 400px; height: 222px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [10,5,15,3,7,null,18], low = 7, high = 15\r\n<strong>Output:</strong> 32\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg\" style=\"width: 400px; height: 335px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\r\n<strong>Output:</strong> 23\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the tree is in the range <code>[1, 2 * 10<sup>4</sup>]</code>.</li>\r\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>1 &lt;= low &lt;= high &lt;= 10<sup>5</sup></code></li>\r\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9\u00a0<code>root</code>\uff0c\u8fd4\u56de\u503c\u4f4d\u4e8e\u8303\u56f4 <em><code>[low, high]</code></em> \u4e4b\u95f4\u7684\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u548c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg\" style=\"width: 400px; height: 222px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [10,5,15,3,7,null,18], low = 7, high = 15\n<strong>\u8f93\u51fa\uff1a</strong>32\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg\" style=\"width: 400px; height: 335px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n<strong>\u8f93\u51fa\uff1a</strong>23\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[1, 2 * 10<sup>4</sup>]</code> \u5185</li>\n\t<li><code>1 <= Node.val <= 10<sup>5</sup></code></li>\n\t<li><code>1 <= low <= high <= 10<sup>5</sup></code></li>\n\t<li>\u6240\u6709 <code>Node.val</code> <strong>\u4e92\u4e0d\u76f8\u540c</strong></li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search", "Recursion"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rangeSumBST(TreeNode* root, int low, int high) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int rangeSumBST(TreeNode root, int low, int high) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def rangeSumBST(self, root, low, high):\n        \"\"\"\n        :type root: TreeNode\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint rangeSumBST(struct TreeNode* root, int low, int high){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int RangeSumBST(TreeNode root, int low, int high) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar rangeSumBST = function(root, low, high) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} low\n# @param {Integer} high\n# @return {Integer}\ndef range_sum_bst(root, low, high)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func rangeSumBST(_ root: TreeNode?, _ low: Int, _ high: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rangeSumBST(root *TreeNode, low int, high int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def rangeSumBST(root: TreeNode, low: Int, high: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun rangeSumBST(root: TreeNode?, low: Int, high: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn range_sum_bst(root: Option<Rc<RefCell<TreeNode>>>, low: i32, high: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer\n     */\n    function rangeSumBST($root, $low, $high) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction rangeSumBST(root: TreeNode | null, low: number, high: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0976", "frontend_question_id": "0939", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-area-rectangle", "url_en": "https://leetcode.com/problems/minimum-area-rectangle", "relative_path_cn": "/leetcode/0900-0999/0939.Minimum%20Area%20Rectangle/README.md", "relative_path_en": "/leetcode/0900-0999/0939.Minimum%20Area%20Rectangle/README_EN.md", "title_cn": "\u6700\u5c0f\u9762\u79ef\u77e9\u5f62", "title_en": "Minimum Area Rectangle", "question_title_slug": "minimum-area-rectangle", "content_en": "<p>Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.</p>\r\n\r\n<p>If there isn&#39;t any rectangle, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],[1,3],[3,1],[3,3],[2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\r\n\t<li>All points are distinct.</li>\r\n</ol>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u5728 xy \u5e73\u9762\u4e0a\u7684\u4e00\u7ec4\u70b9\uff0c\u786e\u5b9a\u7531\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u77e9\u5f62\u7684\u6700\u5c0f\u9762\u79ef\uff0c\u5176\u4e2d\u77e9\u5f62\u7684\u8fb9\u5e73\u884c\u4e8e x \u8f74\u548c y \u8f74\u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u77e9\u5f62\uff0c\u5c31\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1],[1,3],[3,1],[3,3],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>\u6240\u6709\u7684\u70b9\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minAreaRect(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minAreaRect(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minAreaRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minAreaRect(int** points, int pointsSize, int* pointsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinAreaRect(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minAreaRect = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef min_area_rect(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minAreaRect(_ points: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minAreaRect(points [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minAreaRect(points: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minAreaRect(points: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_area_rect(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minAreaRect($points) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minAreaRect(points: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0977", "frontend_question_id": "0940", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/distinct-subsequences-ii", "url_en": "https://leetcode.com/problems/distinct-subsequences-ii", "relative_path_cn": "/leetcode/0900-0999/0940.Distinct%20Subsequences%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0940.Distinct%20Subsequences%20II/README_EN.md", "title_cn": "\u4e0d\u540c\u7684\u5b50\u5e8f\u5217 II", "title_en": "Distinct Subsequences II", "question_title_slug": "distinct-subsequences-ii", "content_en": "<p>Given a string <code>S</code>, count the number of distinct, non-empty subsequences of <code>S</code> .</p>\r\n\r\n<p>Since the result may be large, <strong>return the answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<span><strong>Explanation</strong>: The 7 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, and &quot;abc&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;aba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><strong>Explanation</strong>: The 6 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; and &quot;aba&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;aaa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><strong>Explanation</strong>: The 3 distinct subsequences are &quot;a&quot;, &quot;aa&quot; and &quot;aaa&quot;.\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> contains only lowercase letters.</li>\r\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8ba1\u7b97&nbsp;<code>S</code>&nbsp;\u7684\u4e0d\u540c\u975e\u7a7a\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5<strong>\u8fd4\u56de\u7b54\u6848\u6a21</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>7 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, \u4ee5\u53ca &quot;abc&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aba&quot;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>6 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; \u4ee5\u53ca &quot;aba&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aaa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;aa&quot; \u4ee5\u53ca &quot;aaa&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int distinctSubseqII(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int distinctSubseqII(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def distinctSubseqII(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def distinctSubseqII(self, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint distinctSubseqII(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DistinctSubseqII(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar distinctSubseqII = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef distinct_subseq_ii(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func distinctSubseqII(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func distinctSubseqII(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def distinctSubseqII(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun distinctSubseqII(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn distinct_subseq_ii(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function distinctSubseqII($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function distinctSubseqII(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0978", "frontend_question_id": "0941", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-mountain-array", "url_en": "https://leetcode.com/problems/valid-mountain-array", "relative_path_cn": "/leetcode/0900-0999/0941.Valid%20Mountain%20Array/README.md", "relative_path_en": "/leetcode/0900-0999/0941.Valid%20Mountain%20Array/README_EN.md", "title_cn": "\u6709\u6548\u7684\u5c71\u8109\u6570\u7ec4", "title_en": "Valid Mountain Array", "question_title_slug": "valid-mountain-array", "content_en": "<p>Given an array of integers <code>arr</code>, return <em><code>true</code> if and only if it is a valid mountain array</em>.</p>\n\n<p>Recall that arr is a mountain array if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png\" width=\"500\" />\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [2,1]\n<strong>Output:</strong> false\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [3,5,5]\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> arr = [0,3,2,1]\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5982\u679c\u5b83\u662f\u6709\u6548\u7684\u5c71\u8109\u6570\u7ec4\u5c31\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c A \u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u5c71\u8109\u6570\u7ec4\uff1a</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>\u5728&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;\u6761\u4ef6\u4e0b\uff0c\u5b58\u5728&nbsp;<code>i</code>&nbsp;\u4f7f\u5f97\uff1a\n\t<ul>\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] </code></li>\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png\" style=\"height: 316px; width: 500px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,5,5]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000&nbsp;</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validMountainArray(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validMountainArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validMountainArray(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidMountainArray(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar validMountainArray = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Boolean}\ndef valid_mountain_array(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validMountainArray(_ arr: [Int]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validMountainArray(arr []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validMountainArray(arr: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validMountainArray(arr: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_mountain_array(arr: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function validMountainArray($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validMountainArray(arr: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0979", "frontend_question_id": "0942", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/di-string-match", "url_en": "https://leetcode.com/problems/di-string-match", "relative_path_cn": "/leetcode/0900-0999/0942.DI%20String%20Match/README.md", "relative_path_en": "/leetcode/0900-0999/0942.DI%20String%20Match/README_EN.md", "title_cn": "\u589e\u51cf\u5b57\u7b26\u4e32\u5339\u914d", "title_en": "DI String Match", "question_title_slug": "di-string-match", "content_en": "<p>Given a string <code>S</code> that <strong>only</strong> contains &quot;I&quot; (increase) or &quot;D&quot; (decrease), let <code>N = S.length</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0,&nbsp;..., N-1</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\r\n\t<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;IDID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,4,1,3,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;III&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,1,2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;DDI&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[3,2,0,1]</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 10000</code></li>\r\n\t<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.</li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u53ea\u542b&nbsp;<code>&quot;I&quot;</code>\uff08\u589e\u5927\uff09\u6216 <code>&quot;D&quot;</code>\uff08\u51cf\u5c0f\uff09\u7684\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\uff0c\u4ee4&nbsp;<code>N = S.length</code>\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>[0, 1, ..., N]</code>&nbsp;\u7684\u4efb\u610f\u6392\u5217&nbsp;<code>A</code>&nbsp;\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709&nbsp;<code>i = 0,&nbsp;..., N-1</code>\uff0c\u90fd\u6709\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>S[i] == &quot;I&quot;</code>\uff0c\u90a3\u4e48&nbsp;<code>A[i] &lt; A[i+1]</code></li>\n\t<li>\u5982\u679c&nbsp;<code>S[i] == &quot;D&quot;</code>\uff0c\u90a3\u4e48&nbsp;<code>A[i] &gt; A[i+1]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;IDID&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,4,1,3,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;III&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,1,2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;DDI&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[3,2,0,1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= S.length &lt;= 10000</code></li>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5b57\u7b26&nbsp;<code>&quot;I&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;D&quot;</code>\u3002</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> diStringMatch(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] diStringMatch(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def diStringMatch(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def diStringMatch(self, S: str) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diStringMatch(char * S, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] DiStringMatch(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number[]}\n */\nvar diStringMatch = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[]}\ndef di_string_match(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func diStringMatch(_ S: String) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func diStringMatch(S string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def diStringMatch(S: String): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun diStringMatch(S: String): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn di_string_match(s: String) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function diStringMatch($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function diStringMatch(S: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0980", "frontend_question_id": "0943", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-the-shortest-superstring", "url_en": "https://leetcode.com/problems/find-the-shortest-superstring", "relative_path_cn": "/leetcode/0900-0999/0943.Find%20the%20Shortest%20Superstring/README.md", "relative_path_en": "/leetcode/0900-0999/0943.Find%20the%20Shortest%20Superstring/README_EN.md", "title_cn": "\u6700\u77ed\u8d85\u7ea7\u4e32", "title_en": "Find the Shortest Superstring", "question_title_slug": "find-the-shortest-superstring", "content_en": "<p>Given an array A of strings, find any&nbsp;smallest string that contains each string in <code>A</code> as a&nbsp;substring.</p>\r\n\r\n<p>We may assume that no string in <code>A</code> is substring of another string in <code>A</code>.</p>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;alexlovesleetcode&quot;</span>\r\n<strong>Explanation: </strong>All permutations of &quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot; would also be accepted.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;gctaagttcatgcatc&quot;</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 <code>A</code>\uff0c\u627e\u5230\u4ee5&nbsp;<code>A</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe <code>A</code> \u4e2d\u6ca1\u6709\u5b57\u7b26\u4e32\u662f <code>A</code> \u4e2d\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;alexlovesleetcode&quot;\n<strong>\u89e3\u91ca\uff1a</strong>&quot;alex&quot;\uff0c&quot;loves&quot;\uff0c&quot;leetcode&quot; \u7684\u6240\u6709\u6392\u5217\u90fd\u4f1a\u88ab\u63a5\u53d7\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;gctaagttcatgcatc&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shortestSuperstring(vector<string>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shortestSuperstring(String[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestSuperstring(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestSuperstring(self, A: List[str]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * shortestSuperstring(char ** A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShortestSuperstring(string[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @return {string}\n */\nvar shortestSuperstring = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @return {String}\ndef shortest_superstring(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestSuperstring(_ A: [String]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestSuperstring(A []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestSuperstring(A: Array[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestSuperstring(A: Array<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_superstring(a: Vec<String>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @return String\n     */\n    function shortestSuperstring($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestSuperstring(A: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0981", "frontend_question_id": "0944", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-columns-to-make-sorted", "url_en": "https://leetcode.com/problems/delete-columns-to-make-sorted", "relative_path_cn": "/leetcode/0900-0999/0944.Delete%20Columns%20to%20Make%20Sorted/README.md", "relative_path_en": "/leetcode/0900-0999/0944.Delete%20Columns%20to%20Make%20Sorted/README_EN.md", "title_cn": "\u5220\u5217\u9020\u5e8f", "title_en": "Delete Columns to Make Sorted", "question_title_slug": "delete-columns-to-make-sorted", "content_en": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\n\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\n\n<p>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>,&nbsp;and the remaining columns of <code>A</code> are&nbsp;<code>[&quot;b&quot;,&quot;v&quot;]</code>, <code>[&quot;e&quot;,&quot;y&quot;]</code>, and <code>[&quot;f&quot;,&quot;z&quot;]</code>.&nbsp; (Formally, the <code>c</code>-th column is <code>[A[0][c], A[1][c], ..., A[A.length-1][c]]</code>).</p>\n\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, each remaining column in A is in <strong>non-decreasing</strong> sorted order.</p>\n\n<p>Return the minimum possible value of <code>D.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>\nAfter choosing D = {1}, each column [&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] and [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;] are in non-decreasing sorted order.\nIf we chose D = {}, then a column [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] would not be in non-decreasing sorted order.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [&quot;a&quot;,&quot;b&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>D = {}\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>D = {0, 1, 2}\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 1000</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4 <code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u4f60\u9700\u8981\u9009\u51fa\u4e00\u7ec4\u8981\u5220\u6389\u7684\u5217&nbsp;<code>D</code>\uff0c\u5bf9&nbsp;<code>A</code> \u6267\u884c\u5220\u9664\u64cd\u4f5c\uff0c\u4f7f <code>A</code> \u4e2d\u5269\u4f59\u7684\u6bcf\u4e00\u5217\u90fd\u662f <strong>\u975e\u964d\u5e8f</strong>&nbsp;\u6392\u5217\u7684\uff0c\u7136\u540e\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p><strong>\u5220\u9664</strong> \u64cd\u4f5c\u7684\u5b9a\u4e49\u662f\uff1a\u9009\u51fa\u4e00\u7ec4\u8981\u5220\u6389\u7684\u5217\uff0c\u5220\u53bb&nbsp;<code>A</code> \u4e2d\u5bf9\u5e94\u5217\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff0c\u5f62\u5f0f\u4e0a\uff0c\u7b2c <code>n</code>&nbsp;\u5217\u4e3a&nbsp;<code>[A[0][n], A[1][n], ..., A[A.length-1][n]]</code>\uff09\u3002\uff08\u53ef\u4ee5\u53c2\u89c1 <strong>\u5220\u9664\u64cd\u4f5c\u8303\u4f8b</strong>\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;cba&quot;, &quot;daf&quot;, &quot;ghi&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f53\u9009\u62e9 D = {1}\uff0c\u5220\u9664\u540e A \u7684\u5217\u4e3a\uff1a[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] \u548c [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]\uff0c\u5747\u4e3a\u975e\u964d\u5e8f\u6392\u5217\u3002\n\u82e5\u9009\u62e9 D = {}\uff0c\u90a3\u4e48 A \u7684\u5217 [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] \u5c31\u4e0d\u662f\u975e\u964d\u5e8f\u6392\u5217\u4e86\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a&quot;, &quot;b&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>D = {}\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;zyx&quot;, &quot;wvu&quot;, &quot;tsr&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>D = {0, 1, 2}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 1000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u5220\u9664\u64cd\u4f5c\u8303\u4f8b\uff1a</strong></p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>\uff0c</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/07/06/944_1.png\" style=\"height: 48px; width: 300px;\"></p>\n\n<p>\u8981\u5220\u6389\u7684\u5217\u4e3a&nbsp;<code>{0, 2, 3}</code>\uff0c\u5220\u9664\u540e <code>A</code>&nbsp;\u4e3a<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>\uff0c <code>A</code>&nbsp;\u7684\u5217\u5206\u522b\u4e3a<code>[&quot;b&quot;,&quot;v&quot;], [&quot;e&quot;,&quot;y&quot;], [&quot;f&quot;,&quot;z&quot;]</code>\u3002</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/07/06/944_2.png\" style=\"height: 76px; width: 300px;\"></p>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDeletionSize(vector<string>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDeletionSize(String[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minDeletionSize(char ** A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDeletionSize(string[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @return {number}\n */\nvar minDeletionSize = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @return {Integer}\ndef min_deletion_size(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDeletionSize(_ A: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minDeletionSize(A []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDeletionSize(A: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDeletionSize(A: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_deletion_size(a: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @return Integer\n     */\n    function minDeletionSize($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDeletionSize(A: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0982", "frontend_question_id": "0945", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique", "url_en": "https://leetcode.com/problems/minimum-increment-to-make-array-unique", "relative_path_cn": "/leetcode/0900-0999/0945.Minimum%20Increment%20to%20Make%20Array%20Unique/README.md", "relative_path_en": "/leetcode/0900-0999/0945.Minimum%20Increment%20to%20Make%20Array%20Unique/README_EN.md", "title_cn": "\u4f7f\u6570\u7ec4\u552f\u4e00\u7684\u6700\u5c0f\u589e\u91cf", "title_en": "Minimum Increment to Make Array Unique", "question_title_slug": "minimum-increment-to-make-array-unique", "content_en": "<p>Given an array of integers A, a <em>move</em> consists of choosing any <code>A[i]</code>, and incrementing it by <code>1</code>.</p>\r\n\r\n<p>Return the least number of moves to make every value in <code>A</code> unique.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong> After 1 move, the array could be [1, 2, 3].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[3,2,1,2,1,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n<strong>Explanation: </strong> After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\r\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 A\uff0c\u6bcf\u6b21 <em>move</em> \u64cd\u4f5c\u5c06\u4f1a\u9009\u62e9\u4efb\u610f&nbsp;<code>A[i]</code>\uff0c\u5e76\u5c06\u5176\u9012\u589e&nbsp;<code>1</code>\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f <code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u552f\u4e00\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u7ecf\u8fc7\u4e00\u6b21 <em>move</em> \u64cd\u4f5c\uff0c\u6570\u7ec4\u5c06\u53d8\u4e3a [1, 2, 3]\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,1,2,1,7]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u7ecf\u8fc7 6 \u6b21 <em>move</em> \u64cd\u4f5c\uff0c\u6570\u7ec4\u5c06\u53d8\u4e3a [3, 4, 1, 2, 5, 7]\u3002\n\u53ef\u4ee5\u770b\u51fa 5 \u6b21\u6216 5 \u6b21\u4ee5\u4e0b\u7684 <em>move</em> \u64cd\u4f5c\u662f\u4e0d\u80fd\u8ba9\u6570\u7ec4\u7684\u6bcf\u4e2a\u503c\u552f\u4e00\u7684\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minIncrementForUnique(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minIncrementForUnique(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minIncrementForUnique(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minIncrementForUnique(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minIncrementForUnique(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinIncrementForUnique(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar minIncrementForUnique = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef min_increment_for_unique(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minIncrementForUnique(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minIncrementForUnique(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minIncrementForUnique(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minIncrementForUnique(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_increment_for_unique(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function minIncrementForUnique($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minIncrementForUnique(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0983", "frontend_question_id": "0946", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/validate-stack-sequences", "url_en": "https://leetcode.com/problems/validate-stack-sequences", "relative_path_cn": "/leetcode/0900-0999/0946.Validate%20Stack%20Sequences/README.md", "relative_path_en": "/leetcode/0900-0999/0946.Validate%20Stack%20Sequences/README_EN.md", "title_cn": "\u9a8c\u8bc1\u6808\u5e8f\u5217", "title_en": "Validate Stack Sequences", "question_title_slug": "validate-stack-sequences", "content_en": "<p>Given two sequences <code>pushed</code> and <code>popped</code>&nbsp;<strong>with distinct values</strong>,&nbsp;return <code>true</code> if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p>\n\n<p>&nbsp;</p>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>pushed = <span id=\"example-input-1-1\">[1,2,3,4,5]</span>, popped = <span id=\"example-input-1-2\">[4,5,3,2,1]</span>\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\n<strong>Explanation: </strong>We might do the following sequence:\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>pushed = <span id=\"example-input-2-1\">[1,2,3,4,5]</span>, popped = <span id=\"example-input-2-2\">[4,3,5,1,2]</span>\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\n<strong>Explanation: </strong>1 cannot be popped before 2.\n</pre>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n\t<li><code>pushed</code> is a permutation of <code>popped</code>.</li>\n\t<li><code>pushed</code> and <code>popped</code> have distinct values.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a&nbsp;<code>pushed</code>&nbsp;\u548c&nbsp;<code>popped</code>&nbsp;\u4e24\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684 <strong>\u503c\u90fd\u4e0d\u91cd\u590d</strong>\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>1 \u4e0d\u80fd\u5728 2 \u4e4b\u524d\u5f39\u51fa\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n\t<li><code>pushed</code>&nbsp;\u662f&nbsp;<code>popped</code>&nbsp;\u7684\u6392\u5217\u3002</li>\n</ol>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validateStackSequences(self, pushed, popped):\n        \"\"\"\n        :type pushed: List[int]\n        :type popped: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validateStackSequences(int* pushed, int pushedSize, int* popped, int poppedSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidateStackSequences(int[] pushed, int[] popped) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = function(pushed, popped) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} pushed\n# @param {Integer[]} popped\n# @return {Boolean}\ndef validate_stack_sequences(pushed, popped)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validateStackSequences(_ pushed: [Int], _ popped: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validateStackSequences(pushed []int, popped []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validateStackSequences(pushed: Array[Int], popped: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validateStackSequences(pushed: IntArray, popped: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn validate_stack_sequences(pushed: Vec<i32>, popped: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $pushed\n     * @param Integer[] $popped\n     * @return Boolean\n     */\n    function validateStackSequences($pushed, $popped) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validateStackSequences(pushed: number[], popped: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0984", "frontend_question_id": "0947", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column", "url_en": "https://leetcode.com/problems/most-stones-removed-with-same-row-or-column", "relative_path_cn": "/leetcode/0900-0999/0947.Most%20Stones%20Removed%20with%20Same%20Row%20or%20Column/README.md", "relative_path_en": "/leetcode/0900-0999/0947.Most%20Stones%20Removed%20with%20Same%20Row%20or%20Column/README_EN.md", "title_cn": "\u79fb\u9664\u6700\u591a\u7684\u540c\u884c\u6216\u540c\u5217\u77f3\u5934", "title_en": "Most Stones Removed with Same Row or Column", "question_title_slug": "most-stones-removed-with-same-row-or-column", "content_en": "<p>On a 2D plane, we place stones at some integer coordinate points.&nbsp; Each coordinate point may have at most one stone.</p>\r\n\r\n<p>Now, a <em>move</em> consists of removing a stone&nbsp;that shares a column or row with another stone on the grid.</p>\r\n\r\n<p>What is the largest possible number of moves we can make?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-1-2\">[[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]</span>\r\n<strong>Output: </strong>5\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-2-2\">[[0,0],[0,2],[1,1],[2,0],[2,2]]</span>\r\n<strong>Output: </strong>3\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-3-2\">[[0,0]]</span>\r\n<strong>Output: </strong>0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= stones.length &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= stones[i][j] &lt; 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u6211\u4eec\u5c06\u77f3\u5934\u653e\u7f6e\u5728\u4e8c\u7ef4\u5e73\u9762\u4e2d\u7684\u4e00\u4e9b\u6574\u6570\u5750\u6807\u70b9\u4e0a\u3002\u6bcf\u4e2a\u5750\u6807\u70b9\u4e0a\u6700\u591a\u53ea\u80fd\u6709\u4e00\u5757\u77f3\u5934\u3002</p>\n\n<p>\u6bcf\u6b21<em> move</em> \u64cd\u4f5c\u90fd\u4f1a\u79fb\u9664\u4e00\u5757\u6240\u5728\u884c\u6216\u8005\u5217\u4e0a\u6709\u5176\u4ed6\u77f3\u5934\u5b58\u5728\u7684\u77f3\u5934\u3002</p>\n\n<p>\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u6700\u591a\u80fd\u6267\u884c\u591a\u5c11\u6b21 <em>move</em> \u64cd\u4f5c\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stones.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= stones[i][j] &lt; 10000</code></li>\n</ol>\n", "tags_en": ["Depth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int removeStones(vector<vector<int>>& stones) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int removeStones(int[][] stones) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeStones(self, stones):\n        \"\"\"\n        :type stones: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint removeStones(int** stones, int stonesSize, int* stonesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RemoveStones(int[][] stones) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} stones\n * @return {number}\n */\nvar removeStones = function(stones) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} stones\n# @return {Integer}\ndef remove_stones(stones)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeStones(_ stones: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeStones(stones [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeStones(stones: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeStones(stones: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_stones(stones: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $stones\n     * @return Integer\n     */\n    function removeStones($stones) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeStones(stones: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0985", "frontend_question_id": "0948", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bag-of-tokens", "url_en": "https://leetcode.com/problems/bag-of-tokens", "relative_path_cn": "/leetcode/0900-0999/0948.Bag%20of%20Tokens/README.md", "relative_path_en": "/leetcode/0900-0999/0948.Bag%20of%20Tokens/README_EN.md", "title_cn": "\u4ee4\u724c\u653e\u7f6e", "title_en": "Bag of Tokens", "question_title_slug": "bag-of-tokens", "content_en": "<p>You have an initial <strong>power</strong> of <code>P</code>, an initial <strong>score</strong> of <code>0</code>, and a bag of <code>tokens</code> where <code>tokens[i]</code> is the value of the <code>i<sup>th</sup></code> token (0-indexed).</p>\r\n\r\n<p>Your goal is to maximize your total <strong>score</strong> by potentially playing each token in one of two ways:</p>\r\n\r\n<ul>\r\n\t<li>If your current <strong>power</strong> is at least <code>tokens[i]</code>, you may play the <code>i<sup>th</sup></code> token face up, losing <code>tokens[i]</code> <strong>power</strong> and gaining <code>1</code> <strong>score</strong>.</li>\r\n\t<li>If your current <strong>score</strong> is at least <code>1</code>, you may play the <code>i<sup>th</sup></code> token face down, gaining <code>tokens[i]</code> <strong>power</strong> and losing <code>1</code> <strong>score</strong>.</li>\r\n</ul>\r\n\r\n<p>Each token may be played <strong>at most</strong> once and <strong>in any order</strong>. You do <strong>not</strong> have to play all the tokens.</p>\r\n\r\n<p>Return <em>the largest possible <strong>score</strong> you can achieve after playing any number of tokens</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tokens = [100], P = 50\r\n<strong>Output:</strong> 0\r\n<strong>Explanation</strong><strong>:</strong> Playing the only token in the bag is impossible because you either have too little power or too little score.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tokens = [100,200], P = 150\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> Play the 0<sup>th</sup> token (100) face up, your power becomes 50 and score becomes 1.\r\nThere is no need to play the 1<sup>st</sup> token since you cannot play it face up to add to your score.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> tokens = [100,200,300,400], P = 200\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> Play the tokens in this order to get a score of 2:\r\n1. Play the 0<sup>th</sup> token (100) face up, your power becomes 100 and score becomes 1.\r\n2. Play the 3<sup>rd</sup> token (400) face down, your power becomes 500 and score becomes 0.\r\n3. Play the 1<sup>st</sup> token (200) face up, your power becomes 300 and score becomes 1.\r\n4. Play the 2<sup>nd </sup>token (300) face up, your power becomes 0 and score becomes 2.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= tokens.length &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= tokens[i],&nbsp;P &lt; 10<sup>4</sup></code></li>\r\n</ul>", "content_cn": "<p>\u4f60\u7684\u521d\u59cb <strong>\u80fd\u91cf</strong> \u4e3a\u00a0<code>P</code>\uff0c\u521d\u59cb <strong>\u5206\u6570</strong> \u4e3a\u00a0<code>0</code>\uff0c\u53ea\u6709\u4e00\u5305\u4ee4\u724c <code>tokens</code> \u3002\u5176\u4e2d <code>tokens[i]</code> \u662f\u7b2c <code>i</code> \u4e2a\u4ee4\u724c\u7684\u503c\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002</p>\n\n<p>\u4ee4\u724c\u53ef\u80fd\u7684\u4e24\u79cd\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u4f60\u81f3\u5c11\u6709\u00a0<code>token[i]</code>\u00a0\u70b9 <strong>\u80fd\u91cf</strong> \uff0c\u53ef\u4ee5\u5c06\u4ee4\u724c <code>i</code> \u7f6e\u4e3a\u6b63\u9762\u671d\u4e0a\uff0c\u5931\u53bb\u00a0<code>token[i]</code>\u00a0\u70b9 <strong>\u80fd\u91cf</strong> \uff0c\u5e76\u5f97\u5230\u00a0<code>1</code>\u00a0<strong>\u5206</strong> \u3002</li>\n\t<li>\u5982\u679c\u6211\u4eec\u81f3\u5c11\u6709\u00a0<code>1</code>\u00a0<strong>\u5206 </strong>\uff0c\u53ef\u4ee5\u5c06\u4ee4\u724c <code>i</code> \u7f6e\u4e3a\u53cd\u9762\u671d\u4e0a\uff0c\u83b7\u5f97\u00a0<code>token[i]</code> \u70b9 <strong>\u80fd\u91cf</strong> \uff0c\u5e76\u5931\u53bb\u00a0<code>1</code>\u00a0<strong>\u5206</strong> \u3002</li>\n</ul>\n\n<p>\u6bcf\u4e2a\u4ee4\u724c <strong>\u6700\u591a</strong> \u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u4f7f\u7528 <strong>\u987a\u5e8f\u4e0d\u9650</strong> \uff0c<strong>\u4e0d\u9700</strong> \u4f7f\u7528\u6240\u6709\u4ee4\u724c\u3002</p>\n\n<p>\u5728\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u4ee4\u724c\u540e\uff0c\u8fd4\u56de\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927 <strong>\u5206\u6570</strong> \u3002</p>\n\n<p>\u00a0</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tokens = [100], P = 50\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u65e0\u6cd5\u4f7f\u7528\u552f\u4e00\u7684\u4ee4\u724c\uff0c\u56e0\u4e3a\u80fd\u91cf\u548c\u5206\u6570\u90fd\u592a\u5c11\u4e86\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tokens = [100,200], P = 150\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u4ee4\u724c 0 \u6b63\u9762\u671d\u4e0a\uff0c\u80fd\u91cf\u53d8\u4e3a 50\uff0c\u5206\u6570\u53d8\u4e3a 1 \u3002\u4e0d\u5fc5\u4f7f\u7528\u4ee4\u724c 1 \uff0c\u56e0\u4e3a\u4f60\u65e0\u6cd5\u4f7f\u7528\u5b83\u6765\u63d0\u9ad8\u5206\u6570\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>tokens = [100,200,300,400], P = 200\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6309\u4e0b\u9762\u987a\u5e8f\u4f7f\u7528\u4ee4\u724c\u53ef\u4ee5\u5f97\u5230 2 \u5206\uff1a\n1. \u4ee4\u724c 0 \u6b63\u9762\u671d\u4e0a\uff0c\u80fd\u91cf\u53d8\u4e3a 100 \uff0c\u5206\u6570\u53d8\u4e3a 1\n2. \u4ee4\u724c 3 \u6b63\u9762\u671d\u4e0b\uff0c\u80fd\u91cf\u53d8\u4e3a 500 \uff0c\u5206\u6570\u53d8\u4e3a 0\n3. \u4ee4\u724c 1 \u6b63\u9762\u671d\u4e0a\uff0c\u80fd\u91cf\u53d8\u4e3a 300 \uff0c\u5206\u6570\u53d8\u4e3a 1\n4. \u4ee4\u724c 2 \u6b63\u9762\u671d\u4e0a\uff0c\u80fd\u91cf\u53d8\u4e3a 0 \uff0c\u5206\u6570\u53d8\u4e3a 2</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= tokens.length <= 1000</code></li>\n\t<li><code>0 <= tokens[i],\u00a0P < 10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Greedy", "Sort", "Two Pointers"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6392\u5e8f", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int bagOfTokensScore(vector<int>& tokens, int P) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int bagOfTokensScore(int[] tokens, int P) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def bagOfTokensScore(self, tokens, P):\n        \"\"\"\n        :type tokens: List[int]\n        :type P: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], P: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint bagOfTokensScore(int* tokens, int tokensSize, int P){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BagOfTokensScore(int[] tokens, int P) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} tokens\n * @param {number} P\n * @return {number}\n */\nvar bagOfTokensScore = function(tokens, P) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} tokens\n# @param {Integer} p\n# @return {Integer}\ndef bag_of_tokens_score(tokens, p)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func bagOfTokensScore(_ tokens: [Int], _ P: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func bagOfTokensScore(tokens []int, P int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def bagOfTokensScore(tokens: Array[Int], P: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun bagOfTokensScore(tokens: IntArray, P: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn bag_of_tokens_score(tokens: Vec<i32>, p: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $tokens\n     * @param Integer $P\n     * @return Integer\n     */\n    function bagOfTokensScore($tokens, $P) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function bagOfTokensScore(tokens: number[], P: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0986", "frontend_question_id": "0949", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-time-for-given-digits", "url_en": "https://leetcode.com/problems/largest-time-for-given-digits", "relative_path_cn": "/leetcode/0900-0999/0949.Largest%20Time%20for%20Given%20Digits/README.md", "relative_path_en": "/leetcode/0900-0999/0949.Largest%20Time%20for%20Given%20Digits/README_EN.md", "title_cn": "\u7ed9\u5b9a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u6700\u5927\u65f6\u95f4", "title_en": "Largest Time for Given Digits", "question_title_slug": "largest-time-for-given-digits", "content_en": "<p>Given an array&nbsp;<code>arr</code> of 4 digits, find the latest 24-hour time that can be made using each digit <strong>exactly once</strong>.</p>\n\n<p>24-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code>&nbsp;is between&nbsp;<code>00</code>&nbsp;and&nbsp;<code>23</code>, and&nbsp;<code>MM</code>&nbsp;is between&nbsp;<code>00</code>&nbsp;and&nbsp;<code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p>\n\n<p>Return <em>the latest 24-hour time&nbsp;in&nbsp;<code>&quot;HH:MM&quot;</code> format</em>.&nbsp; If no valid time can be made, return an empty string.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [1,2,3,4]\n<strong>Output:</strong> &quot;23:41&quot;\n<strong>Explanation:</strong>&nbsp;The valid 24-hour times are &quot;12:34&quot;, &quot;12:43&quot;, &quot;13:24&quot;, &quot;13:42&quot;, &quot;14:23&quot;, &quot;14:32&quot;, &quot;21:34&quot;, &quot;21:43&quot;, &quot;23:14&quot;, and &quot;23:41&quot;. Of these times, &quot;23:41&quot; is the latest.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [5,5,5,5]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong>&nbsp;There are no valid 24-hour times as &quot;55:55&quot; is not valid.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [0,0,0,0]\n<strong>Output:</strong> &quot;00:00&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [0,0,1,0]\n<strong>Output:</strong> &quot;10:00&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>arr.length == 4</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 9</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 4 \u4f4d\u6570\u5b57\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8fd4\u56de\u53ef\u4ee5\u8bbe\u7f6e\u7684\u7b26\u5408 24 \u5c0f\u65f6\u5236\u7684\u6700\u5927\u65f6\u95f4\u3002</p>\n\n<p>24 \u5c0f\u65f6\u683c\u5f0f\u4e3a <code>\"HH:MM\"</code> \uff0c\u5176\u4e2d <code>HH</code> \u5728 <code>00</code> \u5230 <code>23</code> \u4e4b\u95f4\uff0c<code>MM</code> \u5728 <code>00</code> \u5230 <code>59</code> \u4e4b\u95f4\u3002\u6700\u5c0f\u7684 24 \u5c0f\u65f6\u5236\u65f6\u95f4\u662f\u00a0<code>00:00</code> \uff0c\u800c\u6700\u5927\u7684\u662f\u00a0<code>23:59</code> \u3002\u4ece 00:00 \uff08\u5348\u591c\uff09\u5f00\u59cb\u7b97\u8d77\uff0c\u8fc7\u5f97\u8d8a\u4e45\uff0c\u65f6\u95f4\u8d8a\u5927\u3002</p>\n\n<p>\u4ee5\u957f\u5ea6\u4e3a 5 \u7684\u5b57\u7b26\u4e32\uff0c\u6309 <code>\"HH:MM\"</code> \u683c\u5f0f\u8fd4\u56de\u7b54\u6848\u3002\u5982\u679c\u4e0d\u80fd\u786e\u5b9a\u6709\u6548\u65f6\u95f4\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [1,2,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>\"23:41\"\n<strong>\u89e3\u91ca\uff1a</strong>\u6709\u6548\u7684 24 \u5c0f\u65f6\u5236\u65f6\u95f4\u662f \"12:34\"\uff0c\"12:43\"\uff0c\"13:24\"\uff0c\"13:42\"\uff0c\"14:23\"\uff0c\"14:32\"\uff0c\"21:34\"\uff0c\"21:43\"\uff0c\"23:14\" \u548c \"23:41\" \u3002\u8fd9\u4e9b\u65f6\u95f4\u4e2d\uff0c\"23:41\" \u662f\u6700\u5927\u65f6\u95f4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [5,5,5,5]\n<strong>\u8f93\u51fa\uff1a</strong>\"\"\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0d\u5b58\u5728\u6709\u6548\u7684 24 \u5c0f\u65f6\u5236\u65f6\u95f4\uff0c\u56e0\u4e3a \"55:55\" \u65e0\u6548\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [0,0,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>\"00:00\"\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>arr = [0,0,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>\"10:00\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>arr.length == 4</code></li>\n\t<li><code>0 <= arr[i] <= 9</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestTimeFromDigits(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String largestTimeFromDigits(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestTimeFromDigits(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * largestTimeFromDigits(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LargestTimeFromDigits(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {string}\n */\nvar largestTimeFromDigits = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {String}\ndef largest_time_from_digits(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestTimeFromDigits(_ arr: [Int]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestTimeFromDigits(arr []int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestTimeFromDigits(arr: Array[Int]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestTimeFromDigits(arr: IntArray): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_time_from_digits(arr: Vec<i32>) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return String\n     */\n    function largestTimeFromDigits($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestTimeFromDigits(arr: number[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0987", "frontend_question_id": "0950", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reveal-cards-in-increasing-order", "url_en": "https://leetcode.com/problems/reveal-cards-in-increasing-order", "relative_path_cn": "/leetcode/0900-0999/0950.Reveal%20Cards%20In%20Increasing%20Order/README.md", "relative_path_en": "/leetcode/0900-0999/0950.Reveal%20Cards%20In%20Increasing%20Order/README_EN.md", "title_cn": "\u6309\u9012\u589e\u987a\u5e8f\u663e\u793a\u5361\u724c", "title_en": "Reveal Cards In Increasing Order", "question_title_slug": "reveal-cards-in-increasing-order", "content_en": "<p>In a deck of cards, every card has a unique integer.&nbsp; You can order the deck in&nbsp;any order you want.</p>\r\n\r\n<p>Initially, all the cards start face down (unrevealed) in one deck.</p>\r\n\r\n<p>Now, you do the following steps repeatedly, until all cards are revealed:</p>\r\n\r\n<ol>\r\n\t<li>Take the top card of the deck, reveal it, and take it out of the deck.</li>\r\n\t<li>If there are still cards in the deck, put the next top card of the deck at&nbsp;the bottom of the deck.</li>\r\n\t<li>If there are still unrevealed cards, go back to step 1.&nbsp; Otherwise, stop.</li>\r\n</ol>\r\n\r\n<p>Return an ordering of the deck that would reveal the cards&nbsp;in <strong>increasing order.</strong></p>\r\n\r\n<p>The first entry in the answer is considered to be the top of the deck.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[17,13,11,2,3,5,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,13,3,11,5,17,7]</span>\r\n<strong>Explanation: </strong>\r\nWe get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.\r\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\r\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\r\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\r\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\r\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\r\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\r\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\r\nWe reveal 17.\r\nSince all the cards revealed are in increasing order, the answer is correct.\r\n</pre>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li><code>A[i] != A[j]</code>&nbsp;for all&nbsp;<code>i != j</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u724c\u7ec4\u4e2d\u7684\u6bcf\u5f20\u5361\u724c\u90fd\u5bf9\u5e94\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\u3002\u4f60\u53ef\u4ee5\u6309\u4f60\u60f3\u8981\u7684\u987a\u5e8f\u5bf9\u8fd9\u5957\u5361\u7247\u8fdb\u884c\u6392\u5e8f\u3002</p>\n\n<p>\u6700\u521d\uff0c\u8fd9\u4e9b\u5361\u724c\u5728\u724c\u7ec4\u91cc\u662f\u6b63\u9762\u671d\u4e0b\u7684\uff08\u5373\uff0c\u672a\u663e\u793a\u72b6\u6001\uff09\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u663e\u793a\u6240\u6709\u5361\u724c\u4e3a\u6b62\uff1a</p>\n\n<ol>\n\t<li>\u4ece\u724c\u7ec4\u9876\u90e8\u62bd\u4e00\u5f20\u724c\uff0c\u663e\u793a\u5b83\uff0c\u7136\u540e\u5c06\u5176\u4ece\u724c\u7ec4\u4e2d\u79fb\u51fa\u3002</li>\n\t<li>\u5982\u679c\u724c\u7ec4\u4e2d\u4ecd\u6709\u724c\uff0c\u5219\u5c06\u4e0b\u4e00\u5f20\u5904\u4e8e\u724c\u7ec4\u9876\u90e8\u7684\u724c\u653e\u5728\u724c\u7ec4\u7684\u5e95\u90e8\u3002</li>\n\t<li>\u5982\u679c\u4ecd\u6709\u672a\u663e\u793a\u7684\u724c\uff0c\u90a3\u4e48\u8fd4\u56de\u6b65\u9aa4 1\u3002\u5426\u5219\uff0c\u505c\u6b62\u884c\u52a8\u3002</li>\n</ol>\n\n<p>\u8fd4\u56de\u80fd\u4ee5<strong>\u9012\u589e\u987a\u5e8f</strong>\u663e\u793a\u5361\u724c\u7684\u724c\u7ec4\u987a\u5e8f\u3002</p>\n\n<p>\u7b54\u6848\u4e2d\u7684\u7b2c\u4e00\u5f20\u724c\u88ab\u8ba4\u4e3a\u5904\u4e8e\u724c\u5806\u9876\u90e8\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[17,13,11,2,3,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>[2,13,3,11,5,17,7]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u6211\u4eec\u5f97\u5230\u7684\u724c\u7ec4\u987a\u5e8f\u4e3a [17,13,11,2,3,5,7]\uff08\u8fd9\u4e2a\u987a\u5e8f\u4e0d\u91cd\u8981\uff09\uff0c\u7136\u540e\u5c06\u5176\u91cd\u65b0\u6392\u5e8f\u3002\n\u91cd\u65b0\u6392\u5e8f\u540e\uff0c\u724c\u7ec4\u4ee5 [2,13,3,11,5,17,7] \u5f00\u59cb\uff0c\u5176\u4e2d 2 \u4f4d\u4e8e\u724c\u7ec4\u7684\u9876\u90e8\u3002\n\u6211\u4eec\u663e\u793a 2\uff0c\u7136\u540e\u5c06 13 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [3,11,5,17,7,13]\u3002\n\u6211\u4eec\u663e\u793a 3\uff0c\u5e76\u5c06 11 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [5,17,7,13,11]\u3002\n\u6211\u4eec\u663e\u793a 5\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [7,13,11,17]\u3002\n\u6211\u4eec\u663e\u793a 7\uff0c\u5e76\u5c06 13 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [11,17,13]\u3002\n\u6211\u4eec\u663e\u793a 11\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [13,17]\u3002\n\u6211\u4eec\u5c55\u793a 13\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [17]\u3002\n\u6211\u4eec\u663e\u793a 17\u3002\n\u7531\u4e8e\u6240\u6709\u5361\u7247\u90fd\u662f\u6309\u9012\u589e\u987a\u5e8f\u6392\u5217\u663e\u793a\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>\u5bf9\u4e8e\u6240\u6709\u7684&nbsp;<code>i != j</code>\uff0c<code>A[i] != A[j]</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> deckRevealedIncreasing(vector<int>& deck) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] deckRevealedIncreasing(int[] deck) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def deckRevealedIncreasing(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* deckRevealedIncreasing(int* deck, int deckSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] DeckRevealedIncreasing(int[] deck) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} deck\n * @return {number[]}\n */\nvar deckRevealedIncreasing = function(deck) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} deck\n# @return {Integer[]}\ndef deck_revealed_increasing(deck)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func deckRevealedIncreasing(_ deck: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func deckRevealedIncreasing(deck []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def deckRevealedIncreasing(deck: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun deckRevealedIncreasing(deck: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn deck_revealed_increasing(deck: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $deck\n     * @return Integer[]\n     */\n    function deckRevealedIncreasing($deck) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function deckRevealedIncreasing(deck: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0988", "frontend_question_id": "0951", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flip-equivalent-binary-trees", "url_en": "https://leetcode.com/problems/flip-equivalent-binary-trees", "relative_path_cn": "/leetcode/0900-0999/0951.Flip%20Equivalent%20Binary%20Trees/README.md", "relative_path_en": "/leetcode/0900-0999/0951.Flip%20Equivalent%20Binary%20Trees/README_EN.md", "title_cn": "\u7ffb\u8f6c\u7b49\u4ef7\u4e8c\u53c9\u6811", "title_en": "Flip Equivalent Binary Trees", "question_title_slug": "flip-equivalent-binary-trees", "content_en": "<p>For a binary tree <strong>T</strong>, we can define a <strong>flip operation</strong> as follows: choose any node, and swap the left and right child subtrees.</p>\n\n<p>A binary tree <strong>X</strong>&nbsp;is <em>flip equivalent</em> to a binary tree <strong>Y</strong> if and only if we can make <strong>X</strong> equal to <strong>Y</strong> after some number of flip operations.</p>\n\n<p>Given the roots of two binary trees <code>root1</code> and <code>root2</code>, return <code>true</code> if the two trees are flip equivelent or <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"Flipped Trees Diagram\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" style=\"width: 500px; height: 220px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>We flipped at nodes with values 1, 3, and 5.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [], root2 = []\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [], root2 = [1]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [0,null,1], root2 = []\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [0,null,1], root2 = [0,1]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each tree is in the range <code>[0, 100]</code>.</li>\n\t<li>Each tree will have <strong>unique node values</strong> in the range <code>[0, 99]</code>.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e8c\u53c9\u6811 T \u5b9a\u4e49\u4e00\u4e2a\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u9009\u62e9\u4efb\u610f\u8282\u70b9\uff0c\u7136\u540e\u4ea4\u6362\u5b83\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u53ea\u8981\u7ecf\u8fc7\u4e00\u5b9a\u6b21\u6570\u7684\u7ffb\u8f6c\u64cd\u4f5c\u540e\uff0c\u80fd\u4f7f X \u7b49\u4e8e Y\uff0c\u6211\u4eec\u5c31\u79f0\u4e8c\u53c9\u6811 X <em>\u7ffb\u8f6c\u7b49\u4ef7</em>\u4e8e\u4e8c\u53c9\u6811 Y\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a\u5224\u65ad\u4e24\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u662f<em>\u7ffb\u8f6c\u7b49\u4ef7</em>\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u6811\u7531\u6839\u8282\u70b9&nbsp;<code>root1</code> \u548c <code>root2</code>&nbsp;\u7ed9\u51fa\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u503c\u4e3a 1\uff0c3 \u4ee5\u53ca 5 \u7684\u4e09\u4e2a\u8282\u70b9\u3002\n<img alt=\"Flipped Trees Diagram\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" style=\"height: 220px; width: 500px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u68f5\u6811\u6700\u591a\u6709&nbsp;<code>100</code>&nbsp;\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u6bcf\u68f5\u6811\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u552f\u4e00\u7684\u3001\u5728 <code>[0, 99]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool flipEquiv(TreeNode* root1, TreeNode* root2) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def flipEquiv(self, root1, root2):\n        \"\"\"\n        :type root1: TreeNode\n        :type root2: TreeNode\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flipEquiv(self, root1: TreeNode, root2: TreeNode) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool flipEquiv(struct TreeNode* root1, struct TreeNode* root2){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool FlipEquiv(TreeNode root1, TreeNode root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */\nvar flipEquiv = function(root1, root2) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root1\n# @param {TreeNode} root2\n# @return {Boolean}\ndef flip_equiv(root1, root2)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func flipEquiv(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc flipEquiv(root1 *TreeNode, root2 *TreeNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def flipEquiv(root1: TreeNode, root2: TreeNode): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun flipEquiv(root1: TreeNode?, root2: TreeNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn flip_equiv(root1: Option<Rc<RefCell<TreeNode>>>, root2: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root1\n     * @param TreeNode $root2\n     * @return Boolean\n     */\n    function flipEquiv($root1, $root2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction flipEquiv(root1: TreeNode | null, root2: TreeNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0989", "frontend_question_id": "0952", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-component-size-by-common-factor", "url_en": "https://leetcode.com/problems/largest-component-size-by-common-factor", "relative_path_cn": "/leetcode/0900-0999/0952.Largest%20Component%20Size%20by%20Common%20Factor/README.md", "relative_path_en": "/leetcode/0900-0999/0952.Largest%20Component%20Size%20by%20Common%20Factor/README_EN.md", "title_cn": "\u6309\u516c\u56e0\u6570\u8ba1\u7b97\u6700\u5927\u7ec4\u4ef6\u5927\u5c0f", "title_en": "Largest Component Size by Common Factor", "question_title_slug": "largest-component-size-by-common-factor", "content_en": "<p>Given a non-empty&nbsp;array of unique positive integers <code>A</code>, consider the following graph:</p>\r\n\r\n<ul>\r\n\t<li>There are <code>A.length</code> nodes, labelled <code>A[0]</code> to <code>A[A.length - 1];</code></li>\r\n\t<li>There is an edge between <code>A[i]</code> and <code>A[j]</code>&nbsp;if and only if&nbsp;<code>A[i]</code> and <code>A[j]</code> share a common factor greater than 1.</li>\r\n</ul>\r\n\r\n<p>Return the size of the largest connected component in the graph.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[4,6,15,35]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex1.png\" style=\"width: 257px; height: 50px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[20,50,9,63]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex2.png\" style=\"width: 293px; height: 50px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[2,3,6,7,4,12,21,39]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">8</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex3.png\" style=\"width: 346px; height: 180px;\" /></span>\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u4e0d\u540c\u6b63\u6574\u6570\u7684\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4 <code>A</code>\uff0c\u8003\u8651\u4e0b\u9762\u7684\u56fe\uff1a</p>\n\n<ul>\n\t<li>\u6709\u00a0<code>A.length</code>\u00a0\u4e2a\u8282\u70b9\uff0c\u6309\u4ece\u00a0<code>A[0]</code>\u00a0\u5230\u00a0<code>A[A.length - 1]</code>\u00a0\u6807\u8bb0\uff1b</li>\n\t<li>\u53ea\u6709\u5f53 <code>A[i]</code> \u548c <code>A[j]</code> \u5171\u7528\u4e00\u4e2a\u5927\u4e8e 1 \u7684\u516c\u56e0\u6570\u65f6\uff0c<code>A[i]</code>\u00a0\u548c <code>A[j]</code> \u4e4b\u95f4\u624d\u6709\u4e00\u6761\u8fb9\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u56fe\u4e2d\u6700\u5927\u8fde\u901a\u7ec4\u4ef6\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u00a0</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[4,6,15,35]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex1.png\" style=\"height: 50px; width: 257px;\" />\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[20,50,9,63]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex2.png\" style=\"height: 50px; width: 293px;\" />\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[2,3,6,7,4,12,21,39]\n<strong>\u8f93\u51fa\uff1a</strong>8\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex3.png\" style=\"height: 180px; width: 346px;\" />\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 <= A.length <= 20000</code></li>\n\t<li><code>1 <= A[i] <= 100000</code></li>\n</ol>\n", "tags_en": ["Union Find", "Math"], "tags_cn": ["\u5e76\u67e5\u96c6", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestComponentSize(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestComponentSize(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestComponentSize(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestComponentSize(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint largestComponentSize(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestComponentSize(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar largestComponentSize = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef largest_component_size(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestComponentSize(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestComponentSize(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestComponentSize(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestComponentSize(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_component_size(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function largestComponentSize($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestComponentSize(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0990", "frontend_question_id": "0953", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/verifying-an-alien-dictionary", "url_en": "https://leetcode.com/problems/verifying-an-alien-dictionary", "relative_path_cn": "/leetcode/0900-0999/0953.Verifying%20an%20Alien%20Dictionary/README.md", "relative_path_en": "/leetcode/0900-0999/0953.Verifying%20an%20Alien%20Dictionary/README_EN.md", "title_cn": "\u9a8c\u8bc1\u5916\u661f\u8bed\u8bcd\u5178", "title_en": "Verifying an Alien Dictionary", "question_title_slug": "verifying-an-alien-dictionary", "content_en": "<p>In an alien language, surprisingly they also use english lowercase letters, but possibly&nbsp;in a different <code>order</code>. The&nbsp;<code>order</code> of the alphabet&nbsp;is some permutation&nbsp;of lowercase letters.</p>\n\n<p>Given a sequence of <code>words</code>&nbsp;written in the alien language,&nbsp;and the <code>order</code> of the alphabet,&nbsp;return <code>true</code> if and only if the given <code>words</code>&nbsp;are sorted lexicographicaly in this alien language.</p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>The first three characters &quot;app&quot; match, and the second string is shorter (in size.) According to lexicographical rules &quot;apple&quot; &gt; &quot;app&quot;, because &#39;l&#39; &gt; &#39;&empty;&#39;, where &#39;&empty;&#39; is defined as the blank character which is less than any other character (<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\">More info</a>).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>\n</ul>\n", "content_cn": "<p>\u67d0\u79cd\u5916\u661f\u8bed\u4e5f\u4f7f\u7528\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f46\u53ef\u80fd\u987a\u5e8f <code>order</code> \u4e0d\u540c\u3002\u5b57\u6bcd\u8868\u7684\u987a\u5e8f\uff08<code>order</code>\uff09\u662f\u4e00\u4e9b\u5c0f\u5199\u5b57\u6bcd\u7684\u6392\u5217\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u7ec4\u7528\u5916\u661f\u8bed\u4e66\u5199\u7684\u5355\u8bcd <code>words</code>\uff0c\u4ee5\u53ca\u5176\u5b57\u6bcd\u8868\u7684\u987a\u5e8f <code>order</code>\uff0c\u53ea\u6709\u5f53\u7ed9\u5b9a\u7684\u5355\u8bcd\u5728\u8fd9\u79cd\u5916\u661f\u8bed\u4e2d\u6309\u5b57\u5178\u5e8f\u6392\u5217\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u8be5\u8bed\u8a00\u7684\u5b57\u6bcd\u8868\u4e2d\uff0c&#39;h&#39; \u4f4d\u4e8e &#39;l&#39; \u4e4b\u524d\uff0c\u6240\u4ee5\u5355\u8bcd\u5e8f\u5217\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u8be5\u8bed\u8a00\u7684\u5b57\u6bcd\u8868\u4e2d\uff0c&#39;d&#39; \u4f4d\u4e8e &#39;l&#39; \u4e4b\u540e\uff0c\u90a3\u4e48 words[0] &gt; words[1]\uff0c\u56e0\u6b64\u5355\u8bcd\u5e8f\u5217\u4e0d\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5f53\u524d\u4e09\u4e2a\u5b57\u7b26 &quot;app&quot; \u5339\u914d\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u76f8\u5bf9\u77ed\u4e00\u4e9b\uff0c\u7136\u540e\u6839\u636e\u8bcd\u5178\u7f16\u7e82\u89c4\u5219 &quot;apple&quot; &gt; &quot;app&quot;\uff0c\u56e0\u4e3a &#39;l&#39; &gt; &#39;&empty;&#39;\uff0c\u5176\u4e2d &#39;&empty;&#39; \u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u5b9a\u4e49\u4e3a\u6bd4\u4efb\u4f55\u5176\u4ed6\u5b57\u7b26\u90fd\u5c0f\uff08<a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\" target=\"_blank\">\u66f4\u591a\u4fe1\u606f</a>\uff09\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>\u5728&nbsp;<code>words[i]</code>&nbsp;\u548c&nbsp;<code>order</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isAlienSorted(vector<string>& words, string order) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isAlienSorted(self, words, order):\n        \"\"\"\n        :type words: List[str]\n        :type order: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isAlienSorted(char ** words, int wordsSize, char * order){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsAlienSorted(string[] words, string order) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {string} order\n * @return {boolean}\n */\nvar isAlienSorted = function(words, order) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @param {String} order\n# @return {Boolean}\ndef is_alien_sorted(words, order)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isAlienSorted(_ words: [String], _ order: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isAlienSorted(words []string, order string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isAlienSorted(words: Array[String], order: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isAlienSorted(words: Array<String>, order: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_alien_sorted(words: Vec<String>, order: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param String $order\n     * @return Boolean\n     */\n    function isAlienSorted($words, $order) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isAlienSorted(words: string[], order: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0991", "frontend_question_id": "0954", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/array-of-doubled-pairs", "url_en": "https://leetcode.com/problems/array-of-doubled-pairs", "relative_path_cn": "/leetcode/0900-0999/0954.Array%20of%20Doubled%20Pairs/README.md", "relative_path_en": "/leetcode/0900-0999/0954.Array%20of%20Doubled%20Pairs/README_EN.md", "title_cn": "\u4e8c\u500d\u6570\u5bf9\u6570\u7ec4", "title_en": "Array of Doubled Pairs", "question_title_slug": "array-of-doubled-pairs", "content_en": "<p>Given an array of integers <code>A</code>&nbsp;with even length, return <code>true</code> if and only if it is possible to reorder it such that <code>A[2 * i + 1] = 2 * A[2 * i]</code> for every <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>.</p>\n\n<div>\n<div>\n<div>\n<ol>\n</ol>\n</div>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [3,1,3,6]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [2,1,2,6]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [4,-2,2,-4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [1,2,4,16,8,4]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= A.length &lt;= 3 *&nbsp;10<sup>4</sup></code></li>\n\t<li><code>A.length</code> is even.</li>\n\t<li><code>-10<sup>5</sup> &lt;= A[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u53ea\u6709\u5bf9&nbsp;<code>A</code>&nbsp;\u8fdb\u884c\u91cd\u7ec4\u540e\u53ef\u4ee5\u6ee1\u8db3 &ldquo;\u5bf9\u4e8e\u6bcf\u4e2a <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>\uff0c\u90fd\u6709 <code>A[2 * i + 1] = 2 * A[2 * i]</code>&rdquo;&nbsp;\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,3,6]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2,6]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,-2,2,-4]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u7528 [-2,-4] \u548c [2,4] \u8fd9\u4e24\u7ec4\u7ec4\u6210 [-2,-4,2,4] \u6216\u662f [2,4,-2,-4]</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4,16,8,4]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A.length</code>&nbsp;\u4e3a\u5076\u6570</li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n", "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canReorderDoubled(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canReorderDoubled(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canReorderDoubled(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canReorderDoubled(self, A: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canReorderDoubled(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanReorderDoubled(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar canReorderDoubled = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Boolean}\ndef can_reorder_doubled(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canReorderDoubled(_ A: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canReorderDoubled(A []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canReorderDoubled(A: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canReorderDoubled(A: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_reorder_doubled(a: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Boolean\n     */\n    function canReorderDoubled($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canReorderDoubled(A: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0992", "frontend_question_id": "0955", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-columns-to-make-sorted-ii", "url_en": "https://leetcode.com/problems/delete-columns-to-make-sorted-ii", "relative_path_cn": "/leetcode/0900-0999/0955.Delete%20Columns%20to%20Make%20Sorted%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0955.Delete%20Columns%20to%20Make%20Sorted%20II/README_EN.md", "title_cn": "\u5220\u5217\u9020\u5e8f II", "title_en": "Delete Columns to Make Sorted II", "question_title_slug": "delete-columns-to-make-sorted-ii", "content_en": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\r\n\r\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\r\n\r\n<p>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;,&quot;vyz&quot;]</code>.</p>\r\n\r\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, the final array has its elements in <strong>lexicographic</strong> order (<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>).</p>\r\n\r\n<p>Return the minimum possible value of <code>D.length</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>\r\nAfter deleting the first column, A = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].\r\nNow A is in lexicographic order (ie. A[0] &lt;= A[1] &lt;= A[2]).\r\nWe require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nA is already in lexicographic order, so we don&#39;t need to delete anything.\r\nNote that the rows of A are not necessarily in lexicographic order:\r\nie. it is NOT necessarily true that (A[0][0] &lt;= A[0][1] &lt;= ...)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nWe have to delete every column.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u9009\u53d6\u4e00\u4e2a\u5220\u9664\u7d22\u5f15\u5e8f\u5217\uff0c\u5bf9\u4e8e&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u5bf9\u5e94\u6bcf\u4e2a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>\uff0c\u5220\u9664\u7d22\u5f15\u5e8f\u5217&nbsp;<code>{0, 2, 3}</code>\uff0c\u5220\u9664\u540e&nbsp;<code>A</code>&nbsp;\u4e3a<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>\u3002</p>\n\n<p>\u5047\u8bbe\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u5220\u9664\u7d22\u5f15&nbsp;<code>D</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u7684\u5143\u7d20\u662f\u6309 <strong>\u5b57\u5178\u5e8f</strong>\uff08<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>\uff09\u6392\u5217\u7684\uff0c\u7136\u540e\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5220\u9664\u7b2c\u4e00\u5217\u540e\uff0cA = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\u3002\n\u73b0\u5728 A \u4e2d\u5143\u7d20\u662f\u6309\u5b57\u5178\u6392\u5217\u7684 (\u5373\uff0cA[0] &lt;= A[1] &lt;= A[2])\u3002\n\u6211\u4eec\u81f3\u5c11\u9700\u8981\u8fdb\u884c 1 \u6b21\u5220\u9664\uff0c\u56e0\u4e3a\u6700\u521d A \u4e0d\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u662f 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\nA \u7684\u5217\u5df2\u7ecf\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u5220\u9664\u4efb\u4f55\u4e1c\u897f\u3002\n\u6ce8\u610f A \u7684\u884c\u4e0d\u9700\u8981\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0cA[0][0] &lt;= A[0][1] &lt;= ... \u4e0d\u4e00\u5b9a\u6210\u7acb\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u5fc5\u987b\u5220\u6389\u6bcf\u4e00\u5217\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDeletionSize(vector<string>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDeletionSize(String[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minDeletionSize(char ** A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDeletionSize(string[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @return {number}\n */\nvar minDeletionSize = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @return {Integer}\ndef min_deletion_size(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDeletionSize(_ A: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minDeletionSize(A []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDeletionSize(A: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDeletionSize(A: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_deletion_size(a: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @return Integer\n     */\n    function minDeletionSize($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDeletionSize(A: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0993", "frontend_question_id": "0956", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/tallest-billboard", "url_en": "https://leetcode.com/problems/tallest-billboard", "relative_path_cn": "/leetcode/0900-0999/0956.Tallest%20Billboard/README.md", "relative_path_en": "/leetcode/0900-0999/0956.Tallest%20Billboard/README_EN.md", "title_cn": "\u6700\u9ad8\u7684\u5e7f\u544a\u724c", "title_en": "Tallest Billboard", "question_title_slug": "tallest-billboard", "content_en": "<p>You are installing a billboard and want it to have the largest height.&nbsp; The billboard will have two steel supports, one on each side.&nbsp; Each steel support must be an equal height.</p>\r\n\r\n<p>You have a collection of <code>rods</code> which can be welded together.&nbsp; For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.</p>\r\n\r\n<p>Return the largest possible height of your billboard installation.&nbsp; If you cannot support the billboard, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation:</strong> We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10</span>\r\n<strong>Explanation:</strong> We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>The billboard cannot be supported, so we return 0.\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= rods.length &lt;= 20</code></li>\r\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\r\n\t<li><code>The sum of rods is at most 5000.</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u4f60\u6b63\u5728\u5b89\u88c5\u4e00\u4e2a\u5e7f\u544a\u724c\uff0c\u5e76\u5e0c\u671b\u5b83\u9ad8\u5ea6\u6700\u5927\u3002\u8fd9\u5757\u5e7f\u544a\u724c\u5c06\u6709\u4e24\u4e2a\u94a2\u5236\u652f\u67b6\uff0c\u4e24\u8fb9\u5404\u4e00\u4e2a\u3002\u6bcf\u4e2a\u94a2\u652f\u67b6\u7684\u9ad8\u5ea6\u5fc5\u987b\u76f8\u7b49\u3002</p>\n\n<p>\u4f60\u6709\u4e00\u5806\u53ef\u4ee5\u710a\u63a5\u5728\u4e00\u8d77\u7684\u94a2\u7b4b <code>rods</code>\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u94a2\u7b4b\u7684\u957f\u5ea6\u4e3a 1\u30012 \u548c 3\uff0c\u5219\u53ef\u4ee5\u5c06\u5b83\u4eec\u710a\u63a5\u5728\u4e00\u8d77\u5f62\u6210\u957f\u5ea6\u4e3a 6 \u7684\u652f\u67b6\u3002</p>\n\n<p>\u8fd4\u56de\u5e7f\u544a\u724c\u7684\u6700\u5927\u53ef\u80fd\u5b89\u88c5\u9ad8\u5ea6\u3002\u5982\u679c\u6ca1\u6cd5\u5b89\u88c5\u5e7f\u544a\u724c\uff0c\u8bf7\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,6]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 {1,2,3} \u548c {6}\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u548c sum = 6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 {2,3,5} \u548c {4,6}\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u548c sum = 10\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6cd5\u5b89\u88c5\u5e7f\u544a\u724c\uff0c\u6240\u4ee5\u8fd4\u56de 0\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= rods.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\n\t<li><code>\u94a2\u7b4b\u7684\u957f\u5ea6\u603b\u548c\u6700\u591a\u4e3a 5000</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int tallestBillboard(vector<int>& rods) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int tallestBillboard(int[] rods) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def tallestBillboard(self, rods):\n        \"\"\"\n        :type rods: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def tallestBillboard(self, rods: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint tallestBillboard(int* rods, int rodsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int TallestBillboard(int[] rods) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} rods\n * @return {number}\n */\nvar tallestBillboard = function(rods) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} rods\n# @return {Integer}\ndef tallest_billboard(rods)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func tallestBillboard(_ rods: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func tallestBillboard(rods []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def tallestBillboard(rods: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun tallestBillboard(rods: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn tallest_billboard(rods: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $rods\n     * @return Integer\n     */\n    function tallestBillboard($rods) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function tallestBillboard(rods: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0994", "frontend_question_id": "0957", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/prison-cells-after-n-days", "url_en": "https://leetcode.com/problems/prison-cells-after-n-days", "relative_path_cn": "/leetcode/0900-0999/0957.Prison%20Cells%20After%20N%20Days/README.md", "relative_path_en": "/leetcode/0900-0999/0957.Prison%20Cells%20After%20N%20Days/README_EN.md", "title_cn": "N \u5929\u540e\u7684\u7262\u623f", "title_en": "Prison Cells After N Days", "question_title_slug": "prison-cells-after-n-days", "content_en": "<p>There are 8 prison cells in a row, and each cell is either occupied or vacant.</p>\r\n\r\n<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>\r\n\r\n<ul>\r\n\t<li>If a cell has two adjacent neighbors that are both occupied or both vacant,&nbsp;then the cell becomes occupied.</li>\r\n\t<li>Otherwise, it becomes vacant.</li>\r\n</ul>\r\n\r\n<p>(Note that because the prison is a row, the first and the last cells in the row can&#39;t have two adjacent neighbors.)</p>\r\n\r\n<p>We describe the current state of the prison&nbsp;in the following way:&nbsp;<code>cells[i] == 1</code> if the <code>i</code>-th cell is occupied, else <code>cells[i] == 0</code>.</p>\r\n\r\n<p>Given the initial state of the prison, return the state of the prison after <code>N</code> days (and <code>N</code> such changes described above.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>cells = <span id=\"example-input-1-1\">[0,1,0,1,1,0,0,1]</span>, N = <span id=\"example-input-1-2\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,0,1,1,0,0,0,0]</span>\r\n<strong>Explanation: \r\n</strong><span id=\"example-output-1\">The following table summarizes the state of the prison on each day:\r\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\r\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\r\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\r\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\r\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\r\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\r\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\r\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]</span>\r\n\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>cells = <span id=\"example-input-2-1\">[1,0,0,1,0,0,1,0]</span>, N = <span id=\"example-input-2-2\">1000000000</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,0,1,1,1,1,1,0]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>cells.length == 8</code></li>\r\n\t<li><code>cells[i]</code> is in <code>{0, 1}</code></li>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>8 \u95f4\u7262\u623f\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u95f4\u7262\u623f\u4e0d\u662f\u6709\u4eba\u4f4f\u5c31\u662f\u7a7a\u7740\u3002</p>\n\n<p>\u6bcf\u5929\uff0c\u65e0\u8bba\u7262\u623f\u662f\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\uff0c\u90fd\u4f1a\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u8fdb\u884c\u66f4\u6539\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u4e00\u95f4\u7262\u623f\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\u90fd\u88ab\u5360\u7528\u6216\u90fd\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8be5\u7262\u623f\u5c31\u4f1a\u88ab\u5360\u7528\u3002</li>\n\t<li>\u5426\u5219\uff0c\u5b83\u5c31\u4f1a\u88ab\u7a7a\u7f6e\u3002</li>\n</ul>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u76d1\u72f1\u4e2d\u7684\u7262\u623f\u6392\u6210\u4e00\u884c\uff0c\u6240\u4ee5\u884c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u65e0\u6cd5\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\u3002\uff09</p>\n\n<p>\u6211\u4eec\u7528\u4ee5\u4e0b\u65b9\u5f0f\u63cf\u8ff0\u76d1\u72f1\u7684\u5f53\u524d\u72b6\u6001\uff1a\u5982\u679c\u7b2c <code>i</code> \u95f4\u7262\u623f\u88ab\u5360\u7528\uff0c\u5219 <code>cell[i]==1</code>\uff0c\u5426\u5219 <code>cell[i]==0</code>\u3002</p>\n\n<p>\u6839\u636e\u76d1\u72f1\u7684\u521d\u59cb\u72b6\u6001\uff0c\u5728 <code>N</code> \u5929\u540e\u8fd4\u56de\u76d1\u72f1\u7684\u72b6\u51b5\uff08\u548c\u4e0a\u8ff0 N \u79cd\u53d8\u5316\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>cells = [0,1,0,1,1,0,0,1], N = 7\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,0,0,0,0]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u4e0b\u8868\u6982\u8ff0\u4e86\u76d1\u72f1\u6bcf\u5929\u7684\u72b6\u51b5\uff1a\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>cells = [1,0,0,1,0,0,1,0], N = 1000000000\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>cells.length == 8</code></li>\n\t<li><code>cells[i]</code>&nbsp;\u7684\u503c\u4e3a <code>0</code> \u6216 <code>1</code>&nbsp;</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> prisonAfterNDays(vector<int>& cells, int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] prisonAfterNDays(int[] cells, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def prisonAfterNDays(self, cells, N):\n        \"\"\"\n        :type cells: List[int]\n        :type N: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* prisonAfterNDays(int* cells, int cellsSize, int N, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] PrisonAfterNDays(int[] cells, int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} cells\n * @param {number} N\n * @return {number[]}\n */\nvar prisonAfterNDays = function(cells, N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} cells\n# @param {Integer} n\n# @return {Integer[]}\ndef prison_after_n_days(cells, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func prisonAfterNDays(_ cells: [Int], _ N: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func prisonAfterNDays(cells []int, N int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def prisonAfterNDays(cells: Array[Int], N: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun prisonAfterNDays(cells: IntArray, N: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn prison_after_n_days(cells: Vec<i32>, n: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $cells\n     * @param Integer $N\n     * @return Integer[]\n     */\n    function prisonAfterNDays($cells, $N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function prisonAfterNDays(cells: number[], N: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0998", "frontend_question_id": "0958", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree", "url_en": "https://leetcode.com/problems/check-completeness-of-a-binary-tree", "relative_path_cn": "/leetcode/0900-0999/0958.Check%20Completeness%20of%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0900-0999/0958.Check%20Completeness%20of%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c", "title_en": "Check Completeness of a Binary Tree", "question_title_slug": "check-completeness-of-a-binary-tree", "content_en": "<p>Given the <code>root</code> of a binary tree, determine if it is a <em>complete binary tree</em>.</p>\n\n<p>In a <strong><a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">complete binary tree</a></strong>, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"width: 180px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png\" style=\"width: 200px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,null,7]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The node with value 7 isn&#39;t as far left as possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u786e\u5b9a\u5b83\u662f\u5426\u662f\u4e00\u4e2a<em>\u5b8c\u5168\u4e8c\u53c9\u6811</em>\u3002</p>\n\n<p><strong><a href=\"https://baike.baidu.com/item/\u5b8c\u5168\u4e8c\u53c9\u6811/7773232?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u5bf9\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</strong></p>\n\n<p>\u82e5\u8bbe\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a h\uff0c\u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u8fd9\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\uff08\u6ce8\uff1a\u7b2c h \u5c42\u53ef\u80fd\u5305\u542b 1~&nbsp;2<sup>h</sup>&nbsp;\u4e2a\u8282\u70b9\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"height: 145px; width: 180px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u540e\u4e00\u5c42\u524d\u7684\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684\uff08\u5373\uff0c\u7ed3\u70b9\u503c\u4e3a {1} \u548c {2,3} \u7684\u4e24\u5c42\uff09\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\uff08{4,5,6}\uff09\u90fd\u5c3d\u53ef\u80fd\u5730\u5411\u5de6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-2.png\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,null,7]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u503c\u4e3a 7 \u7684\u7ed3\u70b9\u6ca1\u6709\u5c3d\u53ef\u80fd\u9760\u5411\u5de6\u4fa7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u5c06\u4f1a\u6709 1 \u5230 100 \u4e2a\u7ed3\u70b9\u3002</li>\n</ol>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isCompleteTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isCompleteTree(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsCompleteTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isCompleteTree = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_complete_tree(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isCompleteTree(_ root: TreeNode?) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isCompleteTree(root *TreeNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isCompleteTree(root: TreeNode): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isCompleteTree(root: TreeNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_complete_tree(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isCompleteTree($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isCompleteTree(root: TreeNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0999", "frontend_question_id": "0959", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/regions-cut-by-slashes", "url_en": "https://leetcode.com/problems/regions-cut-by-slashes", "relative_path_cn": "/leetcode/0900-0999/0959.Regions%20Cut%20By%20Slashes/README.md", "relative_path_en": "/leetcode/0900-0999/0959.Regions%20Cut%20By%20Slashes/README_EN.md", "title_cn": "\u7531\u659c\u6760\u5212\u5206\u533a\u57df", "title_en": "Regions Cut By Slashes", "question_title_slug": "regions-cut-by-slashes", "content_en": "<p>In a N x N&nbsp;<code>grid</code> composed of 1 x 1 squares, each 1 x 1 square consists of a <code>/</code>, <code>\\</code>, or blank space.&nbsp; These characters divide the square into contiguous regions.</p>\r\n\r\n<p>(Note that backslash characters are escaped, so a <code>\\</code>&nbsp;is represented as <code>&quot;\\\\&quot;</code>.)</p>\r\n\r\n<p>Return the number of regions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-1-1\">[\r\n&nbsp; &quot; /&quot;,\r\n&nbsp; &quot;/ &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/1.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-2-1\">[\r\n&nbsp; &quot; /&quot;,\r\n&nbsp; &quot;  &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/2.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-3-1\">[\r\n&nbsp; &quot;\\\\/&quot;,\r\n&nbsp; &quot;/\\\\&quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation: </strong>(Recall that because \\ characters are escaped, &quot;\\\\/&quot; refers to \\/, and &quot;/\\\\&quot; refers to /\\.)\r\nThe 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/3.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-4-1\">[\r\n&nbsp; &quot;/\\\\&quot;,\r\n&nbsp; &quot;\\\\/&quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">5</span>\r\n<strong>Explanation: </strong>(Recall that because \\ characters are escaped, &quot;/\\\\&quot; refers to /\\, and &quot;\\\\/&quot; refers to \\/.)\r\nThe 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/4.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-5-1\">[\r\n&nbsp; &quot;//&quot;,\r\n&nbsp; &quot;/ &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">3</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/5.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\r\n\t<li><code>grid[i][j]</code> is either <code>&#39;/&#39;</code>, <code>&#39;\\&#39;</code>, or <code>&#39; &#39;</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u5728\u7531 1 x 1 \u65b9\u683c\u7ec4\u6210\u7684 N x N \u7f51\u683c&nbsp;<code>grid</code> \u4e2d\uff0c\u6bcf\u4e2a 1 x 1&nbsp;\u65b9\u5757\u7531 <code>/</code>\u3001<code>\\</code> \u6216\u7a7a\u683c\u6784\u6210\u3002\u8fd9\u4e9b\u5b57\u7b26\u4f1a\u5c06\u65b9\u5757\u5212\u5206\u4e3a\u4e00\u4e9b\u5171\u8fb9\u7684\u533a\u57df\u3002</p>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u53cd\u659c\u6760\u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u56e0\u6b64 <code>\\</code> \u7528 <code>&quot;\\\\&quot;</code>&nbsp;\u8868\u793a\u3002\uff09\u3002</p>\n\n<p>\u8fd4\u56de\u533a\u57df\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/1.png\"></pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;  &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/2.png\"></pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;\\\\/&quot;,\n&nbsp; &quot;/\\\\&quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a \\ \u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u6240\u4ee5 &quot;\\\\/&quot; \u8868\u793a \\/\uff0c\u800c &quot;/\\\\&quot; \u8868\u793a /\\\u3002\uff09\n2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/3.png\"></pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;/\\\\&quot;,\n&nbsp; &quot;\\\\/&quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a \\ \u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u6240\u4ee5 &quot;/\\\\&quot; \u8868\u793a /\\\uff0c\u800c &quot;\\\\/&quot; \u8868\u793a \\/\u3002\uff09\n2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/4.png\"></pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;//&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/5.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> \u662f&nbsp;<code>&#39;/&#39;</code>\u3001<code>&#39;\\&#39;</code>\u3001\u6216&nbsp;<code>&#39; &#39;</code>\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int regionsBySlashes(vector<string>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int regionsBySlashes(String[] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def regionsBySlashes(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint regionsBySlashes(char ** grid, int gridSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RegionsBySlashes(string[] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} grid\n * @return {number}\n */\nvar regionsBySlashes = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} grid\n# @return {Integer}\ndef regions_by_slashes(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func regionsBySlashes(_ grid: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func regionsBySlashes(grid []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def regionsBySlashes(grid: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun regionsBySlashes(grid: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn regions_by_slashes(grid: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $grid\n     * @return Integer\n     */\n    function regionsBySlashes($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function regionsBySlashes(grid: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1000", "frontend_question_id": "0960", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-columns-to-make-sorted-iii", "url_en": "https://leetcode.com/problems/delete-columns-to-make-sorted-iii", "relative_path_cn": "/leetcode/0900-0999/0960.Delete%20Columns%20to%20Make%20Sorted%20III/README.md", "relative_path_en": "/leetcode/0900-0999/0960.Delete%20Columns%20to%20Make%20Sorted%20III/README_EN.md", "title_cn": "\u5220\u5217\u9020\u5e8f III", "title_en": "Delete Columns to Make Sorted III", "question_title_slug": "delete-columns-to-make-sorted-iii", "content_en": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\r\n\r\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\r\n\r\n<p>For example, if we have an array <code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code> and deletion indices <code>{0, 1, 4}</code>, then the final array after deletions is <code>[&quot;bc&quot;,&quot;az&quot;]</code>.</p>\r\n\r\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, the final array has <strong>every element (row) in&nbsp;lexicographic</strong> order.</p>\r\n\r\n<p>For clarity, <code>A[0]</code> is in lexicographic order (ie. <code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>), <code>A[1]</code> is in lexicographic order (ie. <code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>), and so on.</p>\r\n\r\n<p>Return the minimum possible value of <code>D.length</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;babca&quot;,&quot;bbazb&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>After deleting columns 0, 1, and 4, the final array is A = [&quot;bc&quot;, &quot;az&quot;].\r\nBoth these rows are individually in lexicographic order (ie. A[0][0] &lt;= A[0][1] and A[1][0] &lt;= A[1][1]).\r\nNote that A[0] &gt; A[1] - the array A isn&#39;t necessarily in lexicographic order.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;edcba&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>If we delete less than 4 columns, the only row won&#39;t be lexicographically sorted.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>All rows are already lexicographically sorted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u9009\u53d6\u4e00\u4e2a\u5220\u9664\u7d22\u5f15\u5e8f\u5217\uff0c\u5bf9\u4e8e&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u5bf9\u5e94\u6bcf\u4e2a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code>\uff0c\u5220\u9664\u7d22\u5f15\u5e8f\u5217&nbsp;<code>{0, 1, 4}</code>\uff0c\u5220\u9664\u540e&nbsp;<code>A</code>&nbsp;\u4e3a<code>[&quot;bc&quot;,&quot;az&quot;]</code>\u3002</p>\n\n<p>\u5047\u8bbe\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u5220\u9664\u7d22\u5f15&nbsp;<code>D</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u7684\u884c\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6309<strong>\u5b57\u5178\u5e8f</strong>\u6392\u5217\u7684\u3002</p>\n\n<p>\u6e05\u695a\u8d77\u89c1\uff0c<code>A[0]</code>&nbsp;\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0c<code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>\uff09\uff0c<code>A[1]</code>&nbsp;\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0c<code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>\uff09\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p>\n\n<p>\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;babca&quot;,&quot;bbazb&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5220\u9664 0\u30011 \u548c 4 \u8fd9\u4e09\u5217\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u662f A = [&quot;bc&quot;, &quot;az&quot;]\u3002\n\u8fd9\u4e24\u884c\u662f\u5206\u522b\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0cA[0][0] &lt;= A[0][1] \u4e14 A[1][0] &lt;= A[1][1]\uff09\u3002\n\u6ce8\u610f\uff0cA[0] &gt; A[1] &mdash;&mdash; \u6570\u7ec4 A \u4e0d\u4e00\u5b9a\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;edcba&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u679c\u5220\u9664\u7684\u5217\u5c11\u4e8e 4 \u5217\uff0c\u5219\u5269\u4e0b\u7684\u884c\u90fd\u4e0d\u4f1a\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6240\u6709\u884c\u90fd\u5df2\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDeletionSize(vector<string>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDeletionSize(String[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minDeletionSize(char ** A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDeletionSize(string[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} A\n * @return {number}\n */\nvar minDeletionSize = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} a\n# @return {Integer}\ndef min_deletion_size(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDeletionSize(_ A: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minDeletionSize(A []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDeletionSize(A: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDeletionSize(A: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_deletion_size(a: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $A\n     * @return Integer\n     */\n    function minDeletionSize($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDeletionSize(A: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1001", "frontend_question_id": "0961", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array", "url_en": "https://leetcode.com/problems/n-repeated-element-in-size-2n-array", "relative_path_cn": "/leetcode/0900-0999/0961.N-Repeated%20Element%20in%20Size%202N%20Array/README.md", "relative_path_en": "/leetcode/0900-0999/0961.N-Repeated%20Element%20in%20Size%202N%20Array/README_EN.md", "title_cn": "\u91cd\u590d N \u6b21\u7684\u5143\u7d20", "title_en": "N-Repeated Element in Size 2N Array", "question_title_slug": "n-repeated-element-in-size-2n-array", "content_en": "<p>In a array <code>A</code> of size <code>2N</code>, there are <code>N+1</code> unique elements, and exactly one of these elements is repeated <code>N</code> times.</p>\n\n<p>Return the element repeated <code>N</code> times.</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,3]</span>\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,1,2,5,3,2]</span>\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-3-1\">[5,1,5,2,5,3,5,4]</span>\n<strong>Output: </strong><span id=\"example-output-3\">5</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n\t<li><code>A.length</code> is even</li>\n</ul>\n</div>\n</div>\n</div>\n", "content_cn": "<p>\u5728\u5927\u5c0f\u4e3a <code>2N</code>&nbsp;\u7684\u6570\u7ec4 <code>A</code>&nbsp;\u4e2d\u6709 <code>N+1</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u5143\u7d20\u91cd\u590d\u4e86 <code>N</code> \u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u91cd\u590d\u4e86 <code>N</code>&nbsp;\u6b21\u7684\u90a3\u4e2a\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2,5,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,1,5,2,5,3,5,4]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n\t<li><code>A.length</code>&nbsp;\u4e3a\u5076\u6570</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int repeatedNTimes(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int repeatedNTimes(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def repeatedNTimes(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint repeatedNTimes(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RepeatedNTimes(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar repeatedNTimes = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef repeated_n_times(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func repeatedNTimes(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func repeatedNTimes(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def repeatedNTimes(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun repeatedNTimes(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn repeated_n_times(a: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function repeatedNTimes($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function repeatedNTimes(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1002", "frontend_question_id": "0962", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-width-ramp", "url_en": "https://leetcode.com/problems/maximum-width-ramp", "relative_path_cn": "/leetcode/0900-0999/0962.Maximum%20Width%20Ramp/README.md", "relative_path_en": "/leetcode/0900-0999/0962.Maximum%20Width%20Ramp/README_EN.md", "title_cn": "\u6700\u5927\u5bbd\u5ea6\u5761", "title_en": "Maximum Width Ramp", "question_title_slug": "maximum-width-ramp", "content_en": "<p>Given an array <code>A</code> of integers, a <em>ramp</em>&nbsp;is a tuple <code>(i, j)</code> for which <code>i &lt; j</code>&nbsp;and&nbsp;<code>A[i] &lt;= A[j]</code>.&nbsp; The width of such a&nbsp;ramp is <code>j - i</code>.</p>\r\n\r\n<p>Find the maximum width of a ramp in <code>A</code>.&nbsp; If one doesn&#39;t exist, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[6,0,8,2,1,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[9,8,1,0,1,9,4,0,4,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7</span>\r\n<strong>Explanation: </strong>\r\nThe maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 50000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c<em>\u5761</em>\u662f\u5143\u7ec4&nbsp;<code>(i, j)</code>\uff0c\u5176\u4e2d&nbsp;&nbsp;<code>i &lt; j</code>&nbsp;\u4e14&nbsp;<code>A[i] &lt;= A[j]</code>\u3002\u8fd9\u6837\u7684\u5761\u7684\u5bbd\u5ea6\u4e3a&nbsp;<code>j - i</code>\u3002</p>\n\n<p>\u627e\u51fa&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u5761\u7684\u6700\u5927\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de 0 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[6,0,8,2,1,5]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5927\u5bbd\u5ea6\u7684\u5761\u4e3a (i, j) = (1, 5): A[1] = 0 \u4e14 A[5] = 5.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[9,8,1,0,1,9,4,0,4,1]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5927\u5bbd\u5ea6\u7684\u5761\u4e3a (i, j) = (2, 9): A[2] = 1 \u4e14 A[9] = 1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 50000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxWidthRamp(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxWidthRamp(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxWidthRamp(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxWidthRamp(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxWidthRamp(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxWidthRamp(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxWidthRamp = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef max_width_ramp(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxWidthRamp(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxWidthRamp(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxWidthRamp(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxWidthRamp(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_width_ramp(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function maxWidthRamp($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxWidthRamp(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1003", "frontend_question_id": "0963", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-area-rectangle-ii", "url_en": "https://leetcode.com/problems/minimum-area-rectangle-ii", "relative_path_cn": "/leetcode/0900-0999/0963.Minimum%20Area%20Rectangle%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0963.Minimum%20Area%20Rectangle%20II/README_EN.md", "title_cn": "\u6700\u5c0f\u9762\u79ef\u77e9\u5f62 II", "title_en": "Minimum Area Rectangle II", "question_title_slug": "minimum-area-rectangle-ii", "content_en": "<p>Given a set of points in the xy-plane, determine the minimum area of <strong>any</strong> rectangle formed from these points, with sides <strong>not necessarily parallel</strong> to the x and y axes.</p>\r\n\r\n<p>If there isn&#39;t any rectangle, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/1a.png\" style=\"width: 150px; height: 151px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2],[2,1],[1,0],[0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2.00000\r\n<strong>Explanation:</strong> </span><span>The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/2.png\" style=\"width: 150px; height: 94px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1],[2,1],[1,1],[1,0],[2,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1.00000\r\n</span><strong>Explanation:</strong> The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/3.png\" style=\"width: 160px; height: 167px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,3],[1,2],[3,1],[1,3],[2,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0\r\n</span><span><strong>Explanation:</strong> There is no possible rectangle to form from these points.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/4c.png\" style=\"width: 160px; height: 155px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2.00000\r\n</span><span><strong>Explanation:</strong> The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\r\n\t<li>All points are distinct.</li>\r\n\t<li>Answers within <code>10^-5</code> of the actual value will be accepted as correct.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u5728 xy \u5e73\u9762\u4e0a\u7684\u4e00\u7ec4\u70b9\uff0c\u786e\u5b9a\u7531\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u4efb\u4f55\u77e9\u5f62\u7684\u6700\u5c0f\u9762\u79ef\uff0c\u5176\u4e2d\u77e9\u5f62\u7684\u8fb9<strong>\u4e0d\u4e00\u5b9a\u5e73\u884c\u4e8e</strong> x \u8f74\u548c y \u8f74\u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u77e9\u5f62\uff0c\u5c31\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/22/1a.png\" style=\"height: 151px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[2,1],[1,0],[0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [1,2],[2,1],[1,0],[0,1] \u5904\uff0c\u9762\u79ef\u4e3a 2\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/2.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>\u8f93\u51fa\uff1a</strong>1.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [1,0],[1,1],[2,1],[2,0] \u5904\uff0c\u9762\u79ef\u4e3a 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/3.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6cd5\u4ece\u8fd9\u4e9b\u70b9\u4e2d\u7ec4\u6210\u4efb\u4f55\u77e9\u5f62\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/21/4c.png\" style=\"height: 155px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [2,1],[2,3],[3,3],[3,1] \u5904\uff0c\u9762\u79ef\u4e3a 2\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>\u6240\u6709\u7684\u70b9\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n\t<li>\u4e0e\u771f\u5b9e\u503c\u8bef\u5dee\u4e0d\u8d85\u8fc7 <code>10^-5</code>&nbsp;\u7684\u7b54\u6848\u5c06\u89c6\u4e3a\u6b63\u786e\u7ed3\u679c\u3002</li>\n</ol>\n", "tags_en": ["Geometry", "Math"], "tags_cn": ["\u51e0\u4f55", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double minAreaFreeRect(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double minAreaFreeRect(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minAreaFreeRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minAreaFreeRect(self, points: List[List[int]]) -> float:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble minAreaFreeRect(int** points, int pointsSize, int* pointsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double MinAreaFreeRect(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minAreaFreeRect = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Float}\ndef min_area_free_rect(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minAreaFreeRect(_ points: [[Int]]) -> Double {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minAreaFreeRect(points [][]int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minAreaFreeRect(points: Array[Array[Int]]): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minAreaFreeRect(points: Array<IntArray>): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_area_free_rect(points: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function minAreaFreeRect($points) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minAreaFreeRect(points: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1004", "frontend_question_id": "0964", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/least-operators-to-express-number", "url_en": "https://leetcode.com/problems/least-operators-to-express-number", "relative_path_cn": "/leetcode/0900-0999/0964.Least%20Operators%20to%20Express%20Number/README.md", "relative_path_en": "/leetcode/0900-0999/0964.Least%20Operators%20to%20Express%20Number/README_EN.md", "title_cn": "\u8868\u793a\u6570\u5b57\u7684\u6700\u5c11\u8fd0\u7b97\u7b26", "title_en": "Least Operators to Express Number", "question_title_slug": "least-operators-to-express-number", "content_en": "<p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code>&nbsp;where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>.&nbsp; For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code>&nbsp;which is a value of <font face=\"monospace\">3</font>.</p>\r\n\r\n<p>When writing such an expression, we adhere to the following conventions:</p>\r\n\r\n<ol>\r\n\t<li>The division operator (<code>/</code>) returns rational numbers.</li>\r\n\t<li>There are no parentheses placed anywhere.</li>\r\n\t<li>We use the usual order of operations: multiplication and division happens before addition and subtraction.</li>\r\n\t<li>It&#39;s not allowed to use the unary negation&nbsp;operator (<code>-</code>).&nbsp; For example, &quot;<code>x&nbsp;- x</code>&quot;&nbsp;is a valid expression as it only uses subtraction, but &quot;<code>-x +&nbsp;x</code>&quot; is not because it uses negation.</li>\r\n</ol>\r\n\r\n<p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>.&nbsp; Return the least number of operators used.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-1-1\">3</span>, target = <span id=\"example-input-1-2\">19</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-2-1\">5</span>, target = <span id=\"example-input-2-2\">501</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">8</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-3-1\">100</span>, target = <span id=\"example-input-3-2\">100000000</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">100 * 100 * 100 * 100.  The expression contains 3 operations.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\r\n</ul>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>x</code>\uff0c\u6211\u4eec\u5c06\u4f1a\u5199\u51fa\u4e00\u4e2a\u5f62\u5982&nbsp;<code>x (op1) x (op2) x (op3) x ...</code>&nbsp;\u7684\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8fd0\u7b97\u7b26&nbsp;<code>op1</code>\uff0c<code>op2</code>\uff0c&hellip; \u53ef\u4ee5\u662f\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\uff08<code>+</code>\uff0c<code>-</code>\uff0c<code>*</code>\uff0c\u6216\u662f&nbsp;<code>/</code>\uff09\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e&nbsp;<code>x = 3</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u8868\u8fbe\u5f0f&nbsp;<code>3 * 3 / 3 + 3 - 3</code>\uff0c\u8be5\u5f0f\u7684\u503c\u4e3a 3 \u3002</p>\n\n<p>\u5728\u5199\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9075\u5b88\u4e0b\u9762\u7684\u60ef\u4f8b\uff1a</p>\n\n<ol>\n\t<li>\u9664\u8fd0\u7b97\u7b26\uff08<code>/</code>\uff09\u8fd4\u56de\u6709\u7406\u6570\u3002</li>\n\t<li>\u4efb\u4f55\u5730\u65b9\u90fd\u6ca1\u6709\u62ec\u53f7\u3002</li>\n\t<li>\u6211\u4eec\u4f7f\u7528\u901a\u5e38\u7684\u64cd\u4f5c\u987a\u5e8f\uff1a\u4e58\u6cd5\u548c\u9664\u6cd5\u53d1\u751f\u5728\u52a0\u6cd5\u548c\u51cf\u6cd5\u4e4b\u524d\u3002</li>\n\t<li>\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e00\u5143\u5426\u5b9a\u8fd0\u7b97\u7b26\uff08<code>-</code>\uff09\u3002\u4f8b\u5982\uff0c&ldquo;<code>x - x</code>&rdquo; \u662f\u4e00\u4e2a\u6709\u6548\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f7f\u7528\u51cf\u6cd5\uff0c\u4f46\u662f &ldquo;<code>-x + x</code>&rdquo; \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u4e86\u5426\u5b9a\u8fd0\u7b97\u7b26\u3002&nbsp;</li>\n</ol>\n\n<p>\u6211\u4eec\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u80fd\u4f7f\u8868\u8fbe\u5f0f\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u503c <code>target</code> \u4e14\u8fd0\u7b97\u7b26\u6700\u5c11\u7684\u8868\u8fbe\u5f0f\u3002\u8fd4\u56de\u6240\u7528\u8fd0\u7b97\u7b26\u7684\u6700\u5c11\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 3, target = 19\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>3 * 3 + 3 * 3 + 3 / 3 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 5 \u4e2a\u8fd0\u7b97\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 5, target = 501\n<strong>\u8f93\u51fa\uff1a</strong>8\n<strong>\u89e3\u91ca\uff1a</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 8 \u4e2a\u8fd0\u7b97\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 100, target = 100000000\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>100 * 100 * 100 * 100 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 3 \u4e2a\u8fd0\u7b97\u7b26\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int leastOpsExpressTarget(int x, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def leastOpsExpressTarget(self, x, target):\n        \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint leastOpsExpressTarget(int x, int target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LeastOpsExpressTarget(int x, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */\nvar leastOpsExpressTarget = function(x, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} target\n# @return {Integer}\ndef least_ops_express_target(x, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func leastOpsExpressTarget(_ x: Int, _ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func leastOpsExpressTarget(x int, target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun leastOpsExpressTarget(x: Int, target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn least_ops_express_target(x: i32, target: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $target\n     * @return Integer\n     */\n    function leastOpsExpressTarget($x, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function leastOpsExpressTarget(x: number, target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1005", "frontend_question_id": "0965", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/univalued-binary-tree", "url_en": "https://leetcode.com/problems/univalued-binary-tree", "relative_path_cn": "/leetcode/0900-0999/0965.Univalued%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0900-0999/0965.Univalued%20Binary%20Tree/README_EN.md", "title_cn": "\u5355\u503c\u4e8c\u53c9\u6811", "title_en": "Univalued Binary Tree", "question_title_slug": "univalued-binary-tree", "content_en": "<p>A binary tree is <em>univalued</em> if every node in the tree has the same value.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if the given tree is univalued.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png\" style=\"width: 265px; height: 172px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,1,1,1,1,null,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png\" style=\"width: 198px; height: 169px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,2,2,5,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>\r\n\t<li>Each node&#39;s value will be an integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5982\u679c\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u4e48\u8be5\u4e8c\u53c9\u6811\u5c31\u662f<em>\u5355\u503c</em>\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u53ea\u6709\u7ed9\u5b9a\u7684\u6811\u662f\u5355\u503c\u4e8c\u53c9\u6811\u65f6\uff0c\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png\" style=\"height: 159px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,1,1,null,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png\" style=\"height: 158px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2,5,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u8282\u70b9\u6570\u8303\u56f4\u662f&nbsp;<code>[1, 100]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u8303\u56f4\u4e3a&nbsp;<code>[0, 99]</code>&nbsp;\u3002</li>\n</ol>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isUnivalTree(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isUnivalTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isUnivalTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isUnivalTree(self, root: TreeNode) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isUnivalTree(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsUnivalTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isUnivalTree = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_unival_tree(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isUnivalTree(_ root: TreeNode?) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isUnivalTree(root *TreeNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isUnivalTree(root: TreeNode): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isUnivalTree(root: TreeNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_unival_tree(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isUnivalTree($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isUnivalTree(root: TreeNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1006", "frontend_question_id": "0966", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/vowel-spellchecker", "url_en": "https://leetcode.com/problems/vowel-spellchecker", "relative_path_cn": "/leetcode/0900-0999/0966.Vowel%20Spellchecker/README.md", "relative_path_en": "/leetcode/0900-0999/0966.Vowel%20Spellchecker/README_EN.md", "title_cn": "\u5143\u97f3\u62fc\u5199\u68c0\u67e5\u5668", "title_en": "Vowel Spellchecker", "question_title_slug": "vowel-spellchecker", "content_en": "<p>Given a&nbsp;<code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p>\r\n\r\n<p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p>\r\n\r\n<ul>\r\n\t<li>Capitalization: If the query matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the case in the wordlist.\r\n\r\n\t<ul>\r\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Vowel Errors: If after replacing the vowels (&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;) of the query word with any vowel individually, it matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the match in the wordlist.\r\n\t<ul>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>In addition, the spell checker operates under the following precedence rules:</p>\r\n\r\n<ul>\r\n\t<li>When the query exactly matches a word in the wordlist (<strong>case-sensitive</strong>), you should return the same word back.</li>\r\n\t<li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li>\r\n\t<li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li>\r\n\t<li>If the query has no matches in the wordlist, you should return the empty string.</li>\r\n</ul>\r\n\r\n<p>Given some <code>queries</code>, return a&nbsp;list of words <code>answer</code>, where <code>answer[i]</code>&nbsp;is&nbsp;the correct word for <code>query = queries[i]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>wordlist = <span id=\"example-input-1-1\">[&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;]</span>, queries = <span id=\"example-input-1-2\">[&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\r\n\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\r\n\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\r\n\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\r\n\t<li>All strings in <code>wordlist</code> and <code>queries</code> consist only of <strong>english</strong>&nbsp;letters.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5728\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868&nbsp;<code>wordlist</code>&nbsp;\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5b9e\u73b0\u4e00\u4e2a\u62fc\u5199\u68c0\u67e5\u5668\uff0c\u5c06\u67e5\u8be2\u5355\u8bcd\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67e5\u8be2\u5355\u8bcd&nbsp;<code>query</code>\uff0c\u62fc\u5199\u68c0\u67e5\u5668\u5c06\u4f1a\u5904\u7406\u4e24\u7c7b\u62fc\u5199\u9519\u8bef\uff1a</p>\n\n<ul>\n\t<li>\u5927\u5c0f\u5199\uff1a\u5982\u679c\u67e5\u8be2\u5339\u914d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\uff08<strong>\u4e0d\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\uff0c\u5219\u8fd4\u56de\u7684\u6b63\u786e\u5355\u8bcd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5927\u5c0f\u5199\u76f8\u540c\u3002\n\n\t<ul>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>\u5143\u97f3\u9519\u8bef\uff1a\u5982\u679c\u5728\u5c06\u67e5\u8be2\u5355\u8bcd\u4e2d\u7684\u5143\u97f3\uff08&lsquo;a&rsquo;\u3001&lsquo;e&rsquo;\u3001&lsquo;i&rsquo;\u3001&lsquo;o&rsquo;\u3001&lsquo;u&rsquo;\uff09\u5206\u522b\u66ff\u6362\u4e3a\u4efb\u4f55\u5143\u97f3\u540e\uff0c\u80fd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u5339\u914d\uff08<strong>\u4e0d\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\uff0c\u5219\u8fd4\u56de\u7684\u6b63\u786e\u5355\u8bcd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5339\u914d\u9879\u5927\u5c0f\u5199\u76f8\u540c\u3002\n\t<ul>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> \uff08\u65e0\u5339\u914d\u9879\uff09</li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> \uff08\u65e0\u5339\u914d\u9879\uff09</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>\u6b64\u5916\uff0c\u62fc\u5199\u68c0\u67e5\u5668\u8fd8\u6309\u7167\u4ee5\u4e0b\u4f18\u5148\u7ea7\u89c4\u5219\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>\u5f53\u67e5\u8be2\u5b8c\u5168\u5339\u914d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\uff08<strong>\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\u65f6\uff0c\u5e94\u8fd4\u56de\u76f8\u540c\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u5f53\u67e5\u8be2\u5339\u914d\u5230\u5927\u5c0f\u5199\u95ee\u9898\u7684\u5355\u8bcd\u65f6\uff0c\u60a8\u5e94\u8be5\u8fd4\u56de\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5339\u914d\u9879\u3002</li>\n\t<li>\u5f53\u67e5\u8be2\u5339\u914d\u5230\u5143\u97f3\u9519\u8bef\u7684\u5355\u8bcd\u65f6\uff0c\u60a8\u5e94\u8be5\u8fd4\u56de\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5339\u914d\u9879\u3002</li>\n\t<li>\u5982\u679c\u8be5\u67e5\u8be2\u5728\u5355\u8bcd\u5217\u8868\u4e2d\u6ca1\u6709\u5339\u914d\u9879\uff0c\u5219\u5e94\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>\u7ed9\u51fa\u4e00\u4e9b\u67e5\u8be2 <code>queries</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u8bcd\u5217\u8868 <code>answer</code>\uff0c\u5176\u4e2d <code>answer[i]</code> \u662f\u7531\u67e5\u8be2 <code>query = queries[i]</code> \u5f97\u5230\u7684\u6b63\u786e\u5355\u8bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>wordlist = [&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;], queries = [&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\n\t<li><code>wordlist</code> \u548c&nbsp;<code>queries</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u7531<strong>\u82f1\u6587</strong>\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n", "tags_en": ["Hash Table", "String"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] spellchecker(String[] wordlist, String[] queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def spellchecker(self, wordlist, queries):\n        \"\"\"\n        :type wordlist: List[str]\n        :type queries: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** spellchecker(char ** wordlist, int wordlistSize, char ** queries, int queriesSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] Spellchecker(string[] wordlist, string[] queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} wordlist\n * @param {string[]} queries\n * @return {string[]}\n */\nvar spellchecker = function(wordlist, queries) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} wordlist\n# @param {String[]} queries\n# @return {String[]}\ndef spellchecker(wordlist, queries)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func spellchecker(_ wordlist: [String], _ queries: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func spellchecker(wordlist []string, queries []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def spellchecker(wordlist: Array[String], queries: Array[String]): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun spellchecker(wordlist: Array<String>, queries: Array<String>): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn spellchecker(wordlist: Vec<String>, queries: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $wordlist\n     * @param String[] $queries\n     * @return String[]\n     */\n    function spellchecker($wordlist, $queries) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function spellchecker(wordlist: string[], queries: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1007", "frontend_question_id": "0967", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/numbers-with-same-consecutive-differences", "url_en": "https://leetcode.com/problems/numbers-with-same-consecutive-differences", "relative_path_cn": "/leetcode/0900-0999/0967.Numbers%20With%20Same%20Consecutive%20Differences/README.md", "relative_path_en": "/leetcode/0900-0999/0967.Numbers%20With%20Same%20Consecutive%20Differences/README_EN.md", "title_cn": "\u8fde\u7eed\u5dee\u76f8\u540c\u7684\u6570\u5b57", "title_en": "Numbers With Same Consecutive Differences", "question_title_slug": "numbers-with-same-consecutive-differences", "content_en": "<p>Return all <strong>non-negative</strong> integers of length <code>n</code> such that the absolute difference between every two consecutive digits is <code>k</code>.</p>\n\n<p>Note that <strong>every</strong> number in the answer <strong>must not</strong> have leading zeros <strong>except</strong> for the number <code>0</code> itself. For example, <code>01</code> has one leading zero and is invalid, but <code>0</code> is valid.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 7\n<strong>Output:</strong> [181,292,707,818,929]\n<strong>Explanation: </strong>Note that 070 is not a valid number, because it has leading zeroes.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 1\n<strong>Output:</strong> [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 0\n<strong>Output:</strong> [11,22,33,44,55,66,77,88,99]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 1\n<strong>Output:</strong> [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 2\n<strong>Output:</strong> [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 9</code></li>\n\t<li><code>0 &lt;= k &lt;= 9</code></li>\n</ul>\n", "content_cn": "<p>\u8fd4\u56de\u6240\u6709\u957f\u5ea6\u4e3a <code>N</code> \u4e14\u6ee1\u8db3\u5176\u6bcf\u4e24\u4e2a\u8fde\u7eed\u4f4d\u4e0a\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a <code>K</code>&nbsp;\u7684<strong>\u975e\u8d1f\u6574\u6570</strong>\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c<strong>\u9664\u4e86</strong>\u6570\u5b57 <code>0</code> \u672c\u8eab\u4e4b\u5916\uff0c\u7b54\u6848\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd<strong>\u4e0d\u80fd</strong>\u6709\u524d\u5bfc\u96f6\u3002\u4f8b\u5982\uff0c<code>01</code>&nbsp;\u56e0\u4e3a\u6709\u4e00\u4e2a\u524d\u5bfc\u96f6\uff0c\u6240\u4ee5\u662f\u65e0\u6548\u7684\uff1b\u4f46 <code>0</code>&nbsp;\u662f\u6709\u6548\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, K = 7\n<strong>\u8f93\u51fa\uff1a</strong>[181,292,707,818,929]\n<strong>\u89e3\u91ca\uff1a</strong>\u6ce8\u610f\uff0c070 \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6709\u524d\u5bfc\u96f6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 9</code></li>\n</ol>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> numsSameConsecDiff(int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] numsSameConsecDiff(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numsSameConsecDiff(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numsSameConsecDiff(int n, int k, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] NumsSameConsecDiff(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[]}\n */\nvar numsSameConsecDiff = function(n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[]}\ndef nums_same_consec_diff(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numsSameConsecDiff(_ n: Int, _ k: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numsSameConsecDiff(n int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numsSameConsecDiff(n: Int, k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numsSameConsecDiff(n: Int, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn nums_same_consec_diff(n: i32, k: i32) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function numsSameConsecDiff($n, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numsSameConsecDiff(n: number, k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1008", "frontend_question_id": "0968", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-tree-cameras", "url_en": "https://leetcode.com/problems/binary-tree-cameras", "relative_path_cn": "/leetcode/0900-0999/0968.Binary%20Tree%20Cameras/README.md", "relative_path_en": "/leetcode/0900-0999/0968.Binary%20Tree%20Cameras/README_EN.md", "title_cn": "\u76d1\u63a7\u4e8c\u53c9\u6811", "title_en": "Binary Tree Cameras", "question_title_slug": "binary-tree-cameras", "content_en": "<p>Given a binary tree, we install cameras on the nodes of the tree.&nbsp;</p>\r\n\r\n<p>Each camera at&nbsp;a node can monitor <strong>its parent, itself, and its immediate children</strong>.</p>\r\n\r\n<p>Calculate the minimum number of cameras needed to monitor all nodes of the tree.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png\" style=\"width: 138px; height: 163px;\" />\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,0,null,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>One camera is enough to monitor all nodes if placed as shown.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png\" style=\"width: 139px; height: 312px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,0,null,0,null,0,null,null,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2\r\n<strong>Explanation:</strong> At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be in the range&nbsp;<code>[1, 1000]</code>.</li>\r\n\t<li><strong>Every</strong> node has value 0.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u5728\u6811\u7684\u8282\u70b9\u4e0a\u5b89\u88c5\u6444\u50cf\u5934\u3002</p>\n\n<p>\u8282\u70b9\u4e0a\u7684\u6bcf\u4e2a\u6444\u5f71\u5934\u90fd\u53ef\u4ee5\u76d1\u89c6<strong>\u5176\u7236\u5bf9\u8c61\u3001\u81ea\u8eab\u53ca\u5176\u76f4\u63a5\u5b50\u5bf9\u8c61\u3002</strong></p>\n\n<p>\u8ba1\u7b97\u76d1\u63a7\u6811\u7684\u6240\u6709\u8282\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6444\u50cf\u5934\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" style=\"height: 163px; width: 138px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,0,null,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\uff0c\u4e00\u53f0\u6444\u50cf\u5934\u8db3\u4ee5\u76d1\u63a7\u6240\u6709\u8282\u70b9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" style=\"height: 312px; width: 139px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,0,null,0,null,0,null,null,0]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u6444\u50cf\u5934\u6765\u76d1\u89c6\u6811\u7684\u6240\u6709\u8282\u70b9\u3002 \u4e0a\u56fe\u663e\u793a\u4e86\u6444\u50cf\u5934\u653e\u7f6e\u7684\u6709\u6548\u4f4d\u7f6e\u4e4b\u4e00\u3002\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u8282\u70b9\u6570\u7684\u8303\u56f4\u662f&nbsp;<code>[1, 1000]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f 0\u3002</li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int minCameraCover(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int minCameraCover(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def minCameraCover(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint minCameraCover(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int MinCameraCover(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minCameraCover = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef min_camera_cover(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func minCameraCover(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc minCameraCover(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def minCameraCover(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun minCameraCover(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn min_camera_cover(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function minCameraCover($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction minCameraCover(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1009", "frontend_question_id": "0969", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/pancake-sorting", "url_en": "https://leetcode.com/problems/pancake-sorting", "relative_path_cn": "/leetcode/0900-0999/0969.Pancake%20Sorting/README.md", "relative_path_en": "/leetcode/0900-0999/0969.Pancake%20Sorting/README_EN.md", "title_cn": "\u714e\u997c\u6392\u5e8f", "title_en": "Pancake Sorting", "question_title_slug": "pancake-sorting", "content_en": "<p>Given an array of integers&nbsp;<code>arr</code>, sort the array by performing a series of <strong>pancake flips</strong>.</p>\n\n<p>In one pancake flip we do the following steps:</p>\n\n<ul>\n\t<li>Choose an integer <code>k</code> where <code>1 &lt;= k &lt;= arr.length</code>.</li>\n\t<li>Reverse the sub-array <code>arr[1...k]</code>.</li>\n</ul>\n\n<p>For example, if <code>arr = [3,2,1,4]</code> and we performed a pancake flip choosing <code>k = 3</code>, we reverse the sub-array <code>[3,2,1]</code>, so <code>arr = [<strong>1,2,3</strong>,4]</code> after the pancake flip at <code>k = 3</code>.</p>\n\n<p>Return <em>the <code>k</code>-values corresponding to a sequence of pancake flips that sort <code>arr</code></em>.&nbsp;Any valid answer that sorts the array within <code>10 * arr.length</code> flips will be judged as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,2,4,1]\n<strong>Output:</strong> [4,2,4,3]\n<strong>Explanation: </strong>\nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [<strong>1, 4, 2, 3</strong>]\nAfter 2nd flip (k = 2): arr = [<strong>4, 1</strong>, 2, 3]\nAfter 3rd flip (k = 4): arr = [<strong>3, 2, 1, 4</strong>]\nAfter 4th flip (k = 3): arr = [<strong>1, 2, 3</strong>, 4], which is sorted.\nNotice that we return an array of the chosen k values of the pancake flips.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3]\n<strong>Output:</strong> []\n<strong>Explanation: </strong>The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= arr.length</code></li>\n\t<li>All integers in <code>arr</code> are unique (i.e. <code>arr</code> is a permutation of the integers from <code>1</code> to <code>arr.length</code>).</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c<em>\u714e\u997c\u7ffb\u8f6c</em>\uff1a\u6211\u4eec\u9009\u62e9\u4e00\u4e9b\u6b63\u6574\u6570&nbsp;<code><strong>k</strong>&nbsp;&lt;= A.length</code>\uff0c\u7136\u540e\u53cd\u8f6c <code>A</code> \u7684\u524d <strong>k</strong>&nbsp;\u4e2a\u5143\u7d20\u7684\u987a\u5e8f\u3002\u6211\u4eec\u8981\u6267\u884c\u96f6\u6b21\u6216\u591a\u6b21\u714e\u997c\u7ffb\u8f6c\uff08\u6309\u987a\u5e8f\u4e00\u6b21\u63a5\u4e00\u6b21\u5730\u8fdb\u884c\uff09\u4ee5\u5b8c\u6210\u5bf9\u6570\u7ec4 <code>A</code> \u7684\u6392\u5e8f\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u4f7f&nbsp;<code>A</code> \u6392\u5e8f\u7684\u714e\u997c\u7ffb\u8f6c\u64cd\u4f5c\u6240\u5bf9\u5e94\u7684 k \u503c\u5e8f\u5217\u3002\u4efb\u4f55\u5c06\u6570\u7ec4\u6392\u5e8f\u4e14\u7ffb\u8f6c\u6b21\u6570\u5728&nbsp;<code>10 * A.length</code> \u8303\u56f4\u5185\u7684\u6709\u6548\u7b54\u6848\u90fd\u5c06\u88ab\u5224\u65ad\u4e3a\u6b63\u786e\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,4,1]\n<strong>\u8f93\u51fa\uff1a</strong>[4,2,4,3]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u6267\u884c 4 \u6b21\u714e\u997c\u7ffb\u8f6c\uff0ck \u503c\u5206\u522b\u4e3a 4\uff0c2\uff0c4\uff0c\u548c 3\u3002\n\u521d\u59cb\u72b6\u6001 A = [3, 2, 4, 1]\n\u7b2c\u4e00\u6b21\u7ffb\u8f6c\u540e (k=4): A = [1, 4, 2, 3]\n\u7b2c\u4e8c\u6b21\u7ffb\u8f6c\u540e (k=2): A = [4, 1, 2, 3]\n\u7b2c\u4e09\u6b21\u7ffb\u8f6c\u540e (k=4): A = [3, 2, 1, 4]\n\u7b2c\u56db\u6b21\u7ffb\u8f6c\u540e (k=3): A = [1, 2, 3, 4]\uff0c\u6b64\u65f6\u5df2\u5b8c\u6210\u6392\u5e8f\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8f93\u5165\u5df2\u7ecf\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7ffb\u8f6c\u4efb\u4f55\u5185\u5bb9\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5176\u4ed6\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u5982[3\uff0c3]\uff0c\u4e5f\u5c06\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>A[i]</code> \u662f&nbsp;<code>[1, 2, ..., A.length]</code>&nbsp;\u7684\u6392\u5217</li>\n</ol>\n", "tags_en": ["Sort", "Array"], "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> pancakeSort(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> pancakeSort(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pancakeSort(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pancakeSort(self, arr: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* pancakeSort(int* arr, int arrSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> PancakeSort(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar pancakeSort = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef pancake_sort(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func pancakeSort(_ arr: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func pancakeSort(arr []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pancakeSort(arr: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pancakeSort(arr: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn pancake_sort(arr: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function pancakeSort($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pancakeSort(arr: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1010", "frontend_question_id": "0970", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/powerful-integers", "url_en": "https://leetcode.com/problems/powerful-integers", "relative_path_cn": "/leetcode/0900-0999/0970.Powerful%20Integers/README.md", "relative_path_en": "/leetcode/0900-0999/0970.Powerful%20Integers/README_EN.md", "title_cn": "\u5f3a\u6574\u6570", "title_en": "Powerful Integers", "question_title_slug": "powerful-integers", "content_en": "<p>Given two positive integers <code>x</code> and <code>y</code>, an integer is <em>powerful</em>&nbsp;if it is equal to <code>x^i + y^j</code>&nbsp;for&nbsp;some integers <code>i &gt;= 0</code> and <code>j &gt;= 0</code>.</p>\r\n\r\n<p>Return a list of all <em>powerful</em> integers that have value less than or equal to <code>bound</code>.</p>\r\n\r\n<p>You may return the answer in any order.&nbsp; In your answer, each value should occur at most once.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-1-1\">2</span>, y = <span id=\"example-input-1-2\">3</span>, bound = <span id=\"example-input-1-3\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,3,4,5,7,9,10]</span>\r\n<strong>Explanation: </strong>\r\n2 = 2^0 + 3^0\r\n3 = 2^1 + 3^0\r\n4 = 2^0 + 3^1\r\n5 = 2^1 + 3^1\r\n7 = 2^2 + 3^1\r\n9 = 2^3 + 3^0\r\n10 = 2^0 + 3^2\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-2-1\">3</span>, y = <span id=\"example-input-2-2\">5</span>, bound = <span id=\"example-input-2-3\">15</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[2,4,6,8,10,14]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= y&nbsp;&lt;= 100</code></li>\r\n\t<li><code>0 &lt;= bound&nbsp;&lt;= 10^6</code></li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u5982\u679c\u67d0\u4e00\u6574\u6570\u7b49\u4e8e <code>x^i + y^j</code>\uff0c\u5176\u4e2d\u6574\u6570&nbsp;<code>i &gt;= 0</code> \u4e14&nbsp;<code>j &gt;= 0</code>\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8be5\u6574\u6570\u662f\u4e00\u4e2a<em>\u5f3a\u6574\u6570</em>\u3002</p>\n\n<p>\u8fd4\u56de\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>bound</code>&nbsp;\u7684\u6240\u6709<em>\u5f3a\u6574\u6570</em>\u7ec4\u6210\u7684\u5217\u8868\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u5728\u4f60\u7684\u56de\u7b54\u4e2d\uff0c\u6bcf\u4e2a\u503c\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 2, y = 3, bound = 10\n<strong>\u8f93\u51fa\uff1a</strong>[2,3,4,5,7,9,10]\n<strong>\u89e3\u91ca\uff1a </strong>\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 3, y = 5, bound = 15\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,6,8,10,14]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= y&nbsp;&lt;= 100</code></li>\n\t<li><code>0 &lt;= bound&nbsp;&lt;= 10^6</code></li>\n</ul>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> powerfulIntegers(int x, int y, int bound) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> powerfulIntegers(int x, int y, int bound) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def powerfulIntegers(self, x, y, bound):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type bound: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* powerfulIntegers(int x, int y, int bound, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> PowerfulIntegers(int x, int y, int bound) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @param {number} bound\n * @return {number[]}\n */\nvar powerfulIntegers = function(x, y, bound) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer} bound\n# @return {Integer[]}\ndef powerful_integers(x, y, bound)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func powerfulIntegers(_ x: Int, _ y: Int, _ bound: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func powerfulIntegers(x int, y int, bound int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def powerfulIntegers(x: Int, y: Int, bound: Int): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun powerfulIntegers(x: Int, y: Int, bound: Int): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn powerful_integers(x: i32, y: i32, bound: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @param Integer $bound\n     * @return Integer[]\n     */\n    function powerfulIntegers($x, $y, $bound) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function powerfulIntegers(x: number, y: number, bound: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1011", "frontend_question_id": "0971", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flip-binary-tree-to-match-preorder-traversal", "url_en": "https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal", "relative_path_cn": "/leetcode/0900-0999/0971.Flip%20Binary%20Tree%20To%20Match%20Preorder%20Traversal/README.md", "relative_path_en": "/leetcode/0900-0999/0971.Flip%20Binary%20Tree%20To%20Match%20Preorder%20Traversal/README_EN.md", "title_cn": "\u7ffb\u8f6c\u4e8c\u53c9\u6811\u4ee5\u5339\u914d\u5148\u5e8f\u904d\u5386", "title_en": "Flip Binary Tree To Match Preorder Traversal", "question_title_slug": "flip-binary-tree-to-match-preorder-traversal", "content_en": "<p>Given a binary tree with <code>N</code> nodes, each node has a different value from&nbsp;<code>{1, ..., N}</code>.</p>\r\n\r\n<p>A node in this binary tree can be <em>flipped</em>&nbsp;by swapping the left child and the right child of that node.</p>\r\n\r\n<p>Consider the sequence of&nbsp;<code>N</code> values reported by a preorder traversal starting from the root.&nbsp; Call such a sequence of <code>N</code> values the&nbsp;<em>voyage</em>&nbsp;of the tree.</p>\r\n\r\n<p>(Recall that a <em>preorder traversal</em>&nbsp;of a node means we report the current node&#39;s value, then preorder-traverse the left child, then preorder-traverse the right child.)</p>\r\n\r\n<p>Our goal is to flip the <strong>least number</strong> of nodes in the tree so that the voyage of the tree matches the <code>voyage</code> we are given.</p>\r\n\r\n<p>If we can do so, then return a&nbsp;list&nbsp;of the values of all nodes flipped.&nbsp; You may return the answer in any order.</p>\r\n\r\n<p>If we cannot do so, then return the list <code>[-1]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-01.png\" style=\"width: 88px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[1,2]</span>, voyage = <span id=\"example-input-1-2\">[2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[-1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 127px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[1,2,3]</span>, voyage = <span id=\"example-input-2-2\">[1,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 127px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[1,2,3]</span>, voyage = <span id=\"example-input-3-2\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 <code>N</code> \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4e0d\u540c\u4e8e\u5176\u4ed6\u8282\u70b9\u4e14\u5904\u4e8e <code>{1, ..., N}</code> \u4e2d\u7684\u503c\u3002</p>\n\n<p>\u901a\u8fc7\u4ea4\u6362\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u7ffb\u8f6c\u8be5\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\u3002</p>\n\n<p>\u8003\u8651\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u7684\u5148\u5e8f\u904d\u5386\u62a5\u544a\u7684 <code>N</code> \u503c\u5e8f\u5217\u3002\u5c06\u8fd9\u4e00 <code>N</code> \u503c\u5e8f\u5217\u79f0\u4e3a\u6811\u7684\u884c\u7a0b\u3002</p>\n\n<p>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u8282\u70b9\u7684\u5148\u5e8f\u904d\u5386\u610f\u5473\u7740\u6211\u4eec\u62a5\u544a\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u5148\u5e8f\u904d\u5386\u5de6\u5b50\u8282\u70b9\uff0c\u518d\u5148\u5e8f\u904d\u5386\u53f3\u5b50\u8282\u70b9\u3002\uff09</p>\n\n<p>\u6211\u4eec\u7684\u76ee\u6807\u662f\u7ffb\u8f6c<strong>\u6700\u5c11\u7684</strong>\u6811\u4e2d\u8282\u70b9\uff0c\u4ee5\u4fbf\u6811\u7684\u884c\u7a0b\u4e0e\u7ed9\u5b9a\u7684\u884c\u7a0b&nbsp;<code>voyage</code>&nbsp;\u76f8\u5339\u914d\u3002&nbsp;</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\uff0c\u5219\u8fd4\u56de\u7ffb\u8f6c\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u7684\u5217\u8868\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u80fd\uff0c\u5219\u8fd4\u56de\u5217\u8868 <code>[-1]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-01.png\" style=\"height: 120px; width: 88px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2], voyage = [2,1]\n<strong>\u8f93\u51fa\uff1a</strong>[-1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3], voyage = [1,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3], voyage = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def flipMatchVoyage(self, root, voyage):\n        \"\"\"\n        :type root: TreeNode\n        :type voyage: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def flipMatchVoyage(self, root: TreeNode, voyage: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* flipMatchVoyage(struct TreeNode* root, int* voyage, int voyageSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<int> FlipMatchVoyage(TreeNode root, int[] voyage) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number[]} voyage\n * @return {number[]}\n */\nvar flipMatchVoyage = function(root, voyage) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer[]} voyage\n# @return {Integer[]}\ndef flip_match_voyage(root, voyage)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func flipMatchVoyage(_ root: TreeNode?, _ voyage: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc flipMatchVoyage(root *TreeNode, voyage []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def flipMatchVoyage(root: TreeNode, voyage: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun flipMatchVoyage(root: TreeNode?, voyage: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn flip_match_voyage(root: Option<Rc<RefCell<TreeNode>>>, voyage: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer[] $voyage\n     * @return Integer[]\n     */\n    function flipMatchVoyage($root, $voyage) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction flipMatchVoyage(root: TreeNode | null, voyage: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1012", "frontend_question_id": "0972", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/equal-rational-numbers", "url_en": "https://leetcode.com/problems/equal-rational-numbers", "relative_path_cn": "/leetcode/0900-0999/0972.Equal%20Rational%20Numbers/README.md", "relative_path_en": "/leetcode/0900-0999/0972.Equal%20Rational%20Numbers/README_EN.md", "title_cn": "\u76f8\u7b49\u7684\u6709\u7406\u6570", "title_en": "Equal Rational Numbers", "question_title_slug": "equal-rational-numbers", "content_en": "<p>Given two strings <code>S</code> and <code>T</code>, each of which represents a non-negative rational number, return <strong>True</strong> if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.</p>\r\n\r\n<p>In general a rational number can be represented using up to&nbsp;three parts: an&nbsp;<em>integer part</em>, a&nbsp;<em>non-repeating part,</em> and a&nbsp;<em>repeating part</em>. The number will be represented&nbsp;in one of the following three ways:</p>\r\n\r\n<ul>\r\n\t<li><code>&lt;IntegerPart&gt;</code> (e.g. 0, 12, 123)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> &nbsp;(e.g. 0.5, 1., 2.12, 2.0001)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code> (e.g. 0.1(6), 0.9(9), 0.00(1212))</li>\r\n</ul>\r\n\r\n<p>The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets.&nbsp; For example:</p>\r\n\r\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\r\n\r\n<p>Both 0.1(6) or 0.1666(6) or 0.166(66) are correct representations of 1 / 6.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;0.(52)&quot;</span>, T = <span id=\"example-input-1-2\">&quot;0.5(25)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation:\r\n</strong>Because &quot;0.(52)&quot; represents 0.52525252..., and &quot;0.5(25)&quot; represents 0.52525252525..... , the strings represent the same number.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;0.1666(6)&quot;</span>, T = <span id=\"example-input-2-2\">&quot;0.166(66)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;0.9(9)&quot;</span>, T = <span id=\"example-input-3-2\">&quot;1.&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n<strong>Explanation: </strong>\r\n&quot;0.9(9)&quot; represents 0.999999999... repeated forever, which equals 1.  [<a href=\"https://en.wikipedia.org/wiki/0.999...\" target=\"_blank\">See this link for an explanation.</a>]\r\n&quot;1.&quot; represents the number 1, which is formed correctly: (IntegerPart) = &quot;1&quot; and (NonRepeatingPart) = &quot;&quot;.</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each part consists only of digits.</li>\r\n\t<li>The <code>&lt;IntegerPart&gt;</code>&nbsp;will&nbsp;not begin with 2 or more zeros.&nbsp; (There is no other restriction on the digits of each part.)</li>\r\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>S</code> \u548c <code>T</code>\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u4e00\u4e2a\u975e\u8d1f\u6709\u7406\u6570\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u8868\u793a\u76f8\u540c\u7684\u6570\u5b57\u65f6\u624d\u8fd4\u56de <strong>true</strong>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <strong>false</strong>\u3002\u5b57\u7b26\u4e32\u4e2d\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u6765\u8868\u793a\u6709\u7406\u6570\u7684\u91cd\u590d\u90e8\u5206\u3002</p>\n\n<p>\u901a\u5e38\uff0c\u6709\u7406\u6570\u6700\u591a\u53ef\u4ee5\u7528\u4e09\u4e2a\u90e8\u5206\u6765\u8868\u793a\uff1a<em>\u6574\u6570\u90e8\u5206</em>&nbsp;<code>&lt;IntegerPart&gt;</code>\u3001<em>\u5c0f\u6570\u975e\u91cd\u590d\u90e8\u5206</em>&nbsp;<code>&lt;NonRepeatingPart&gt;</code>&nbsp;\u548c<em>\u5c0f\u6570\u91cd\u590d\u90e8\u5206</em>&nbsp;<code>&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>\u3002\u6570\u5b57\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e09\u79cd\u65b9\u6cd5\u4e4b\u4e00\u6765\u8868\u793a\uff1a</p>\n\n<ul>\n\t<li><code>&lt;IntegerPart&gt;</code>\uff08\u4f8b\uff1a0\uff0c12\uff0c123\uff09</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> \uff08\u4f8b\uff1a0.5\uff0c2.12\uff0c2.0001\uff09</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>\uff08\u4f8b\uff1a0.1(6)\uff0c0.9(9)\uff0c0.00(1212)\uff09</li>\n</ul>\n\n<p>\u5341\u8fdb\u5236\u5c55\u5f00\u7684\u91cd\u590d\u90e8\u5206\u901a\u5e38\u5728\u4e00\u5bf9\u5706\u62ec\u53f7\u5185\u8868\u793a\u3002\u4f8b\u5982\uff1a</p>\n\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\n\n<p>0.1(6) \u6216&nbsp;0.1666(6) \u6216&nbsp;0.166(66) \u90fd\u662f&nbsp;1 / 6 \u7684\u6b63\u786e\u8868\u793a\u5f62\u5f0f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.(52)&quot;, T = &quot;0.5(25)&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a &quot;0.(52)&quot; \u4ee3\u8868 0.52525252...\uff0c\u800c &quot;0.5(25)&quot; \u4ee3\u8868 0.52525252525.....\uff0c\u5219\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u76f8\u540c\u7684\u6570\u5b57\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.1666(6)&quot;, T = &quot;0.166(66)&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.9(9)&quot;, T = &quot;1.&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;0.9(9)&quot; \u4ee3\u8868 0.999999999... \u6c38\u8fdc\u91cd\u590d\uff0c\u7b49\u4e8e 1 \u3002[<a href=\"https://baike.baidu.com/item/0.999\u2026/5615429?fr=aladdin\" target=\"_blank\">\u6709\u5173\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u6b64\u94fe\u63a5</a>]\n&quot;1.&quot; \u8868\u793a\u6570\u5b57 1\uff0c\u5176\u683c\u5f0f\u6b63\u786e\uff1a(IntegerPart) = &quot;1&quot; \u4e14 (NonRepeatingPart) = &quot;&quot; \u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e2a\u90e8\u5206\u4ec5\u7531\u6570\u5b57\u7ec4\u6210\u3002</li>\n\t<li>\u6574\u6570\u90e8\u5206&nbsp;<code>&lt;IntegerPart&gt;</code>&nbsp;\u4e0d\u4f1a\u4ee5 2 \u4e2a\u6216\u66f4\u591a\u7684\u96f6\u5f00\u5934\u3002\uff08\u5bf9\u6bcf\u4e2a\u90e8\u5206\u7684\u6570\u5b57\u6ca1\u6709\u5176\u4ed6\u9650\u5236\uff09\u3002</li>\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4 </code></li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isRationalEqual(string S, string T) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isRationalEqual(String S, String T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isRationalEqual(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isRationalEqual(self, S: str, T: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isRationalEqual(char * S, char * T){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsRationalEqual(string S, string T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */\nvar isRationalEqual = function(S, T) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_rational_equal(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isRationalEqual(_ S: String, _ T: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isRationalEqual(S string, T string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isRationalEqual(S: String, T: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isRationalEqual(S: String, T: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_rational_equal(s: String, t: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $T\n     * @return Boolean\n     */\n    function isRationalEqual($S, $T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isRationalEqual(S: string, T: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1014", "frontend_question_id": "0973", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-closest-points-to-origin", "url_en": "https://leetcode.com/problems/k-closest-points-to-origin", "relative_path_cn": "/leetcode/0900-0999/0973.K%20Closest%20Points%20to%20Origin/README.md", "relative_path_en": "/leetcode/0900-0999/0973.K%20Closest%20Points%20to%20Origin/README_EN.md", "title_cn": "\u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9", "title_en": "K Closest Points to Origin", "question_title_slug": "k-closest-points-to-origin", "content_en": "<p>We have a list of <code>points</code>&nbsp;on the plane.&nbsp; Find the <code>K</code> closest points to the origin <code>(0, 0)</code>.</p>\r\n\r\n<p>(Here, the distance between two points on a plane is the Euclidean distance.)</p>\r\n\r\n<p>You may return the answer in any order.&nbsp; The&nbsp;answer is guaranteed to be unique (except for the order that it is in.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>points = <span id=\"example-input-1-1\">[[1,3],[-2,2]]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[-2,2]]</span>\r\n<strong>Explanation: </strong>\r\nThe distance between (1, 3) and the origin is sqrt(10).\r\nThe distance between (-2, 2) and the origin is sqrt(8).\r\nSince sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.\r\nWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>points = <span id=\"example-input-2-1\">[[3,3],[5,-1],[-2,4]]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[3,3],[-2,4]]</span>\r\n(The answer [[-2,4],[3,3]] would also be accepted.)\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>\r\n\t<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>", "content_cn": "<p>\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 <code>points</code>\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa <code>K</code> \u4e2a\u8ddd\u79bb\u539f\u70b9 <code>(0, 0)</code> \u6700\u8fd1\u7684\u70b9\u3002</p>\n\n<p>\uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>points = [[1,3],[-2,2]], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[[-2,2]]\n<strong>\u89e3\u91ca\uff1a </strong>\n(1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c\n(-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c\n\u7531\u4e8e sqrt(8) &lt; sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002\n\u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>points = [[3,3],[5,-1],[-2,4]], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>[[3,3],[-2,4]]\n\uff08\u7b54\u6848 [[-2,4],[3,3]] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\uff09\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>\n\t<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>\n</ol>\n", "tags_en": ["Heap", "Sort", "Divide and Conquer"], "tags_cn": ["\u5806", "\u6392\u5e8f", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** kClosest(int** points, int pointsSize, int* pointsColSize, int K, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] KClosest(int[][] points, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @param {number} K\n * @return {number[][]}\n */\nvar kClosest = function(points, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_closest(points, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kClosest(_ points: [[Int]], _ K: Int) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kClosest(points [][]int, K int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kClosest(points: Array[Array[Int]], K: Int): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kClosest(points: Array<IntArray>, K: Int): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn k_closest(points: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @param Integer $K\n     * @return Integer[][]\n     */\n    function kClosest($points, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kClosest(points: number[][], K: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1016", "frontend_question_id": "0974", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subarray-sums-divisible-by-k", "url_en": "https://leetcode.com/problems/subarray-sums-divisible-by-k", "relative_path_cn": "/leetcode/0900-0999/0974.Subarray%20Sums%20Divisible%20by%20K/README.md", "relative_path_en": "/leetcode/0900-0999/0974.Subarray%20Sums%20Divisible%20by%20K/README_EN.md", "title_cn": "\u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4", "title_en": "Subarray Sums Divisible by K", "question_title_slug": "subarray-sums-divisible-by-k", "content_en": "<p>Given an array <code>A</code> of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by <code>K</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[4,5,0,-2,-3,1]</span>, K = <span id=\"example-input-1-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<strong>Explanation: </strong>There are 7 subarrays with a sum divisible by K = 5:\r\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>2 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u5176\u4e2d\u5143\u7d20\u4e4b\u548c\u53ef\u88ab <code>K</code>&nbsp;\u6574\u9664\u7684\uff08\u8fde\u7eed\u3001\u975e\u7a7a\uff09\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [4,5,0,-2,-3,1], K = 5\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a\n</strong>\u6709 7 \u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u5176\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K = 5 \u6574\u9664\uff1a\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>2 &lt;= K &lt;= 10000</code></li>\n</ol>\n", "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarraysDivByK(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int subarraysDivByK(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def subarraysDivByK(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def subarraysDivByK(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint subarraysDivByK(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SubarraysDivByK(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar subarraysDivByK = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef subarrays_div_by_k(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func subarraysDivByK(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func subarraysDivByK(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def subarraysDivByK(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun subarraysDivByK(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn subarrays_div_by_k(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function subarraysDivByK($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function subarraysDivByK(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1017", "frontend_question_id": "0975", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/odd-even-jump", "url_en": "https://leetcode.com/problems/odd-even-jump", "relative_path_cn": "/leetcode/0900-0999/0975.Odd%20Even%20Jump/README.md", "relative_path_en": "/leetcode/0900-0999/0975.Odd%20Even%20Jump/README_EN.md", "title_cn": "\u5947\u5076\u8df3", "title_en": "Odd Even Jump", "question_title_slug": "odd-even-jump", "content_en": "<p>You are given an integer array <code>A</code>. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called <strong>odd-numbered jumps</strong>, and the (2nd, 4th, 6th, ...) jumps in the series are called <strong>even-numbered jumps</strong>. Note that the <strong>jumps</strong> are numbered, not the indices.</p>\n\n<p>You may jump forward from index <code>i</code> to index <code>j</code> (with <code>i &lt; j</code>) in the following way:</p>\n\n<ul>\n\t<li>During <strong>odd-numbered jumps</strong> (i.e., jumps 1, 3, 5, ...), you jump to the index <code>j</code> such that <code>A[i] &lt;= A[j]</code> and <code>A[j]</code> is the smallest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>During <strong>even-numbered jumps</strong> (i.e., jumps 2, 4, 6, ...), you jump to the index <code>j</code> such that <code>A[i] &gt;= A[j]</code> and <code>A[j]</code> is the largest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>It may be the case that for some index <code>i</code>, there are no legal jumps.</li>\n</ul>\n\n<p>A starting index is <strong>good</strong> if, starting from that index, you can reach the end of the array (index <code>A.length - 1</code>) by jumping some number of times (possibly 0 or more than once).</p>\n\n<p>Return <em>the number of <strong>good</strong> starting indices</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [10,13,12,14,15]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3],\nA[4] that is greater or equal to A[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [2,3,1,1,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\n\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because A[1] is the smallest value in [A[1], A[2],\nA[3], A[4]] that is greater than or equal to A[0].\n\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because A[2] is the largest value in [A[2], A[3],\nA[4]] that is less than or equal to A[1]. A[3] is also the largest value, but 2 is a smaller index, so we can\nonly jump to i = 2 and not i = 3\n\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because A[3] is the smallest value in [A[3], A[4]]\nthat is greater than or equal to A[2].\n\nWe can&#39;t jump from i = 3 to i = 4, so the starting index i = 0 is not good.\n\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can&#39;t jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> A = [5,1,3,4,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nWe can reach the end from starting indices 1, 2, and 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= A[i] &lt; 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u4f60\u53ef\u4ee5\u4ece\u67d0\u4e00\u8d77\u59cb\u7d22\u5f15\u51fa\u53d1\uff0c\u8df3\u8dc3\u4e00\u5b9a\u6b21\u6570\u3002\u5728\u4f60\u8df3\u8dc3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c 1\u30013\u30015... \u6b21\u8df3\u8dc3\u79f0\u4e3a\u5947\u6570\u8df3\u8dc3\uff0c\u800c\u7b2c 2\u30014\u30016... \u6b21\u8df3\u8dc3\u79f0\u4e3a\u5076\u6570\u8df3\u8dc3\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u65b9\u5f0f\u4ece\u7d22\u5f15 <code>i</code>&nbsp;\u5411\u540e\u8df3\u8f6c\u5230\u7d22\u5f15 <code>j</code>\uff08\u5176\u4e2d <code>i &lt; j</code>\uff09\uff1a</p>\n\n<ul>\n\t<li>\u5728\u8fdb\u884c\u5947\u6570\u8df3\u8dc3\u65f6\uff08\u5982\uff0c\u7b2c&nbsp;1\uff0c3\uff0c5... \u6b21\u8df3\u8dc3\uff09\uff0c\u4f60\u5c06\u4f1a\u8df3\u5230\u7d22\u5f15 <code>j</code>\uff0c\u4f7f\u5f97 <code>A[i] &lt;=&nbsp;A[j]</code>\uff0c<code>A[j]</code> \u662f\u53ef\u80fd\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2a\u8fd9\u6837\u7684\u7d22\u5f15 <code>j</code>\uff0c\u4f60\u53ea\u80fd\u8df3\u5230\u6ee1\u8db3\u8981\u6c42\u7684<strong>\u6700\u5c0f</strong>\u7d22\u5f15 <code>j</code> \u4e0a\u3002</li>\n\t<li>\u5728\u8fdb\u884c\u5076\u6570\u8df3\u8dc3\u65f6\uff08\u5982\uff0c\u7b2c&nbsp;2\uff0c4\uff0c6... \u6b21\u8df3\u8dc3\uff09\uff0c\u4f60\u5c06\u4f1a\u8df3\u5230\u7d22\u5f15&nbsp;<code>j</code>\uff0c\u4f7f\u5f97 <code>A[i] &gt;= A[j]</code>\uff0c<code>A[j]</code> \u662f\u53ef\u80fd\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2a\u8fd9\u6837\u7684\u7d22\u5f15 <code>j</code>\uff0c\u4f60\u53ea\u80fd\u8df3\u5230\u6ee1\u8db3\u8981\u6c42\u7684<strong>\u6700\u5c0f</strong>\u7d22\u5f15 <code>j</code>&nbsp;\u4e0a\u3002</li>\n\t<li>\uff08\u5bf9\u4e8e\u67d0\u4e9b\u7d22\u5f15 <code>i</code>\uff0c\u53ef\u80fd\u65e0\u6cd5\u8fdb\u884c\u5408\u4e4e\u8981\u6c42\u7684\u8df3\u8dc3\u3002\uff09</li>\n</ul>\n\n<p>\u5982\u679c\u4ece\u67d0\u4e00\u7d22\u5f15\u5f00\u59cb\u8df3\u8dc3\u4e00\u5b9a\u6b21\u6570\uff08\u53ef\u80fd\u662f 0 \u6b21\u6216\u591a\u6b21\uff09\uff0c\u5c31\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u672b\u5c3e\uff08\u7d22\u5f15 <code>A.length - 1</code>\uff09\uff0c\u90a3\u4e48\u8be5\u7d22\u5f15\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u662f\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u3002</p>\n\n<p>\u8fd4\u56de\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[10,13,12,14,15]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 0 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 2\uff0c\uff08\u56e0\u4e3a A[2] \u662f A[1]\uff0cA[2]\uff0cA[3]\uff0cA[4] \u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[0] \u7684\u6700\u5c0f\u503c\uff09\uff0c\u7136\u540e\u6211\u4eec\u5c31\u65e0\u6cd5\u7ee7\u7eed\u8df3\u4e0b\u53bb\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 1 \u548c i = 2 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 3\uff0c\u7136\u540e\u6211\u4eec\u5c31\u65e0\u6cd5\u7ee7\u7eed\u8df3\u4e0b\u53bb\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 3 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 4\uff0c\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 4 \u51fa\u53d1\uff0c\u6211\u4eec\u5df2\u7ecf\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u603b\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 2 \u4e2a\u4e0d\u540c\u7684\u8d77\u59cb\u7d22\u5f15\uff08i = 3, i = 4\uff09\u51fa\u53d1\uff0c\u901a\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684\u8df3\u8dc3\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,3,1,1,4]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u8d77\u59cb\u7d22\u5f15 i=0 \u51fa\u53d1\uff0c\u6211\u4eec\u4f9d\u6b21\u53ef\u4ee5\u8df3\u5230 i = 1\uff0ci = 2\uff0ci = 3\uff1a\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e00\u6b21\u8df3\u8dc3\uff08\u5947\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u5148\u8df3\u5230 i = 1\uff0c\u56e0\u4e3a A[1] \u662f\uff08A[1]\uff0cA[2]\uff0cA[3]\uff0cA[4]\uff09\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[0] \u7684\u6700\u5c0f\u503c\u3002\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e8c\u6b21\u8df3\u8dc3\uff08\u5076\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u4ece i = 1 \u8df3\u5230 i = 2\uff0c\u56e0\u4e3a A[2] \u662f\uff08A[2]\uff0cA[3]\uff0cA[4]\uff09\u4e2d\u5c0f\u4e8e\u6216\u7b49\u4e8e A[1] \u7684\u6700\u5927\u503c\u3002A[3] \u4e5f\u662f\u6700\u5927\u7684\u503c\uff0c\u4f46 2 \u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8df3\u5230 i = 2\uff0c\u800c\u4e0d\u80fd\u8df3\u5230 i = 3\u3002\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e09\u6b21\u8df3\u8dc3\uff08\u5947\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u4ece i = 2 \u8df3\u5230 i = 3\uff0c\u56e0\u4e3a A[3] \u662f\uff08A[3]\uff0cA[4]\uff09\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[2] \u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u4e0d\u80fd\u4ece i = 3 \u8df3\u5230 i = 4\uff0c\u6240\u4ee5\u8d77\u59cb\u7d22\u5f15 i = 0 \u4e0d\u662f\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u3002\n\n\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\uff1a\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 1 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 2 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 3\uff0c\u7136\u540e\u6211\u4eec\u5c31\u4e0d\u80fd\u518d\u8df3\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 3 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 4 \u51fa\u53d1\uff0c\u6211\u4eec\u5df2\u7ecf\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u603b\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 3 \u4e2a\u4e0d\u540c\u7684\u8d77\u59cb\u7d22\u5f15\uff08i = 1, i = 3, i = 4\uff09\u51fa\u53d1\uff0c\u901a\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684\u8df3\u8dc3\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,1,3,4,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u53ef\u4ee5\u4ece\u8d77\u59cb\u7d22\u5f15 1\uff0c2\uff0c4 \u51fa\u53d1\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 100000</code></li>\n</ol>\n", "tags_en": ["Stack", "Dynamic Programming", "Ordered Map"], "tags_cn": ["\u6808", "\u52a8\u6001\u89c4\u5212", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int oddEvenJumps(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int oddEvenJumps(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def oddEvenJumps(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def oddEvenJumps(self, A: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint oddEvenJumps(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int OddEvenJumps(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar oddEvenJumps = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef odd_even_jumps(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func oddEvenJumps(_ A: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func oddEvenJumps(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def oddEvenJumps(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun oddEvenJumps(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn odd_even_jumps(a: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function oddEvenJumps($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function oddEvenJumps(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1018", "frontend_question_id": "0976", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-perimeter-triangle", "url_en": "https://leetcode.com/problems/largest-perimeter-triangle", "relative_path_cn": "/leetcode/0900-0999/0976.Largest%20Perimeter%20Triangle/README.md", "relative_path_en": "/leetcode/0900-0999/0976.Largest%20Perimeter%20Triangle/README_EN.md", "title_cn": "\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f", "title_en": "Largest Perimeter Triangle", "question_title_slug": "largest-perimeter-triangle", "content_en": "<p>Given an array <code>A</code> of positive lengths, return the largest perimeter of a triangle with <strong>non-zero area</strong>, formed from 3 of these lengths.</p>\r\n\r\n<p>If it is impossible to form any&nbsp;triangle of non-zero area, return <code>0</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[3,2,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,6,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">8</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u7531\u4e00\u4e9b\u6b63\u6570\uff08\u4ee3\u8868\u957f\u5ea6\uff09\u7ec4\u6210\u7684\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u7531\u5176\u4e2d\u4e09\u4e2a\u957f\u5ea6\u7ec4\u6210\u7684\u3001<strong>\u9762\u79ef\u4e0d\u4e3a\u96f6</strong>\u7684\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u80fd\u5f62\u6210\u4efb\u4f55\u9762\u79ef\u4e0d\u4e3a\u96f6\u7684\u4e09\u89d2\u5f62\uff0c\u8fd4\u56de&nbsp;<code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,6,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\n</ol>\n", "tags_en": ["Sort", "Math"], "tags_cn": ["\u6392\u5e8f", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestPerimeter(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestPerimeter(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestPerimeter(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestPerimeter(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint largestPerimeter(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestPerimeter(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar largestPerimeter = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef largest_perimeter(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestPerimeter(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestPerimeter(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestPerimeter(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestPerimeter(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_perimeter(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function largestPerimeter($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestPerimeter(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1019", "frontend_question_id": "0977", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/squares-of-a-sorted-array", "url_en": "https://leetcode.com/problems/squares-of-a-sorted-array", "relative_path_cn": "/leetcode/0900-0999/0977.Squares%20of%20a%20Sorted%20Array/README.md", "relative_path_en": "/leetcode/0900-0999/0977.Squares%20of%20a%20Sorted%20Array/README_EN.md", "title_cn": "\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9", "title_en": "Squares of a Sorted Array", "question_title_slug": "squares-of-a-sorted-array", "content_en": "<p>Given an integer array <code>nums</code>&nbsp;sorted in <strong>non-decreasing</strong> order,&nbsp;return <em>an array of <strong>the squares of each number</strong>&nbsp;sorted in non-decreasing order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-4,-1,0,3,10]\n<strong>Output:</strong> [0,1,9,16,100]\n<strong>Explanation:</strong> After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-7,-3,2,3,11]\n<strong>Output:</strong> [4,9,9,49,121]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-4,-1,0,3,10]\n<strong>\u8f93\u51fa\uff1a</strong>[0,1,9,16,100]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-7,-3,2,3,11]\n<strong>\u8f93\u51fa\uff1a</strong>[4,9,9,49,121]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>A</code>&nbsp;\u5df2\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002</li>\n</ol>\n", "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sortedSquares(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sortedSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortedSquares(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SortedSquares(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef sorted_squares(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sortedSquares(_ nums: [Int]) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sortedSquares(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sortedSquares(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sortedSquares(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sorted_squares(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortedSquares($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sortedSquares(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1020", "frontend_question_id": "0978", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-turbulent-subarray", "url_en": "https://leetcode.com/problems/longest-turbulent-subarray", "relative_path_cn": "/leetcode/0900-0999/0978.Longest%20Turbulent%20Subarray/README.md", "relative_path_en": "/leetcode/0900-0999/0978.Longest%20Turbulent%20Subarray/README_EN.md", "title_cn": "\u6700\u957f\u6e4d\u6d41\u5b50\u6570\u7ec4", "title_en": "Longest Turbulent Subarray", "question_title_slug": "longest-turbulent-subarray", "content_en": "<p>Given an integer array <code>arr</code>, return <em>the length of a maximum size turbulent subarray of</em> <code>arr</code>.</p>\n\n<p>A subarray is <strong>turbulent</strong> if the comparison sign flips between each adjacent pair of elements in the subarray.</p>\n\n<p>More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code> of <code>arr</code> is said to be turbulent if and only if:</p>\n\n<ul>\n\t<li>For <code>i &lt;= k &lt; j</code>:\n\n\t<ul>\n\t\t<li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd, and</li>\n\t\t<li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.</li>\n\t</ul>\n\t</li>\n\t<li>Or, for <code>i &lt;= k &lt; j</code>:\n\t<ul>\n\t\t<li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even, and</li>\n\t\t<li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [9,4,2,10,7,8,8,1,9]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [4,8,12,16]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [100]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u5f53 <code>A</code>&nbsp;\u7684\u5b50\u6570\u7ec4&nbsp;<code>A[i], A[i+1], ..., A[j]</code>&nbsp;\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u65f6\uff0c\u6211\u4eec\u79f0\u5176\u4e3a<em>\u6e4d\u6d41\u5b50\u6570\u7ec4</em>\uff1a</p>\n\n<ul>\n\t<li>\u82e5&nbsp;<code>i &lt;= k &lt; j</code>\uff0c\u5f53 <code>k</code>&nbsp;\u4e3a\u5947\u6570\u65f6\uff0c&nbsp;<code>A[k] &gt; A[k+1]</code>\uff0c\u4e14\u5f53 <code>k</code> \u4e3a\u5076\u6570\u65f6\uff0c<code>A[k] &lt; A[k+1]</code>\uff1b</li>\n\t<li><strong>\u6216 </strong>\u82e5&nbsp;<code>i &lt;= k &lt; j</code>\uff0c\u5f53 <code>k</code> \u4e3a\u5076\u6570\u65f6\uff0c<code>A[k] &gt; A[k+1]</code>&nbsp;\uff0c\u4e14\u5f53 <code>k</code>&nbsp;\u4e3a\u5947\u6570\u65f6\uff0c&nbsp;<code>A[k] &lt; A[k+1]</code>\u3002</li>\n</ul>\n\n<p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6bd4\u8f83\u7b26\u53f7\u5728\u5b50\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u76f8\u90bb\u5143\u7d20\u5bf9\u4e4b\u95f4\u7ffb\u8f6c\uff0c\u5219\u8be5\u5b50\u6570\u7ec4\u662f\u6e4d\u6d41\u5b50\u6570\u7ec4\u3002</p>\n\n<p>\u8fd4\u56de <code>A</code> \u7684\u6700\u5927\u6e4d\u6d41\u5b50\u6570\u7ec4\u7684<strong>\u957f\u5ea6</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[9,4,2,10,7,8,8,1,9]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>(A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,8,12,16]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[100]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Array", "Dynamic Programming", "Sliding Window"], "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxTurbulenceSize(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxTurbulenceSize(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxTurbulenceSize(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxTurbulenceSize(self, arr: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxTurbulenceSize(int* arr, int arrSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxTurbulenceSize(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxTurbulenceSize = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef max_turbulence_size(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxTurbulenceSize(_ arr: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxTurbulenceSize(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxTurbulenceSize(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxTurbulenceSize(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_turbulence_size(arr: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maxTurbulenceSize($arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxTurbulenceSize(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1021", "frontend_question_id": "0979", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/distribute-coins-in-binary-tree", "url_en": "https://leetcode.com/problems/distribute-coins-in-binary-tree", "relative_path_cn": "/leetcode/0900-0999/0979.Distribute%20Coins%20in%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0900-0999/0979.Distribute%20Coins%20in%20Binary%20Tree/README_EN.md", "title_cn": "\u5728\u4e8c\u53c9\u6811\u4e2d\u5206\u914d\u786c\u5e01", "title_en": "Distribute Coins in Binary Tree", "question_title_slug": "distribute-coins-in-binary-tree", "content_en": "<p>Given the <code>root</code> of a binary tree with <code>N</code> nodes, each <code>node</code>&nbsp;in the tree has <code>node.val</code> coins, and there are <code>N</code> coins total.</p>\r\n\r\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another.&nbsp; (The move may be from parent to child, or from child to parent.)</p>\r\n\r\n<p>Return the number of moves required to make every node have exactly one coin.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree1.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>From the root of the tree, we move one coin to its left child, and one coin to its right child.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree2.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,3,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree3.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree4.png\" style=\"width: 155px; height: 156px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,0,0,null,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1&lt;= N &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= node.val &lt;= N</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 <code>N</code> \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 <code>root</code>\uff0c\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u90fd\u5bf9\u5e94\u6709 <code>node.val</code> \u679a\u786c\u5e01\uff0c\u5e76\u4e14\u603b\u5171\u6709 <code>N</code> \u679a\u786c\u5e01\u3002</p>\n\n<p>\u5728\u4e00\u6b21\u79fb\u52a8\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u76f8\u90bb\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u5c06\u4e00\u679a\u786c\u5e01\u4ece\u5176\u4e2d\u4e00\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u7ed3\u70b9\u3002(\u79fb\u52a8\u53ef\u4ee5\u662f\u4ece\u7236\u7ed3\u70b9\u5230\u5b50\u7ed3\u70b9\uff0c\u6216\u8005\u4ece\u5b50\u7ed3\u70b9\u79fb\u52a8\u5230\u7236\u7ed3\u70b9\u3002)\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u53ea\u6709\u4e00\u679a\u786c\u5e01\u6240\u9700\u7684\u79fb\u52a8\u6b21\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree1.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4e00\u679a\u786c\u5e01\u79fb\u5230\u5b83\u7684\u5de6\u5b50\u7ed3\u70b9\u4e0a\uff0c\u4e00\u679a\u786c\u5e01\u79fb\u5230\u5b83\u7684\u53f3\u5b50\u7ed3\u70b9\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree2.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,3,0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4e24\u679a\u786c\u5e01\u79fb\u5230\u6839\u7ed3\u70b9\u4e0a [\u79fb\u52a8\u4e24\u6b21]\u3002\u7136\u540e\uff0c\u6211\u4eec\u628a\u4e00\u679a\u786c\u5e01\u4ece\u6839\u7ed3\u70b9\u79fb\u5230\u53f3\u5b50\u7ed3\u70b9\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree3.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,2]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree4.png\" style=\"height: 156px; width: 155px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,0,null,3]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1&lt;= N &lt;= 100</code></li>\n\t<li><code>0 &lt;= node.val &lt;= N</code></li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int distributeCoins(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int distributeCoins(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def distributeCoins(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def distributeCoins(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint distributeCoins(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int DistributeCoins(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar distributeCoins = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef distribute_coins(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func distributeCoins(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc distributeCoins(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def distributeCoins(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun distributeCoins(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn distribute_coins(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function distributeCoins($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction distributeCoins(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1022", "frontend_question_id": "0980", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/unique-paths-iii", "url_en": "https://leetcode.com/problems/unique-paths-iii", "relative_path_cn": "/leetcode/0900-0999/0980.Unique%20Paths%20III/README.md", "relative_path_en": "/leetcode/0900-0999/0980.Unique%20Paths%20III/README_EN.md", "title_cn": "\u4e0d\u540c\u8def\u5f84 III", "title_en": "Unique Paths III", "question_title_slug": "unique-paths-iii", "content_en": "<p>On a 2-dimensional&nbsp;<code>grid</code>, there are 4 types of squares:</p>\r\n\r\n<ul>\r\n\t<li><code>1</code> represents the starting square.&nbsp; There is exactly one starting square.</li>\r\n\t<li><code>2</code> represents the ending square.&nbsp; There is exactly one ending square.</li>\r\n\t<li><code>0</code> represents empty squares we can walk over.</li>\r\n\t<li><code>-1</code> represents obstacles that we cannot walk over.</li>\r\n</ul>\r\n\r\n<p>Return the number of 4-directional walks&nbsp;from the starting square to the ending square, that <strong>walk over every non-obstacle square&nbsp;exactly once</strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>We have the following two paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\r\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,0,0,0],[0,0,0,0],[0,0,0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>We have the following four paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\r\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\r\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\r\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,1],[2,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>\r\nThere is no path that walks over every empty square exactly once.\r\nNote that the starting and ending square can be anywhere in the grid.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\r\n</ol>", "content_cn": "<p>\u5728\u4e8c\u7ef4\u7f51\u683c <code>grid</code> \u4e0a\uff0c\u6709 4 \u79cd\u7c7b\u578b\u7684\u65b9\u683c\uff1a</p>\n\n<ul>\n\t<li><code>1</code> \u8868\u793a\u8d77\u59cb\u65b9\u683c\u3002\u4e14\u53ea\u6709\u4e00\u4e2a\u8d77\u59cb\u65b9\u683c\u3002</li>\n\t<li><code>2</code> \u8868\u793a\u7ed3\u675f\u65b9\u683c\uff0c\u4e14\u53ea\u6709\u4e00\u4e2a\u7ed3\u675f\u65b9\u683c\u3002</li>\n\t<li><code>0</code> \u8868\u793a\u6211\u4eec\u53ef\u4ee5\u8d70\u8fc7\u7684\u7a7a\u65b9\u683c\u3002</li>\n\t<li><code>-1</code> \u8868\u793a\u6211\u4eec\u65e0\u6cd5\u8de8\u8d8a\u7684\u969c\u788d\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u5728\u56db\u4e2a\u65b9\u5411\uff08\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\uff09\u4e0a\u884c\u8d70\u65f6\uff0c\u4ece\u8d77\u59cb\u65b9\u683c\u5230\u7ed3\u675f\u65b9\u683c\u7684\u4e0d\u540c\u8def\u5f84\u7684\u6570\u76ee<strong>\u3002</strong></p>\n\n<p><strong>\u6bcf\u4e00\u4e2a\u65e0\u969c\u788d\u65b9\u683c\u90fd\u8981\u901a\u8fc7\u4e00\u6b21\uff0c\u4f46\u662f\u4e00\u6761\u8def\u5f84\u4e2d\u4e0d\u80fd\u91cd\u590d\u901a\u8fc7\u540c\u4e00\u4e2a\u65b9\u683c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4ee5\u4e0b\u4e24\u6761\u8def\u5f84\uff1a\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4ee5\u4e0b\u56db\u6761\u8def\u5f84\uff1a \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[2,0]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6ca1\u6709\u4e00\u6761\u8def\u80fd\u5b8c\u5168\u7a7f\u8fc7\u6bcf\u4e00\u4e2a\u7a7a\u7684\u65b9\u683c\u4e00\u6b21\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8d77\u59cb\u548c\u7ed3\u675f\u65b9\u683c\u53ef\u4ee5\u4f4d\u4e8e\u7f51\u683c\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Backtracking"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int uniquePathsIII(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int uniquePathsIII(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def uniquePathsIII(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint uniquePathsIII(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int UniquePathsIII(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar uniquePathsIII = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef unique_paths_iii(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func uniquePathsIII(_ grid: [[Int]]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func uniquePathsIII(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def uniquePathsIII(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun uniquePathsIII(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn unique_paths_iii(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function uniquePathsIII($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function uniquePathsIII(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1023", "frontend_question_id": "0981", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/time-based-key-value-store", "url_en": "https://leetcode.com/problems/time-based-key-value-store", "relative_path_cn": "/leetcode/0900-0999/0981.Time%20Based%20Key-Value%20Store/README.md", "relative_path_en": "/leetcode/0900-0999/0981.Time%20Based%20Key-Value%20Store/README_EN.md", "title_cn": "\u57fa\u4e8e\u65f6\u95f4\u7684\u952e\u503c\u5b58\u50a8", "title_en": "Time Based Key-Value Store", "question_title_slug": "time-based-key-value-store", "content_en": "<p>Create a timebased key-value store class&nbsp;<code>TimeMap</code>, that supports two operations.</p>\r\n\r\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Stores the <code>key</code> and <code>value</code>, along with the given <code>timestamp</code>.</li>\r\n</ul>\r\n\r\n<p>2. <code>get(string key, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Returns a value such that <code>set(key, value, timestamp_prev)</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>.</li>\r\n\t<li>If there are multiple such values, it returns the one with the largest <code>timestamp_prev</code>.</li>\r\n\t<li>If there are no values, it returns the empty string (<code>&quot;&quot;</code>).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">&nbsp; \r\nTimeMap kv; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1 &nbsp; \r\nkv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \r\nkv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot; &nbsp; \r\n</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All key/value strings are lowercase.</li>\r\n\t<li>All key/value strings have&nbsp;length in the range&nbsp;<code>[1, 100]</code></li>\r\n\t<li>The <code>timestamps</code> for all <code>TimeMap.set</code> operations are strictly increasing.</li>\r\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\r\n\t<li><code>TimeMap.set</code> and <code>TimeMap.get</code>&nbsp;functions will be called a total of <code>120000</code> times (combined) per test case.</li>\r\n</ol>\r\n", "content_cn": "<p>\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u65f6\u95f4\u7684\u952e\u503c\u5b58\u50a8\u7c7b&nbsp;<code>TimeMap</code>\uff0c\u5b83\u652f\u6301\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\uff1a</p>\n\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\n\n<ul>\n\t<li>\u5b58\u50a8\u952e&nbsp;<code>key</code>\u3001\u503c&nbsp;<code>value</code>\uff0c\u4ee5\u53ca\u7ed9\u5b9a\u7684\u65f6\u95f4\u6233&nbsp;<code>timestamp</code>\u3002</li>\n</ul>\n\n<p>2. <code>get(string key, int timestamp)</code></p>\n\n<ul>\n\t<li>\u8fd4\u56de\u5148\u524d\u8c03\u7528&nbsp;<code>set(key, value, timestamp_prev)</code>&nbsp;\u6240\u5b58\u50a8\u7684\u503c\uff0c\u5176\u4e2d&nbsp;<code>timestamp_prev &lt;= timestamp</code>\u3002</li>\n\t<li>\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u503c\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94\u6700\u5927\u7684&nbsp;&nbsp;<code>timestamp_prev</code>&nbsp;\u7684\u90a3\u4e2a\u503c\u3002</li>\n\t<li>\u5982\u679c\u6ca1\u6709\u503c\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08<code>&quot;&quot;</code>\uff09\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]\n<strong>\u89e3\u91ca\uff1a</strong>&nbsp; \nTimeMap kv; &nbsp; \nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // \u5b58\u50a8\u952e &quot;foo&quot; \u548c\u503c &quot;bar&quot; \u4ee5\u53ca\u65f6\u95f4\u6233 timestamp = 1 &nbsp; \nkv.get(&quot;foo&quot;, 1);  // \u8f93\u51fa &quot;bar&quot; &nbsp; \nkv.get(&quot;foo&quot;, 3); // \u8f93\u51fa &quot;bar&quot; \u56e0\u4e3a\u5728\u65f6\u95f4\u6233 3 \u548c\u65f6\u95f4\u6233 2 \u5904\u6ca1\u6709\u5bf9\u5e94 &quot;foo&quot; \u7684\u503c\uff0c\u6240\u4ee5\u552f\u4e00\u7684\u503c\u4f4d\u4e8e\u65f6\u95f4\u6233 1 \u5904\uff08\u5373 &quot;bar&quot;\uff09 &nbsp; \nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \nkv.get(&quot;foo&quot;, 4); // \u8f93\u51fa &quot;bar2&quot; &nbsp; \nkv.get(&quot;foo&quot;, 5); // \u8f93\u51fa &quot;bar2&quot; &nbsp; \n\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u90fd\u662f\u5c0f\u5199\u7684\u3002</li>\n\t<li>\u6240\u6709\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u5728&nbsp;<code>[1, 100]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li>\u6240\u6709&nbsp;<code>TimeMap.set</code>&nbsp;\u64cd\u4f5c\u4e2d\u7684\u65f6\u95f4\u6233&nbsp;<code>timestamps</code> \u90fd\u662f\u4e25\u683c\u9012\u589e\u7684\u3002</li>\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\n\t<li><code>TimeMap.set</code> \u548c&nbsp;<code>TimeMap.get</code>&nbsp;\u51fd\u6570\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u5c06\uff08\u7ec4\u5408\uff09\u8c03\u7528\u603b\u8ba1&nbsp;<code>120000</code> \u6b21\u3002</li>\n</ol>\n", "tags_en": ["Hash Table", "Binary Search"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class TimeMap {\npublic:\n    /** Initialize your data structure here. */\n    TimeMap() {\n\n    }\n    \n    void set(string key, string value, int timestamp) {\n\n    }\n    \n    string get(string key, int timestamp) {\n\n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class TimeMap {\n\n    /** Initialize your data structure here. */\n    public TimeMap() {\n\n    }\n    \n    public void set(String key, String value, int timestamp) {\n\n    }\n    \n    public String get(String key, int timestamp) {\n\n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap obj = new TimeMap();\n * obj.set(key,value,timestamp);\n * String param_2 = obj.get(key,timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class TimeMap(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def set(self, key, value, timestamp):\n        \"\"\"\n        :type key: str\n        :type value: str\n        :type timestamp: int\n        :rtype: None\n        \"\"\"\n        \n\n    def get(self, key, timestamp):\n        \"\"\"\n        :type key: str\n        :type timestamp: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class TimeMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} TimeMap;\n\n/** Initialize your data structure here. */\n\nTimeMap* timeMapCreate() {\n    \n}\n\nvoid timeMapSet(TimeMap* obj, char * key, char * value, int timestamp) {\n  \n}\n\nchar * timeMapGet(TimeMap* obj, char * key, int timestamp) {\n  \n}\n\nvoid timeMapFree(TimeMap* obj) {\n    \n}\n\n/**\n * Your TimeMap struct will be instantiated and called as such:\n * TimeMap* obj = timeMapCreate();\n * timeMapSet(obj, key, value, timestamp);\n \n * char * param_2 = timeMapGet(obj, key, timestamp);\n \n * timeMapFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class TimeMap {\n\n    /** Initialize your data structure here. */\n    public TimeMap() {\n\n    }\n    \n    public void Set(string key, string value, int timestamp) {\n\n    }\n    \n    public string Get(string key, int timestamp) {\n\n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap obj = new TimeMap();\n * obj.Set(key,value,timestamp);\n * string param_2 = obj.Get(key,timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar TimeMap = function() {\n\n};\n\n/** \n * @param {string} key \n * @param {string} value \n * @param {number} timestamp\n * @return {void}\n */\nTimeMap.prototype.set = function(key, value, timestamp) {\n\n};\n\n/** \n * @param {string} key \n * @param {number} timestamp\n * @return {string}\n */\nTimeMap.prototype.get = function(key, timestamp) {\n\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class TimeMap\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type key: String\n    :type value: String\n    :type timestamp: Integer\n    :rtype: Void\n=end\n    def set(key, value, timestamp)\n\n    end\n\n\n=begin\n    :type key: String\n    :type timestamp: Integer\n    :rtype: String\n=end\n    def get(key, timestamp)\n\n    end\n\n\nend\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap.new()\n# obj.set(key, value, timestamp)\n# param_2 = obj.get(key, timestamp)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass TimeMap {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func set(_ key: String, _ value: String, _ timestamp: Int) {\n        \n    }\n    \n    func get(_ key: String, _ timestamp: Int) -> String {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * let obj = TimeMap()\n * obj.set(key, value, timestamp)\n * let ret_2: String = obj.get(key, timestamp)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type TimeMap struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() TimeMap {\n\n}\n\n\nfunc (this *TimeMap) Set(key string, value string, timestamp int)  {\n\n}\n\n\nfunc (this *TimeMap) Get(key string, timestamp int) string {\n\n}\n\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Set(key,value,timestamp);\n * param_2 := obj.Get(key,timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class TimeMap() {\n\n    /** Initialize your data structure here. */\n\n\n    def set(key: String, value: String, timestamp: Int) {\n\n    }\n\n    def get(key: String, timestamp: Int): String = {\n\n    }\n\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class TimeMap() {\n\n    /** Initialize your data structure here. */\n\n\n    fun set(key: String, value: String, timestamp: Int) {\n\n    }\n\n    fun get(key: String, timestamp: Int): String {\n\n    }\n\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct TimeMap {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TimeMap {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn set(&self, key: String, value: String, timestamp: i32) {\n        \n    }\n    \n    fn get(&self, key: String, timestamp: i32) -> String {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * let obj = TimeMap::new();\n * obj.set(key, value, timestamp);\n * let ret_2: String = obj.get(key, timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class TimeMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param String $value\n     * @param Integer $timestamp\n     * @return NULL\n     */\n    function set($key, $value, $timestamp) {\n        \n    }\n  \n    /**\n     * @param String $key\n     * @param Integer $timestamp\n     * @return String\n     */\n    function get($key, $timestamp) {\n        \n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * $obj = TimeMap();\n * $obj->set($key, $value, $timestamp);\n * $ret_2 = $obj->get($key, $timestamp);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class TimeMap {\n    constructor() {\n\n    }\n\n    set(key: string, value: string, timestamp: number): void {\n\n    }\n\n    get(key: string, timestamp: number): string {\n\n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "1024", "frontend_question_id": "0982", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/triples-with-bitwise-and-equal-to-zero", "url_en": "https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero", "relative_path_cn": "/leetcode/0900-0999/0982.Triples%20with%20Bitwise%20AND%20Equal%20To%20Zero/README.md", "relative_path_en": "/leetcode/0900-0999/0982.Triples%20with%20Bitwise%20AND%20Equal%20To%20Zero/README_EN.md", "title_cn": "\u6309\u4f4d\u4e0e\u4e3a\u96f6\u7684\u4e09\u5143\u7ec4", "title_en": "Triples with Bitwise AND Equal To Zero", "question_title_slug": "triples-with-bitwise-and-equal-to-zero", "content_en": "<p>Given an array of integers <code>A</code>, find the number of&nbsp;triples of indices (i, j, k)&nbsp;such that:</p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= i &lt; A.length</code></li>\r\n\t<li><code>0 &lt;= j &lt; A.length</code></li>\r\n\t<li><code>0 &lt;= k &lt; A.length</code></li>\r\n\t<li><code>A[i]&nbsp;&amp; A[j]&nbsp;&amp; A[k] == 0</code>, where <code>&amp;</code>&nbsp;represents the bitwise-AND operator.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">12</span>\r\n<strong>Explanation: </strong>We could choose the following i, j, k triples:\r\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\r\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\r\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\r\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\r\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\r\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\r\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\r\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\r\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\r\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\r\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\r\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code><font face=\"monospace\">1 &lt;= A.length &lt;= 1000</font></code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 2^16</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u627e\u51fa\u7d22\u5f15\u4e3a (i, j, k) \u7684\u4e09\u5143\u7ec4\uff0c\u4f7f\u5f97\uff1a</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; A.length</code></li>\n\t<li><code>0 &lt;= j &lt; A.length</code></li>\n\t<li><code>0 &lt;= k &lt; A.length</code></li>\n\t<li><code>A[i]&nbsp;&amp; A[j]&nbsp;&amp; A[k] == 0</code>\uff0c\u5176\u4e2d&nbsp;<code>&amp;</code>&nbsp;\u8868\u793a\u6309\u4f4d\u4e0e\uff08AND\uff09\u64cd\u4f5c\u7b26\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u9009\u51fa\u5982\u4e0b i, j, k \u4e09\u5143\u7ec4\uff1a\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 2^16</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countTriplets(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countTriplets(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countTriplets(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countTriplets(self, A: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countTriplets(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountTriplets(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar countTriplets = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef count_triplets(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countTriplets(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countTriplets(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countTriplets(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countTriplets(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_triplets(a: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function countTriplets($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countTriplets(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1025", "frontend_question_id": "0983", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-cost-for-tickets", "url_en": "https://leetcode.com/problems/minimum-cost-for-tickets", "relative_path_cn": "/leetcode/0900-0999/0983.Minimum%20Cost%20For%20Tickets/README.md", "relative_path_en": "/leetcode/0900-0999/0983.Minimum%20Cost%20For%20Tickets/README_EN.md", "title_cn": "\u6700\u4f4e\u7968\u4ef7", "title_en": "Minimum Cost For Tickets", "question_title_slug": "minimum-cost-for-tickets", "content_en": "<p>In a country popular for train travel, you&nbsp;have planned some train travelling one year in advance.&nbsp; The days of the year that you will travel is given as an array <code>days</code>.&nbsp; Each day is an integer from <code>1</code> to <code>365</code>.</p>\r\n\r\n<p>Train tickets are sold in 3 different ways:</p>\r\n\r\n<ul>\r\n\t<li>a 1-day pass is sold for <code>costs[0]</code> dollars;</li>\r\n\t<li>a 7-day pass is sold for <code>costs[1]</code> dollars;</li>\r\n\t<li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li>\r\n</ul>\r\n\r\n<p>The passes allow that many days of consecutive travel.&nbsp; For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.</p>\r\n\r\n<p>Return the minimum number of dollars you need to travel every day in the given list of <code>days</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-1-1\">[1,4,6,7,8,20]</span>, costs = <span id=\"example-input-1-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\r\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\r\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\r\nIn total you spent $11 and covered all the days of your travel.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-2-1\">[1,2,3,4,5,6,7,8,9,10,30,31]</span>, costs = <span id=\"example-input-2-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\r\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\r\nIn total you spent $17 and covered all the days of your travel.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\r\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\r\n\t<li><code>days</code> is in strictly increasing order.</li>\r\n\t<li><code>costs.length == 3</code></li>\r\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u706b\u8f66\u65c5\u884c\u5f88\u53d7\u6b22\u8fce\u7684\u56fd\u5ea6\uff0c\u4f60\u63d0\u524d\u4e00\u5e74\u8ba1\u5212\u4e86\u4e00\u4e9b\u706b\u8f66\u65c5\u884c\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\u91cc\uff0c\u4f60\u8981\u65c5\u884c\u7684\u65e5\u5b50\u5c06\u4ee5\u4e00\u4e2a\u540d\u4e3a&nbsp;<code>days</code>&nbsp;\u7684\u6570\u7ec4\u7ed9\u51fa\u3002\u6bcf\u4e00\u9879\u662f\u4e00\u4e2a\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>365</code>&nbsp;\u7684\u6574\u6570\u3002</p>\n\n<p>\u706b\u8f66\u7968\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u9500\u552e\u65b9\u5f0f\uff1a</p>\n\n<ul>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e00\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[0]</code> \u7f8e\u5143\uff1b</li>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e03\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[1]</code> \u7f8e\u5143\uff1b</li>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e09\u5341\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[2]</code> \u7f8e\u5143\u3002</li>\n</ul>\n\n<p>\u901a\u884c\u8bc1\u5141\u8bb8\u6570\u5929\u65e0\u9650\u5236\u7684\u65c5\u884c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5728\u7b2c 2 \u5929\u83b7\u5f97\u4e00\u5f20\u4e3a\u671f 7 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fde\u7740\u65c5\u884c 7 \u5929\uff1a\u7b2c 2 \u5929\u3001\u7b2c 3 \u5929\u3001\u7b2c 4 \u5929\u3001\u7b2c 5 \u5929\u3001\u7b2c 6 \u5929\u3001\u7b2c 7 \u5929\u548c\u7b2c 8 \u5929\u3002</p>\n\n<p>\u8fd4\u56de\u4f60\u60f3\u8981\u5b8c\u6210\u5728\u7ed9\u5b9a\u7684\u5217\u8868&nbsp;<code>days</code>&nbsp;\u4e2d\u5217\u51fa\u7684\u6bcf\u4e00\u5929\u7684\u65c5\u884c\u6240\u9700\u8981\u7684\u6700\u4f4e\u6d88\u8d39\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>days = [1,4,6,7,8,20], costs = [2,7,15]\n<strong>\u8f93\u51fa\uff1a</strong>11\n<strong>\u89e3\u91ca\uff1a </strong>\n\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u8d2d\u4e70\u901a\u884c\u8bc1\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b8c\u6210\u4f60\u7684\u65c5\u884c\u8ba1\u5212\uff1a\n\u5728\u7b2c 1 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 1 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 3 \u5929\uff0c\u4f60\u82b1\u4e86 costs[1] = $7 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 7 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 3, 4, ..., 9 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 20 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 20 \u5929\u751f\u6548\u3002\n\u4f60\u603b\u5171\u82b1\u4e86 $11\uff0c\u5e76\u5b8c\u6210\u4e86\u4f60\u8ba1\u5212\u7684\u6bcf\u4e00\u5929\u65c5\u884c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a\n</strong>\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u8d2d\u4e70\u901a\u884c\u8bc1\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b8c\u6210\u4f60\u7684\u65c5\u884c\u8ba1\u5212\uff1a \n\u5728\u7b2c 1 \u5929\uff0c\u4f60\u82b1\u4e86 costs[2] = $15 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 30 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 1, 2, ..., 30 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 31 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 31 \u5929\u751f\u6548\u3002 \n\u4f60\u603b\u5171\u82b1\u4e86 $17\uff0c\u5e76\u5b8c\u6210\u4e86\u4f60\u8ba1\u5212\u7684\u6bcf\u4e00\u5929\u65c5\u884c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\n\t<li><code>days</code>&nbsp;\u6309\u987a\u5e8f\u4e25\u683c\u9012\u589e</li>\n\t<li><code>costs.length == 3</code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int mincostTickets(int[] days, int[] costs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def mincostTickets(self, days, costs):\n        \"\"\"\n        :type days: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint mincostTickets(int* days, int daysSize, int* costs, int costsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MincostTickets(int[] days, int[] costs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} days\n * @param {number[]} costs\n * @return {number}\n */\nvar mincostTickets = function(days, costs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} days\n# @param {Integer[]} costs\n# @return {Integer}\ndef mincost_tickets(days, costs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func mincostTickets(_ days: [Int], _ costs: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func mincostTickets(days []int, costs []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def mincostTickets(days: Array[Int], costs: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun mincostTickets(days: IntArray, costs: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn mincost_tickets(days: Vec<i32>, costs: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $days\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function mincostTickets($days, $costs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function mincostTickets(days: number[], costs: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1026", "frontend_question_id": "0984", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/string-without-aaa-or-bbb", "url_en": "https://leetcode.com/problems/string-without-aaa-or-bbb", "relative_path_cn": "/leetcode/0900-0999/0984.String%20Without%20AAA%20or%20BBB/README.md", "relative_path_en": "/leetcode/0900-0999/0984.String%20Without%20AAA%20or%20BBB/README_EN.md", "title_cn": "\u4e0d\u542b AAA \u6216 BBB \u7684\u5b57\u7b26\u4e32", "title_en": "String Without AAA or BBB", "question_title_slug": "string-without-aaa-or-bbb", "content_en": "<p>Given two integers <code>a</code> and <code>b</code>, return <strong>any</strong> string <code>s</code> such that:</p>\n\n<ul>\n\t<li><code>s</code> has length <code>a + b</code> and contains exactly <code>a</code> <code>&#39;a&#39;</code> letters, and exactly <code>b</code> <code>&#39;b&#39;</code> letters,</li>\n\t<li>The substring <code>&#39;aaa&#39;</code> does not occur in <code>s</code>, and</li>\n\t<li>The substring <code>&#39;bbb&#39;</code> does not occur in <code>s</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = 2\n<strong>Output:</strong> &quot;abb&quot;\n<strong>Explanation:</strong> &quot;abb&quot;, &quot;bab&quot; and &quot;bba&quot; are all correct answers.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 4, b = 1\n<strong>Output:</strong> &quot;aabaa&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= a, b &lt;= 100</code></li>\n\t<li>It is guaranteed such an <code>s</code> exists for the given <code>a</code> and <code>b</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\uff0c\u8fd4\u56de<strong>\u4efb\u610f</strong>\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u8981\u6c42\u6ee1\u8db3\uff1a</p>\n\n<ul>\n\t<li><code>S</code> \u7684\u957f\u5ea6\u4e3a&nbsp;<code>A + B</code>\uff0c\u4e14\u6b63\u597d\u5305\u542b&nbsp;<code>A</code>&nbsp;\u4e2a <code>&#39;a&#39;</code>&nbsp;\u5b57\u6bcd\u4e0e&nbsp;<code>B</code>&nbsp;\u4e2a <code>&#39;b&#39;</code>&nbsp;\u5b57\u6bcd\uff1b</li>\n\t<li>\u5b50\u4e32&nbsp;<code>&#39;aaa&#39;</code>&nbsp;\u6ca1\u6709\u51fa\u73b0\u5728&nbsp;<code>S</code>&nbsp;\u4e2d\uff1b</li>\n\t<li>\u5b50\u4e32&nbsp;<code>&#39;bbb&#39;</code> \u6ca1\u6709\u51fa\u73b0\u5728&nbsp;<code>S</code>&nbsp;\u4e2d\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = 1, B = 2\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abb&quot;\n<strong>\u89e3\u91ca\uff1a</strong>&quot;abb&quot;, &quot;bab&quot; \u548c &quot;bba&quot; \u90fd\u662f\u6b63\u786e\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = 4, B = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;aabaa&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A &lt;= 100</code></li>\n\t<li><code>0 &lt;= B &lt;= 100</code></li>\n\t<li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684 <code>A</code> \u548c <code>B</code>\uff0c\u4fdd\u8bc1\u5b58\u5728\u6ee1\u8db3\u8981\u6c42\u7684 <code>S</code>\u3002</li>\n</ol>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string strWithout3a3b(int a, int b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String strWithout3a3b(int a, int b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def strWithout3a3b(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def strWithout3a3b(self, a: int, b: int) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * strWithout3a3b(int a, int b){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string StrWithout3a3b(int a, int b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @return {string}\n */\nvar strWithout3a3b = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @return {String}\ndef str_without3a3b(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func strWithout3a3b(_ a: Int, _ b: Int) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func strWithout3a3b(a int, b int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def strWithout3a3b(a: Int, b: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun strWithout3a3b(a: Int, b: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn str_without3a3b(a: i32, b: i32) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return String\n     */\n    function strWithout3a3b($a, $b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function strWithout3a3b(a: number, b: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1027", "frontend_question_id": "0985", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries", "url_en": "https://leetcode.com/problems/sum-of-even-numbers-after-queries", "relative_path_cn": "/leetcode/0900-0999/0985.Sum%20of%20Even%20Numbers%20After%20Queries/README.md", "relative_path_en": "/leetcode/0900-0999/0985.Sum%20of%20Even%20Numbers%20After%20Queries/README_EN.md", "title_cn": "\u67e5\u8be2\u540e\u7684\u5076\u6570\u548c", "title_en": "Sum of Even Numbers After Queries", "question_title_slug": "sum-of-even-numbers-after-queries", "content_en": "<p>We have an array <code>A</code> of integers, and an array <code>queries</code>&nbsp;of queries.</p>\r\n\r\n<p>For the <code>i</code>-th&nbsp;query <code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>, we add <font face=\"monospace\">val</font>&nbsp;to <code>A[index]</code>.&nbsp; Then, the answer to the <code>i</code>-th query is the sum of the even values of <code>A</code>.</p>\r\n\r\n<p><em>(Here, the given <code>index = queries[i][1]</code> is a 0-based index, and each query permanently modifies the array <code>A</code>.)</em></p>\r\n\r\n<p>Return the answer to all queries.&nbsp; Your <code>answer</code> array should have&nbsp;<code>answer[i]</code>&nbsp;as&nbsp;the answer to the <code>i</code>-th query.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,3,4]</span>, queries = <span id=\"example-input-1-2\">[[1,0],[-3,1],[-4,0],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[8,6,2,4]</span>\r\n<strong>Explanation: </strong>\r\nAt the beginning, the array is [1,2,3,4].\r\nAfter adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\r\nAfter adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\r\nAfter adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\r\nAfter adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= queries.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c\u4e00\u4e2a\u67e5\u8be2\u6570\u7ec4&nbsp;<code>queries</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\uff0c\u6709&nbsp;<code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>\uff0c\u6211\u4eec\u4f1a\u628a&nbsp;<code>val</code>&nbsp;\u52a0\u5230&nbsp;<code>A[index]</code>&nbsp;\u4e0a\u3002\u7136\u540e\uff0c\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u662f <code>A</code> \u4e2d\u5076\u6570\u503c\u7684\u548c\u3002</p>\n\n<p><em>\uff08\u6b64\u5904\u7ed9\u5b9a\u7684&nbsp;<code>index = queries[i][1]</code>&nbsp;\u662f\u4ece 0 \u5f00\u59cb\u7684\u7d22\u5f15\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u4f1a\u6c38\u4e45\u4fee\u6539\u6570\u7ec4&nbsp;<code>A</code>\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de\u6240\u6709\u67e5\u8be2\u7684\u7b54\u6848\u3002\u4f60\u7684\u7b54\u6848\u5e94\u5f53\u4ee5\u6570\u7ec4&nbsp;<code>answer</code>&nbsp;\u7ed9\u51fa\uff0c<code>answer[i]</code>&nbsp;\u4e3a\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>[8,6,2,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f00\u59cb\u65f6\uff0c\u6570\u7ec4\u4e3a [1,2,3,4]\u3002\n\u5c06 1 \u52a0\u5230 A[0] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [2,2,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a 2 + 2 + 4 = 8\u3002\n\u5c06 -3 \u52a0\u5230 A[1] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [2,-1,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a 2 + 4 = 6\u3002\n\u5c06 -4 \u52a0\u5230 A[0] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [-2,-1,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a -2 + 4 = 2\u3002\n\u5c06 2 \u52a0\u5230 A[3] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [-2,-1,3,6]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a -2 + 6 = 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] sumEvenAfterQueries(int[] A, int[][] queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def sumEvenAfterQueries(self, A, queries):\n        \"\"\"\n        :type A: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumEvenAfterQueries(int* A, int ASize, int** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SumEvenAfterQueries(int[] A, int[][] queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar sumEvenAfterQueries = function(A, queries) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef sum_even_after_queries(a, queries)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func sumEvenAfterQueries(_ A: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func sumEvenAfterQueries(A []int, queries [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def sumEvenAfterQueries(A: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun sumEvenAfterQueries(A: IntArray, queries: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sum_even_after_queries(a: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function sumEvenAfterQueries($A, $queries) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function sumEvenAfterQueries(A: number[], queries: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1028", "frontend_question_id": "0986", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/interval-list-intersections", "url_en": "https://leetcode.com/problems/interval-list-intersections", "relative_path_cn": "/leetcode/0900-0999/0986.Interval%20List%20Intersections/README.md", "relative_path_en": "/leetcode/0900-0999/0986.Interval%20List%20Intersections/README_EN.md", "title_cn": "\u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6", "title_en": "Interval List Intersections", "question_title_slug": "interval-list-intersections", "content_en": "<p>Given two lists&nbsp;of <strong>closed</strong> intervals, each list of intervals is pairwise disjoint and in sorted order.</p>\n\n<p>Return the intersection of these two interval lists.</p>\n\n<p><em>(Formally, a closed interval <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes&nbsp;the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.&nbsp; The&nbsp;intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.&nbsp; For example, the intersection of [1, 3] and [2, 4] is [2, 3].)</em></p>\n\n<div>\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 506px; height: 140px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[[0,2],[5,10],[13,23],[24,25]]</span>, B = <span id=\"example-input-1-2\">[[1,5],[8,12],[15,24],[25,26]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\n</ol>\n</div>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u7531\u4e00\u4e9b<strong> \u95ed\u533a\u95f4 </strong>\u7ec4\u6210\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u533a\u95f4\u5217\u8868\u90fd\u662f\u6210\u5bf9\u4e0d\u76f8\u4ea4\u7684\uff0c\u5e76\u4e14\u5df2\u7ecf\u6392\u5e8f\u3002</p>\n\n<p>\u8fd4\u56de\u8fd9\u4e24\u4e2a\u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6\u3002</p>\n\n<p><em>\uff08\u5f62\u5f0f\u4e0a\uff0c\u95ed\u533a\u95f4&nbsp;<code>[a, b]</code>\uff08\u5176\u4e2d&nbsp;<code>a &lt;= b</code>\uff09\u8868\u793a\u5b9e\u6570&nbsp;<code>x</code>&nbsp;\u7684\u96c6\u5408\uff0c\u800c&nbsp;<code>a &lt;= x &lt;= b</code>\u3002\u4e24\u4e2a\u95ed\u533a\u95f4\u7684\u4ea4\u96c6\u662f\u4e00\u7ec4\u5b9e\u6570\uff0c\u8981\u4e48\u4e3a\u7a7a\u96c6\uff0c\u8981\u4e48\u4e3a\u95ed\u533a\u95f4\u3002\u4f8b\u5982\uff0c[1, 3] \u548c [2, 4] \u7684\u4ea4\u96c6\u4e3a [2, 3]\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/interval1.png\" style=\"height: 140px; width: 506px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\n</ol>\n", "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] intervalIntersection(int[][] A, int[][] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def intervalIntersection(self, A, B):\n        \"\"\"\n        :type A: List[List[int]]\n        :type B: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def intervalIntersection(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** intervalIntersection(int** A, int ASize, int* AColSize, int** B, int BSize, int* BColSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] IntervalIntersection(int[][] A, int[][] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} A\n * @param {number[][]} B\n * @return {number[][]}\n */\nvar intervalIntersection = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} a\n# @param {Integer[][]} b\n# @return {Integer[][]}\ndef interval_intersection(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func intervalIntersection(_ A: [[Int]], _ B: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func intervalIntersection(A [][]int, B [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def intervalIntersection(A: Array[Array[Int]], B: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun intervalIntersection(A: Array<IntArray>, B: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn interval_intersection(a: Vec<Vec<i32>>, b: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $A\n     * @param Integer[][] $B\n     * @return Integer[][]\n     */\n    function intervalIntersection($A, $B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function intervalIntersection(A: number[][], B: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1029", "frontend_question_id": "0987", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree", "url_en": "https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree", "relative_path_cn": "/leetcode/0900-0999/0987.Vertical%20Order%20Traversal%20of%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0900-0999/0987.Vertical%20Order%20Traversal%20of%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386", "title_en": "Vertical Order Traversal of a Binary Tree", "question_title_slug": "vertical-order-traversal-of-a-binary-tree", "content_en": "<p>Given a binary tree, return the <em>vertical order</em> traversal of its nodes&nbsp;values.</p>\r\n\r\n<p>For each node at position <code>(X, Y)</code>, its left and right children respectively&nbsp;will be at positions <code>(X-1, Y-1)</code> and <code>(X+1, Y-1)</code>.</p>\r\n\r\n<p>Running a vertical line from <code>X = -infinity</code> to <code>X = +infinity</code>, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing <code>Y</code> coordinates).</p>\r\n\r\n<p>If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.</p>\r\n\r\n<p>Return an list&nbsp;of non-empty reports in order of <code>X</code> coordinate.&nbsp; Every report will have a list of values of nodes.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/31/1236_example_1.PNG\" style=\"width: 201px; height: 186px;\" /></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,9,20,null,null,15,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[9],[3,15],[20],[7]]</span>\r\n<strong>Explanation: </strong>\r\nWithout loss of generality, we can assume the root node is at position (0, 0):\r\nThen, the node with value 9 occurs at position (-1, -1);\r\nThe nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);\r\nThe node with value 20 occurs at position (1, -1);\r\nThe node with value 7 occurs at position (2, -2).\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/31/tree2.png\" style=\"width: 236px; height: 150px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[4],[2],[1,5,6],[3],[7]]</span>\r\n<strong>Explanation: </strong>\r\nThe node with value 5 and the node with value 6 have the same position according to the given scheme.\r\nHowever, in the report &quot;[1,5,6]&quot;, the node value of 5 comes first since 5 is smaller than 6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The tree will have between <font face=\"monospace\">1</font>&nbsp;and <code>1000</code> nodes.</li>\r\n\t<li>Each node&#39;s value will be between <code>0</code> and <code>1000</code>.</li>\r\n</ol>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\uff0c\u6309<em>\u5782\u5e8f</em>\u904d\u5386\u8fd4\u56de\u5176\u7ed3\u70b9\u503c\u3002</p>\n\n<p>\u5bf9\u4f4d\u4e8e&nbsp;<code>(X, Y)</code>&nbsp;\u7684\u6bcf\u4e2a\u7ed3\u70b9\u800c\u8a00\uff0c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u5206\u522b\u4f4d\u4e8e&nbsp;<code>(X-1, Y-1)</code>&nbsp;\u548c&nbsp;<code>(X+1, Y-1)</code>\u3002</p>\n\n<p>\u628a\u4e00\u6761\u5782\u7ebf\u4ece&nbsp;<code>X = -infinity</code>&nbsp;\u79fb\u52a8\u5230&nbsp;<code>X = +infinity</code>&nbsp;\uff0c\u6bcf\u5f53\u8be5\u5782\u7ebf\u4e0e\u7ed3\u70b9\u63a5\u89e6\u65f6\uff0c\u6211\u4eec\u6309\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u62a5\u544a\u7ed3\u70b9\u7684\u503c\uff08 <code>Y</code>&nbsp;\u5750\u6807\u9012\u51cf\uff09\u3002</p>\n\n<p>\u5982\u679c\u4e24\u4e2a\u7ed3\u70b9\u4f4d\u7f6e\u76f8\u540c\uff0c\u5219\u9996\u5148\u62a5\u544a\u7684\u7ed3\u70b9\u503c\u8f83\u5c0f\u3002</p>\n\n<p>\u6309&nbsp;<code>X</code>&nbsp;\u5750\u6807\u987a\u5e8f\u8fd4\u56de\u975e\u7a7a\u62a5\u544a\u7684\u5217\u8868\u3002\u6bcf\u4e2a\u62a5\u544a\u90fd\u6709\u4e00\u4e2a\u7ed3\u70b9\u503c\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/1236_example_1.PNG\" style=\"height: 186px; width: 201px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,9,20,null,null,15,7]\n<strong>\u8f93\u51fa\uff1a</strong>[[9],[3,15],[20],[7]]\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5728\u4e0d\u4e27\u5931\u5176\u666e\u904d\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6839\u7ed3\u70b9\u4f4d\u4e8e (0, 0)\uff1a\n\u7136\u540e\uff0c\u503c\u4e3a 9 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (-1, -1)\uff1b\n\u503c\u4e3a 3 \u548c 15 \u7684\u4e24\u4e2a\u7ed3\u70b9\u5206\u522b\u51fa\u73b0\u5728 (0, 0) \u548c (0, -2)\uff1b\n\u503c\u4e3a 20 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (1, -1)\uff1b\n\u503c\u4e3a 7 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (2, -2)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/tree2.png\" style=\"height: 150px; width: 236px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6,7]\n<strong>\u8f93\u51fa\uff1a</strong>[[4],[2],[1,5,6],[3],[7]]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6839\u636e\u7ed9\u5b9a\u7684\u65b9\u6848\uff0c\u503c\u4e3a 5 \u548c 6 \u7684\u4e24\u4e2a\u7ed3\u70b9\u51fa\u73b0\u5728\u540c\u4e00\u4f4d\u7f6e\u3002\n\u7136\u800c\uff0c\u5728\u62a5\u544a &quot;[1,5,6]&quot; \u4e2d\uff0c\u7ed3\u70b9\u503c 5 \u6392\u5728\u524d\u9762\uff0c\u56e0\u4e3a 5 \u5c0f\u4e8e 6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e <code>1</code>&nbsp;\u548c&nbsp;<code>1000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u7ed3\u70b9\u503c\u4ecb\u4e8e&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Tree", "Hash Table"], "tags_cn": ["\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def verticalTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** verticalTraversal(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<IList<int>> VerticalTraversal(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar verticalTraversal = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer[][]}\ndef vertical_traversal(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func verticalTraversal(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc verticalTraversal(root *TreeNode) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def verticalTraversal(root: TreeNode): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun verticalTraversal(root: TreeNode?): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn vertical_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[][]\n     */\n    function verticalTraversal($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction verticalTraversal(root: TreeNode | null): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1030", "frontend_question_id": "0988", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-string-starting-from-leaf", "url_en": "https://leetcode.com/problems/smallest-string-starting-from-leaf", "relative_path_cn": "/leetcode/0900-0999/0988.Smallest%20String%20Starting%20From%20Leaf/README.md", "relative_path_en": "/leetcode/0900-0999/0988.Smallest%20String%20Starting%20From%20Leaf/README_EN.md", "title_cn": "\u4ece\u53f6\u7ed3\u70b9\u5f00\u59cb\u7684\u6700\u5c0f\u5b57\u7b26\u4e32", "title_en": "Smallest String Starting From Leaf", "question_title_slug": "smallest-string-starting-from-leaf", "content_en": "<p>Given the <code>root</code> of a binary tree, each node has a value from <code>0</code> to <code>25</code> representing the letters <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>: a value of <code>0</code> represents <code>&#39;a&#39;</code>, a value of <code>1</code> represents <code>&#39;b&#39;</code>, and so on.</p>\r\n\r\n<p>Find the lexicographically smallest string that starts at a leaf of this tree and ends at the root.</p>\r\n\r\n<p><em>(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, <code>&quot;ab&quot;</code> is lexicographically smaller than <code>&quot;aba&quot;</code>.&nbsp; A leaf of a node is a node that has no children.)</em></p>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/tree1.png\" style=\"width: 160px; height: 107px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,1,2,3,4,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;dba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/tree2.png\" style=\"width: 160px; height: 107px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[25,1,3,1,3,0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;adz&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/01/tree3.png\" style=\"height: 170px; width: 172px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[2,2,1,null,1,0,null,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;abc&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be between <code>1</code> and <code>8500</code>.</li>\r\n\t<li>Each node in the tree will have a value between <code>0</code> and <code>25</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u9897\u6839\u7ed3\u70b9\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u4e8c\u53c9\u6811\uff0c\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ece&nbsp;<code>0</code> \u5230&nbsp;<code>25</code>&nbsp;\u7684\u503c\uff0c\u5206\u522b\u4ee3\u8868\u5b57\u6bcd&nbsp;<code>&#39;a&#39;</code> \u5230&nbsp;<code>&#39;z&#39;</code>\uff1a\u503c&nbsp;<code>0</code> \u4ee3\u8868&nbsp;<code>&#39;a&#39;</code>\uff0c\u503c&nbsp;<code>1</code>&nbsp;\u4ee3\u8868&nbsp;<code>&#39;b&#39;</code>\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p>\n\n<p>\u627e\u51fa\u6309\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u4ece\u8fd9\u68f5\u6811\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u5f00\u59cb\uff0c\u5230\u6839\u7ed3\u70b9\u7ed3\u675f\u3002</p>\n\n<p><em>\uff08\u5c0f\u8d34\u58eb\uff1a\u5b57\u7b26\u4e32\u4e2d\u4efb\u4f55\u8f83\u77ed\u7684\u524d\u7f00\u5728\u5b57\u5178\u5e8f\u4e0a\u90fd\u662f\u8f83\u5c0f\u7684\uff1a\u4f8b\u5982\uff0c\u5728\u5b57\u5178\u5e8f\u4e0a&nbsp;<code>&quot;ab&quot;</code> \u6bd4&nbsp;<code>&quot;aba&quot;</code>&nbsp;\u8981\u5c0f\u3002\u53f6\u7ed3\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree1.png\" style=\"height: 107px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,2,3,4,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;dba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree2.png\" style=\"height: 107px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[25,1,3,1,3,0,2]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;adz&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree3.png\" style=\"height: 180px; width: 172px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,1,null,1,0,null,0]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abc&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e&nbsp;<code>1</code> \u548c&nbsp;<code>8500</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ecb\u4e8e&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>25</code>&nbsp;\u4e4b\u95f4\u7684\u503c\u3002</li>\n</ol>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    string smallestFromLeaf(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public String smallestFromLeaf(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def smallestFromLeaf(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def smallestFromLeaf(self, root: TreeNode) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nchar * smallestFromLeaf(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public string SmallestFromLeaf(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string}\n */\nvar smallestFromLeaf = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {String}\ndef smallest_from_leaf(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func smallestFromLeaf(_ root: TreeNode?) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc smallestFromLeaf(root *TreeNode) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def smallestFromLeaf(root: TreeNode): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun smallestFromLeaf(root: TreeNode?): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn smallest_from_leaf(root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function smallestFromLeaf($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction smallestFromLeaf(root: TreeNode | null): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1031", "frontend_question_id": "0989", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/add-to-array-form-of-integer", "url_en": "https://leetcode.com/problems/add-to-array-form-of-integer", "relative_path_cn": "/leetcode/0900-0999/0989.Add%20to%20Array-Form%20of%20Integer/README.md", "relative_path_en": "/leetcode/0900-0999/0989.Add%20to%20Array-Form%20of%20Integer/README_EN.md", "title_cn": "\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5", "title_en": "Add to Array-Form of Integer", "question_title_slug": "add-to-array-form-of-integer", "content_en": "<p>For a non-negative integer <code>X</code>, the&nbsp;<em>array-form of <code>X</code></em>&nbsp;is an array of its digits in left to right order.&nbsp; For example, if <code>X = 1231</code>, then the array form is&nbsp;<code>[1,2,3,1]</code>.</p>\r\n\r\n<p>Given the array-form <code>A</code> of a non-negative&nbsp;integer <code>X</code>, return the array-form of the integer <code>X+K</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,0,0]</span>, K = 34\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4]</span>\r\n<strong>Explanation: </strong>1200 + 34 = 1234\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[2,7,4]</span>, K = <span id=\"example-input-2-2\">181</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,5,5]</span>\r\n<strong>Explanation: </strong>274 + 181 = 455\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2,1,5]</span>, K = <span id=\"example-input-3-2\">806</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[1,0,2,1]</span>\r\n<strong>Explanation: </strong>215 + 806 = 1021\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[9,9,9,9,9,9,9,9,9,9]</span>, K = <span id=\"example-input-4-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[1,0,0,0,0,0,0,0,0,0,0]</span>\r\n<strong>Explanation: </strong>9999999999 + 1 = 10000000000\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n\t<li>If <code>A.length &gt; 1</code>, then <code>A[0] != 0</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u5bf9\u4e8e\u975e\u8d1f\u6574\u6570&nbsp;<code>X</code>&nbsp;\u800c\u8a00\uff0c<em><code>X</code></em>&nbsp;\u7684<em>\u6570\u7ec4\u5f62\u5f0f</em>\u662f\u6bcf\u4f4d\u6570\u5b57\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5f62\u6210\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c&nbsp;<code>X = 1231</code>\uff0c\u90a3\u4e48\u5176\u6570\u7ec4\u5f62\u5f0f\u4e3a&nbsp;<code>[1,2,3,1]</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 <code>X</code> \u7684\u6570\u7ec4\u5f62\u5f0f&nbsp;<code>A</code>\uff0c\u8fd4\u56de\u6574\u6570&nbsp;<code>X+K</code>&nbsp;\u7684\u6570\u7ec4\u5f62\u5f0f\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,0,0], K = 34\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4]\n<strong>\u89e3\u91ca\uff1a</strong>1200 + 34 = 1234\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,7,4], K = 181\n<strong>\u8f93\u51fa\uff1a</strong>[4,5,5]\n<strong>\u89e3\u91ca\uff1a</strong>274 + 181 = 455\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,1,5], K = 806\n<strong>\u8f93\u51fa\uff1a</strong>[1,0,2,1]\n<strong>\u89e3\u91ca\uff1a</strong>215 + 806 = 1021\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [9,9,9,9,9,9,9,9,9,9], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[1,0,0,0,0,0,0,0,0,0,0]\n<strong>\u89e3\u91ca\uff1a</strong>9999999999 + 1 = 10000000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n\t<li>\u5982\u679c&nbsp;<code>A.length &gt; 1</code>\uff0c\u90a3\u4e48&nbsp;<code>A[0] != 0</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> addToArrayForm(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def addToArrayForm(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* addToArrayForm(int* A, int ASize, int K, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> AddToArrayForm(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number[]}\n */\nvar addToArrayForm = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer[]}\ndef add_to_array_form(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func addToArrayForm(_ A: [Int], _ K: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func addToArrayForm(A []int, K int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def addToArrayForm(A: Array[Int], K: Int): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun addToArrayForm(A: IntArray, K: Int): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn add_to_array_form(a: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer[]\n     */\n    function addToArrayForm($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function addToArrayForm(A: number[], K: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1032", "frontend_question_id": "0990", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/satisfiability-of-equality-equations", "url_en": "https://leetcode.com/problems/satisfiability-of-equality-equations", "relative_path_cn": "/leetcode/0900-0999/0990.Satisfiability%20of%20Equality%20Equations/README.md", "relative_path_en": "/leetcode/0900-0999/0990.Satisfiability%20of%20Equality%20Equations/README_EN.md", "title_cn": "\u7b49\u5f0f\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027", "title_en": "Satisfiability of Equality Equations", "question_title_slug": "satisfiability-of-equality-equations", "content_en": "<p>Given an array <font face=\"monospace\">equations</font>&nbsp;of strings that represent relationships between variables, each string <code>equations[i]</code>&nbsp;has length <code>4</code> and takes one of two different forms: <code>&quot;a==b&quot;</code> or <code>&quot;a!=b&quot;</code>.&nbsp; Here, <code>a</code> and <code>b</code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if it is possible to assign integers to variable names&nbsp;so as to satisfy all the given equations.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a==b&quot;,&quot;b!=a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n<strong>Explanation: </strong>If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;b==a&quot;,&quot;a==b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n<strong>Explanation: </strong>We could assign a = 1 and b = 1 to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\r\n\t<li><code>equations[i].length == 4</code></li>\r\n\t<li><code>equations[i][0]</code> and <code>equations[i][3]</code> are lowercase letters</li>\r\n\t<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code></li>\r\n\t<li><code>equations[i][2]</code> is&nbsp;<code>&#39;=&#39;</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8868\u793a\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u7684\u5b57\u7b26\u4e32\u65b9\u7a0b\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u65b9\u7a0b <code>equations[i]</code> \u7684\u957f\u5ea6\u4e3a <code>4</code>\uff0c\u5e76\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5f62\u5f0f\u4e4b\u4e00\uff1a<code>&quot;a==b&quot;</code> \u6216&nbsp;<code>&quot;a!=b&quot;</code>\u3002\u5728\u8fd9\u91cc\uff0ca \u548c b \u662f\u5c0f\u5199\u5b57\u6bcd\uff08\u4e0d\u4e00\u5b9a\u4e0d\u540c\uff09\uff0c\u8868\u793a\u5355\u5b57\u6bcd\u53d8\u91cf\u540d\u3002</p>\n\n<p>\u53ea\u6709\u5f53\u53ef\u4ee5\u5c06\u6574\u6570\u5206\u914d\u7ed9\u53d8\u91cf\u540d\uff0c\u4ee5\u4fbf\u6ee1\u8db3\u6240\u6709\u7ed9\u5b9a\u7684\u65b9\u7a0b\u65f6\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b!=a&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u679c\u6211\u4eec\u6307\u5b9a\uff0ca = 1 \u4e14 b = 1\uff0c\u90a3\u4e48\u53ef\u4ee5\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4f46\u65e0\u6cd5\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u3002\u6ca1\u6709\u529e\u6cd5\u5206\u914d\u53d8\u91cf\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;b==a&quot;,&quot;a==b&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a a = 1 \u4e14 b = 1 \u4ee5\u6ee1\u8db3\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\n\t<li><code>equations[i].length == 4</code></li>\n\t<li><code>equations[i][0]</code> \u548c&nbsp;<code>equations[i][3]</code>&nbsp;\u662f\u5c0f\u5199\u5b57\u6bcd</li>\n\t<li><code>equations[i][1]</code> \u8981\u4e48\u662f&nbsp;<code>&#39;=&#39;</code>\uff0c\u8981\u4e48\u662f&nbsp;<code>&#39;!&#39;</code></li>\n\t<li><code>equations[i][2]</code>&nbsp;\u662f&nbsp;<code>&#39;=&#39;</code></li>\n</ol>\n", "tags_en": ["Union Find", "Graph"], "tags_cn": ["\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool equationsPossible(vector<string>& equations) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean equationsPossible(String[] equations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def equationsPossible(self, equations):\n        \"\"\"\n        :type equations: List[str]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def equationsPossible(self, equations: List[str]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool equationsPossible(char ** equations, int equationsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool EquationsPossible(string[] equations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} equations\n * @return {boolean}\n */\nvar equationsPossible = function(equations) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} equations\n# @return {Boolean}\ndef equations_possible(equations)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func equationsPossible(_ equations: [String]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func equationsPossible(equations []string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def equationsPossible(equations: Array[String]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun equationsPossible(equations: Array<String>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn equations_possible(equations: Vec<String>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $equations\n     * @return Boolean\n     */\n    function equationsPossible($equations) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function equationsPossible(equations: string[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1033", "frontend_question_id": "0991", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/broken-calculator", "url_en": "https://leetcode.com/problems/broken-calculator", "relative_path_cn": "/leetcode/0900-0999/0991.Broken%20Calculator/README.md", "relative_path_en": "/leetcode/0900-0999/0991.Broken%20Calculator/README_EN.md", "title_cn": "\u574f\u4e86\u7684\u8ba1\u7b97\u5668", "title_en": "Broken Calculator", "question_title_slug": "broken-calculator", "content_en": "<p>On a broken calculator that has a number showing on its display, we can perform two operations:</p>\r\n\r\n<ul>\r\n\t<li><strong>Double</strong>: Multiply the number on the display by 2, or;</li>\r\n\t<li><strong>Decrement</strong>: Subtract 1 from the number on the display.</li>\r\n</ul>\r\n\r\n<p>Initially, the calculator is displaying the number <code>X</code>.</p>\r\n\r\n<p>Return the minimum number of operations needed to display the number <code>Y</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-1-1\">2</span>, Y = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>Use double operation and then decrement operation {2 -&gt; 4 -&gt; 3}.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-2-1\">5</span>, Y = <span id=\"example-input-2-2\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>Use decrement and then double {5 -&gt; 4 -&gt; 8}.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-3-1\">3</span>, Y = <span id=\"example-input-3-2\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong> Use double, decrement and double {3 -&gt; 6 -&gt; 5 -&gt; 10}.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-4-1\">1024</span>, Y = <span id=\"example-input-4-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">1023</span>\r\n<strong>Explanation: </strong>Use decrement operations 1023 times.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= X &lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= Y &lt;= 10^9</code></li>\r\n</ol>", "content_cn": "<p>\u5728\u663e\u793a\u7740\u6570\u5b57\u7684\u574f\u8ba1\u7b97\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><strong>\u53cc\u500d\uff08Double\uff09\uff1a</strong>\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u4e58 2\uff1b</li>\n\t<li><strong>\u9012\u51cf\uff08Decrement\uff09\uff1a</strong>\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u51cf 1 \u3002</li>\n</ul>\n\n<p>\u6700\u521d\uff0c\u8ba1\u7b97\u5668\u663e\u793a\u6570\u5b57&nbsp;<code>X</code>\u3002</p>\n\n<p>\u8fd4\u56de\u663e\u793a\u6570\u5b57&nbsp;<code>Y</code>&nbsp;\u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 2, Y = 3\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u8fdb\u884c\u53cc\u500d\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97 {2 -&gt; 4 -&gt; 3}.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 5, Y = 8\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u9012\u51cf\uff0c\u518d\u53cc\u500d {5 -&gt; 4 -&gt; 8}.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 3, Y = 10\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u53cc\u500d\uff0c\u7136\u540e\u9012\u51cf\uff0c\u518d\u53cc\u500d {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 1024, Y = 1\n<strong>\u8f93\u51fa\uff1a</strong>1023\n<strong>\u89e3\u91ca\uff1a</strong>\u6267\u884c\u9012\u51cf\u8fd0\u7b97 1023 \u6b21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= X &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= Y &lt;= 10^9</code></li>\n</ol>\n", "tags_en": ["Greedy", "Math"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int brokenCalc(int X, int Y) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int brokenCalc(int X, int Y) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def brokenCalc(self, X, Y):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint brokenCalc(int X, int Y){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BrokenCalc(int X, int Y) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} X\n * @param {number} Y\n * @return {number}\n */\nvar brokenCalc = function(X, Y) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef broken_calc(x, y)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func brokenCalc(_ X: Int, _ Y: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func brokenCalc(X int, Y int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def brokenCalc(X: Int, Y: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun brokenCalc(X: Int, Y: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn broken_calc(x: i32, y: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $X\n     * @param Integer $Y\n     * @return Integer\n     */\n    function brokenCalc($X, $Y) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function brokenCalc(X: number, Y: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1034", "frontend_question_id": "0992", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subarrays-with-k-different-integers", "url_en": "https://leetcode.com/problems/subarrays-with-k-different-integers", "relative_path_cn": "/leetcode/0900-0999/0992.Subarrays%20with%20K%20Different%20Integers/README.md", "relative_path_en": "/leetcode/0900-0999/0992.Subarrays%20with%20K%20Different%20Integers/README_EN.md", "title_cn": "K \u4e2a\u4e0d\u540c\u6574\u6570\u7684\u5b50\u6570\u7ec4", "title_en": "Subarrays with K Different Integers", "question_title_slug": "subarrays-with-k-different-integers", "content_en": "<p>Given an array <code>A</code> of positive integers, call a (contiguous, not necessarily distinct) subarray of <code>A</code> <em>good</em> if the number of different integers in that subarray is exactly <code>K</code>.</p>\r\n\r\n<p>(For example, <code>[1,2,3,1,2]</code> has <code>3</code> different integers: <code>1</code>, <code>2</code>, and <code>3</code>.)</p>\r\n\r\n<p>Return the number of good subarrays of <code>A</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,1,2,3]</span>, K = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<strong>Explanation: </strong>Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2,1,3,4]</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= A.length</code></li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u5982\u679c <code>A</code>&nbsp;\u7684\u67d0\u4e2a\u5b50\u6570\u7ec4\u4e2d\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570\u6070\u597d\u4e3a <code>K</code>\uff0c\u5219\u79f0 <code>A</code> \u7684\u8fd9\u4e2a\u8fde\u7eed\u3001\u4e0d\u4e00\u5b9a\u72ec\u7acb\u7684\u5b50\u6570\u7ec4\u4e3a<em>\u597d\u5b50\u6570\u7ec4</em>\u3002</p>\n\n<p>\uff08\u4f8b\u5982\uff0c<code>[1,2,3,1,2]</code> \u4e2d\u6709&nbsp;<code>3</code>&nbsp;\u4e2a\u4e0d\u540c\u7684\u6574\u6570\uff1a<code>1</code>\uff0c<code>2</code>\uff0c\u4ee5\u53ca&nbsp;<code>3</code>\u3002\uff09</p>\n\n<p>\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u4e2d<em>\u597d\u5b50\u6570\u7ec4</em>\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,1,2,3], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\u6070\u597d\u7531 2 \u4e2a\u4e0d\u540c\u6574\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1a[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,1,3,4], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6070\u597d\u7531 3 \u4e2a\u4e0d\u540c\u6574\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1a[1,2,1,3], [2,1,3], [1,3,4].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= A.length</code></li>\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\n</ol>\n", "tags_en": ["Hash Table", "Two Pointers", "Sliding Window"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarraysWithKDistinct(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int subarraysWithKDistinct(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def subarraysWithKDistinct(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint subarraysWithKDistinct(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SubarraysWithKDistinct(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar subarraysWithKDistinct = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef subarrays_with_k_distinct(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func subarraysWithKDistinct(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func subarraysWithKDistinct(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def subarraysWithKDistinct(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun subarraysWithKDistinct(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn subarrays_with_k_distinct(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function subarraysWithKDistinct($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function subarraysWithKDistinct(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1035", "frontend_question_id": "0993", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cousins-in-binary-tree", "url_en": "https://leetcode.com/problems/cousins-in-binary-tree", "relative_path_cn": "/leetcode/0900-0999/0993.Cousins%20in%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0900-0999/0993.Cousins%20in%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5802\u5144\u5f1f\u8282\u70b9", "title_en": "Cousins in Binary Tree", "question_title_slug": "cousins-in-binary-tree", "content_en": "<p>In a binary tree, the root node is at depth <code>0</code>, and children of each depth <code>k</code> node are at depth <code>k+1</code>.</p>\n\n<p>Two nodes of a binary tree are <em>cousins</em> if they have the same depth, but have <strong>different parents</strong>.</p>\n\n<p>We are given the <code>root</code> of a binary tree with unique values, and the values <code>x</code>&nbsp;and <code>y</code>&nbsp;of two different nodes in the tree.</p>\n\n<p>Return&nbsp;<code>true</code>&nbsp;if and only if the nodes corresponding to the values <code>x</code> and <code>y</code> are cousins.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:<br />\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png\" style=\"width: 180px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[1,2,3,4]</span>, x = <span id=\"example-input-1-2\">4</span>, y = <span id=\"example-input-1-3\">3</span>\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\n</pre>\n\n<div>\n<p><strong>Example 2:<br />\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png\" style=\"width: 201px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[1,2,3,null,4,null,5]</span>, x = <span id=\"example-input-2-2\">5</span>, y = <span id=\"example-input-2-3\">4</span>\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png\" style=\"width: 156px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[1,2,3,null,4]</span>, x = 2, y = 3\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\n</pre>\n</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be between <code>2</code> and <code>100</code>.</li>\n\t<li>Each node has a unique integer value from <code>1</code> to <code>100</code>.</li>\n</ul>\n", "content_cn": "<p>\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839\u8282\u70b9\u4f4d\u4e8e\u6df1\u5ea6 <code>0</code> \u5904\uff0c\u6bcf\u4e2a\u6df1\u5ea6\u4e3a <code>k</code> \u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4f4d\u4e8e\u6df1\u5ea6 <code>k+1</code> \u5904\u3002</p>\n\n<p>\u5982\u679c\u4e8c\u53c9\u6811\u7684\u4e24\u4e2a\u8282\u70b9\u6df1\u5ea6\u76f8\u540c\uff0c\u4f46<strong>\u7236\u8282\u70b9\u4e0d\u540c</strong>\uff0c\u5219\u5b83\u4eec\u662f\u4e00\u5bf9<em>\u5802\u5144\u5f1f\u8282\u70b9</em>\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u5177\u6709\u552f\u4e00\u503c\u7684\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code>\uff0c\u4ee5\u53ca\u6811\u4e2d\u4e24\u4e2a\u4e0d\u540c\u8282\u70b9\u7684\u503c <code>x</code> \u548c <code>y</code>\u3002</p>\n\n<p>\u53ea\u6709\u4e0e\u503c <code>x</code> \u548c <code>y</code> \u5bf9\u5e94\u7684\u8282\u70b9\u662f\u5802\u5144\u5f1f\u8282\u70b9\u65f6\uff0c\u624d\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png\" style=\"height: 160px; width: 180px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,4], x = 4, y = 3\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png\" style=\"height: 160px; width: 201px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png\" style=\"height: 160px; width: 156px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,null,4], x = 2, y = 3\n<strong>\u8f93\u51fa\uff1a</strong>false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4ecb\u4e8e&nbsp;<code>2</code> \u5230&nbsp;<code>100</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3001\u8303\u56f4\u4e3a&nbsp;<code>1</code> \u5230&nbsp;<code>100</code>&nbsp;\u7684\u6574\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Tree", "Breadth-first Search"], "tags_cn": ["\u6811", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCousins(TreeNode* root, int x, int y) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCousins(TreeNode root, int x, int y) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isCousins(self, root, x, y):\n        \"\"\"\n        :type root: TreeNode\n        :type x: int\n        :type y: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isCousins(struct TreeNode* root, int x, int y){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsCousins(TreeNode root, int x, int y) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nvar isCousins = function(root, x, y) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} x\n# @param {Integer} y\n# @return {Boolean}\ndef is_cousins(root, x, y)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isCousins(_ root: TreeNode?, _ x: Int, _ y: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isCousins(root *TreeNode, x int, y int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isCousins(root: TreeNode, x: Int, y: Int): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isCousins(root: TreeNode?, x: Int, y: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_cousins(root: Option<Rc<RefCell<TreeNode>>>, x: i32, y: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $x\n     * @param Integer $y\n     * @return Boolean\n     */\n    function isCousins($root, $x, $y) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isCousins(root: TreeNode | null, x: number, y: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1036", "frontend_question_id": "0994", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rotting-oranges", "url_en": "https://leetcode.com/problems/rotting-oranges", "relative_path_cn": "/leetcode/0900-0999/0994.Rotting%20Oranges/README.md", "relative_path_en": "/leetcode/0900-0999/0994.Rotting%20Oranges/README_EN.md", "title_cn": "\u8150\u70c2\u7684\u6a58\u5b50", "title_en": "Rotting Oranges", "question_title_slug": "rotting-oranges", "content_en": "<p>In a given grid, each cell can have one of three&nbsp;values:</p>\r\n\r\n<ul>\r\n\t<li>the value <code>0</code> representing an empty cell;</li>\r\n\t<li>the value <code>1</code> representing a fresh orange;</li>\r\n\t<li>the value <code>2</code> representing a rotten orange.</li>\r\n</ul>\r\n\r\n<p>Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.</p>\r\n\r\n<p>Return the minimum number of minutes that must elapse until no cell has a fresh orange.&nbsp; If this is impossible, return <code>-1</code> instead.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/16/oranges.png\" style=\"width: 712px; height: 150px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2,1,1],[1,1,0],[0,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[2,1,1],[0,1,1],[1,0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong> Since there are already no fresh oranges at minute 0, the answer is just 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length &lt;= 10</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>\r\n\t<li><code>grid[i][j]</code> is only <code>0</code>, <code>1</code>, or <code>2</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5728\u7ed9\u5b9a\u7684\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u4e2a\u503c\u4e4b\u4e00\uff1a</p>\n\n<ul>\n\t<li>\u503c&nbsp;<code>0</code>&nbsp;\u4ee3\u8868\u7a7a\u5355\u5143\u683c\uff1b</li>\n\t<li>\u503c&nbsp;<code>1</code>&nbsp;\u4ee3\u8868\u65b0\u9c9c\u6a58\u5b50\uff1b</li>\n\t<li>\u503c&nbsp;<code>2</code>&nbsp;\u4ee3\u8868\u8150\u70c2\u7684\u6a58\u5b50\u3002</li>\n</ul>\n\n<p>\u6bcf\u5206\u949f\uff0c\u4efb\u4f55\u4e0e\u8150\u70c2\u7684\u6a58\u5b50\uff08\u5728 4 \u4e2a\u6b63\u65b9\u5411\u4e0a\uff09\u76f8\u90bb\u7684\u65b0\u9c9c\u6a58\u5b50\u90fd\u4f1a\u8150\u70c2\u3002</p>\n\n<p>\u8fd4\u56de\u76f4\u5230\u5355\u5143\u683c\u4e2d\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e3a\u6b62\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u6700\u5c0f\u5206\u949f\u6570\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png\" style=\"height: 150px; width: 712px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,1,1],[1,1,0],[0,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,1,1],[0,1,1],[1,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u5de6\u4e0b\u89d2\u7684\u6a58\u5b50\uff08\u7b2c 2 \u884c\uff0c \u7b2c 0 \u5217\uff09\u6c38\u8fdc\u4e0d\u4f1a\u8150\u70c2\uff0c\u56e0\u4e3a\u8150\u70c2\u53ea\u4f1a\u53d1\u751f\u5728 4 \u4e2a\u6b63\u5411\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a 0 \u5206\u949f\u65f6\u5df2\u7ecf\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e86\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>\n\t<li><code>grid[i][j]</code> \u4ec5\u4e3a&nbsp;<code>0</code>\u3001<code>1</code>&nbsp;\u6216&nbsp;<code>2</code></li>\n</ol>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int orangesRotting(int[][] grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def orangesRotting(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint orangesRotting(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int OrangesRotting(int[][] grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function(grid) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef oranges_rotting(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func orangesRotting(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func orangesRotting(grid [][]int) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def orangesRotting(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun orangesRotting(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn oranges_rotting(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function orangesRotting($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function orangesRotting(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1037", "frontend_question_id": "0995", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips", "url_en": "https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips", "relative_path_cn": "/leetcode/0900-0999/0995.Minimum%20Number%20of%20K%20Consecutive%20Bit%20Flips/README.md", "relative_path_en": "/leetcode/0900-0999/0995.Minimum%20Number%20of%20K%20Consecutive%20Bit%20Flips/README_EN.md", "title_cn": "K \u8fde\u7eed\u4f4d\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570", "title_en": "Minimum Number of K Consecutive Bit Flips", "question_title_slug": "minimum-number-of-k-consecutive-bit-flips", "content_en": "<p>In an array <code>A</code> containing only 0s and 1s, a <i><code>K</code>-bit flip&nbsp;</i>consists of choosing a (contiguous) subarray of length <code>K</code> and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.</p>\r\n\r\n<p>Return the minimum number of <code>K</code>-bit flips required so that there is no 0 in the array.&nbsp; If it is not possible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[0,1,0]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>Flip A[0], then flip A[2].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,1,0]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation:</strong>&nbsp;No matter how we flip subarrays of size 2, we can&#39;t make the array become [1,1,1].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[0,0,0,1,0,1,1,0]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation:</strong>\r\nFlip A[0],A[1],A[2]:&nbsp;A becomes [1,1,1,1,0,1,1,0]\r\nFlip A[4],A[5],A[6]:&nbsp;A becomes [1,1,1,1,1,0,0,0]\r\nFlip A[5],A[6],A[7]:&nbsp;A becomes [1,1,1,1,1,1,1,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\r\n</ol>", "content_cn": "<p>\u5728\u4ec5\u5305\u542b <code>0</code> \u548c <code>1</code> \u7684\u6570\u7ec4 <code>A</code> \u4e2d\uff0c\u4e00\u6b21 <em><code>K</code> \u4f4d\u7ffb\u8f6c</em>\u5305\u62ec\u9009\u62e9\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>K</code> \u7684\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\uff0c\u540c\u65f6\u5c06\u5b50\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a <code>0</code> \u66f4\u6539\u4e3a <code>1</code>\uff0c\u800c\u6bcf\u4e2a <code>1</code> \u66f4\u6539\u4e3a <code>0</code>\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u9700\u7684 <code>K</code> \u4f4d\u7ffb\u8f6c\u7684\u6b21\u6570\uff0c\u4ee5\u4fbf\u6570\u7ec4\u6ca1\u6709\u503c\u4e3a <code>0</code> \u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,1,0], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u7ffb\u8f6c A[0]\uff0c\u7136\u540e\u7ffb\u8f6c A[2]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,0], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u65e0\u8bba\u6211\u4eec\u600e\u6837\u7ffb\u8f6c\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u6211\u4eec\u90fd\u4e0d\u80fd\u4f7f\u6570\u7ec4\u53d8\u4e3a [1,1,1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,0,0,1,0,1,1,0], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7ffb\u8f6c A[0],A[1],A[2]:&nbsp;A\u53d8\u6210 [1,1,1,1,0,1,1,0]\n\u7ffb\u8f6c A[4],A[5],A[6]:&nbsp;A\u53d8\u6210 [1,1,1,1,1,0,0,0]\n\u7ffb\u8f6c A[5],A[6],A[7]:&nbsp;A\u53d8\u6210 [1,1,1,1,1,1,1,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\n</ol>\n", "tags_en": ["Greedy", "Sliding Window"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minKBitFlips(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minKBitFlips(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minKBitFlips(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minKBitFlips(self, A: List[int], K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minKBitFlips(int* A, int ASize, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinKBitFlips(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar minKBitFlips = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer}\ndef min_k_bit_flips(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minKBitFlips(_ A: [Int], _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minKBitFlips(A []int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minKBitFlips(A: Array[Int], K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minKBitFlips(A: IntArray, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_k_bit_flips(a: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer\n     */\n    function minKBitFlips($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minKBitFlips(A: number[], K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1038", "frontend_question_id": "0996", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-squareful-arrays", "url_en": "https://leetcode.com/problems/number-of-squareful-arrays", "relative_path_cn": "/leetcode/0900-0999/0996.Number%20of%20Squareful%20Arrays/README.md", "relative_path_en": "/leetcode/0900-0999/0996.Number%20of%20Squareful%20Arrays/README_EN.md", "title_cn": "\u6b63\u65b9\u5f62\u6570\u7ec4\u7684\u6570\u76ee", "title_en": "Number of Squareful Arrays", "question_title_slug": "number-of-squareful-arrays", "content_en": "<p>Given an array <code>A</code> of non-negative integers, the array is <em>squareful</em> if for every pair of adjacent elements, their sum is a perfect square.</p>\r\n\r\n<p>Return the number of permutations of A that are squareful.&nbsp; Two permutations <code>A1</code> and <code>A2</code> differ if and only if there is some index <code>i</code> such that <code>A1[i] != A2[i]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,17,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\n[1,8,17] and [17,8,1] are the valid permutations.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 1e9</code></li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5982\u679c\u8be5\u6570\u7ec4\u6bcf\u5bf9\u76f8\u90bb\u5143\u7d20\u4e4b\u548c\u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u79f0\u8fd9\u4e00\u6570\u7ec4\u4e3a<em>\u6b63\u65b9\u5f62</em>\u6570\u7ec4\u3002</p>\n\n<p>\u8fd4\u56de A \u7684\u6b63\u65b9\u5f62\u6392\u5217\u7684\u6570\u76ee\u3002\u4e24\u4e2a\u6392\u5217 <code>A1</code> \u548c <code>A2</code> \u4e0d\u540c\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u67d0\u4e2a\u7d22\u5f15 <code>i</code>\uff0c\u4f7f\u5f97 A1[i] != A2[i]\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,17,8]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n[1,8,17] \u548c [17,8,1] \u90fd\u662f\u6709\u6548\u7684\u6392\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 1e9</code></li>\n</ol>\n", "tags_en": ["Graph", "Math", "Backtracking"], "tags_cn": ["\u56fe", "\u6570\u5b66", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSquarefulPerms(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSquarefulPerms(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSquarefulPerms(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSquarefulPerms(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSquarefulPerms(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSquarefulPerms(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar numSquarefulPerms = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef num_squareful_perms(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSquarefulPerms(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSquarefulPerms(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSquarefulPerms(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSquarefulPerms(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_squareful_perms(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function numSquarefulPerms($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSquarefulPerms(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1039", "frontend_question_id": "0997", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-the-town-judge", "url_en": "https://leetcode.com/problems/find-the-town-judge", "relative_path_cn": "/leetcode/0900-0999/0997.Find%20the%20Town%20Judge/README.md", "relative_path_en": "/leetcode/0900-0999/0997.Find%20the%20Town%20Judge/README_EN.md", "title_cn": "\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98", "title_en": "Find the Town Judge", "question_title_slug": "find-the-town-judge", "content_en": "<p>In a town, there are <code>N</code> people labelled from&nbsp;<code>1</code> to <code>N</code>.&nbsp; There is a rumor that one of these people is secretly the town judge.</p>\n\n<p>If the&nbsp;town judge exists, then:</p>\n\n<ol>\n\t<li>The town judge trusts nobody.</li>\n\t<li>Everybody (except for the town judge) trusts the town judge.</li>\n\t<li>There is exactly one person that satisfies properties 1 and 2.</li>\n</ol>\n\n<p>You are given <code>trust</code>, an array of pairs <code>trust[i] = [a, b]</code> representing that the person labelled <code>a</code> trusts the person labelled <code>b</code>.</p>\n\n<p>If the town judge exists and can be identified, return the label of the town judge.&nbsp; Otherwise, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> N = 2, trust = [[1,2]]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> N = 3, trust = [[1,3],[2,3]]\n<strong>Output:</strong> 3\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> N = 3, trust = [[1,3],[2,3],[3,1]]\n<strong>Output:</strong> -1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> N = 3, trust = [[1,2],[2,3]]\n<strong>Output:</strong> -1\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\n<strong>Output:</strong> 3\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n\t<li><code>0 &lt;= trust.length &lt;= 10^4</code></li>\n\t<li><code>trust[i].length == 2</code></li>\n\t<li><code>trust[i]</code> are all different</li>\n\t<li><code>trust[i][0] != trust[i][1]</code></li>\n\t<li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= N</code></li>\n</ul>\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u5c0f\u9547\u91cc\uff0c\u6309\u4ece <code>1</code> \u5230 <code>N</code> \u6807\u8bb0\u4e86&nbsp;<code>N</code> \u4e2a\u4eba\u3002\u4f20\u8a00\u79f0\uff0c\u8fd9\u4e9b\u4eba\u4e2d\u6709\u4e00\u4e2a\u662f\u5c0f\u9547\u4e0a\u7684\u79d8\u5bc6\u6cd5\u5b98\u3002</p>\n\n<p>\u5982\u679c\u5c0f\u9547\u7684\u6cd5\u5b98\u771f\u7684\u5b58\u5728\uff0c\u90a3\u4e48\uff1a</p>\n\n<ol>\n\t<li>\u5c0f\u9547\u7684\u6cd5\u5b98\u4e0d\u76f8\u4fe1\u4efb\u4f55\u4eba\u3002</li>\n\t<li>\u6bcf\u4e2a\u4eba\uff08\u9664\u4e86\u5c0f\u9547\u6cd5\u5b98\u5916\uff09\u90fd\u4fe1\u4efb\u5c0f\u9547\u7684\u6cd5\u5b98\u3002</li>\n\t<li>\u53ea\u6709\u4e00\u4e2a\u4eba\u540c\u65f6\u6ee1\u8db3\u5c5e\u6027 1 \u548c\u5c5e\u6027 2 \u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>trust</code>\uff0c\u8be5\u6570\u7ec4\u7531\u4fe1\u4efb\u5bf9 <code>trust[i] = [a, b]</code>&nbsp;\u7ec4\u6210\uff0c\u8868\u793a\u6807\u8bb0\u4e3a <code>a</code> \u7684\u4eba\u4fe1\u4efb\u6807\u8bb0\u4e3a <code>b</code> \u7684\u4eba\u3002</p>\n\n<p>\u5982\u679c\u5c0f\u9547\u5b58\u5728\u79d8\u5bc6\u6cd5\u5b98\u5e76\u4e14\u53ef\u4ee5\u786e\u5b9a\u4ed6\u7684\u8eab\u4efd\uff0c\u8bf7\u8fd4\u56de\u8be5\u6cd5\u5b98\u7684\u6807\u8bb0\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, trust = [[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,3],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,3],[2,3],[3,1]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,2],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\n<strong>\u8f93\u51fa\uff1a</strong>3</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n\t<li><code>trust.length &lt;= 10000</code></li>\n\t<li><code>trust[i]</code>&nbsp;\u662f\u5b8c\u5168\u4e0d\u540c\u7684</li>\n\t<li><code>trust[i][0] != trust[i][1]</code></li>\n\t<li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= N</code></li>\n</ol>\n", "tags_en": ["Graph"], "tags_cn": ["\u56fe"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findJudge(int N, vector<vector<int>>& trust) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findJudge(int N, int[][] trust) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findJudge(self, N, trust):\n        \"\"\"\n        :type N: int\n        :type trust: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findJudge(self, N: int, trust: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findJudge(int N, int** trust, int trustSize, int* trustColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindJudge(int N, int[][] trust) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(N, trust) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} trust\n# @return {Integer}\ndef find_judge(n, trust)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findJudge(_ N: Int, _ trust: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findJudge(N int, trust [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findJudge(N: Int, trust: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findJudge(N: Int, trust: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_judge(n: i32, trust: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $trust\n     * @return Integer\n     */\n    function findJudge($N, $trust) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findJudge(N: number, trust: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1040", "frontend_question_id": "0998", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-binary-tree-ii", "url_en": "https://leetcode.com/problems/maximum-binary-tree-ii", "relative_path_cn": "/leetcode/0900-0999/0998.Maximum%20Binary%20Tree%20II/README.md", "relative_path_en": "/leetcode/0900-0999/0998.Maximum%20Binary%20Tree%20II/README_EN.md", "title_cn": "\u6700\u5927\u4e8c\u53c9\u6811 II", "title_en": "Maximum Binary Tree II", "question_title_slug": "maximum-binary-tree-ii", "content_en": "<p>We are given the <code>root</code>&nbsp;node of a <em>maximum tree:</em> a tree where every node has a value greater than any other value in its subtree.</p>\n\n<p>Just as in the <a href=\"https://leetcode.com/problems/maximum-binary-tree/\">previous problem</a>, the given tree&nbsp;was constructed from an list&nbsp;<code>A</code>&nbsp;(<code>root = Construct(A)</code>) recursively with the following&nbsp;<code>Construct(A)</code> routine:</p>\n\n<ul>\n\t<li>If <code>A</code> is empty, return <code>null</code>.</li>\n\t<li>Otherwise, let <code>A[i]</code> be the largest element of <code>A</code>.&nbsp; Create a <code>root</code> node with value <code>A[i]</code>.</li>\n\t<li>The left child of <code>root</code> will be <code>Construct([A[0], A[1], ..., A[i-1]])</code></li>\n\t<li>The right child of <code>root</code>&nbsp;will be <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li>\n\t<li>Return <code>root</code>.</li>\n</ul>\n\n<p>Note that we were not given A directly, only a root node <code>root = Construct(A)</code>.</p>\n\n<p>Suppose <code>B</code> is a copy of <code>A</code> with the value <code>val</code> appended to it.&nbsp; It is guaranteed that <code>B</code> has unique values.</p>\n\n<p>Return <code>Construct(B)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-1-1.png\" style=\"width: 159px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-1-2.png\" style=\"width: 169px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[4,1,3,null,null,2]</span>, val = <span id=\"example-input-1-2\">5</span>\n<strong>Output: </strong><span id=\"example-output-1\">[5,4,null,1,3,null,null,2]\n<strong>Explanation:</strong> A = </span><span>[1,4,2,3], B = </span><span>[1,4,2,3,5]</span>\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-2-1.png\" style=\"width: 180px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-2-2.png\" style=\"width: 214px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[5,2,4,null,1]</span>, val = <span id=\"example-input-2-2\">3</span>\n<strong>Output: </strong><span id=\"example-output-2\">[5,2,4,null,1,null,3]\n</span><span id=\"example-output-1\"><strong>Explanation:</strong> A = </span><span>[2,1,5,4], B = </span><span>[2,1,5,4,3]</span>\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-3-1.png\" style=\"width: 180px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-3-2.png\" style=\"width: 201px; height: 160px;\" /></strong></p>\n\n<pre>\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[5,2,3,null,1]</span>, val = <span id=\"example-input-3-2\">4</span>\n<strong>Output: </strong><span id=\"example-output-3\">[5,2,4,null,1,3]\n</span><span id=\"example-output-1\"><strong>Explanation:</strong> A = </span><span>[2,1,5,3], B = </span><span>[2,1,5,3,4]</span>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= B.length &lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u6700\u5927\u6811\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5176\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u503c\u3002</p>\n\n<p>\u7ed9\u51fa\u6700\u5927\u6811\u7684\u6839\u8282\u70b9 <code>root</code>\u3002</p>\n\n<p>\u5c31\u50cf<a href=\"https://leetcode-cn.com/problems/maximum-binary-tree/\">\u4e4b\u524d\u7684\u95ee\u9898</a>\u90a3\u6837\uff0c\u7ed9\u5b9a\u7684\u6811\u662f\u4ece\u8868&nbsp;<code>A</code>\uff08<code>root = Construct(A)</code>\uff09\u9012\u5f52\u5730\u4f7f\u7528\u4e0b\u8ff0&nbsp;<code>Construct(A)</code>&nbsp;\u4f8b\u7a0b\u6784\u9020\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>A</code>&nbsp;\u4e3a\u7a7a\uff0c\u8fd4\u56de&nbsp;<code>null</code></li>\n\t<li>\u5426\u5219\uff0c\u4ee4&nbsp;<code>A[i]</code>&nbsp;\u4f5c\u4e3a A \u7684\u6700\u5927\u5143\u7d20\u3002\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a&nbsp;<code>A[i]</code>&nbsp;\u7684\u6839\u8282\u70b9 <code>root</code></li>\n\t<li><code>root</code>&nbsp;\u7684\u5de6\u5b50\u6811\u5c06\u88ab\u6784\u5efa\u4e3a&nbsp;<code>Construct([A[0], A[1], ..., A[i-1]])</code></li>\n\t<li><code>root</code>&nbsp;\u7684\u53f3\u5b50\u6811\u5c06\u88ab\u6784\u5efa\u4e3a <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li>\n\t<li>\u8fd4\u56de&nbsp;<code>root</code></li>\n</ul>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u76f4\u63a5\u7ed9\u5b9a&nbsp;A\uff0c\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9&nbsp;<code>root = Construct(A)</code>.</p>\n\n<p>\u5047\u8bbe <code>B</code> \u662f <code>A</code> \u7684\u526f\u672c\uff0c\u5e76\u9644\u52a0\u503c <code>val</code>\u3002\u4fdd\u8bc1 <code>B</code>&nbsp;\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>Construct(B)</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-1.png\" style=\"height: 160px; width: 159px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-2.png\" style=\"height: 160px; width: 169px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [4,1,3,null,null,2], val = 5\n<strong>\u8f93\u51fa\uff1a</strong>[5,4,null,1,3,null,null,2]\n<strong>\u89e3\u91ca\uff1a</strong>A = [1,4,2,3], B = [1,4,2,3,5]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-1.png\" style=\"height: 160px; width: 180px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-2.png\" style=\"height: 160px; width: 214px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [5,2,4,null,1], val = 3\n<strong>\u8f93\u51fa\uff1a</strong>[5,2,4,null,1,null,3]\n<strong>\u89e3\u91ca\uff1a</strong>A = [2,1,5,4], B = [2,1,5,4,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-1.png\" style=\"height: 160px; width: 180px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-2.png\" style=\"height: 160px; width: 201px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [5,2,3,null,1], val = 4\n<strong>\u8f93\u51fa\uff1a</strong>[5,2,4,null,1,3]\n<strong>\u89e3\u91ca\uff1a</strong>A = [2,1,5,3], B = [2,1,5,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= B.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoMaxTree(TreeNode* root, int val) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode insertIntoMaxTree(TreeNode root, int val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def insertIntoMaxTree(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoMaxTree(self, root: TreeNode, val: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* insertIntoMaxTree(struct TreeNode* root, int val){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode InsertIntoMaxTree(TreeNode root, int val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */\nvar insertIntoMaxTree = function(root, val) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} val\n# @return {TreeNode}\ndef insert_into_max_tree(root, val)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func insertIntoMaxTree(_ root: TreeNode?, _ val: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc insertIntoMaxTree(root *TreeNode, val int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def insertIntoMaxTree(root: TreeNode, `val`: Int): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun insertIntoMaxTree(root: TreeNode?, `val`: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn insert_into_max_tree(root: Option<Rc<RefCell<TreeNode>>>, val: i32) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $val\n     * @return TreeNode\n     */\n    function insertIntoMaxTree($root, $val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction insertIntoMaxTree(root: TreeNode | null, val: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1041", "frontend_question_id": "0999", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/available-captures-for-rook", "url_en": "https://leetcode.com/problems/available-captures-for-rook", "relative_path_cn": "/leetcode/0900-0999/0999.Available%20Captures%20for%20Rook/README.md", "relative_path_en": "/leetcode/0900-0999/0999.Available%20Captures%20for%20Rook/README_EN.md", "title_cn": "\u53ef\u4ee5\u88ab\u4e00\u6b65\u6355\u83b7\u7684\u68cb\u5b50\u6570", "title_en": "Available Captures for Rook", "question_title_slug": "available-captures-for-rook", "content_en": "<p>On an 8 x 8 chessboard, there is one white rook.&nbsp; There also may be empty squares, white bishops, and black pawns.&nbsp; These are given as characters &#39;R&#39;, &#39;.&#39;, &#39;B&#39;, and &#39;p&#39; respectively. Uppercase characters represent white pieces, and lowercase characters represent black pieces.</p>\r\n\r\n<p>The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east, west, and south), then moves in that direction until it chooses to stop, reaches the edge of the board, or captures an opposite colored pawn by moving to the same square it occupies.&nbsp; Also, rooks cannot move into the same square as other friendly bishops.</p>\r\n\r\n<p>Return the number of pawns the rook can capture in one move.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/20/1253_example_1_improved.PNG\" style=\"width: 300px; height: 305px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nIn this example the rook is able to capture all the pawns.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/19/1253_example_2_improved.PNG\" style=\"width: 300px; height: 306px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;R&quot;,&quot;B&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nBishops are blocking the rook to capture any pawn.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/20/1253_example_3_improved.PNG\" style=\"width: 300px; height: 305px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nThe rook can capture the pawns at positions b5, d6 and f5.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>board.length == board[i].length == 8</code></li>\r\n\t<li><code>board[i][j]</code> is either <code>&#39;R&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;B&#39;</code>, or&nbsp;<code>&#39;p&#39;</code></li>\r\n\t<li>There is exactly one cell with <code>board[i][j] == &#39;R&#39;</code></li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a 8 x 8 \u7684\u68cb\u76d8\u4e0a\uff0c\u6709\u4e00\u4e2a\u767d\u8272\u7684\u8f66\uff08<code>Rook</code>\uff09\uff0c\u7528\u5b57\u7b26 <code>&#39;R&#39;</code> \u8868\u793a\u3002\u68cb\u76d8\u4e0a\u8fd8\u53ef\u80fd\u5b58\u5728\u7a7a\u65b9\u5757\uff0c\u767d\u8272\u7684\u8c61\uff08<code>Bishop</code>\uff09\u4ee5\u53ca\u9ed1\u8272\u7684\u5352\uff08<code>pawn</code>\uff09\uff0c\u5206\u522b\u7528\u5b57\u7b26 <code>&#39;.&#39;</code>\uff0c<code>&#39;B&#39;</code> \u548c <code>&#39;p&#39;</code> \u8868\u793a\u3002\u4e0d\u96be\u770b\u51fa\uff0c\u5927\u5199\u5b57\u7b26\u8868\u793a\u7684\u662f\u767d\u68cb\uff0c\u5c0f\u5199\u5b57\u7b26\u8868\u793a\u7684\u662f\u9ed1\u68cb\u3002</p>\n\n<p>\u8f66\u6309\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u89c4\u5219\u79fb\u52a8\u3002\u4e1c\uff0c\u897f\uff0c\u5357\uff0c\u5317\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4efb\u9009\u5176\u4e00\uff0c\u7136\u540e\u4e00\u76f4\u5411\u9009\u5b9a\u7684\u65b9\u5411\u79fb\u52a8\uff0c\u76f4\u5230\u6ee1\u8db3\u4e0b\u5217\u56db\u4e2a\u6761\u4ef6\u4e4b\u4e00\uff1a</p>\n\n<ul>\n\t<li>\u68cb\u624b\u9009\u62e9\u4e3b\u52a8\u505c\u4e0b\u6765\u3002</li>\n\t<li>\u68cb\u5b50\u56e0\u5230\u8fbe\u68cb\u76d8\u7684\u8fb9\u7f18\u800c\u505c\u4e0b\u3002</li>\n\t<li>\u68cb\u5b50\u79fb\u52a8\u5230\u67d0\u4e00\u65b9\u683c\u6765\u6355\u83b7\u4f4d\u4e8e\u8be5\u65b9\u683c\u4e0a\u654c\u65b9\uff08\u9ed1\u8272\uff09\u7684\u5352\uff0c\u505c\u5728\u8be5\u65b9\u683c\u5185\u3002</li>\n\t<li>\u8f66\u4e0d\u80fd\u8fdb\u5165/\u8d8a\u8fc7\u5df2\u7ecf\u653e\u6709\u5176\u4ed6\u53cb\u65b9\u68cb\u5b50\uff08\u767d\u8272\u7684\u8c61\uff09\u7684\u65b9\u683c\uff0c\u505c\u5728\u53cb\u65b9\u68cb\u5b50\u524d\u3002</li>\n</ul>\n\n<p>\u4f60\u73b0\u5728\u53ef\u4ee5\u63a7\u5236\u8f66\u79fb\u52a8\u4e00\u6b21\uff0c\u8bf7\u4f60\u7edf\u8ba1\u6709\u591a\u5c11\u654c\u65b9\u7684\u5352\u5904\u4e8e\u4f60\u7684\u6355\u83b7\u8303\u56f4\u5185\uff08\u5373\uff0c\u53ef\u4ee5\u88ab\u4e00\u6b65\u6355\u83b7\u7684\u68cb\u5b50\u6570\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_1_improved.PNG\" style=\"height: 305px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5728\u672c\u4f8b\u4e2d\uff0c\u8f66\u80fd\u591f\u6355\u83b7\u6240\u6709\u7684\u5352\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_2_improved.PNG\" style=\"height: 306px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;R&quot;,&quot;B&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8c61\u963b\u6b62\u4e86\u8f66\u6355\u83b7\u4efb\u4f55\u5352\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_3_improved.PNG\" style=\"height: 305px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u8f66\u53ef\u4ee5\u6355\u83b7\u4f4d\u7f6e b5\uff0cd6 \u548c f5 \u7684\u5352\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>board.length == board[i].length == 8</code></li>\n\t<li><code>board[i][j]</code> \u53ef\u4ee5\u662f&nbsp;<code>&#39;R&#39;</code>\uff0c<code>&#39;.&#39;</code>\uff0c<code>&#39;B&#39;</code>&nbsp;\u6216&nbsp;<code>&#39;p&#39;</code></li>\n\t<li>\u53ea\u6709\u4e00\u4e2a\u683c\u5b50\u4e0a\u5b58\u5728&nbsp;<code>board[i][j] == &#39;R&#39;</code></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numRookCaptures(vector<vector<char>>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numRookCaptures(char[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numRookCaptures(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numRookCaptures(char** board, int boardSize, int* boardColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumRookCaptures(char[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @return {number}\n */\nvar numRookCaptures = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} board\n# @return {Integer}\ndef num_rook_captures(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numRookCaptures(_ board: [[Character]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numRookCaptures(board [][]byte) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numRookCaptures(board: Array[Array[Char]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numRookCaptures(board: Array<CharArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_rook_captures(board: Vec<Vec<char>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Integer\n     */\n    function numRookCaptures($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numRookCaptures(board: string[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}]}