{"leetcode": [{"question_id": "0400", "frontend_question_id": "0400", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/nth-digit", "url_en": "https://leetcode.com/problems/nth-digit", "relative_path_cn": "/leetcode/0400-0499/0400.Nth%20Digit/README.md", "relative_path_en": "/leetcode/0400-0499/0400.Nth%20Digit/README_EN.md", "title_cn": "\u7b2cN\u4e2a\u6570\u5b57", "title_en": "Nth Digit", "question_title_slug": "nth-digit", "content_en": "<p>Find the <i>n</i><sup>th</sup> digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... </p>\r\n\r\n<p><b>Note:</b><br />\r\n<i>n</i> is positive and will fit within the range of a 32-bit signed integer (<i>n</i> < 2<sup>31</sup>).\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\n3\r\n\r\n<b>Output:</b>\r\n3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\n11\r\n\r\n<b>Output:</b>\r\n0\r\n\r\n<b>Explanation:</b>\r\nThe 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\r\n</pre>\r\n</p>", "content_cn": "<p>\u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217&nbsp;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c&nbsp;<em>n&nbsp;</em>\u4e2a\u6570\u5b57\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n<em>n&nbsp;</em>\u662f\u6b63\u6570\u4e14\u572832\u4f4d\u6574\u6570\u8303\u56f4\u5185&nbsp;(&nbsp;<em>n</em> &lt; 2<sup>31</sup>)\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n3\n\n<strong>\u8f93\u51fa:</strong>\n3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n11\n\n<strong>\u8f93\u51fa:</strong>\n0\n\n<strong>\u8bf4\u660e:</strong>\n\u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f<strong>0</strong>\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findNthDigit(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findNthDigit(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findNthDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findNthDigit(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindNthDigit(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar findNthDigit = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef find_nth_digit(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findNthDigit(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findNthDigit(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findNthDigit(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findNthDigit(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_nth_digit(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findNthDigit($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findNthDigit(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0401", "frontend_question_id": "0401", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-watch", "url_en": "https://leetcode.com/problems/binary-watch", "relative_path_cn": "/leetcode/0400-0499/0401.Binary%20Watch/README.md", "relative_path_en": "/leetcode/0400-0499/0401.Binary%20Watch/README_EN.md", "title_cn": "\u4e8c\u8fdb\u5236\u624b\u8868", "title_en": "Binary Watch", "question_title_slug": "binary-watch", "content_en": "<p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p>\r\n<p>Each LED represents a zero or one, with the least significant bit on the right.</p>\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" height=\"300\" />\r\n<p>For example, the above binary watch reads \"3:25\".</p>\r\n\r\n<p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>Input: n = 1<br>Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The order of output does not matter.</li>\r\n<li>The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".</li>\r\n<li>The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</li>\r\n</ul>\r\n</p>", "content_cn": "<p>\u4e8c\u8fdb\u5236\u624b\u8868\u9876\u90e8\u6709 4 \u4e2a LED \u4ee3\u8868<strong> \u5c0f\u65f6\uff080-11\uff09</strong>\uff0c\u5e95\u90e8\u7684 6 \u4e2a LED \u4ee3\u8868<strong> \u5206\u949f\uff080-59\uff09</strong>\u3002</p>\n\n<p>\u6bcf\u4e2a LED \u4ee3\u8868\u4e00\u4e2a 0 \u6216 1\uff0c\u6700\u4f4e\u4f4d\u5728\u53f3\u4fa7\u3002</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" style=\"height: 300px;\"></p>\n\n<p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4e8c\u8fdb\u5236\u624b\u8868\u8bfb\u53d6 &ldquo;3:25&rdquo;\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <em>n&nbsp;</em>\u4ee3\u8868\u5f53\u524d LED \u4eae\u7740\u7684\u6570\u91cf\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u8f93\u5165: n = 1\n\u8fd4\u56de: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7684\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002</li>\n\t<li>\u5c0f\u65f6\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\uff0c\u6bd4\u5982 &ldquo;01:00&rdquo;&nbsp;\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u5e94\u4e3a &ldquo;1:00&rdquo;\u3002</li>\n\t<li>\u5206\u949f\u5fc5\u987b\u7531\u4e24\u4f4d\u6570\u7ec4\u6210\uff0c\u53ef\u80fd\u4f1a\u4ee5\u96f6\u5f00\u5934\uff0c\u6bd4\u5982 &ldquo;10:2&rdquo;&nbsp;\u662f\u65e0\u6548\u7684\uff0c\u5e94\u4e3a &ldquo;10:02&rdquo;\u3002</li>\n\t<li>\u8d85\u8fc7\u8868\u793a\u8303\u56f4\uff08<strong>\u5c0f\u65f6 0-11\uff0c\u5206\u949f 0-59</strong>\uff09\u7684\u6570\u636e\u5c06\u4f1a\u88ab\u820d\u5f03\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u51fa\u73b0 &quot;13:00&quot;, &quot;0:61&quot; \u7b49\u65f6\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Backtracking"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> readBinaryWatch(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> readBinaryWatch(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def readBinaryWatch(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def readBinaryWatch(self, num: int) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** readBinaryWatch(int num, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> ReadBinaryWatch(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string[]}\n */\nvar readBinaryWatch = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String[]}\ndef read_binary_watch(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func readBinaryWatch(_ num: Int) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func readBinaryWatch(num int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def readBinaryWatch(num: Int): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun readBinaryWatch(num: Int): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn read_binary_watch(num: i32) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String[]\n     */\n    function readBinaryWatch($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function readBinaryWatch(num: number): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0402", "frontend_question_id": "0402", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-k-digits", "url_en": "https://leetcode.com/problems/remove-k-digits", "relative_path_cn": "/leetcode/0400-0499/0402.Remove%20K%20Digits/README.md", "relative_path_en": "/leetcode/0400-0499/0402.Remove%20K%20Digits/README_EN.md", "title_cn": "\u79fb\u6389K\u4f4d\u6570\u5b57", "title_en": "Remove K Digits", "question_title_slug": "remove-k-digits", "content_en": "<p>Given a non-negative integer <i>num</i> represented as a string, remove <i>k</i> digits from the number so that the new number is the smallest possible.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The length of <i>num</i> is less than 10002 and will be &ge; <i>k</i>.</li>\r\n<li>The given <i>num</i> does not contain any leading zero.</li>\r\n</ul>\r\n</b>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput: num = \"1432219\", k = 3\r\nOutput: \"1219\"\r\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput: num = \"10200\", k = 1\r\nOutput: \"200\"\r\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b>\r\n<pre>\r\nInput: num = \"10\", k = 2\r\nOutput: \"0\"\r\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&nbsp;<em>num</em>\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 <em>k </em>\u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><em>num</em> \u7684\u957f\u5ea6\u5c0f\u4e8e 10002 \u4e14&nbsp;&ge; <em>k\u3002</em></li>\n\t<li><em>num</em> \u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;1432219&quot;, k = 3\n\u8f93\u51fa: &quot;1219&quot;\n\u89e3\u91ca: \u79fb\u9664\u6389\u4e09\u4e2a\u6570\u5b57 4, 3, \u548c 2 \u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u7684\u6570\u5b57 1219\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;10200&quot;, k = 1\n\u8f93\u51fa: &quot;200&quot;\n\u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6\u3002\n</pre>\n\n<p>\u793a\u4f8b<strong> 3 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;10&quot;, k = 2\n\u8f93\u51fa: &quot;0&quot;\n\u89e3\u91ca: \u4ece\u539f\u6570\u5b57\u79fb\u9664\u6240\u6709\u7684\u6570\u5b57\uff0c\u5269\u4f59\u4e3a\u7a7a\u5c31\u662f0\u3002\n</pre>\n", "tags_en": ["Stack", "Greedy"], "tags_cn": ["\u6808", "\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String removeKdigits(String num, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeKdigits(self, num, k):\n        \"\"\"\n        :type num: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * removeKdigits(char * num, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string RemoveKdigits(string num, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @param {number} k\n * @return {string}\n */\nvar removeKdigits = function(num, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @param {Integer} k\n# @return {String}\ndef remove_kdigits(num, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeKdigits(_ num: String, _ k: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeKdigits(num string, k int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeKdigits(num: String, k: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeKdigits(num: String, k: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_kdigits(num: String, k: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @param Integer $k\n     * @return String\n     */\n    function removeKdigits($num, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeKdigits(num: string, k: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0403", "frontend_question_id": "0403", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/frog-jump", "url_en": "https://leetcode.com/problems/frog-jump", "relative_path_cn": "/leetcode/0400-0499/0403.Frog%20Jump/README.md", "relative_path_en": "/leetcode/0400-0499/0403.Frog%20Jump/README_EN.md", "title_cn": "\u9752\u86d9\u8fc7\u6cb3", "title_en": "Frog Jump", "question_title_slug": "frog-jump", "content_en": "<p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\r\n\r\n<p>Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\r\n</p>\r\n\r\n<p>If the frog's last jump was <i>k</i> units, then its next jump must be either <i>k</i> - 1, <i>k</i>, or <i>k</i> + 1 units. Note that the frog can only jump in the forward direction.</p>\r\n\r\n<p><b>Note:</b>\r\n<ul>\r\n<li>The number of stones is &ge; 2 and is < 1,100.</li>\r\n<li>Each stone's position will be a non-negative integer < 2<sup>31</sup>.</li>\r\n<li>The first stone's position is always 0.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>[0,1,3,5,6,8,12,17]</b>\r\n\r\nThere are a total of 8 stones.\r\nThe first stone at the 0th unit, second stone at the 1st unit,\r\nthird stone at the 3rd unit, and so on...\r\nThe last stone at the 17th unit.\r\n\r\n<b>Return true</b>. The frog can jump to the last stone by jumping \r\n1 unit to the 2nd stone, then 2 units to the 3rd stone, then \r\n2 units to the 4th stone, then 3 units to the 6th stone, \r\n4 units to the 7th stone, and 5 units to the 8th stone.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>[0,1,2,3,4,8,9,11]</b>\r\n\r\n<b>Return false</b>. There is no way to jump to the last stone as \r\nthe gap between the 5th and 6th stone is too large.\r\n</pre>\r\n</p>", "content_cn": "<p>\u4e00\u53ea\u9752\u86d9\u60f3\u8981\u8fc7\u6cb3\u3002 \u5047\u5b9a\u6cb3\u6d41\u88ab\u7b49\u5206\u4e3a&nbsp;x<em>&nbsp;</em>\u4e2a\u5355\u5143\u683c\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u4e2a\u5355\u5143\u683c\u5185\u90fd\u6709\u53ef\u80fd\u653e\u6709\u4e00\u77f3\u5b50\uff08\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\uff09\u3002 \u9752\u86d9\u53ef\u4ee5\u8df3\u4e0a\u77f3\u5934\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8df3\u5165\u6c34\u4e2d\u3002</p>\n\n<p>\u7ed9\u5b9a\u77f3\u5b50\u7684\u4f4d\u7f6e\u5217\u8868\uff08\u7528\u5355\u5143\u683c\u5e8f\u53f7\u5347\u5e8f\u8868\u793a\uff09\uff0c&nbsp;<strong>\u8bf7\u5224\u5b9a\u9752\u86d9\u80fd\u5426\u6210\u529f\u8fc7\u6cb3</strong>\uff08\u5373\u80fd\u5426\u5728\u6700\u540e\u4e00\u6b65\u8df3\u81f3\u6700\u540e\u4e00\u4e2a\u77f3\u5b50\u4e0a\uff09\u3002&nbsp;\u5f00\u59cb\u65f6\uff0c&nbsp;\u9752\u86d9\u9ed8\u8ba4\u5df2\u7ad9\u5728\u7b2c\u4e00\u4e2a\u77f3\u5b50\u4e0a\uff0c\u5e76\u53ef\u4ee5\u5047\u5b9a\u5b83\u7b2c\u4e00\u6b65\u53ea\u80fd\u8df3\u8dc3\u4e00\u4e2a\u5355\u4f4d\uff08\u5373\u53ea\u80fd\u4ece\u5355\u5143\u683c1\u8df3\u81f3\u5355\u5143\u683c2\uff09\u3002</p>\n\n<p>\u5982\u679c\u9752\u86d9\u4e0a\u4e00\u6b65\u8df3\u8dc3\u4e86&nbsp;<em>k&nbsp;</em>\u4e2a\u5355\u4f4d\uff0c\u90a3\u4e48\u5b83\u63a5\u4e0b\u6765\u7684\u8df3\u8dc3\u8ddd\u79bb\u53ea\u80fd\u9009\u62e9\u4e3a&nbsp;<em>k - 1</em>\u3001<em>k&nbsp;</em>\u6216&nbsp;<em>k + 1</em>\u4e2a\u5355\u4f4d\u3002&nbsp;\u53e6\u8bf7\u6ce8\u610f\uff0c\u9752\u86d9\u53ea\u80fd\u5411\u524d\u65b9\uff08\u7ec8\u70b9\u7684\u65b9\u5411\uff09\u8df3\u8dc3\u3002</p>\n\n<p><strong>\u8bf7\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u77f3\u5b50\u7684\u6570\u91cf &ge; 2 \u4e14&nbsp;&lt; 1100\uff1b</li>\n\t<li>\u6bcf\u4e00\u4e2a\u77f3\u5b50\u7684\u4f4d\u7f6e\u5e8f\u53f7\u90fd\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u5176 &lt; 2<sup>31</sup>\uff1b</li>\n\t<li>\u7b2c\u4e00\u4e2a\u77f3\u5b50\u7684\u4f4d\u7f6e\u6c38\u8fdc\u662f0\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>[0,1,3,5,6,8,12,17]</strong>\n\n\u603b\u5171\u67098\u4e2a\u77f3\u5b50\u3002\n\u7b2c\u4e00\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a0\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e, \u7b2c\u4e8c\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a1\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e,\n\u7b2c\u4e09\u4e2a\u77f3\u5b50\u5728\u5e8f\u53f7\u4e3a3\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e\uff0c \u4ee5\u6b64\u5b9a\u4e49\u6574\u4e2a\u6570\u7ec4...\n\u6700\u540e\u4e00\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a17\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e\u3002\n\n\u8fd4\u56de <strong>true</strong>\u3002\u5373\u9752\u86d9\u53ef\u4ee5\u6210\u529f\u8fc7\u6cb3\uff0c\u6309\u7167\u5982\u4e0b\u65b9\u6848\u8df3\u8dc3\uff1a \n\u8df31\u4e2a\u5355\u4f4d\u5230\u7b2c2\u5757\u77f3\u5b50, \u7136\u540e\u8df32\u4e2a\u5355\u4f4d\u5230\u7b2c3\u5757\u77f3\u5b50, \u63a5\u7740 \n\u8df32\u4e2a\u5355\u4f4d\u5230\u7b2c4\u5757\u77f3\u5b50, \u7136\u540e\u8df33\u4e2a\u5355\u4f4d\u5230\u7b2c6\u5757\u77f3\u5b50, \n\u8df34\u4e2a\u5355\u4f4d\u5230\u7b2c7\u5757\u77f3\u5b50, \u6700\u540e\uff0c\u8df35\u4e2a\u5355\u4f4d\u5230\u7b2c8\u4e2a\u77f3\u5b50\uff08\u5373\u6700\u540e\u4e00\u5757\u77f3\u5b50\uff09\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>[0,1,2,3,4,8,9,11]</strong>\n\n\u8fd4\u56de <strong>false\u3002</strong>\u9752\u86d9\u6ca1\u6709\u529e\u6cd5\u8fc7\u6cb3\u3002 \n\u8fd9\u662f\u56e0\u4e3a\u7b2c5\u548c\u7b2c6\u4e2a\u77f3\u5b50\u4e4b\u95f4\u7684\u95f4\u8ddd\u592a\u5927\uff0c\u6ca1\u6709\u53ef\u9009\u7684\u65b9\u6848\u4f9b\u9752\u86d9\u8df3\u8dc3\u8fc7\u53bb\u3002\n</pre>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canCross(vector<int>& stones) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canCross(int[] stones) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canCross(int* stones, int stonesSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanCross(int[] stones) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} stones\n * @return {boolean}\n */\nvar canCross = function(stones) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} stones\n# @return {Boolean}\ndef can_cross(stones)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canCross(_ stones: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canCross(stones []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canCross(stones: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canCross(stones: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_cross(stones: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @return Boolean\n     */\n    function canCross($stones) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canCross(stones: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0404", "frontend_question_id": "0404", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-left-leaves", "url_en": "https://leetcode.com/problems/sum-of-left-leaves", "relative_path_cn": "/leetcode/0400-0499/0404.Sum%20of%20Left%20Leaves/README.md", "relative_path_en": "/leetcode/0400-0499/0404.Sum%20of%20Left%20Leaves/README_EN.md", "title_cn": "\u5de6\u53f6\u5b50\u4e4b\u548c", "title_en": "Sum of Left Leaves", "question_title_slug": "sum-of-left-leaves", "content_en": "<p>Find the sum of all left leaves in a given binary tree.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\nThere are two left leaves in the binary tree, with values <b>9</b> and <b>15</b> respectively. Return <b>24</b>.\r\n</pre>\r\n</p>", "content_cn": "<p>\u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\u5728\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709\u4e24\u4e2a\u5de6\u53f6\u5b50\uff0c\u5206\u522b\u662f 9 \u548c 15\uff0c\u6240\u4ee5\u8fd4\u56de 24</pre>\n\n<p>&nbsp;</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint sumOfLeftLeaves(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int SumOfLeftLeaves(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumOfLeftLeaves = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef sum_of_left_leaves(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func sumOfLeftLeaves(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sumOfLeftLeaves(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sumOfLeftLeaves(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun sumOfLeftLeaves(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn sum_of_left_leaves(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function sumOfLeftLeaves($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction sumOfLeftLeaves(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0405", "frontend_question_id": "0405", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal", "url_en": "https://leetcode.com/problems/convert-a-number-to-hexadecimal", "relative_path_cn": "/leetcode/0400-0499/0405.Convert%20a%20Number%20to%20Hexadecimal/README.md", "relative_path_en": "/leetcode/0400-0499/0405.Convert%20a%20Number%20to%20Hexadecimal/README_EN.md", "title_cn": "\u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570", "title_en": "Convert a Number to Hexadecimal", "question_title_slug": "convert-a-number-to-hexadecimal", "content_en": "<p>\r\nGiven an integer, write an algorithm to convert it to hexadecimal. For negative integer, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two\u2019s complement</a> method is used.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li>\r\n<li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>'0'</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li>\r\n<li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li>\r\n<li>You <b>must not use <i>any</i> method provided by the library</b> which converts/formats the number to hex directly.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput:\r\n26\r\n\r\nOutput:\r\n\"1a\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput:\r\n-1\r\n\r\nOutput:\r\n\"ffffffff\"\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528&nbsp;<a href=\"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin\">\u8865\u7801\u8fd0\u7b97</a>&nbsp;\u65b9\u6cd5\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd(<code>a-f</code>)\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002</li>\n\t<li>\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26<code>&#39;0&#39;</code>\u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002&nbsp;</li>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n\t<li><strong>\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002</strong></li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n\u8f93\u5165:\n26\n\n\u8f93\u51fa:\n&quot;1a&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n\u8f93\u5165:\n-1\n\n\u8f93\u51fa:\n&quot;ffffffff&quot;\n</pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string toHex(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String toHex(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def toHex(self, num: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * toHex(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ToHex(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar toHex = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String}\ndef to_hex(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func toHex(_ num: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func toHex(num int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def toHex(num: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun toHex(num: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn to_hex(num: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function toHex($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function toHex(num: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0406", "frontend_question_id": "0406", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/queue-reconstruction-by-height", "url_en": "https://leetcode.com/problems/queue-reconstruction-by-height", "relative_path_cn": "/leetcode/0400-0499/0406.Queue%20Reconstruction%20by%20Height/README.md", "relative_path_en": "/leetcode/0400-0499/0406.Queue%20Reconstruction%20by%20Height/README_EN.md", "title_cn": "\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217", "title_en": "Queue Reconstruction by Height", "question_title_slug": "queue-reconstruction-by-height", "content_en": "<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with <strong>exactly</strong> <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p>\n\n<p>Reconstruct and return <em>the queue that is represented by the input array </em><code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>Explanation:</strong>\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= people.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li>\n\t<li>It is guaranteed that the queue can be reconstructed.</li>\n</ul>\n", "content_cn": "<p>\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6570\u7ec4 <code>people</code> \u8868\u793a\u961f\u5217\u4e2d\u4e00\u4e9b\u4eba\u7684\u5c5e\u6027\uff08\u4e0d\u4e00\u5b9a\u6309\u987a\u5e8f\uff09\u3002\u6bcf\u4e2a <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> \u8868\u793a\u7b2c <code>i</code> \u4e2a\u4eba\u7684\u8eab\u9ad8\u4e3a <code>h<sub>i</sub></code> \uff0c\u524d\u9762 <strong>\u6b63\u597d</strong> \u6709 <code>k<sub>i</sub></code><sub> </sub>\u4e2a\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8e <code>h<sub>i</sub></code> \u7684\u4eba\u3002</p>\n\n<p>\u8bf7\u4f60\u91cd\u65b0\u6784\u9020\u5e76\u8fd4\u56de\u8f93\u5165\u6570\u7ec4\u00a0<code>people</code> \u6240\u8868\u793a\u7684\u961f\u5217\u3002\u8fd4\u56de\u7684\u961f\u5217\u5e94\u8be5\u683c\u5f0f\u5316\u4e3a\u6570\u7ec4 <code>queue</code> \uff0c\u5176\u4e2d <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> \u662f\u961f\u5217\u4e2d\u7b2c <code>j</code> \u4e2a\u4eba\u7684\u5c5e\u6027\uff08<code>queue[0]</code> \u662f\u6392\u5728\u961f\u5217\u524d\u9762\u7684\u4eba\uff09\u3002</p>\n\n<p>\u00a0</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>\u8f93\u51fa\uff1a</strong>[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7f16\u53f7\u4e3a 0 \u7684\u4eba\u8eab\u9ad8\u4e3a 5 \uff0c\u6ca1\u6709\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\u3002\n\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u8eab\u9ad8\u4e3a 7 \uff0c\u6ca1\u6709\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\u3002\n\u7f16\u53f7\u4e3a 2 \u7684\u4eba\u8eab\u9ad8\u4e3a 5 \uff0c\u6709 2 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 0 \u548c 1 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 3 \u7684\u4eba\u8eab\u9ad8\u4e3a 6 \uff0c\u6709 1 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 4 \u7684\u4eba\u8eab\u9ad8\u4e3a 4 \uff0c\u6709 4 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 0\u30011\u30012\u30013 \u7684\u4eba\u3002\n\u7f16\u53f7\u4e3a 5 \u7684\u4eba\u8eab\u9ad8\u4e3a 7 \uff0c\u6709 1 \u4e2a\u8eab\u9ad8\u66f4\u9ad8\u6216\u8005\u76f8\u540c\u7684\u4eba\u6392\u5728\u4ed6\u524d\u9762\uff0c\u5373\u7f16\u53f7\u4e3a 1 \u7684\u4eba\u3002\n\u56e0\u6b64 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] \u662f\u91cd\u65b0\u6784\u9020\u540e\u7684\u961f\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>\u8f93\u51fa\uff1a</strong>[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= people.length <= 2000</code></li>\n\t<li><code>0 <= h<sub>i</sub> <= 10<sup>6</sup></code></li>\n\t<li><code>0 <= k<sub>i</sub> < people.length</code></li>\n\t<li>\u9898\u76ee\u6570\u636e\u786e\u4fdd\u961f\u5217\u53ef\u4ee5\u88ab\u91cd\u5efa</li>\n</ul>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reconstructQueue(self, people):\n        \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** reconstructQueue(int** people, int peopleSize, int* peopleColSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] ReconstructQueue(int[][] people) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} people\n * @return {number[][]}\n */\nvar reconstructQueue = function(people) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} people\n# @return {Integer[][]}\ndef reconstruct_queue(people)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reconstructQueue(people [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reconstructQueue(people: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reconstruct_queue(people: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $people\n     * @return Integer[][]\n     */\n    function reconstructQueue($people) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reconstructQueue(people: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0407", "frontend_question_id": "0407", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/trapping-rain-water-ii", "url_en": "https://leetcode.com/problems/trapping-rain-water-ii", "relative_path_cn": "/leetcode/0400-0499/0407.Trapping%20Rain%20Water%20II/README.md", "relative_path_en": "/leetcode/0400-0499/0407.Trapping%20Rain%20Water%20II/README_EN.md", "title_cn": "\u63a5\u96e8\u6c34 II", "title_en": "Trapping Rain Water II", "question_title_slug": "trapping-rain-water-ii", "content_en": "<p>Given an <code>m x n</code> matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.</p>\n\n<p><b>Example:</b></p>\n\n<pre>\nGiven the following 3x6 height map:\n[\n  [1,4,3,1,3,2],\n  [3,2,1,3,2,4],\n  [2,3,3,2,3,1]\n]\n\nReturn 4.\n</pre>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\" /></p>\n\n<p>The above image represents the elevation map <code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> before the rain.</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\" /></p>\n\n<p>After the rain, water is trapped between the blocks. The total volume of water trapped is 4.</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 110</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 20000</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a <code>m x n</code>&nbsp;\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u503c\u5747\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u4ee3\u8868\u4e8c\u7ef4\u9ad8\u5ea6\u56fe\u6bcf\u4e2a\u5355\u5143\u7684\u9ad8\u5ea6\uff0c\u8bf7\u8ba1\u7b97\u56fe\u4e2d\u5f62\u72b6\u6700\u591a\u80fd\u63a5\u591a\u5c11\u4f53\u79ef\u7684\u96e8\u6c34\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u51fa\u5982\u4e0b 3x6 \u7684\u9ad8\u5ea6\u56fe:\n[\n  [1,4,3,1,3,2],\n  [3,2,1,3,2,4],\n  [2,3,3,2,3,1]\n]\n\n\u8fd4\u56de 4 \u3002\n</pre>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_empty.png\" style=\"width: 500px;\"></p>\n\n<p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u662f\u4e0b\u96e8\u524d\u7684\u9ad8\u5ea6\u56fe<code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> \u7684\u72b6\u6001\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_fill.png\" style=\"width: 500px;\"></p>\n\n<p>\u4e0b\u96e8\u540e\uff0c\u96e8\u6c34\u5c06\u4f1a\u88ab\u5b58\u50a8\u5728\u8fd9\u4e9b\u65b9\u5757\u4e2d\u3002\u603b\u7684\u63a5\u96e8\u6c34\u91cf\u662f4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 110</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 20000</code></li>\n</ul>\n", "tags_en": ["Heap", "Breadth-first Search"], "tags_cn": ["\u5806", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int trapRainWater(vector<vector<int>>& heightMap) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int trapRainWater(int[][] heightMap) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint trapRainWater(int** heightMap, int heightMapSize, int* heightMapColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int TrapRainWater(int[][] heightMap) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} heightMap\n * @return {number}\n */\nvar trapRainWater = function(heightMap) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} height_map\n# @return {Integer}\ndef trap_rain_water(height_map)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func trapRainWater(_ heightMap: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func trapRainWater(heightMap [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def trapRainWater(heightMap: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun trapRainWater(heightMap: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn trap_rain_water(height_map: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $heightMap\n     * @return Integer\n     */\n    function trapRainWater($heightMap) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function trapRainWater(heightMap: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0408", "frontend_question_id": "0408", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/valid-word-abbreviation", "url_en": "https://leetcode.com/problems/valid-word-abbreviation", "relative_path_cn": "/leetcode/0400-0499/0408.Valid%20Word%20Abbreviation/README.md", "relative_path_en": "/leetcode/0400-0499/0408.Valid%20Word%20Abbreviation/README_EN.md", "title_cn": "\u6709\u6548\u5355\u8bcd\u7f29\u5199", "title_en": "Valid Word Abbreviation", "question_title_slug": "valid-word-abbreviation", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0409", "frontend_question_id": "0409", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-palindrome", "url_en": "https://leetcode.com/problems/longest-palindrome", "relative_path_cn": "/leetcode/0400-0499/0409.Longest%20Palindrome/README.md", "relative_path_en": "/leetcode/0400-0499/0409.Longest%20Palindrome/README_EN.md", "title_cn": "\u6700\u957f\u56de\u6587\u4e32", "title_en": "Longest Palindrome", "question_title_slug": "longest-palindrome", "content_en": "<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return <em>the length of the <strong>longest palindrome</strong></em>&nbsp;that can be built with those letters.</p>\n\n<p>Letters are <strong>case sensitive</strong>, for example,&nbsp;<code>&quot;Aa&quot;</code> is not considered a palindrome here.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccccdd&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\nOne longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bb&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English&nbsp;letters only.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u901a\u8fc7\u8fd9\u4e9b\u5b57\u6bcd\u6784\u9020\u6210\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u3002</p>\n\n<p>\u5728\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\u3002\u6bd4\u5982&nbsp;<code>&quot;Aa&quot;</code>&nbsp;\u4e0d\u80fd\u5f53\u505a\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1010\u3002</p>\n\n<p><strong>\u793a\u4f8b 1: </strong></p>\n\n<pre>\n\u8f93\u5165:\n&quot;abccccdd&quot;\n\n\u8f93\u51fa:\n7\n\n\u89e3\u91ca:\n\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u662f&quot;dccaccd&quot;, \u5b83\u7684\u957f\u5ea6\u662f 7\u3002\n</pre>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPalindrome(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestPalindrome(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestPalindrome(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint longestPalindrome(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestPalindrome(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_palindrome(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestPalindrome(_ s: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestPalindrome(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestPalindrome(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindrome(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestPalindrome($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestPalindrome(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0410", "frontend_question_id": "0410", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/split-array-largest-sum", "url_en": "https://leetcode.com/problems/split-array-largest-sum", "relative_path_cn": "/leetcode/0400-0499/0410.Split%20Array%20Largest%20Sum/README.md", "relative_path_en": "/leetcode/0400-0499/0410.Split%20Array%20Largest%20Sum/README_EN.md", "title_cn": "\u5206\u5272\u6570\u7ec4\u7684\u6700\u5927\u503c", "title_en": "Split Array Largest Sum", "question_title_slug": "split-array-largest-sum", "content_en": "<p>Given an array <code>nums</code> which consists of non-negative integers and an integer <code>m</code>, you can split the array into <code>m</code> non-empty continuous subarrays.</p>\n\n<p>Write an algorithm to minimize the largest sum among these <code>m</code> subarrays.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,2,5,10,8], m = 2\n<strong>Output:</strong> 18\n<strong>Explanation:</strong>\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], m = 2\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4], m = 3\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= min(50, nums.length)</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<em>m</em>\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210&nbsp;<em>m&nbsp;</em>\u4e2a\u975e\u7a7a\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4f7f\u5f97\u8fd9&nbsp;<em>m&nbsp;</em>\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u6570\u7ec4\u957f\u5ea6&nbsp;<em>n&nbsp;</em>\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:</p>\n\n<ul>\n\t<li>1 &le; <em>n</em> &le; 1000</li>\n\t<li>1 &le; <em>m</em> &le; min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>\u793a\u4f8b: </strong></p>\n\n<pre>\n\u8f93\u5165:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n\u8f93\u51fa:\n18\n\n\u89e3\u91ca:\n\u4e00\u5171\u6709\u56db\u79cd\u65b9\u6cd5\u5c06<strong>nums</strong>\u5206\u5272\u4e3a2\u4e2a\u5b50\u6570\u7ec4\u3002\n\u5176\u4e2d\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u5206\u4e3a<strong>[7,2,5]</strong> \u548c <strong>[10,8]</strong>\uff0c\n\u56e0\u4e3a\u6b64\u65f6\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u7684\u548c\u7684\u6700\u5927\u503c\u4e3a18\uff0c\u5728\u6240\u6709\u60c5\u51b5\u4e2d\u6700\u5c0f\u3002\n</pre>\n", "tags_en": ["Binary Search", "Dynamic Programming"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int splitArray(vector<int>& nums, int m) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int splitArray(int[] nums, int m) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def splitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def splitArray(self, nums: List[int], m: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint splitArray(int* nums, int numsSize, int m){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SplitArray(int[] nums, int m) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number}\n */\nvar splitArray = function(nums, m) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Integer}\ndef split_array(nums, m)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func splitArray(_ nums: [Int], _ m: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func splitArray(nums []int, m int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def splitArray(nums: Array[Int], m: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun splitArray(nums: IntArray, m: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn split_array(nums: Vec<i32>, m: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Integer\n     */\n    function splitArray($nums, $m) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function splitArray(nums: number[], m: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0411", "frontend_question_id": "0411", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/minimum-unique-word-abbreviation", "url_en": "https://leetcode.com/problems/minimum-unique-word-abbreviation", "relative_path_cn": "/leetcode/0400-0499/0411.Minimum%20Unique%20Word%20Abbreviation/README.md", "relative_path_en": "/leetcode/0400-0499/0411.Minimum%20Unique%20Word%20Abbreviation/README_EN.md", "title_cn": "\u6700\u77ed\u7279\u5f02\u5355\u8bcd\u7f29\u5199", "title_en": "Minimum Unique Word Abbreviation", "question_title_slug": "minimum-unique-word-abbreviation", "content_en": null, "content_cn": null, "tags_en": ["Bit Manipulation", "Backtracking"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0412", "frontend_question_id": "0412", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/fizz-buzz", "url_en": "https://leetcode.com/problems/fizz-buzz", "relative_path_cn": "/leetcode/0400-0499/0412.Fizz%20Buzz/README.md", "relative_path_en": "/leetcode/0400-0499/0412.Fizz%20Buzz/README_EN.md", "title_cn": "Fizz Buzz", "title_en": "Fizz Buzz", "question_title_slug": "fizz-buzz", "content_en": "<p>Write a program that outputs the string representation of numbers from 1 to <i>n</i>.</p>\r\n\r\n<p>But for multiples of three it should output \u201cFizz\u201d instead of the number and for the multiples of five output \u201cBuzz\u201d. For numbers which are multiples of both three and five output \u201cFizzBuzz\u201d.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nn = 15,\r\n\r\nReturn:\r\n[\r\n    \"1\",\r\n    \"2\",\r\n    \"Fizz\",\r\n    \"4\",\r\n    \"Buzz\",\r\n    \"Fizz\",\r\n    \"7\",\r\n    \"8\",\r\n    \"Fizz\",\r\n    \"Buzz\",\r\n    \"11\",\r\n    \"Fizz\",\r\n    \"13\",\r\n    \"14\",\r\n    \"FizzBuzz\"\r\n]\r\n</pre>\r\n</p>", "content_cn": "<p>\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51fa\u4ece 1 \u5230 <em>n</em> \u6570\u5b57\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>1. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f3\u7684\u500d\u6570\uff0c\u8f93\u51fa&ldquo;Fizz&rdquo;\uff1b</p>\n\n<p>2. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f5\u7684\u500d\u6570\uff0c\u8f93\u51fa&ldquo;Buzz&rdquo;\uff1b</p>\n\n<p>3.\u5982\u679c&nbsp;<em>n&nbsp;</em>\u540c\u65f6\u662f3\u548c5\u7684\u500d\u6570\uff0c\u8f93\u51fa &ldquo;FizzBuzz&rdquo;\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>n = 15,\n\n\u8fd4\u56de:\n[\n    &quot;1&quot;,\n    &quot;2&quot;,\n    &quot;Fizz&quot;,\n    &quot;4&quot;,\n    &quot;Buzz&quot;,\n    &quot;Fizz&quot;,\n    &quot;7&quot;,\n    &quot;8&quot;,\n    &quot;Fizz&quot;,\n    &quot;Buzz&quot;,\n    &quot;11&quot;,\n    &quot;Fizz&quot;,\n    &quot;13&quot;,\n    &quot;14&quot;,\n    &quot;FizzBuzz&quot;\n]\n</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> fizzBuzz(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** fizzBuzz(int n, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FizzBuzz(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar fizzBuzz = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {String[]}\ndef fizz_buzz(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fizzBuzz(_ n: Int) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fizzBuzz(n int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fizzBuzz(n: Int): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fizzBuzz(n: Int): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fizz_buzz(n: i32) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function fizzBuzz($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fizzBuzz(n: number): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0413", "frontend_question_id": "0413", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/arithmetic-slices", "url_en": "https://leetcode.com/problems/arithmetic-slices", "relative_path_cn": "/leetcode/0400-0499/0413.Arithmetic%20Slices/README.md", "relative_path_en": "/leetcode/0400-0499/0413.Arithmetic%20Slices/README_EN.md", "title_cn": "\u7b49\u5dee\u6570\u5217\u5212\u5206", "title_en": "Arithmetic Slices", "question_title_slug": "arithmetic-slices", "content_en": "<p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\n\n<p>For example, these are arithmetic sequences:</p>\n\n<pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>The following sequence is not arithmetic.</p>\n\n<pre>\n1, 1, 2, 5, 7</pre>\n&nbsp;\n\n<p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p>\n\n<p>A slice (P, Q) of the array A is called arithmetic if the sequence:<br />\nA[P], A[P&nbsp;+ 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p>\n\n<p>The function should return the number of arithmetic slices in the array A.</p>\n&nbsp;\n\n<p><b>Example:</b></p>\n\n<pre>\nA = [1, 2, 3, 4]\n\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\n</pre>\n", "content_cn": "<p>\u5982\u679c\u4e00\u4e2a\u6570\u5217\u81f3\u5c11\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u4e4b\u5dee\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217:</p>\n\n<pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>\u4ee5\u4e0b\u6570\u5217\u4e0d\u662f\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<pre>\n1, 1, 2, 5, 7</pre>\n\n<p>&nbsp;</p>\n\n<p>\u6570\u7ec4 A \u5305\u542b N \u4e2a\u6570\uff0c\u4e14\u7d22\u5f15\u4ece0\u5f00\u59cb\u3002\u6570\u7ec4 A \u7684\u4e00\u4e2a\u5b50\u6570\u7ec4\u5212\u5206\u4e3a\u6570\u7ec4 (P, Q)\uff0cP \u4e0e Q \u662f\u6574\u6570\u4e14\u6ee1\u8db3 0&lt;=P&lt;Q&lt;N \u3002</p>\n\n<p>\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u79f0\u5b50\u6570\u7ec4(P, Q)\u4e3a\u7b49\u5dee\u6570\u7ec4\uff1a</p>\n\n<p>\u5143\u7d20 A[P], A[p + 1], ..., A[Q - 1], A[Q] \u662f\u7b49\u5dee\u7684\u3002\u5e76\u4e14&nbsp;P + 1 &lt; Q \u3002</p>\n\n<p>\u51fd\u6570\u8981\u8fd4\u56de\u6570\u7ec4 A \u4e2d\u6240\u6709\u4e3a\u7b49\u5dee\u6570\u7ec4\u7684\u5b50\u6570\u7ec4\u4e2a\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nA = [1, 2, 3, 4]\n\n\u8fd4\u56de: 3, A \u4e2d\u6709\u4e09\u4e2a\u5b50\u7b49\u5dee\u6570\u7ec4: [1, 2, 3], [2, 3, 4] \u4ee5\u53ca\u81ea\u8eab [1, 2, 3, 4]\u3002\n</pre>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfArithmeticSlices(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfArithmeticSlices(self, A: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numberOfArithmeticSlices(int* A, int ASize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfArithmeticSlices(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar numberOfArithmeticSlices = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef number_of_arithmetic_slices(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfArithmeticSlices(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfArithmeticSlices(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfArithmeticSlices(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfArithmeticSlices(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_arithmetic_slices(a: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function numberOfArithmeticSlices($A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfArithmeticSlices(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0414", "frontend_question_id": "0414", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/third-maximum-number", "url_en": "https://leetcode.com/problems/third-maximum-number", "relative_path_cn": "/leetcode/0400-0499/0414.Third%20Maximum%20Number/README.md", "relative_path_en": "/leetcode/0400-0499/0414.Third%20Maximum%20Number/README_EN.md", "title_cn": "\u7b2c\u4e09\u5927\u7684\u6570", "title_en": "Third Maximum Number", "question_title_slug": "third-maximum-number", "content_en": "<p>Given a <b>non-empty</b> array of integers, return the <b>third</b> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3, 2, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> The third maximum is 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> The third maximum does not exist, so the maximum (2) is returned instead.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [2, 2, 3, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> Note that the third maximum here means the third maximum distinct number.\r\nBoth numbers with value 2 are both considered as second maximum.\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u8fd4\u56de\u6b64\u6570\u7ec4\u4e2d\u7b2c\u4e09\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662fO(n)\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 2, 1]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e09\u5927\u7684\u6570\u662f 1.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e09\u5927\u7684\u6570\u4e0d\u5b58\u5728, \u6240\u4ee5\u8fd4\u56de\u6700\u5927\u7684\u6570 2 .\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2, 2, 3, 1]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u6ce8\u610f\uff0c\u8981\u6c42\u8fd4\u56de\u7b2c\u4e09\u5927\u7684\u6570\uff0c\u662f\u6307\u7b2c\u4e09\u5927\u4e14\u552f\u4e00\u51fa\u73b0\u7684\u6570\u3002\n\u5b58\u5728\u4e24\u4e2a\u503c\u4e3a2\u7684\u6570\uff0c\u5b83\u4eec\u90fd\u6392\u7b2c\u4e8c\u3002\n</pre>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int thirdMax(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int thirdMax(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint thirdMax(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ThirdMax(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef third_max(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func thirdMax(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func thirdMax(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def thirdMax(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun thirdMax(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn third_max(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function thirdMax($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function thirdMax(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0415", "frontend_question_id": "0415", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/add-strings", "url_en": "https://leetcode.com/problems/add-strings", "relative_path_cn": "/leetcode/0400-0499/0415.Add%20Strings/README.md", "relative_path_en": "/leetcode/0400-0499/0415.Add%20Strings/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u76f8\u52a0", "title_en": "Add Strings", "question_title_slug": "add-strings", "content_en": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code>.</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The length of both <code>num1</code> and <code>num2</code> is < 5100.</li>\r\n<li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\r\n<li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\r\n<li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570&nbsp;<code>num1</code> \u548c<code>num2</code>&nbsp;\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>num1</code> \u548c<code>num2</code>&nbsp;\u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100</li>\n\t<li><code>num1</code> \u548c<code>num2</code> \u90fd\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code></li>\n\t<li><code>num1</code> \u548c<code>num2</code> \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6</li>\n\t<li><strong>\u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c&nbsp;\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f</strong></li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String addStrings(String num1, String num2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * addStrings(char * num1, char * num2){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string AddStrings(string num1, string num2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func addStrings(num1 string, num2 string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def addStrings(num1: String, num2: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun addStrings(num1: String, num2: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function addStrings(num1: string, num2: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0416", "frontend_question_id": "0416", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/partition-equal-subset-sum", "url_en": "https://leetcode.com/problems/partition-equal-subset-sum", "relative_path_cn": "/leetcode/0400-0499/0416.Partition%20Equal%20Subset%20Sum/README.md", "relative_path_en": "/leetcode/0400-0499/0416.Partition%20Equal%20Subset%20Sum/README_EN.md", "title_cn": "\u5206\u5272\u7b49\u548c\u5b50\u96c6", "title_en": "Partition Equal Subset Sum", "question_title_slug": "partition-equal-subset-sum", "content_en": "<p>Given a <b>non-empty</b> array <code>nums</code> containing <b>only positive integers</b>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,11,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u53ea\u5305\u542b\u6b63\u6574\u6570</strong>\u7684<strong>\u975e\u7a7a</strong>\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8d85\u8fc7 100</li>\n\t<li>\u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 200</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u8f93\u5165: [1, 5, 11, 5]\n\n\u8f93\u51fa: true\n\n\u89e3\u91ca: \u6570\u7ec4\u53ef\u4ee5\u5206\u5272\u6210 [1, 5, 5] \u548c [11].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u8f93\u5165: [1, 2, 3, 5]\n\n\u8f93\u51fa: false\n\n\u89e3\u91ca: \u6570\u7ec4\u4e0d\u80fd\u5206\u5272\u6210\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6.\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canPartition(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canPartition(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanPartition(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_partition(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canPartition(_ nums: [Int]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canPartition(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_partition(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canPartition($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canPartition(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0417", "frontend_question_id": "0417", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/pacific-atlantic-water-flow", "url_en": "https://leetcode.com/problems/pacific-atlantic-water-flow", "relative_path_cn": "/leetcode/0400-0499/0417.Pacific%20Atlantic%20Water%20Flow/README.md", "relative_path_en": "/leetcode/0400-0499/0417.Pacific%20Atlantic%20Water%20Flow/README_EN.md", "title_cn": "\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898", "title_en": "Pacific Atlantic Water Flow", "question_title_slug": "pacific-atlantic-water-flow", "content_en": "<p>Given an <code>m x n</code> matrix of non-negative integers representing the height of each unit cell in a continent, the &quot;Pacific ocean&quot; touches the left and top edges of the matrix and the &quot;Atlantic ocean&quot; touches the right and bottom edges.</p>\r\n\r\n<p>Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.</p>\r\n\r\n<p>Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The order of returned grid coordinates does not matter.</li>\r\n\t<li>Both <i>m</i> and <i>n</i> are less than 150.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nGiven the following 5x5 matrix:\r\n\r\n  Pacific ~   ~   ~   ~   ~ \r\n       ~  1   2   2   3  (5) *\r\n       ~  3   2   3  (4) (4) *\r\n       ~  2   4  (5)  3   1  *\r\n       ~ (6) (7)  1   4   5  *\r\n       ~ (5)  1   1   2   4  *\r\n          *   *   *   *   * Atlantic\r\n\r\nReturn:\r\n\r\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a <code>m x n</code> \u7684\u975e\u8d1f\u6574\u6570\u77e9\u9635\u6765\u8868\u793a\u4e00\u7247\u5927\u9646\u4e0a\u5404\u4e2a\u5355\u5143\u683c\u7684\u9ad8\u5ea6\u3002&ldquo;\u592a\u5e73\u6d0b&rdquo;\u5904\u4e8e\u5927\u9646\u7684\u5de6\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\uff0c\u800c&ldquo;\u5927\u897f\u6d0b&rdquo;\u5904\u4e8e\u5927\u9646\u7684\u53f3\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3002</p>\n\n<p>\u89c4\u5b9a\u6c34\u6d41\u53ea\u80fd\u6309\u7167\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u6d41\u52a8\uff0c\u4e14\u53ea\u80fd\u4ece\u9ad8\u5230\u4f4e\u6216\u8005\u5728\u540c\u7b49\u9ad8\u5ea6\u4e0a\u6d41\u52a8\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u90a3\u4e9b\u6c34\u6d41\u65e2\u53ef\u4ee5\u6d41\u52a8\u5230&ldquo;\u592a\u5e73\u6d0b&rdquo;\uff0c\u53c8\u80fd\u6d41\u52a8\u5230&ldquo;\u5927\u897f\u6d0b&rdquo;\u7684\u9646\u5730\u5355\u5143\u7684\u5750\u6807\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u51fa\u5750\u6807\u7684\u987a\u5e8f\u4e0d\u91cd\u8981</li>\n\t<li><em>m</em> \u548c <em>n</em> \u90fd\u5c0f\u4e8e150</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>&nbsp;</p>\n\n<pre>\n\u7ed9\u5b9a\u4e0b\u9762\u7684 5x5 \u77e9\u9635:\n\n  \u592a\u5e73\u6d0b ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * \u5927\u897f\u6d0b\n\n\u8fd4\u56de:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (\u4e0a\u56fe\u4e2d\u5e26\u62ec\u53f7\u7684\u5355\u5143).\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> pacificAtlantic(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pacificAtlantic(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** pacificAtlantic(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> PacificAtlantic(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar pacificAtlantic = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef pacific_atlantic(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func pacificAtlantic(_ matrix: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func pacificAtlantic(matrix [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pacificAtlantic(matrix: Array[Array[Int]]): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pacificAtlantic(matrix: Array<IntArray>): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\r\n    pub fn pacific_atlantic(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function pacificAtlantic($matrix) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pacificAtlantic(matrix: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0418", "frontend_question_id": "0418", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sentence-screen-fitting", "url_en": "https://leetcode.com/problems/sentence-screen-fitting", "relative_path_cn": "/leetcode/0400-0499/0418.Sentence%20Screen%20Fitting/README.md", "relative_path_en": "/leetcode/0400-0499/0418.Sentence%20Screen%20Fitting/README_EN.md", "title_cn": "\u5c4f\u5e55\u53ef\u663e\u793a\u53e5\u5b50\u7684\u6570\u91cf", "title_en": "Sentence Screen Fitting", "question_title_slug": "sentence-screen-fitting", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0419", "frontend_question_id": "0419", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/battleships-in-a-board", "url_en": "https://leetcode.com/problems/battleships-in-a-board", "relative_path_cn": "/leetcode/0400-0499/0419.Battleships%20in%20a%20Board/README.md", "relative_path_en": "/leetcode/0400-0499/0419.Battleships%20in%20a%20Board/README_EN.md", "title_cn": "\u7532\u677f\u4e0a\u7684\u6218\u8230", "title_en": "Battleships in a Board", "question_title_slug": "battleships-in-a-board", "content_en": "Given an 2D board, count how many battleships are in it. The battleships are represented with <code>'X'</code>s, empty slots are represented with <code>'.'</code>s. You may assume the following rules:\r\n\r\n<ul>\r\n<li>You receive a valid board, made of only battleships or empty slots.</li>\r\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li>\r\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>X..X\r\n...X\r\n...X\r\n</pre>\r\nIn the above board there are 2 battleships.\r\n\r\n<p><b>Invalid Example:</b><br />\r\n<pre>...X\r\nXXXX\r\n...X\r\n</pre>\r\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\r\n<p></p>\r\n<p><b>Follow up:</b><br>Could you do it in <b>one-pass</b>, using only <b>O(1) extra memory</b> and <b>without modifying</b> the value of the board?</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u7532\u677f\uff0c \u8bf7\u8ba1\u7b97\u5176\u4e2d\u6709\u591a\u5c11\u8258\u6218\u8230\u3002&nbsp;\u6218\u8230\u7528&nbsp;<code>&#39;X&#39;</code>\u8868\u793a\uff0c\u7a7a\u4f4d\u7528&nbsp;<code>&#39;.&#39;</code>\u8868\u793a\u3002&nbsp;\u4f60\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<ul>\n\t<li>\u7ed9\u4f60\u4e00\u4e2a\u6709\u6548\u7684\u7532\u677f\uff0c\u4ec5\u7531\u6218\u8230\u6216\u8005\u7a7a\u4f4d\u7ec4\u6210\u3002</li>\n\t<li>\u6218\u8230\u53ea\u80fd\u6c34\u5e73\u6216\u8005\u5782\u76f4\u653e\u7f6e\u3002\u6362\u53e5\u8bdd\u8bf4,\u6218\u8230\u53ea\u80fd\u7531&nbsp;<code>1xN</code> (1 \u884c, N \u5217)\u7ec4\u6210\uff0c\u6216\u8005&nbsp;<code>Nx1</code> (N \u884c, 1 \u5217)\u7ec4\u6210\uff0c\u5176\u4e2dN\u53ef\u4ee5\u662f\u4efb\u610f\u5927\u5c0f\u3002</li>\n\t<li>\u4e24\u8258\u6218\u8230\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u4e2a\u6c34\u5e73\u6216\u5782\u76f4\u7684\u7a7a\u4f4d\u5206\u9694&nbsp;- \u5373\u6ca1\u6709\u76f8\u90bb\u7684\u6218\u8230\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\nX..X\n...X\n...X\n</pre>\n\n<p>\u5728\u4e0a\u9762\u7684\u7532\u677f\u4e2d\u67092\u8258\u6218\u8230\u3002</p>\n\n<p><strong>\u65e0\u6548\u6837\u4f8b :</strong></p>\n\n<pre>\n...X\nXXXX\n...X\n</pre>\n\n<p>\u4f60\u4e0d\u4f1a\u6536\u5230\u8fd9\u6837\u7684\u65e0\u6548\u7532\u677f&nbsp;- \u56e0\u4e3a\u6218\u8230\u4e4b\u95f4\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u7a7a\u4f4d\u5c06\u5b83\u4eec\u5206\u5f00\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u7528<strong>\u4e00\u6b21\u626b\u63cf\u7b97\u6cd5</strong>\uff0c\u53ea\u4f7f\u7528<strong>O(1)\u989d\u5916\u7a7a\u95f4\uff0c</strong>\u5e76\u4e14<strong>\u4e0d\u4fee\u6539</strong>\u7532\u677f\u7684\u503c\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countBattleships(vector<vector<char>>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countBattleships(char[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countBattleships(char** board, int boardSize, int* boardColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountBattleships(char[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @return {number}\n */\nvar countBattleships = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countBattleships(_ board: [[Character]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countBattleships(board [][]byte) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countBattleships(board: Array[Array[Char]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countBattleships(board: Array<CharArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_battleships(board: Vec<Vec<char>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Integer\n     */\n    function countBattleships($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countBattleships(board: string[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0420", "frontend_question_id": "0420", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/strong-password-checker", "url_en": "https://leetcode.com/problems/strong-password-checker", "relative_path_cn": "/leetcode/0400-0499/0420.Strong%20Password%20Checker/README.md", "relative_path_en": "/leetcode/0400-0499/0420.Strong%20Password%20Checker/README_EN.md", "title_cn": "\u5f3a\u5bc6\u7801\u68c0\u9a8c\u5668", "title_en": "Strong Password Checker", "question_title_slug": "strong-password-checker", "content_en": "<p>A password is considered strong if the below conditions are all met:</p>\n\n<ul>\n\t<li>It has at least <code>6</code> characters and at most <code>20</code> characters.</li>\n\t<li>It contains at least <strong>one lowercase</strong> letter, at least <strong>one uppercase</strong> letter, and at least <strong>one digit</strong>.</li>\n\t<li>It does&nbsp;not contain three repeating characters in a row (i.e.,&nbsp;<code>&quot;...aaa...&quot;</code> is weak, but <code>&quot;...aa...a...&quot;</code> is strong, assuming other conditions are met).</li>\n</ul>\n\n<p>Given a string <code>password</code>, return <em>the minimum number of steps required to make <code>password</code> strong. if <code>password</code> is already strong, return <code>0</code>.</em></p>\n\n<p>In one step, you can:</p>\n\n<ul>\n\t<li>Insert one character to <code>password</code>,</li>\n\t<li>Delete one character from <code>password</code>, or</li>\n\t<li>Replace&nbsp;one character of <code>password</code> with another character.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> password = \"a\"\n<strong>Output:</strong> 5\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> password = \"aA1\"\n<strong>Output:</strong> 3\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> password = \"1337C0d3\"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 50</code></li>\n\t<li><code>password</code> consists of letters, digits, dot&nbsp;<code>&#39;.&#39;</code> or exclamation mark <code>&#39;!&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u4e00\u4e2a\u5f3a\u5bc6\u7801\u5e94\u6ee1\u8db3\u4ee5\u4e0b\u6240\u6709\u6761\u4ef6\uff1a</p>\n\n<ol>\n\t<li>\u7531\u81f3\u5c116\u4e2a\uff0c\u81f3\u591a20\u4e2a\u5b57\u7b26\u7ec4\u6210\u3002</li>\n\t<li>\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u548c\u4e00\u4e2a\u6570\u5b57\u3002</li>\n\t<li>\u540c\u4e00\u5b57\u7b26<strong>\u4e0d\u80fd</strong>\u8fde\u7eed\u51fa\u73b0\u4e09\u6b21 (\u6bd4\u5982 &quot;...aaa...&quot; \u662f\u4e0d\u5141\u8bb8\u7684, \u4f46\u662f&nbsp;&quot;...aa...a...&quot; \u662f\u53ef\u4ee5\u7684)\u3002</li>\n</ol>\n\n<p>\u7f16\u5199\u51fd\u6570&nbsp;strongPasswordChecker(s)\uff0cs \u4ee3\u8868\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u5982\u679c s \u5df2\u7ecf\u7b26\u5408\u5f3a\u5bc6\u7801\u6761\u4ef6\uff0c\u5219\u8fd4\u56de0\uff1b\u5426\u5219\u8fd4\u56de\u8981\u5c06 s \u4fee\u6539\u4e3a\u6ee1\u8db3\u5f3a\u5bc6\u7801\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u6240\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684<strong>\u6700\u5c0f</strong>\u6b65\u6570\u3002</p>\n\n<p>\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u4efb\u4e00\u5b57\u7b26\u90fd\u7b97\u4f5c\u4e00\u6b21\u4fee\u6539\u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int strongPasswordChecker(string password) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int strongPasswordChecker(String password) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint strongPasswordChecker(char * password){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int StrongPasswordChecker(string password) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} password\n * @return {number}\n */\nvar strongPasswordChecker = function(password) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} password\n# @return {Integer}\ndef strong_password_checker(password)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func strongPasswordChecker(_ password: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func strongPasswordChecker(password string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def strongPasswordChecker(password: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun strongPasswordChecker(password: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn strong_password_checker(password: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $password\n     * @return Integer\n     */\n    function strongPasswordChecker($password) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function strongPasswordChecker(password: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0421", "frontend_question_id": "0421", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array", "url_en": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array", "relative_path_cn": "/leetcode/0400-0499/0421.Maximum%20XOR%20of%20Two%20Numbers%20in%20an%20Array/README.md", "relative_path_en": "/leetcode/0400-0499/0421.Maximum%20XOR%20of%20Two%20Numbers%20in%20an%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c", "title_en": "Maximum XOR of Two Numbers in an Array", "question_title_slug": "maximum-xor-of-two-numbers-in-an-array", "content_en": "<p>Given an integer array <code>nums</code>, return <em>the maximum result of <code>nums[i] XOR nums[j]</code></em>, where <code>0 &le; i &le; j &lt; n</code>.</p>\n\n<p><strong>Follow up:</strong> Could you do this in <code>O(n)</code> runtime?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,10,5,25,2,8]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong> The maximum result is 5 XOR 25 = 28.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,10,2]\n<strong>Output:</strong> 10\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>Output:</strong> 127\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>\uff0c\u5176\u4e2d 0 &le; a<sub>i</sub> &lt; 2<sup>31&nbsp;</sup>\u3002</p>\n\n<p>\u627e\u5230 a<sub>i</sub> \u548ca<sub>j&nbsp;</sub>\u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 &le; <em>i</em>,&nbsp;&nbsp;<em>j</em> &lt; <em>n&nbsp;</em>\u3002</p>\n\n<p>\u4f60\u80fd\u5728O(<em>n</em>)\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 10, 5, 25, 2, 8]\n\n<strong>\u8f93\u51fa:</strong> 28\n\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u7684\u7ed3\u679c\u662f <strong>5</strong> ^ <strong>25</strong> = 28.\n</pre>\n", "tags_en": ["Bit Manipulation", "Trie"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u5b57\u5178\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMaximumXOR(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaximumXOR(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMaximumXOR(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMaximumXOR(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumXOR = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_maximum_xor(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaximumXOR(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaximumXOR(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaximumXOR(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaximumXOR(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximum_xor(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaximumXOR($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaximumXOR(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0422", "frontend_question_id": "0422", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/valid-word-square", "url_en": "https://leetcode.com/problems/valid-word-square", "relative_path_cn": "/leetcode/0400-0499/0422.Valid%20Word%20Square/README.md", "relative_path_en": "/leetcode/0400-0499/0422.Valid%20Word%20Square/README_EN.md", "title_cn": "\u6709\u6548\u7684\u5355\u8bcd\u65b9\u5757", "title_en": "Valid Word Square", "question_title_slug": "valid-word-square", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0423", "frontend_question_id": "0423", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reconstruct-original-digits-from-english", "url_en": "https://leetcode.com/problems/reconstruct-original-digits-from-english", "relative_path_cn": "/leetcode/0400-0499/0423.Reconstruct%20Original%20Digits%20from%20English/README.md", "relative_path_en": "/leetcode/0400-0499/0423.Reconstruct%20Original%20Digits%20from%20English/README_EN.md", "title_cn": "\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57", "title_en": "Reconstruct Original Digits from English", "question_title_slug": "reconstruct-original-digits-from-english", "content_en": "<p>Given a <b>non-empty</b> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>Input contains only lowercase English letters.</li>\r\n<li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.</li>\r\n<li>Input length is less than 50,000.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: \"owoztneoer\"\r\n\r\nOutput: \"012\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\nInput: \"fviefuro\"\r\n\r\nOutput: \"45\"\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u6bcd\u987a\u5e8f\u6253\u4e71\u7684\u82f1\u6587\u5355\u8bcd\u8868\u793a\u7684\u6570\u5b57<code>0-9</code>\u3002\u6309\u5347\u5e8f\u8f93\u51fa\u539f\u59cb\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5\u5e76\u53ef\u4ee5\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u6570\u5b57\uff0c\u8fd9\u610f\u5473\u7740\u50cf &quot;abc&quot; \u6216 &quot;zerone&quot; \u7684\u8f93\u5165\u662f\u4e0d\u5141\u8bb8\u7684\u3002</li>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e 50,000\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n\u8f93\u5165: &quot;owoztneoer&quot;\n\n\u8f93\u51fa: &quot;012&quot; (zeroonetwo)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n\u8f93\u5165: &quot;fviefuro&quot;\n\n\u8f93\u51fa: &quot;45&quot; (fourfive)\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string originalDigits(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String originalDigits(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def originalDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * originalDigits(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string OriginalDigits(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar originalDigits = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef original_digits(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func originalDigits(_ s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func originalDigits(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def originalDigits(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun originalDigits(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn original_digits(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function originalDigits($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function originalDigits(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0424", "frontend_question_id": "0424", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-repeating-character-replacement", "url_en": "https://leetcode.com/problems/longest-repeating-character-replacement", "relative_path_cn": "/leetcode/0400-0499/0424.Longest%20Repeating%20Character%20Replacement/README.md", "relative_path_en": "/leetcode/0400-0499/0424.Longest%20Repeating%20Character%20Replacement/README_EN.md", "title_cn": "\u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26", "title_en": "Longest Repeating Character Replacement", "question_title_slug": "longest-repeating-character-replacement", "content_en": "<p>Given a string <code>s</code>&nbsp;that consists of only uppercase English letters, you can perform at most <code>k</code> operations on that string.</p>\r\n\r\n<p>In one operation, you can choose <strong>any</strong> character of the string and change it to any other uppercase English character.</p>\r\n\r\n<p>Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.</p>\r\n\r\n<p><b>Note:</b><br />\r\nBoth the string&#39;s length and <i>k</i> will not exceed 10<sup>4</sup>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\ns = &quot;ABAB&quot;, k = 2\r\n\r\n<b>Output:</b>\r\n4\r\n\r\n<b>Explanation:</b>\r\nReplace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\ns = &quot;AABABBA&quot;, k = 1\r\n\r\n<b>Output:</b>\r\n4\r\n\r\n<b>Explanation:</b>\r\nReplace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.\r\nThe substring &quot;BBBB&quot; has the longest repeating letters, which is 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5c06\u4efb\u610f\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u66ff\u6362\u6210\u53e6\u5916\u7684\u5b57\u7b26\uff0c\u603b\u5171\u53ef\u6700\u591a\u66ff\u6362&nbsp;<em>k&nbsp;</em>\u6b21\u3002\u5728\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u5305\u542b\u91cd\u590d\u5b57\u6bcd\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u5b57\u7b26\u4e32\u957f\u5ea6 \u548c <em>k </em>\u4e0d\u4f1a\u8d85\u8fc7&nbsp;10<sup>4</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;ABAB&quot;, k = 2\n\n<strong>\u8f93\u51fa:</strong>\n4\n\n<strong>\u89e3\u91ca:</strong>\n\u7528\u4e24\u4e2a&#39;A&#39;\u66ff\u6362\u4e3a\u4e24\u4e2a&#39;B&#39;,\u53cd\u4e4b\u4ea6\u7136\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;AABABBA&quot;, k = 1\n\n<strong>\u8f93\u51fa:</strong>\n4\n\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u4e2d\u95f4\u7684\u4e00\u4e2a&#39;A&#39;\u66ff\u6362\u4e3a&#39;B&#39;,\u5b57\u7b26\u4e32\u53d8\u4e3a &quot;AABBBBA&quot;\u3002\n\u5b50\u4e32 &quot;BBBB&quot; \u6709\u6700\u957f\u91cd\u590d\u5b57\u6bcd, \u7b54\u6848\u4e3a 4\u3002\n</pre>\n", "tags_en": ["Two Pointers", "Sliding Window"], "tags_cn": ["\u53cc\u6307\u9488", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int characterReplacement(string s, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int characterReplacement(String s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def characterReplacement(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\r\n\r\nint characterReplacement(char * s, int k){\r\n\r\n}\r\n\r\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CharacterReplacement(string s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function(s, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef character_replacement(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func characterReplacement(_ s: String, _ k: Int) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func characterReplacement(s string, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def characterReplacement(s: String, k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun characterReplacement(s: String, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\r\n    pub fn character_replacement(s: String, k: i32) -> i32 {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function characterReplacement($s, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function characterReplacement(s: string, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0425", "frontend_question_id": "0425", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/word-squares", "url_en": "https://leetcode.com/problems/word-squares", "relative_path_cn": "/leetcode/0400-0499/0425.Word%20Squares/README.md", "relative_path_en": "/leetcode/0400-0499/0425.Word%20Squares/README_EN.md", "title_cn": "\u5355\u8bcd\u65b9\u5757", "title_en": "Word Squares", "question_title_slug": "word-squares", "content_en": null, "content_cn": null, "tags_en": ["Trie", "Backtracking"], "tags_cn": ["\u5b57\u5178\u6811", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0758", "frontend_question_id": "0426", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list", "url_en": "https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list", "relative_path_cn": "/leetcode/0400-0499/0426.Convert%20Binary%20Search%20Tree%20to%20Sorted%20Doubly%20Linked%20List/README.md", "relative_path_en": "/leetcode/0400-0499/0426.Convert%20Binary%20Search%20Tree%20to%20Sorted%20Doubly%20Linked%20List/README_EN.md", "title_cn": "\u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u5316\u4e3a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868", "title_en": "Convert Binary Search Tree to Sorted Doubly Linked List", "question_title_slug": "convert-binary-search-tree-to-sorted-doubly-linked-list", "content_en": null, "content_cn": null, "tags_en": ["Tree", "Linked List", "Divide and Conquer"], "tags_cn": ["\u6811", "\u94fe\u8868", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0772", "frontend_question_id": "0427", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/construct-quad-tree", "url_en": "https://leetcode.com/problems/construct-quad-tree", "relative_path_cn": "/leetcode/0400-0499/0427.Construct%20Quad%20Tree/README.md", "relative_path_en": "/leetcode/0400-0499/0427.Construct%20Quad%20Tree/README_EN.md", "title_cn": "\u5efa\u7acb\u56db\u53c9\u6811", "title_en": "Construct Quad Tree", "question_title_slug": "construct-quad-tree", "content_en": "<p>Given a <code>n * n</code> matrix <code>grid</code> of <code>0&#39;s</code> and <code>1&#39;s</code> only. We want to represent the <code>grid</code> with a Quad-Tree.</p>\r\n\r\n<p>Return <em>the root of the Quad-Tree</em> representing the <code>grid</code>.</p>\r\n\r\n<p>Notice that you can assign the value of a node to <strong>True</strong> or <strong>False</strong> when <code>isLeaf</code> is <strong>False</strong>, and both are <strong>accepted</strong> in the answer.</p>\r\n\r\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>\r\n\r\n<ul>\r\n\t<li><code>val</code>: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s.&nbsp;</li>\r\n\t<li><code>isLeaf</code>: True if the node is leaf node on the tree or False if the node has the four children.</li>\r\n</ul>\r\n\r\n<pre>\r\nclass Node {\r\n    public boolean val;\r\n&nbsp; &nbsp; public boolean isLeaf;\r\n&nbsp; &nbsp; public Node topLeft;\r\n&nbsp; &nbsp; public Node topRight;\r\n&nbsp; &nbsp; public Node bottomLeft;\r\n&nbsp; &nbsp; public Node bottomRight;\r\n}</pre>\r\n\r\n<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>\r\n\r\n<ol>\r\n\t<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>)&nbsp;set <code>isLeaf</code>&nbsp;True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>\r\n\t<li>If the current grid has different values, set <code>isLeaf</code> to False and&nbsp;set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>\r\n\t<li>Recurse for each of the children with the proper sub-grid.</li>\r\n</ol>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"width: 777px; height: 181px;\" />\r\n<p>If you want to know more about the Quad-Tree, you can refer to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</p>\r\n\r\n<p><strong>Quad-Tree&nbsp;format:</strong></p>\r\n\r\n<p>The output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>\r\n\r\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>\r\n\r\n<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list&nbsp;<code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/grid1.png\" style=\"width: 777px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1],[1,0]]\n<strong>Output:</strong> [[0,1],[1,0],[1,1],[1,1],[1,0]]\n<strong>Explanation:</strong> The explanation of this example is shown below:\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e1tree.png\" style=\"width: 777px; height: 186px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2mat.png\" style=\"width: 777px; height: 343px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n<strong>Output:</strong> [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>Explanation:</strong> All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2tree.png\" style=\"width: 777px; height: 328px;\" />\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1],[1,1]]\n<strong>Output:</strong> [[1,1]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0]]\n<strong>Output:</strong> [[1,0]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\n<strong>Output:</strong> [[0,1],[1,1],[1,0],[1,0],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>n == 2^x</code> where <code>0 &lt;= x &lt;= 6</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a <code>n * n</code> \u77e9\u9635 <code>grid</code> \uff0c\u77e9\u9635\u7531\u82e5\u5e72 <code>0</code> \u548c <code>1</code> \u7ec4\u6210\u3002\u8bf7\u4f60\u7528\u56db\u53c9\u6811\u8868\u793a\u8be5\u77e9\u9635 <code>grid</code> \u3002</p>\n\n<p>\u4f60\u9700\u8981\u8fd4\u56de\u80fd\u8868\u793a\u77e9\u9635\u7684 \u56db\u53c9\u6811 \u7684\u6839\u7ed3\u70b9\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u5f53 <code>isLeaf</code> \u4e3a <strong>False </strong>\u65f6\uff0c\u4f60\u53ef\u4ee5\u628a <strong>True</strong> \u6216\u8005 <strong>False</strong> \u8d4b\u503c\u7ed9\u8282\u70b9\uff0c\u4e24\u79cd\u503c\u90fd\u4f1a\u88ab\u5224\u9898\u673a\u5236 <strong>\u63a5\u53d7</strong> \u3002</p>\n\n<p>\u56db\u53c9\u6811\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\u53ea\u6709\u56db\u4e2a\u5b50\u8282\u70b9\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a</p>\n\n<ul>\n\t<li><code>val</code>\uff1a\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u30021 \u5bf9\u5e94 <strong>True</strong>\uff0c0 \u5bf9\u5e94 <strong>False</strong>\uff1b</li>\n\t<li><code>isLeaf</code>: \u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6\u4e3a <strong>True</strong>\uff0c\u5982\u679c\u5b83\u6709 4 \u4e2a\u5b50\u8282\u70b9\u5219\u4e3a <strong>False</strong> \u3002</li>\n</ul>\n\n<pre>class Node {\n    public boolean val;\n&nbsp; &nbsp; public boolean isLeaf;\n&nbsp; &nbsp; public Node topLeft;\n&nbsp; &nbsp; public Node topRight;\n&nbsp; &nbsp; public Node bottomLeft;\n&nbsp; &nbsp; public Node bottomRight;\n}</pre>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u4e3a\u4e8c\u7ef4\u533a\u57df\u6784\u5efa\u56db\u53c9\u6811\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u5f53\u524d\u7f51\u683c\u7684\u503c\u76f8\u540c\uff08\u5373\uff0c\u5168\u4e3a <code>0</code> \u6216\u8005\u5168\u4e3a <code>1</code>\uff09\uff0c\u5c06 <code>isLeaf</code> \u8bbe\u4e3a True \uff0c\u5c06 <code>val</code> \u8bbe\u4e3a\u7f51\u683c\u76f8\u5e94\u7684\u503c\uff0c\u5e76\u5c06\u56db\u4e2a\u5b50\u8282\u70b9\u90fd\u8bbe\u4e3a Null \u7136\u540e\u505c\u6b62\u3002</li>\n\t<li>\u5982\u679c\u5f53\u524d\u7f51\u683c\u7684\u503c\u4e0d\u540c\uff0c\u5c06 <code>isLeaf</code> \u8bbe\u4e3a False\uff0c \u5c06 <code>val</code> \u8bbe\u4e3a\u4efb\u610f\u503c\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c06\u5f53\u524d\u7f51\u683c\u5212\u5206\u4e3a\u56db\u4e2a\u5b50\u7f51\u683c\u3002</li>\n\t<li>\u4f7f\u7528\u9002\u5f53\u7684\u5b50\u7f51\u683c\u9012\u5f52\u6bcf\u4e2a\u5b50\u8282\u70b9\u3002</li>\n</ol>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"height: 181px; width: 777px;\"></p>\n\n<p>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a> \u3002</p>\n\n<p><strong>\u56db\u53c9\u6811\u683c\u5f0f\uff1a</strong></p>\n\n<p>\u8f93\u51fa\u4e3a\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u540e\u56db\u53c9\u6811\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u5176\u4e2d <code>null</code> \u8868\u793a\u8def\u5f84\u7ec8\u6b62\u7b26\uff0c\u5176\u4e0b\u9762\u4e0d\u5b58\u5728\u8282\u70b9\u3002</p>\n\n<p>\u5b83\u4e0e\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u975e\u5e38\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u8282\u70b9\u4ee5\u5217\u8868\u5f62\u5f0f\u8868\u793a <code>[isLeaf, val]</code> \u3002</p>\n\n<p>\u5982\u679c <code>isLeaf</code> \u6216\u8005 <code>val</code> \u7684\u503c\u4e3a True \uff0c\u5219\u8868\u793a\u5b83\u5728\u5217\u8868&nbsp;<code>[isLeaf, val]</code> \u4e2d\u7684\u503c\u4e3a <strong>1</strong> \uff1b\u5982\u679c <code>isLeaf</code> \u6216\u8005 <code>val</code> \u7684\u503c\u4e3a False \uff0c\u5219\u8868\u793a\u503c\u4e3a <strong>0 </strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/grid1.png\" style=\"height: 99px; width: 777px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>grid = [[0,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1],[1,0],[1,1],[1,1],[1,0]]\n<strong>\u89e3\u91ca\uff1a</strong>\u6b64\u793a\u4f8b\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u5728\u4e0b\u9762\u56db\u53c9\u6811\u7684\u56fe\u793a\u4e2d\uff0c0 \u8868\u793a false\uff0c1 \u8868\u793a True \u3002\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e1tree.png\" style=\"height: 186px; width: 777px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2mat.png\" style=\"height: 343px; width: 777px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>\u89e3\u91ca\uff1a</strong>\u7f51\u683c\u4e2d\u7684\u6240\u6709\u503c\u90fd\u4e0d\u76f8\u540c\u3002\u6211\u4eec\u5c06\u7f51\u683c\u5212\u5206\u4e3a\u56db\u4e2a\u5b50\u7f51\u683c\u3002\ntopLeft\uff0cbottomLeft \u548c bottomRight \u5747\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\ntopRight \u5177\u6709\u4e0d\u540c\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5176\u518d\u5206\u4e3a 4 \u4e2a\u5b50\u7f51\u683c\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b50\u7f51\u683c\u90fd\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\n\u89e3\u91ca\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2tree.png\" style=\"height: 328px; width: 777px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>grid = [[1,1],[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>grid = [[0]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,0]]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1],[1,1],[1,0],[1,0],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>n == 2^x</code> \u5176\u4e2d <code>0 &lt;= x &lt;= 6</code></li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* construct(vector<vector<int>>& grid) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    \n    public Node() {\n        this.val = false;\n        this.isLeaf = false;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = topLeft;\n        this.topRight = topRight;\n        this.bottomLeft = bottomLeft;\n        this.bottomRight = bottomRight;\n    }\n};\n*/\n\nclass Solution {\n    public Node construct(int[][] grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a QuadTree node.\nclass Node(object):\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution(object):\n    def construct(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: Node\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution:\n    def construct(self, grid: List[List[int]]) -> 'Node':\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a QuadTree node.\npublic class Node {\n    public bool val;\n    public bool isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;\n    }\n    \n    public Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;\n    }\n    \n    public Node(bool _val,bool _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n}\n*/\n\npublic class Solution {\n    public Node Construct(int[][] grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n\n/**\n * @param {number[][]} grid\n * @return {Node}\n */\nvar construct = function(grid) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a QuadTree node.\n# class Node\n#     attr_accessor :val, :isLeaf, :topLeft, :topRight, :bottomLeft, :bottomRight\n#     def initialize(val=false, isLeaf=false, topLeft=nil, topRight=nil, bottomLeft=nil, bottomRight=nil)\n#         @val = val\n#         @isLeaf = isLeaf\n#         @topLeft = topLeft\n#         @topRight = topRight\n#         @bottomLeft = bottomLeft\n#         @bottomRight = bottomRight\n#     end\n# end\n\n# @param {Integer[][]} grid\n# @return {Node}\ndef construct(grid)\n\t\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a QuadTree node.\n * public class Node {\n *     public var val: Bool\n *     public var isLeaf: Bool\n *     public var topLeft: Node?\n *     public var topRight: Node?\n *     public var bottomLeft: Node?\n *     public var bottomRight: Node?\n *     public init(_ val: Bool, _ isLeaf: Bool) {\n *         self.val = val\n *         self.isLeaf = isLeaf\n *         self.topLeft = nil\n *         self.topRight = nil\n *         self.bottomLeft = nil\n *         self.bottomRight = nil\n *     }\n * }\n */\n\nclass Solution {\n    func construct(_ grid: [[Int]]) -> Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a QuadTree node.\n * type Node struct {\n *     Val bool\n *     IsLeaf bool\n *     TopLeft *Node\n *     TopRight *Node\n *     BottomLeft *Node\n *     BottomRight *Node\n * }\n */\n\nfunc construct(grid [][]int) *Node {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a QuadTree node.\n * class Node(var _value: Boolean, var _isLeaf: Boolean) {\n *   var value: Int = _value\n *   var isLeaf: Boolean = _isLeaf\n *   var topLeft: Node = null\n *   var topRight: Node = null\n *   var bottomLeft: Node = null\n *   var bottomRight: Node = null\n * }\n */\n\nobject Solution {\n    def construct(grid: Array[Array[Int]]): Node = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a QuadTree node.\n * class Node(var `val`: Boolean, var isLeaf: Boolean) {\n *     var topLeft: Node? = null\n *     var topRight: Node? = null\n *     var bottomLeft: Node? = null\n *     var bottomRight: Node? = null\n * }\n */\n\nclass Solution {\n    fun construct(grid: Array<IntArray>): Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a QuadTree node.\n * class Node {\n *     public $val = null;\n *     public $isLeaf = null;\n *     public $topLeft = null;\n *     public $topRight = null;\n *     public $bottomLeft = null;\n *     public $bottomRight = null;\n *     function __construct($val, $isLeaf) {\n *         $this->val = $val;\n *         $this->isLeaf = $isLeaf;\n *         $this->topLeft = null;\n *         $this->topRight = null;\n *         $this->bottomLeft = null;\n *         $this->bottomRight = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Integer[][] $grid\n     * @return Node\n     */\n    function construct($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for node.\n * class Node {\n *     val: boolean\n *     isLeaf: boolean\n *     topLeft: Node | null\n *     topRight: Node | null\n *     bottomLeft: Node | null\n *     bottomRight: Node | null\n *     constructor(val?: boolean, isLeaf?: boolean, topLeft?: Node, topRight?: Node, bottomLeft?: Node, bottomRight?: Node) {\n *         this.val = (val===undefined ? false : val)\n *         this.isLeaf = (isLeaf===undefined ? false : isLeaf)\n *         this.topLeft = (topLeft===undefined ? null : topLeft)\n *         this.topRight = (topRight===undefined ? null : topRight)\n *         this.bottomLeft = (bottomLeft===undefined ? null : bottomLeft)\n *         this.bottomRight = (bottomRight===undefined ? null : bottomRight)\n *     }\n * }\n */\n\nfunction construct(grid: number[][]): Node | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0765", "frontend_question_id": "0428", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/serialize-and-deserialize-n-ary-tree", "url_en": "https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree", "relative_path_cn": "/leetcode/0400-0499/0428.Serialize%20and%20Deserialize%20N-ary%20Tree/README.md", "relative_path_en": "/leetcode/0400-0499/0428.Serialize%20and%20Deserialize%20N-ary%20Tree/README_EN.md", "title_cn": "\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 N \u53c9\u6811", "title_en": "Serialize and Deserialize N-ary Tree", "question_title_slug": "serialize-and-deserialize-n-ary-tree", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0764", "frontend_question_id": "0429", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal", "url_en": "https://leetcode.com/problems/n-ary-tree-level-order-traversal", "relative_path_cn": "/leetcode/0400-0499/0429.N-ary%20Tree%20Level%20Order%20Traversal/README.md", "relative_path_en": "/leetcode/0400-0499/0429.N-ary%20Tree%20Level%20Order%20Traversal/README_EN.md", "title_cn": "N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386", "title_en": "N-ary Tree Level Order Traversal", "question_title_slug": "n-ary-tree-level-order-traversal", "content_en": "<p>Given an n-ary tree, return the <i>level order</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [[1],[3,2,4],[5,6]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u5c42\u5e8f\u904d\u5386</em>\u3002\uff08\u5373\u4ece\u5de6\u5230\u53f3\uff0c\u9010\u5c42\u904d\u5386\uff09\u3002</p>\n\n<p>\u6811\u7684\u5e8f\u5217\u5316\u8f93\u5165\u662f\u7528\u5c42\u5e8f\u904d\u5386\uff0c\u6bcf\u7ec4\u5b50\u8282\u70b9\u90fd\u7531 null \u503c\u5206\u9694\uff08\u53c2\u89c1\u793a\u4f8b\uff09\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,3,2,4,null,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>[[1],[3,2,4],[5,6]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>\u8f93\u51fa\uff1a</strong>[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u7684\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u00a0<code>1000</code></li>\n\t<li>\u6811\u7684\u8282\u70b9\u603b\u6570\u5728 <code>[0,\u00a010^4]</code> \u4e4b\u95f4</li>\n</ul>\n", "tags_en": ["Tree", "Breadth-first Search"], "tags_cn": ["\u6811", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(Node* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public List<List<Integer>> levelOrder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def levelOrder(self, root: 'Node') -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** levelOrder(struct Node* root, int* returnSize, int** returnColumnSizes) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public IList<IList<int>> LevelOrder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {List[List[int]]}\ndef level_order(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func levelOrder(_ root: Node?) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc levelOrder(root *Node) [][]int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def levelOrder(root: Node): List[List[Int]] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun levelOrder(root: Node?): List<List<Int>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer[][]\n     */\n    function levelOrder($root) {\n\t\t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for node.\n * class Node {\n *     val: number\n *     children: Node[]\n *     constructor(val?: number) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = []\n *     }\n * }\n */\n\nfunction levelOrder(root: Node | null): number[][] {\n\t\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0766", "frontend_question_id": "0430", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list", "url_en": "https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list", "relative_path_cn": "/leetcode/0400-0499/0430.Flatten%20a%20Multilevel%20Doubly%20Linked%20List/README.md", "relative_path_en": "/leetcode/0400-0499/0430.Flatten%20a%20Multilevel%20Doubly%20Linked%20List/README_EN.md", "title_cn": "\u6241\u5e73\u5316\u591a\u7ea7\u53cc\u5411\u94fe\u8868", "title_en": "Flatten a Multilevel Doubly Linked List", "question_title_slug": "flatten-a-multilevel-doubly-linked-list", "content_en": "<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>\r\n\r\n<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>Output:</strong> [1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>Explanation:\n</strong>\nThe multilevel linked list in the input is as follows:\n\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png\" style=\"width: 640px;\" />\n\nAfter flattening the multilevel linked list it becomes:\n\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"width: 1100px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2,null,3]\n<strong>Output:</strong> [1,3,2]\n<strong>Explanation:\n\n</strong>The input multilevel linked list is as follows:\n\n  1---2---NULL\n  |\n  3---NULL\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>How&nbsp;multilevel linked list is represented in test case:</strong></p>\n\n<p>We use the&nbsp;multilevel linked list from <strong>Example 1</strong> above:</p>\n\n<pre>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre>\n\n<p>The serialization of each level is as follows:</p>\n\n<pre>\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre>\n\n<p>To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:</p>\n\n<pre>\n[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\n</pre>\n\n<p>Merging the serialization of each level and removing trailing nulls we obtain:</p>\n\n<pre>\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of Nodes will not exceed <code>1000</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u591a\u7ea7\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u9664\u4e86\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u548c\u524d\u4e00\u4e2a\u8282\u70b9\u6307\u9488\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u5b50\u94fe\u8868\u6307\u9488\uff0c\u53ef\u80fd\u6307\u5411\u5355\u72ec\u7684\u53cc\u5411\u94fe\u8868\u3002\u8fd9\u4e9b\u5b50\u5217\u8868\u4e5f\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u5df1\u7684\u5b50\u9879\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u751f\u6210\u591a\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u6240\u793a\u3002</p>\n\n<p>\u7ed9\u4f60\u4f4d\u4e8e\u5217\u8868\u7b2c\u4e00\u7ea7\u7684\u5934\u8282\u70b9\uff0c\u8bf7\u4f60\u6241\u5e73\u5316\u5217\u8868\uff0c\u4f7f\u6240\u6709\u7ed3\u70b9\u51fa\u73b0\u5728\u5355\u7ea7\u53cc\u94fe\u8868\u4e2d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>\u89e3\u91ca\uff1a\n</strong>\n\u8f93\u5165\u7684\u591a\u7ea7\u5217\u8868\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\" style=\"height: 363px; width: 640px;\">\n\n\u6241\u5e73\u5316\u540e\u7684\u94fe\u8868\u5982\u4e0b\u56fe\uff1a\n\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"height: 80px; width: 1100px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1,2,null,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,3,2]\n<strong>\u89e3\u91ca\uff1a\n\n</strong>\u8f93\u5165\u7684\u591a\u7ea7\u5217\u8868\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n  1---2---NULL\n  |\n  3---NULL\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u5982\u4f55\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u591a\u7ea7\u94fe\u8868\uff1f</strong></p>\n\n<p>\u4ee5 <strong>\u793a\u4f8b 1</strong> \u4e3a\u4f8b\uff1a</p>\n\n<pre> 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre>\n\n<p>\u5e8f\u5217\u5316\u5176\u4e2d\u7684\u6bcf\u4e00\u7ea7\u4e4b\u540e\uff1a</p>\n\n<pre>[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre>\n\n<p>\u4e3a\u4e86\u5c06\u6bcf\u4e00\u7ea7\u90fd\u5e8f\u5217\u5316\u5230\u4e00\u8d77\uff0c\u6211\u4eec\u9700\u8981\u6bcf\u4e00\u7ea7\u4e2d\u6dfb\u52a0\u503c\u4e3a null \u7684\u5143\u7d20\uff0c\u4ee5\u8868\u793a\u6ca1\u6709\u8282\u70b9\u8fde\u63a5\u5230\u4e0a\u4e00\u7ea7\u7684\u4e0a\u7ea7\u8282\u70b9\u3002</p>\n\n<pre>[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\n</pre>\n\n<p>\u5408\u5e76\u6240\u6709\u5e8f\u5217\u5316\u7ed3\u679c\uff0c\u5e76\u53bb\u9664\u672b\u5c3e\u7684 null \u3002</p>\n\n<pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8282\u70b9\u6570\u76ee\u4e0d\u8d85\u8fc7 1000</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10^5</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Linked List"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n};\n*/\n\nclass Solution {\n    public Node flatten(Node head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution:\n    def flatten(self, head: 'Node') -> 'Node':\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n}\n*/\n\npublic class Solution {\n    public Node Flatten(Node head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :prev, :next, :child\n#     def initialize(val=nil, prev=nil, next_=nil, child=nil)\n#         @val = val\n#         @prev = prev\n#         @next = next_\n#         @child = child\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef flatten(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var prev: Node?\n *     public var next: Node?\n *     public var child: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.prev = nil\n *         self.next = nil\n *         self.child  = nil\n *     }\n * }\n */\n\nclass Solution {\n    func flatten(_ head: Node?) -> Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Prev *Node\n *     Next *Node\n *     Child *Node\n * }\n */\n\nfunc flatten(root *Node) *Node {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var prev: Node = null\n *   var next: Node = null\n *   var child: Node = null\n * }\n */\n\nobject Solution {\n    def flatten(head: Node): Node = {\n    \t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var prev: Node? = null\n *     var next: Node? = null\n *     var child: Node? = null\n * }\n */\n\nclass Solution {\n    fun flatten(root: Node?): Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $prev = null;\n *     public $next = null;\n *     public $child = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->prev = null;\n *         $this->next = null;\n *         $this->child = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $head\n     * @return Node\n     */\n    function flatten($head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for node.\n * class Node {\n *     val: number\n *     prev: Node | null\n *     next: Node | null\n *     child: Node | null\n *     constructor(val?: number, prev? : Node, next? : Node, child? : Node) {\n *         this.val = (val===undefined ? 0 : val);\n *         this.prev = (prev===undefined ? null : prev);\n *         this.next = (next===undefined ? null : next);\n *         this.child = (child===undefined ? null : child);\n *     }\n * }\n */\n\nfunction flatten(head: Node | null): Node | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0771", "frontend_question_id": "0431", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/encode-n-ary-tree-to-binary-tree", "url_en": "https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree", "relative_path_cn": "/leetcode/0400-0499/0431.Encode%20N-ary%20Tree%20to%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0400-0499/0431.Encode%20N-ary%20Tree%20to%20Binary%20Tree/README_EN.md", "title_cn": "\u5c06 N \u53c9\u6811\u7f16\u7801\u4e3a\u4e8c\u53c9\u6811", "title_en": "Encode N-ary Tree to Binary Tree", "question_title_slug": "encode-n-ary-tree-to-binary-tree", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0432", "frontend_question_id": "0432", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/all-oone-data-structure", "url_en": "https://leetcode.com/problems/all-oone-data-structure", "relative_path_cn": "/leetcode/0400-0499/0432.All%20O%60one%20Data%20Structure/README.md", "relative_path_en": "/leetcode/0400-0499/0432.All%20O%60one%20Data%20Structure/README_EN.md", "title_cn": "\u5168 O(1) \u7684\u6570\u636e\u7ed3\u6784", "title_en": "All O`one Data Structure", "question_title_slug": "all-oone-data-structure", "content_en": "<p>Implement a data structure supporting the following operations:</p>\r\n\r\n<p>\r\n<ol>\r\n<li>Inc(Key) - Inserts a new key <Key> with value 1. Or increments an existing key by 1. Key is guaranteed to be a <b>non-empty</b> string.</li>\r\n<li>Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a <b>non-empty</b> string.</li>\r\n<li>GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string <code>\"\"</code>.</li>\r\n<li>GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string <code>\"\"</code>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nChallenge: Perform all these in O(1) time complexity.\r\n</p>", "content_cn": "<p>\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li><code>Inc(key)</code> - \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u503c\u4e3a 1 \u7684 key\u3002\u6216\u8005\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u589e\u52a0\u4e00\uff0c\u4fdd\u8bc1 key \u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>Dec(key)</code> - \u5982\u679c\u8fd9\u4e2a key \u7684\u503c\u662f 1\uff0c\u90a3\u4e48\u628a\u4ed6\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u79fb\u9664\u6389\u3002\u5426\u5219\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u503c\u51cf\u4e00\u3002\u5982\u679c\u8fd9\u4e2a key \u4e0d\u5b58\u5728\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002key \u4fdd\u8bc1\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>GetMaxKey()</code> - \u8fd4\u56de key \u4e2d\u503c\u6700\u5927\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code> \u3002</li>\n\t<li><code>GetMinKey()</code> - \u8fd4\u56de key \u4e2d\u503c\u6700\u5c0f\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6311\u6218\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u591f\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\u6240\u6709\u64cd\u4f5c\u5417\uff1f</p>\n", "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class AllOne {\npublic:\n    /** Initialize your data structure here. */\n    AllOne() {\n\n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    void inc(string key) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    void dec(string key) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    string getMaxKey() {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    string getMinKey() {\n\n    }\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne* obj = new AllOne();\n * obj->inc(key);\n * obj->dec(key);\n * string param_3 = obj->getMaxKey();\n * string param_4 = obj->getMinKey();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class AllOne {\n\n    /** Initialize your data structure here. */\n    public AllOne() {\n\n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    public void inc(String key) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    public void dec(String key) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    public String getMaxKey() {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    public String getMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class AllOne(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def inc(self, key):\n        \"\"\"\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\n        :type key: str\n        :rtype: None\n        \"\"\"\n\n\n    def dec(self, key):\n        \"\"\"\n        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\n        :type key: str\n        :rtype: None\n        \"\"\"\n\n\n    def getMaxKey(self):\n        \"\"\"\n        Returns one of the keys with maximal value.\n        :rtype: str\n        \"\"\"\n\n\n    def getMinKey(self):\n        \"\"\"\n        Returns one of the keys with Minimal value.\n        :rtype: str\n        \"\"\"\n\n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class AllOne:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def inc(self, key: str) -> None:\n        \"\"\"\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\n        \"\"\"\n\n\n    def dec(self, key: str) -> None:\n        \"\"\"\n        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\n        \"\"\"\n\n\n    def getMaxKey(self) -> str:\n        \"\"\"\n        Returns one of the keys with maximal value.\n        \"\"\"\n\n\n    def getMinKey(self) -> str:\n        \"\"\"\n        Returns one of the keys with Minimal value.\n        \"\"\"\n\n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} AllOne;\n\n/** Initialize your data structure here. */\n\nAllOne* allOneCreate() {\n    \n}\n\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\nvoid allOneInc(AllOne* obj, char * key) {\n  \n}\n\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\nvoid allOneDec(AllOne* obj, char * key) {\n  \n}\n\n/** Returns one of the keys with maximal value. */\nchar * allOneGetMaxKey(AllOne* obj) {\n  \n}\n\n/** Returns one of the keys with Minimal value. */\nchar * allOneGetMinKey(AllOne* obj) {\n  \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n \n * allOneDec(obj, key);\n \n * char * param_3 = allOneGetMaxKey(obj);\n \n * char * param_4 = allOneGetMinKey(obj);\n \n * allOneFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class AllOne {\n\n    /** Initialize your data structure here. */\n    public AllOne() {\n\n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    public void Inc(string key) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    public void Dec(string key) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    public string GetMaxKey() {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    public string GetMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.Inc(key);\n * obj.Dec(key);\n * string param_3 = obj.GetMaxKey();\n * string param_4 = obj.GetMinKey();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar AllOne = function() {\n\n};\n\n/**\n * Inserts a new key <Key> with value 1. Or increments an existing key by 1. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n\n};\n\n/**\n * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n\n};\n\n/**\n * Returns one of the keys with maximal value.\n * @return {string}\n */\nAllOne.prototype.getMaxKey = function() {\n\n};\n\n/**\n * Returns one of the keys with Minimal value.\n * @return {string}\n */\nAllOne.prototype.getMinKey = function() {\n\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class AllOne\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Inserts a new key <Key> with value 1. Or increments an existing key by 1.\n    :type key: String\n    :rtype: Void\n=end\n    def inc(key)\n\n    end\n\n\n=begin\n    Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\n    :type key: String\n    :rtype: Void\n=end\n    def dec(key)\n\n    end\n\n\n=begin\n    Returns one of the keys with maximal value.\n    :rtype: String\n=end\n    def get_max_key()\n\n    end\n\n\n=begin\n    Returns one of the keys with Minimal value.\n    :rtype: String\n=end\n    def get_min_key()\n\n    end\n\n\nend\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne.new()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.get_max_key()\n# param_4 = obj.get_min_key()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass AllOne {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    func inc(_ key: String) {\n        \n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    func dec(_ key: String) {\n        \n    }\n    \n    /** Returns one of the keys with maximal value. */\n    func getMaxKey() -> String {\n        \n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    func getMinKey() -> String {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * let ret_3: String = obj.getMaxKey()\n * let ret_4: String = obj.getMinKey()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type AllOne struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() AllOne {\n\n}\n\n\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\nfunc (this *AllOne) Inc(key string)  {\n\n}\n\n\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\nfunc (this *AllOne) Dec(key string)  {\n\n}\n\n\n/** Returns one of the keys with maximal value. */\nfunc (this *AllOne) GetMaxKey() string {\n\n}\n\n\n/** Returns one of the keys with Minimal value. */\nfunc (this *AllOne) GetMinKey() string {\n\n}\n\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Inc(key);\n * obj.Dec(key);\n * param_3 := obj.GetMaxKey();\n * param_4 := obj.GetMinKey();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class AllOne() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    def inc(key: String) {\n\n    }\n\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    def dec(key: String) {\n\n    }\n\n    /** Returns one of the keys with maximal value. */\n    def getMaxKey(): String = {\n\n    }\n\n    /** Returns one of the keys with Minimal value. */\n    def getMinKey(): String = {\n\n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class AllOne() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    fun inc(key: String) {\n\n    }\n\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    fun dec(key: String) {\n\n    }\n\n    /** Returns one of the keys with maximal value. */\n    fun getMaxKey(): String {\n\n    }\n\n    /** Returns one of the keys with Minimal value. */\n    fun getMinKey(): String {\n\n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct AllOne {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl AllOne {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    fn inc(&self, key: String) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    fn dec(&self, key: String) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    fn get_max_key(&self) -> String {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    fn get_min_key(&self) -> String {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne::new();\n * obj.inc(key);\n * obj.dec(key);\n * let ret_3: String = obj.get_max_key();\n * let ret_4: String = obj.get_min_key();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class AllOne {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Inserts a new key <Key> with value 1. Or increments an existing key by 1.\n     * @param String $key\n     * @return NULL\n     */\n    function inc($key) {\n\n    }\n\n    /**\n     * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\n     * @param String $key\n     * @return NULL\n     */\n    function dec($key) {\n\n    }\n\n    /**\n     * Returns one of the keys with maximal value.\n     * @return String\n     */\n    function getMaxKey() {\n\n    }\n\n    /**\n     * Returns one of the keys with Minimal value.\n     * @return String\n     */\n    function getMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * $obj = AllOne();\n * $obj->inc($key);\n * $obj->dec($key);\n * $ret_3 = $obj->getMaxKey();\n * $ret_4 = $obj->getMinKey();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class AllOne {\n    constructor() {\n\n    }\n\n    inc(key: string): void {\n\n    }\n\n    dec(key: string): void {\n\n    }\n\n    getMaxKey(): string {\n\n    }\n\n    getMinKey(): string {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0433", "frontend_question_id": "0433", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-genetic-mutation", "url_en": "https://leetcode.com/problems/minimum-genetic-mutation", "relative_path_cn": "/leetcode/0400-0499/0433.Minimum%20Genetic%20Mutation/README.md", "relative_path_en": "/leetcode/0400-0499/0433.Minimum%20Genetic%20Mutation/README_EN.md", "title_cn": "\u6700\u5c0f\u57fa\u56e0\u53d8\u5316", "title_en": "Minimum Genetic Mutation", "question_title_slug": "minimum-genetic-mutation", "content_en": "<p>A gene string can be represented by an 8-character long string, with choices from <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>.</p>\r\n\r\n<p>Suppose we need to investigate about a mutation (mutation from &quot;start&quot; to &quot;end&quot;), where ONE mutation is defined as ONE single character changed in the gene string.</p>\r\n\r\n<p>For example, <code>&quot;AACCGGTT&quot;</code> -&gt; <code>&quot;AACCGGTA&quot;</code> is 1 mutation.</p>\r\n\r\n<p>Also, there is a given gene &quot;bank&quot;, which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.</p>\r\n\r\n<p>Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from &quot;start&quot; to &quot;end&quot;. If there is no such a mutation, return -1.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Starting point is assumed to be valid, so it might not be included in the bank.</li>\r\n\t<li>If multiple mutations are needed, all mutations during in the sequence must be valid.</li>\r\n\t<li>You may assume start and end string is not the same.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AACCGGTT&quot;\r\nend:   &quot;AACCGGTA&quot;\r\nbank: [&quot;AACCGGTA&quot;]\r\n\r\nreturn: 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AACCGGTT&quot;\r\nend:   &quot;AAACGGTA&quot;\r\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\r\n\r\nreturn: 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AAAAACCC&quot;\r\nend:   &quot;AACCCCCC&quot;\r\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\r\n\r\nreturn: 3\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u4e00\u6761\u57fa\u56e0\u5e8f\u5217\u7531\u4e00\u4e2a\u5e26\u67098\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u5c5e\u4e8e <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002</p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u8981\u8c03\u67e5\u4e00\u4e2a\u57fa\u56e0\u5e8f\u5217\u7684\u53d8\u5316\u3002<strong>\u4e00\u6b21</strong>\u57fa\u56e0\u53d8\u5316\u610f\u5473\u7740\u8fd9\u4e2a\u57fa\u56e0\u5e8f\u5217\u4e2d\u7684<strong>\u4e00\u4e2a</strong>\u5b57\u7b26\u53d1\u751f\u4e86\u53d8\u5316\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u57fa\u56e0\u5e8f\u5217\u7531<code>&quot;AACCGGTT&quot;</code>&nbsp;\u53d8\u5316\u81f3&nbsp;<code>&quot;AACCGGTA&quot;&nbsp;</code>\u5373\u53d1\u751f\u4e86\u4e00\u6b21\u57fa\u56e0\u53d8\u5316\u3002</p>\n\n<p>\u4e0e\u6b64\u540c\u65f6\uff0c\u6bcf\u4e00\u6b21\u57fa\u56e0\u53d8\u5316\u7684\u7ed3\u679c\uff0c\u90fd\u9700\u8981\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u57fa\u56e0\u4e32\uff0c\u5373\u8be5\u7ed3\u679c\u5c5e\u4e8e\u4e00\u4e2a\u57fa\u56e0\u5e93\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a3\u4e2a\u53c2\u6570 &mdash; start, end, bank\uff0c\u5206\u522b\u4ee3\u8868\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\uff0c\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u53ca\u57fa\u56e0\u5e93\uff0c\u8bf7\u627e\u51fa\u80fd\u591f\u4f7f\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u53d8\u5316\u4e3a\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u6240\u9700\u7684\u6700\u5c11\u53d8\u5316\u6b21\u6570\u3002\u5982\u679c\u65e0\u6cd5\u5b9e\u73b0\u76ee\u6807\u53d8\u5316\uff0c\u8bf7\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u9ed8\u8ba4\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u57fa\u56e0\u5e93\u4e2d\u3002</li>\n\t<li>\u6240\u6709\u7684\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u5fc5\u987b\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u5047\u5b9a\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u4e0e\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u662f\u4e0d\u4e00\u6837\u7684\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AACCGGTA&quot;\nbank: [&quot;AACCGGTA&quot;]\n\n\u8fd4\u56de\u503c: 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AAACGGTA&quot;\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\n\n\u8fd4\u56de\u503c: 2\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\nstart: &quot;AAAAACCC&quot;\nend:   &quot;AACCCCCC&quot;\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\n\n\u8fd4\u56de\u503c: 3\n</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMutation(string start, string end, vector<string>& bank) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minMutation(String start, String end, String[] bank) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minMutation(self, start, end, bank):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :type bank: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minMutation(self, start: str, end: str, bank: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minMutation(char * start, char * end, char ** bank, int bankSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinMutation(string start, string end, string[] bank) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} start\n * @param {string} end\n * @param {string[]} bank\n * @return {number}\n */\nvar minMutation = function(start, end, bank) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} start\n# @param {String} end\n# @param {String[]} bank\n# @return {Integer}\ndef min_mutation(start, end, bank)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minMutation(_ start: String, _ end: String, _ bank: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minMutation(start string, end string, bank []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minMutation(start: String, end: String, bank: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minMutation(start: String, end: String, bank: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_mutation(start: String, end: String, bank: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $start\n     * @param String $end\n     * @param String[] $bank\n     * @return Integer\n     */\n    function minMutation($start, $end, $bank) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minMutation(start: string, end: string, bank: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0434", "frontend_question_id": "0434", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-segments-in-a-string", "url_en": "https://leetcode.com/problems/number-of-segments-in-a-string", "relative_path_cn": "/leetcode/0400-0499/0434.Number%20of%20Segments%20in%20a%20String/README.md", "relative_path_en": "/leetcode/0400-0499/0434.Number%20of%20Segments%20in%20a%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u6570", "title_en": "Number of Segments in a String", "question_title_slug": "number-of-segments-in-a-string", "content_en": "<p>You are given a string <code>s</code>, return <em>the number of segments in the string</em>.&nbsp;</p>\n\n<p>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello, my name is John&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The five segments are [&quot;Hello,&quot;, &quot;my&quot;, &quot;name&quot;, &quot;is&quot;, &quot;John&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;love live! mu&#39;sic forever&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>s</code> consists of lower-case and upper-case English letters, digits or one of the following characters <code>&quot;!@#$%^&amp;*()_+-=&#39;,.:&quot;</code>.</li>\n\t<li>The only space character in <code>s</code> is <code>&#39; &#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e2a\u6570\uff0c\u8fd9\u91cc\u7684\u5355\u8bcd\u6307\u7684\u662f\u8fde\u7eed\u7684\u4e0d\u662f\u7a7a\u683c\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u5047\u5b9a\u5b57\u7b26\u4e32\u91cc\u4e0d\u5305\u62ec\u4efb\u4f55\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;Hello, my name is John&quot;\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca: </strong>\u8fd9\u91cc\u7684\u5355\u8bcd\u662f\u6307\u8fde\u7eed\u7684\u4e0d\u662f\u7a7a\u683c\u7684\u5b57\u7b26\uff0c\u6240\u4ee5 &quot;Hello,&quot; \u7b97\u4f5c 1 \u4e2a\u5355\u8bcd\u3002\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countSegments(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countSegments(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countSegments(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countSegments(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountSegments(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar countSegments = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_segments(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countSegments(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countSegments(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countSegments(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countSegments(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_segments(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function countSegments($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countSegments(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0435", "frontend_question_id": "0435", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/non-overlapping-intervals", "url_en": "https://leetcode.com/problems/non-overlapping-intervals", "relative_path_cn": "/leetcode/0400-0499/0435.Non-overlapping%20Intervals/README.md", "relative_path_en": "/leetcode/0400-0499/0435.Non-overlapping%20Intervals/README_EN.md", "title_cn": "\u65e0\u91cd\u53e0\u533a\u95f4", "title_en": "Non-overlapping Intervals", "question_title_slug": "non-overlapping-intervals", "content_en": "<p>Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p>\n\n<ol>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> [[1,2],[2,3],[3,4],[1,3]]\n<b>Output:</b> 1\n<b>Explanation:</b> [1,3] can be removed and the rest of intervals are non-overlapping.\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> [[1,2],[1,2],[1,2]]\n<b>Output:</b> 2\n<b>Explanation:</b> You need to remove two [1,2] to make the rest of intervals non-overlapping.\n</pre>\n\n<p><b>Example 3:</b></p>\n\n<pre>\n<b>Input:</b> [[1,2],[2,3]]\n<b>Output:</b> 0\n<b>Explanation:</b> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ol>\n\t<li>You may assume the interval&#39;s end point is always bigger than its start point.</li>\n\t<li>Intervals like [1,2] and [2,3] have borders &quot;touching&quot; but they don&#39;t overlap each other.</li>\n</ol>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002</li>\n\t<li>\u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92&ldquo;\u63a5\u89e6&rdquo;\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [1,2], [1,2] ]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [2,3] ]\n\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u89e3\u91ca:</strong> \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002\n</pre>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int EraseOverlapIntervals(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func eraseOverlapIntervals(_ intervals: [[Int]]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func eraseOverlapIntervals(intervals [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun eraseOverlapIntervals(intervals: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn erase_overlap_intervals(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function eraseOverlapIntervals(intervals: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0436", "frontend_question_id": "0436", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-right-interval", "url_en": "https://leetcode.com/problems/find-right-interval", "relative_path_cn": "/leetcode/0400-0499/0436.Find%20Right%20Interval/README.md", "relative_path_en": "/leetcode/0400-0499/0436.Find%20Right%20Interval/README_EN.md", "title_cn": "\u5bfb\u627e\u53f3\u533a\u95f4", "title_en": "Find Right Interval", "question_title_slug": "find-right-interval", "content_en": "<p>You are given an array of&nbsp;<code>intervals</code>, where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;and each <code>start<sub>i</sub></code>&nbsp;is <strong>unique</strong>.</p>\n\n<p>The <strong>r</strong><strong>ight</strong><strong>&nbsp;interval</strong>&nbsp;for an interval <code>i</code> is an interval&nbsp;<code>j</code>&nbsp;such that <code>start<sub>j</sub></code><code>&nbsp;&gt;= end<sub>i</sub></code>&nbsp;and&nbsp;<code>start<sub>j</sub></code>&nbsp;is&nbsp;<strong>minimized</strong>.</p>\n\n<p>Return&nbsp;<em>an array of&nbsp;<strong>right interval</strong>&nbsp;indices for each interval&nbsp;<code>i</code></em>. If no&nbsp;<strong>right interval</strong>&nbsp;exists for interval&nbsp;<code>i</code>, then put&nbsp;<code>-1</code>&nbsp;at index <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2]]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> There is only one interval in the collection, so it outputs -1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[3,4],[2,3],[1,2]]\n<strong>Output:</strong> [-1,0,1]\n<strong>Explanation:</strong> There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>0</sub>&nbsp;= 3 is the smallest start that is &gt;= end<sub>1</sub>&nbsp;= 3.\nThe right interval for [1,2] is [2,3] since start<sub>1</sub>&nbsp;= 2 is the smallest start that is &gt;= end<sub>2</sub>&nbsp;= 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[2,3],[3,4]]\n<strong>Output:</strong> [-1,2,-1]\n<strong>Explanation:</strong> There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>2</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub>&nbsp;= 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;intervals.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>The start point&nbsp;of each interval is <strong>unique</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 i\uff0c\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u533a\u95f4 j\uff0c\u5b83\u7684\u8d77\u59cb\u70b9\u5927\u4e8e\u6216\u7b49\u4e8e\u533a\u95f4&nbsp;i \u7684\u7ec8\u70b9\uff0c\u8fd9\u53ef\u4ee5\u79f0\u4e3a j \u5728 i \u7684&ldquo;\u53f3\u4fa7&rdquo;\u3002</p>\n\n<p>\u5bf9\u4e8e\u4efb\u4f55\u533a\u95f4\uff0c\u4f60\u9700\u8981\u5b58\u50a8\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4&nbsp;j \u7684\u6700\u5c0f\u7d22\u5f15\uff0c\u8fd9\u610f\u5473\u7740\u533a\u95f4 j \u6709\u6700\u5c0f\u7684\u8d77\u59cb\u70b9\u53ef\u4ee5\u4f7f\u5176\u6210\u4e3a&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\u5982\u679c\u533a\u95f4&nbsp;j \u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u533a\u95f4 i \u5b58\u50a8\u4e3a -1\u3002\u6700\u540e\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u4e00\u4e2a\u503c\u4e3a\u5b58\u50a8\u7684\u533a\u95f4\u503c\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u59cb\u70b9\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd9\u4e9b\u533a\u95f4\u90fd\u4e0d\u5177\u6709\u76f8\u540c\u7684\u8d77\u59cb\u70b9\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2] ]\n<strong>\u8f93\u51fa:</strong> [-1]\n\n<strong>\u89e3\u91ca:</strong>\u96c6\u5408\u4e2d\u53ea\u6709\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u8f93\u51fa-1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [3,4], [2,3], [1,2] ]\n<strong>\u8f93\u51fa:</strong> [-1, 0, 1]\n\n<strong>\u89e3\u91ca:</strong>\u5bf9\u4e8e[3,4]\uff0c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\n\u5bf9\u4e8e[2,3]\uff0c\u533a\u95f4[3,4]\u5177\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9;\n\u5bf9\u4e8e[1,2]\uff0c\u533a\u95f4[2,3]\u5177\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,4], [2,3], [3,4] ]\n<strong>\u8f93\u51fa:</strong> [-1, 2, -1]\n\n<strong>\u89e3\u91ca:\u5bf9\u4e8e</strong>\u533a\u95f4[1,4]\u548c[3,4]\uff0c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\n\u5bf9\u4e8e[2,3]\uff0c\u533a\u95f4[3,4]\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9\u3002\n</pre>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findRightInterval(vector<vector<int>>& intervals) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findRightInterval(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRightInterval(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findRightInterval(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindRightInterval(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {number[]}\n */\nvar findRightInterval = function(intervals) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Integer[]}\ndef find_right_interval(intervals)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRightInterval(_ intervals: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRightInterval(intervals [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRightInterval(intervals: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRightInterval(intervals: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_right_interval(intervals: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[]\n     */\n    function findRightInterval($intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRightInterval(intervals: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0437", "frontend_question_id": "0437", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/path-sum-iii", "url_en": "https://leetcode.com/problems/path-sum-iii", "relative_path_cn": "/leetcode/0400-0499/0437.Path%20Sum%20III/README.md", "relative_path_en": "/leetcode/0400-0499/0437.Path%20Sum%20III/README_EN.md", "title_cn": "\u8def\u5f84\u603b\u548c III", "title_en": "Path Sum III", "question_title_slug": "path-sum-iii", "content_en": "<p>You are given a binary tree in which each node contains an integer value.</p>\r\n\r\n<p>Find the number of paths that sum to a given value.</p>\r\n\r\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards\r\n(traveling only from parent nodes to child nodes).</p>\r\n\r\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\r\n\r\n      10\r\n     /  \\\r\n    <b>5</b>   <b>-3</b>\r\n   <b>/</b> <b>\\</b>    <b>\\</b>\r\n  <b>3</b>   <b>2</b>   <b>11</b>\r\n / \\   <b>\\</b>\r\n3  -2   <b>1</b>\r\n\r\nReturn 3. The paths that sum to 8 are:\r\n\r\n1.  5 -> 3\r\n2.  5 -> 2 -> 1\r\n3. -3 -> 11\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u7740\u4e00\u4e2a\u6574\u6570\u503c\u3002</p>\n\n<p>\u627e\u51fa\u8def\u5f84\u548c\u7b49\u4e8e\u7ed9\u5b9a\u6570\u503c\u7684\u8def\u5f84\u603b\u6570\u3002</p>\n\n<p>\u8def\u5f84\u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002</p>\n\n<p>\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc71000\u4e2a\u8282\u70b9\uff0c\u4e14\u8282\u70b9\u6570\u503c\u8303\u56f4\u662f [-1000000,1000000] \u7684\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <strong>5</strong>   <strong>-3</strong>\n   <strong>/</strong> <strong>\\</strong>    <strong>\\</strong>\n  <strong>3</strong>   <strong>2</strong>   <strong>11</strong>\n / \\   <strong>\\</strong>\n3  -2   <strong>1</strong>\n\n\u8fd4\u56de 3\u3002\u548c\u7b49\u4e8e 8 \u7684\u8def\u5f84\u6709:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3.  -3 -&gt; 11\n</pre>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int pathSum(TreeNode* root, int sum) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int pathSum(TreeNode root, int sum) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint pathSum(struct TreeNode* root, int sum){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int PathSum(TreeNode root, int sum) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */\nvar pathSum = function(root, sum) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} sum\n# @return {Integer}\ndef path_sum(root, sum)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func pathSum(_ root: TreeNode?, _ sum: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pathSum(root *TreeNode, sum int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def pathSum(root: TreeNode, sum: Int): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun pathSum(root: TreeNode?, sum: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, sum: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $sum\n     * @return Integer\n     */\n    function pathSum($root, $sum) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction pathSum(root: TreeNode | null, sum: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0438", "frontend_question_id": "0438", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-all-anagrams-in-a-string", "url_en": "https://leetcode.com/problems/find-all-anagrams-in-a-string", "relative_path_cn": "/leetcode/0400-0499/0438.Find%20All%20Anagrams%20in%20a%20String/README.md", "relative_path_en": "/leetcode/0400-0499/0438.Find%20All%20Anagrams%20in%20a%20String/README_EN.md", "title_cn": "\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd", "title_en": "Find All Anagrams in a String", "question_title_slug": "find-all-anagrams-in-a-string", "content_en": "<p>Given a string <b>s</b> and a <b>non-empty</b> string <b>p</b>, find all the start indices of <b>p</b>'s anagrams in <b>s</b>.</p>\r\n\r\n<p>Strings consists of lowercase English letters only and the length of both strings <b>s</b> and <b>p</b> will not be larger than 20,100.</p>\r\n\r\n<p>The order of output does not matter.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns: \"cbaebabacd\" p: \"abc\"\r\n\r\n<b>Output:</b>\r\n[0, 6]\r\n\r\n<b>Explanation:</b>\r\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\r\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns: \"abab\" p: \"ab\"\r\n\r\n<b>Output:</b>\r\n[0, 1, 2]\r\n\r\n<b>Explanation:</b>\r\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\r\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\r\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32&nbsp;<strong>p</strong>\uff0c\u627e\u5230&nbsp;<strong>s&nbsp;</strong>\u4e2d\u6240\u6709\u662f&nbsp;<strong>p&nbsp;</strong>\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c <strong>p&nbsp;</strong>\u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</li>\n\t<li>\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns: &quot;cbaebabacd&quot; p: &quot;abc&quot;\n\n<strong>\u8f93\u51fa:</strong>\n[0, 6]\n\n<strong>\u89e3\u91ca:</strong>\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f &quot;cba&quot;, \u5b83\u662f &quot;abc&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f &quot;bac&quot;, \u5b83\u662f &quot;abc&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns: &quot;abab&quot; p: &quot;ab&quot;\n\n<strong>\u8f93\u51fa:</strong>\n[0, 1, 2]\n\n<strong>\u89e3\u91ca:</strong>\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f &quot;ab&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f &quot;ba&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f &quot;ab&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n</pre>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char * s, char * p, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findAnagrams(s string, p string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findAnagrams(s: String, p: String): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findAnagrams(s: string, p: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0439", "frontend_question_id": "0439", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/ternary-expression-parser", "url_en": "https://leetcode.com/problems/ternary-expression-parser", "relative_path_cn": "/leetcode/0400-0499/0439.Ternary%20Expression%20Parser/README.md", "relative_path_en": "/leetcode/0400-0499/0439.Ternary%20Expression%20Parser/README_EN.md", "title_cn": "\u4e09\u5143\u8868\u8fbe\u5f0f\u89e3\u6790\u5668", "title_en": "Ternary Expression Parser", "question_title_slug": "ternary-expression-parser", "content_en": null, "content_cn": null, "tags_en": ["Stack", "Depth-first Search"], "tags_cn": ["\u6808", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0440", "frontend_question_id": "0440", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order", "url_en": "https://leetcode.com/problems/k-th-smallest-in-lexicographical-order", "relative_path_cn": "/leetcode/0400-0499/0440.K-th%20Smallest%20in%20Lexicographical%20Order/README.md", "relative_path_en": "/leetcode/0400-0499/0440.K-th%20Smallest%20in%20Lexicographical%20Order/README_EN.md", "title_cn": "\u5b57\u5178\u5e8f\u7684\u7b2cK\u5c0f\u6570\u5b57", "title_en": "K-th Smallest in Lexicographical Order", "question_title_slug": "k-th-smallest-in-lexicographical-order", "content_en": "<p>Given integers <code>n</code> and <code>k</code>, find the lexicographically k-th smallest integer in the range from <code>1</code> to <code>n</code>.</p>\r\n\r\n<p>Note: 1 &le; k &le; n &le; 10<sup>9</sup>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\nn: 13   k: 2\r\n\r\n<b>Output:</b>\r\n10\r\n\r\n<b>Explanation:</b>\r\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\r\n</pre>\r\n</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u627e\u5230&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u4e2d\u5b57\u5178\u5e8f\u7b2c&nbsp;<code>k</code>&nbsp;\u5c0f\u7684\u6570\u5b57\u3002</p>\n\n<p>\u6ce8\u610f\uff1a1 &le; k &le; n &le; 10<sup>9</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nn: 13   k: 2\n\n<strong>\u8f93\u51fa:</strong>\n10\n\n<strong>\u89e3\u91ca:</strong>\n\u5b57\u5178\u5e8f\u7684\u6392\u5217\u662f [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]\uff0c\u6240\u4ee5\u7b2c\u4e8c\u5c0f\u7684\u6570\u5b57\u662f 10\u3002\n</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findKthNumber(int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findKthNumber(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findKthNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findKthNumber(self, n: int, k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findKthNumber(int n, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindKthNumber(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findKthNumber = function(n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_number(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findKthNumber(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findKthNumber(n int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findKthNumber(n: Int, k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findKthNumber(n: Int, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_kth_number(n: i32, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthNumber($n, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findKthNumber(n: number, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0441", "frontend_question_id": "0441", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/arranging-coins", "url_en": "https://leetcode.com/problems/arranging-coins", "relative_path_cn": "/leetcode/0400-0499/0441.Arranging%20Coins/README.md", "relative_path_en": "/leetcode/0400-0499/0441.Arranging%20Coins/README_EN.md", "title_cn": "\u6392\u5217\u786c\u5e01", "title_en": "Arranging Coins", "question_title_slug": "arranging-coins", "content_en": "<p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p>\r\n \r\n<p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p>\r\n\r\n<p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n</pre>\r\n</p>", "content_cn": "<p>\u4f60\u603b\u5171\u6709&nbsp;<em>n&nbsp;</em>\u679a\u786c\u5e01\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u4eec\u6446\u6210\u4e00\u4e2a\u9636\u68af\u5f62\u72b6\uff0c\u7b2c&nbsp;<em>k&nbsp;</em>\u884c\u5c31\u5fc5\u987b\u6b63\u597d\u6709&nbsp;<em>k&nbsp;</em>\u679a\u786c\u5e01\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57&nbsp;<em>n</em>\uff0c\u627e\u51fa\u53ef\u5f62\u6210\u5b8c\u6574\u9636\u68af\u884c\u7684\u603b\u884c\u6570\u3002</p>\n\n<p><em>n&nbsp;</em>\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u578b\u7684\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nn = 5\n\n\u786c\u5e01\u53ef\u6392\u5217\u6210\u4ee5\u4e0b\u51e0\u884c:\n&curren;\n&curren; &curren;\n&curren; &curren;\n\n\u56e0\u4e3a\u7b2c\u4e09\u884c\u4e0d\u5b8c\u6574\uff0c\u6240\u4ee5\u8fd4\u56de2.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\nn = 8\n\n\u786c\u5e01\u53ef\u6392\u5217\u6210\u4ee5\u4e0b\u51e0\u884c:\n&curren;\n&curren; &curren;\n&curren; &curren; &curren;\n&curren; &curren;\n\n\u56e0\u4e3a\u7b2c\u56db\u884c\u4e0d\u5b8c\u6574\uff0c\u6240\u4ee5\u8fd4\u56de3.\n</pre>\n", "tags_en": ["Math", "Binary Search"], "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int arrangeCoins(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int arrangeCoins(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint arrangeCoins(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ArrangeCoins(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar arrangeCoins = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef arrange_coins(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arrangeCoins(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func arrangeCoins(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arrangeCoins(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arrangeCoins(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn arrange_coins(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function arrangeCoins($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arrangeCoins(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0442", "frontend_question_id": "0442", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-all-duplicates-in-an-array", "url_en": "https://leetcode.com/problems/find-all-duplicates-in-an-array", "relative_path_cn": "/leetcode/0400-0499/0442.Find%20All%20Duplicates%20in%20an%20Array/README.md", "relative_path_en": "/leetcode/0400-0499/0442.Find%20All%20Duplicates%20in%20an%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e", "title_en": "Find All Duplicates in an Array", "question_title_slug": "find-all-duplicates-in-an-array", "content_en": "<p>Given an array of integers, 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear <b>twice</b> and others appear <b>once</b>.</p>\r\n\r\n<p>Find all the elements that appear <b>twice</b> in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime?</p>\r\n</p>\r\n<p><b>Example:</b><br/>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[2,3]\r\n</pre>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 &le; a[i] &le; <em>n</em> \uff08<em>n</em>\u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0<strong>\u4e24\u6b21</strong>\u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0<strong>\u4e00\u6b21</strong>\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u51fa\u73b0<strong>\u4e24\u6b21</strong>\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O(<em>n</em>)\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>\u8f93\u51fa:</strong>\n[2,3]\n</pre>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findDuplicates(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> findDuplicates(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDuplicates(int* nums, int numsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindDuplicates(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findDuplicates = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_duplicates(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDuplicates(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findDuplicates(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDuplicates(nums: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDuplicates(nums: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_duplicates(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findDuplicates($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDuplicates(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0443", "frontend_question_id": "0443", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/string-compression", "url_en": "https://leetcode.com/problems/string-compression", "relative_path_cn": "/leetcode/0400-0499/0443.String%20Compression/README.md", "relative_path_en": "/leetcode/0400-0499/0443.String%20Compression/README_EN.md", "title_cn": "\u538b\u7f29\u5b57\u7b26\u4e32", "title_en": "String Compression", "question_title_slug": "string-compression", "content_en": "<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is 1, append the character to&nbsp;<code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string&nbsp;<code>s</code> <strong>should not be returned separately</strong>, but instead be stored&nbsp;<strong>in the input character array&nbsp;<code>chars</code></strong>. Note that group lengths that are 10 or longer will be split into multiple characters in&nbsp;<code>chars</code>.</p>\n\n<p>After you are done <b>modifying the input array</b>, return <em>the new length of the array</em>.</p>\n&nbsp;\n\n<p><b>Follow up:</b><br />\nCould you solve it using only <code>O(1)</code> extra space?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong>&nbsp;The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong>&nbsp;The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong>&nbsp;The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;a&quot;,&quot;a&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;3&quot;,&quot;b&quot;,&quot;2&quot;,&quot;a&quot;,&quot;2&quot;].\n<strong>Explanation:</strong>&nbsp;The groups are &quot;aaa&quot;, &quot;bb&quot;, and &quot;aa&quot;. This compresses to &quot;a3b2a2&quot;. Note that each group is independent even if two groups have the same character.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lower-case English letter, upper-case English letter, digit, or symbol.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u5b57\u7b26\uff0c\u4f7f\u7528<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">\u539f\u5730\u7b97\u6cd5</a>\u5c06\u5176\u538b\u7f29\u3002</p>\n\n<p>\u538b\u7f29\u540e\u7684\u957f\u5ea6\u5fc5\u987b\u59cb\u7ec8\u5c0f\u4e8e\u6216\u7b49\u4e8e\u539f\u6570\u7ec4\u957f\u5ea6\u3002</p>\n\n<p>\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u662f\u957f\u5ea6\u4e3a1&nbsp;\u7684<strong>\u5b57\u7b26</strong>\uff08\u4e0d\u662f int \u6574\u6570\u7c7b\u578b\uff09\u3002</p>\n\n<p>\u5728\u5b8c\u6210<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">\u539f\u5730</a><strong>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u540e\uff0c\u8fd4\u56de\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528O(1) \u7a7a\u95f4\u89e3\u51b3\u95ee\u9898\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de 6 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d 6 \u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n\n<strong>\u8bf4\u660e\uff1a</strong>\n&quot;aa&quot; \u88ab &quot;a2&quot; \u66ff\u4ee3\u3002&quot;bb&quot; \u88ab &quot;b2&quot; \u66ff\u4ee3\u3002&quot;ccc&quot; \u88ab &quot;c3&quot; \u66ff\u4ee3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de 1 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d 1 \u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;]\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u4e32\u88ab\u66ff\u4ee3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de 4 \uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d4\u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]\u3002\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7531\u4e8e\u5b57\u7b26 &quot;a&quot; \u4e0d\u91cd\u590d\uff0c\u6240\u4ee5\u4e0d\u4f1a\u88ab\u538b\u7f29\u3002&quot;bbbbbbbbbbbb&quot; \u88ab &ldquo;b12&rdquo; \u66ff\u4ee3\u3002\n\u6ce8\u610f\u6bcf\u4e2a\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u5b57\u7b26\u90fd\u6709\u4e00\u4e2aASCII\u503c\u5728<code>[35, 126]</code>\u533a\u95f4\u5185\u3002</li>\n\t<li><code>1 &lt;= len(chars) &lt;= 1000</code>\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int compress(vector<char>& chars) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int compress(char[] chars) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def compress(self, chars: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint compress(char* chars, int charsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Compress(char[] chars) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func compress(_ chars: inout [Character]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func compress(chars []byte) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def compress(chars: Array[Char]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun compress(chars: CharArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(&$chars) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function compress(chars: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0444", "frontend_question_id": "0444", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sequence-reconstruction", "url_en": "https://leetcode.com/problems/sequence-reconstruction", "relative_path_cn": "/leetcode/0400-0499/0444.Sequence%20Reconstruction/README.md", "relative_path_en": "/leetcode/0400-0499/0444.Sequence%20Reconstruction/README_EN.md", "title_cn": "\u5e8f\u5217\u91cd\u5efa", "title_en": "Sequence Reconstruction", "question_title_slug": "sequence-reconstruction", "content_en": null, "content_cn": null, "tags_en": ["Graph", "Topological Sort"], "tags_cn": ["\u56fe", "\u62d3\u6251\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0445", "frontend_question_id": "0445", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/add-two-numbers-ii", "url_en": "https://leetcode.com/problems/add-two-numbers-ii", "relative_path_cn": "/leetcode/0400-0499/0445.Add%20Two%20Numbers%20II/README.md", "relative_path_en": "/leetcode/0400-0499/0445.Add%20Two%20Numbers%20II/README_EN.md", "title_cn": "\u4e24\u6570\u76f8\u52a0 II", "title_en": "Add Two Numbers II", "question_title_slug": "add-two-numbers-ii", "content_en": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if you cannot modify the input lists? In other words, reversing the lists is not allowed.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\r\n<b>Output:</b> 7 -> 8 -> 0 -> 7\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u4f60\u4e24\u4e2a <strong>\u975e\u7a7a </strong>\u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u4e00\u4f4d\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>(7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>\u8f93\u51fa\uff1a</strong>7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0446", "frontend_question_id": "0446", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence", "url_en": "https://leetcode.com/problems/arithmetic-slices-ii-subsequence", "relative_path_cn": "/leetcode/0400-0499/0446.Arithmetic%20Slices%20II%20-%20Subsequence/README.md", "relative_path_en": "/leetcode/0400-0499/0446.Arithmetic%20Slices%20II%20-%20Subsequence/README_EN.md", "title_cn": "\u7b49\u5dee\u6570\u5217\u5212\u5206 II - \u5b50\u5e8f\u5217", "title_en": "Arithmetic Slices II - Subsequence", "question_title_slug": "arithmetic-slices-ii-subsequence", "content_en": "<p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\r\n\r\n<p>For example, these are arithmetic sequences:</p>\r\n\r\n<pre>\r\n1, 3, 5, 7, 9\r\n7, 7, 7, 7\r\n3, -1, -5, -9</pre>\r\n\r\n<p>The following sequence is not arithmetic.</p>\r\n\r\n<pre>\r\n1, 1, 2, 5, 7</pre>\r\n&nbsp;\r\n\r\n<p>A zero-indexed array A consisting of N numbers is given. A <b>subsequence</b> slice of that array is any sequence of integers (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) such that 0 &le; P<sub>0</sub> &lt; P<sub>1</sub> &lt; ... &lt; P<sub>k</sub> &lt; N.</p>\r\n\r\n<p>A <b>subsequence</b> slice (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) of array A is called arithmetic if the sequence A[P<sub>0</sub>], A[P<sub>1</sub>], ..., A[P<sub>k-1</sub>], A[P<sub>k</sub>] is arithmetic. In particular, this means that k &ge; 2.</p>\r\n\r\n<p>The function should return the number of arithmetic subsequence slices in the array A.</p>\r\n\r\n<p>The input contains N integers. Every integer is in the range of -2<sup>31</sup> and 2<sup>31</sup>-1 and 0 &le; N &le; 1000. The output is guaranteed to be less than 2<sup>31</sup>-1.</p>\r\n&nbsp;\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [2, 4, 6, 8, 10]\r\n\r\n<b>Output:</b> 7\r\n\r\n<b>Explanation:</b>\r\nAll arithmetic subsequence slices are:\r\n[2,4,6]\r\n[4,6,8]\r\n[6,8,10]\r\n[2,4,6,8]\r\n[4,6,8,10]\r\n[2,4,6,8,10]\r\n[2,6,10]\r\n</pre>\r\n", "content_cn": "<p>\u5982\u679c\u4e00\u4e2a\u6570\u5217\u81f3\u5c11\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u4e4b\u5dee\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217:</p>\n\n<pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>\u4ee5\u4e0b\u6570\u5217\u4e0d\u662f\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<pre>\n1, 1, 2, 5, 7</pre>\n\n<p>\u00a0</p>\n\n<p>\u6570\u7ec4 A \u5305\u542b N \u4e2a\u6570\uff0c\u4e14\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002\u8be5\u6570\u7ec4<strong>\u5b50\u5e8f\u5217</strong>\u5c06\u5212\u5206\u4e3a\u6574\u6570\u5e8f\u5217\u00a0(P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>)\uff0c\u6ee1\u8db3 0 \u2264 P<sub>0</sub> < P<sub>1</sub> < ... < P<sub>k</sub> < N\u3002</p>\n\n<p>\u00a0</p>\n\n<p>\u5982\u679c\u5e8f\u5217 A[P<sub>0</sub>]\uff0cA[P<sub>1</sub>]\uff0c...\uff0cA[P<sub>k-1</sub>]\uff0cA[P<sub>k</sub>] \u662f\u7b49\u5dee\u7684\uff0c\u90a3\u4e48\u6570\u7ec4 A \u7684<strong>\u5b50\u5e8f\u5217</strong> (P0\uff0cP1\uff0c\u2026\uff0cPK) \u79f0\u4e3a\u7b49\u5dee\u5e8f\u5217\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740 k \u2265 2\u3002</p>\n\n<p>\u51fd\u6570\u8981\u8fd4\u56de\u6570\u7ec4 A \u4e2d\u6240\u6709\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u8f93\u5165\u5305\u542b N \u4e2a\u6574\u6570\u3002\u6bcf\u4e2a\u6574\u6570\u90fd\u5728 -2<sup>31</sup> \u548c 2<sup>31</sup>-1 \u4e4b\u95f4\uff0c\u53e6\u5916 0 \u2264 N \u2264 1000\u3002\u4fdd\u8bc1\u8f93\u51fa\u5c0f\u4e8e 2<sup>31</sup>-1\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[2, 4, 6, 8, 10]\n\n<strong>\u8f93\u51fa\uff1a</strong>7\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u4e3a\uff1a\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n\n<p>\u00a0</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfArithmeticSlices(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfArithmeticSlices(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numberOfArithmeticSlices(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfArithmeticSlices(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar numberOfArithmeticSlices = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef number_of_arithmetic_slices(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func numberOfArithmeticSlices(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfArithmeticSlices(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfArithmeticSlices(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfArithmeticSlices(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_arithmetic_slices(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function numberOfArithmeticSlices($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfArithmeticSlices(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0447", "frontend_question_id": "0447", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-boomerangs", "url_en": "https://leetcode.com/problems/number-of-boomerangs", "relative_path_cn": "/leetcode/0400-0499/0447.Number%20of%20Boomerangs/README.md", "relative_path_en": "/leetcode/0400-0499/0447.Number%20of%20Boomerangs/README_EN.md", "title_cn": "\u56de\u65cb\u9556\u7684\u6570\u91cf", "title_en": "Number of Boomerangs", "question_title_slug": "number-of-boomerangs", "content_en": "<p>You are given&nbsp;<code>n</code> <code>points</code> in the plane that are all <strong>distinct</strong>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. A <strong>boomerang</strong>&nbsp;is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> <strong>(the order of the tuple matters)</strong>.</p>\n\n<p>Return&nbsp;<em>the number of boomerangs</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[0,0],[1,0],[2,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n ==&nbsp;points.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the points are <strong>unique</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u5e73\u9762\u4e0a<em>\u00a0</em><code>n</code><em> </em>\u5bf9 <strong>\u4e92\u4e0d\u76f8\u540c</strong> \u7684\u70b9\u00a0<code>points</code> \uff0c\u5176\u4e2d <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> \u3002<strong>\u56de\u65cb\u9556</strong> \u662f\u7531\u70b9\u00a0<code>(i, j, k)</code> \u8868\u793a\u7684\u5143\u7ec4 \uff0c\u5176\u4e2d\u00a0<code>i</code>\u00a0\u548c\u00a0<code>j</code>\u00a0\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u00a0<code>i</code>\u00a0\u548c\u00a0<code>k</code>\u00a0\u4e4b\u95f4\u7684\u8ddd\u79bb\u76f8\u7b49\uff08<strong>\u9700\u8981\u8003\u8651\u5143\u7ec4\u7684\u987a\u5e8f</strong>\uff09\u3002</p>\n\n<p>\u8fd4\u56de\u5e73\u9762\u4e0a\u6240\u6709\u56de\u65cb\u9556\u7684\u6570\u91cf\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[0,0],[1,0],[2,0]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u4e24\u4e2a\u56de\u65cb\u9556\u4e3a <strong>[[1,0],[0,0],[2,0]]</strong> \u548c <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[1,1],[2,2],[3,3]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n ==\u00a0points.length</code></li>\n\t<li><code>1 <= n <= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>4</sup></code></li>\n\t<li>\u6240\u6709\u70b9\u90fd <strong>\u4e92\u4e0d\u76f8\u540c</strong></li>\n</ul>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numberOfBoomerangs(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numberOfBoomerangs(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numberOfBoomerangs(int** points, int pointsSize, int* pointsColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumberOfBoomerangs(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_boomerangs(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberOfBoomerangs(_ points: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numberOfBoomerangs(points [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberOfBoomerangs(points: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberOfBoomerangs(points: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_of_boomerangs(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfBoomerangs($points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberOfBoomerangs(points: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0448", "frontend_question_id": "0448", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array", "url_en": "https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array", "relative_path_cn": "/leetcode/0400-0499/0448.Find%20All%20Numbers%20Disappeared%20in%20an%20Array/README.md", "relative_path_en": "/leetcode/0400-0499/0448.Find%20All%20Numbers%20Disappeared%20in%20an%20Array/README_EN.md", "title_cn": "\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57", "title_en": "Find All Numbers Disappeared in an Array", "question_title_slug": "find-all-numbers-disappeared-in-an-array", "content_en": "<p>Given an array of integers where 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p>\r\n\r\n<p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[5,6]\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728&nbsp; 1 &le; a[i] &le; <em>n</em> (&nbsp;<em>n</em> = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u5728 [1, <em>n</em>] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002</p>\n\n<p>\u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<em>O(n)</em>\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>\u8f93\u51fa:</strong>\n[5,6]\n</pre>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindDisappearedNumbers(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findDisappearedNumbers = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_disappeared_numbers(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDisappearedNumbers(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findDisappearedNumbers(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDisappearedNumbers(nums: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDisappearedNumbers(nums: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_disappeared_numbers(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findDisappearedNumbers($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDisappearedNumbers(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0449", "frontend_question_id": "0449", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/serialize-and-deserialize-bst", "url_en": "https://leetcode.com/problems/serialize-and-deserialize-bst", "relative_path_cn": "/leetcode/0400-0499/0449.Serialize%20and%20Deserialize%20BST/README.md", "relative_path_en": "/leetcode/0400-0499/0449.Serialize%20and%20Deserialize%20BST/README_EN.md", "title_cn": "\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811", "title_en": "Serialize and Deserialize BST", "question_title_slug": "serialize-and-deserialize-bst", "content_en": "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n\n<p><b>The encoded string should be as compact as possible.</b></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>\n</ul>\n", "content_cn": "<p>\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u7cfb\u5217\u4f4d\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u94fe\u8def\u4f20\u8f93\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u540c\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\u4e2d\u91cd\u5efa\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316<strong> \u4e8c\u53c9\u641c\u7d22\u6811</strong> \u3002 \u5bf9\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u7684\u5de5\u4f5c\u65b9\u5f0f\u6ca1\u6709\u9650\u5236\u3002 \u60a8\u53ea\u9700\u786e\u4fdd\u4e8c\u53c9\u641c\u7d22\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u8be5\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u6700\u521d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p><strong>\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u7d27\u51d1\u3002</strong></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [2,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>[2,1,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u8303\u56f4\u662f <code>[0, 10<sup>4</sup>]</code></li>\n\t<li><code>0 <= Node.val <= 10<sup>4</sup></code></li>\n\t<li>\u9898\u76ee\u6570\u636e <strong>\u4fdd\u8bc1</strong> \u8f93\u5165\u7684\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u6ce8\u610f</strong>\uff1a\u4e0d\u8981\u4f7f\u7528\u7c7b\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u3002 \u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec* ser = new Codec();\n// Codec* deser = new Codec();\n// string tree = ser->serialize(root);\n// TreeNode* ans = deser->deserialize(tree);\n// return ans;", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# tree = ser.serialize(root)\n# ans = deser.deserialize(tree)\n# return ans", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root: TreeNode) -> str:\n        \"\"\"Encodes a tree to a single string.\n        \"\"\"\n        \n\n    def deserialize(self, data: str) -> TreeNode:\n        \"\"\"Decodes your encoded data to tree.\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# tree = ser.serialize(root)\n# ans = deser.deserialize(tree)\n# return ans", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    // Encodes a tree to a single string.\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    // Decodes your encoded data to tree.\n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let ser = Codec()\n * let deser = Codec()\n * let tree: String = ser.serialize(root)\n * let ans = deser.deserialize(tree)\n * return ans\n*/", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor()\n * deser := Constructor()\n * tree := ser.serialize(root)\n * ans := deser.deserialize(tree)\n * return ans\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * val ser = new Codec()\n * val deser = new Codec()\n * val tree: String = ser.serialize(root)\n * val ans = deser.deserialize(tree)\n * return ans\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * val ser = Codec()\n * val deser = Codec()\n * val tree: String = ser.serialize(root)\n * val ans = deser.deserialize(tree)\n * return ans\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = new Codec();\n * $tree = $ser->serialize($param_1);\n * $deser = new Codec();\n * $ret = $deser->deserialize($tree);\n * return $ret;\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0450", "frontend_question_id": "0450", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-node-in-a-bst", "url_en": "https://leetcode.com/problems/delete-node-in-a-bst", "relative_path_cn": "/leetcode/0400-0499/0450.Delete%20Node%20in%20a%20BST/README.md", "relative_path_en": "/leetcode/0400-0499/0450.Delete%20Node%20in%20a%20BST/README_EN.md", "title_cn": "\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9", "title_en": "Delete Node in a BST", "question_title_slug": "delete-node-in-a-bst", "content_en": "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n\n<p>Basically, the deletion can be divided into two stages:</p>\n\n<ol>\n\t<li>Search for a node to remove.</li>\n\t<li>If the node is found, delete the node.</li>\n</ol>\n\n<p><b>Follow up:</b>&nbsp;Can you solve it with time complexity <code>O(height of tree)</code>?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg\" style=\"width: 800px; height: 214px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3\n<strong>Output:</strong> [5,4,6,2,null,null,7]\n<strong>Explanation:</strong> Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg\" style=\"width: 350px; height: 255px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0\n<strong>Output:</strong> [5,3,6,2,4,null,7]\n<strong>Explanation:</strong> The tree does not contain a node with value = 0.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [], key = 0\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>Each node has a <strong>unique</strong> value.</li>\n\t<li><code>root</code> is a valid binary search tree.</li>\n\t<li><code>-10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <strong>root </strong>\u548c\u4e00\u4e2a\u503c <strong>key</strong>\uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684&nbsp;<strong>key&nbsp;</strong>\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002</p>\n\n<p>\u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a</p>\n\n<ol>\n\t<li>\u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b</li>\n\t<li>\u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002</li>\n</ol>\n\n<p><strong>\u8bf4\u660e\uff1a</strong> \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n\u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002\n\n\u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n\u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def deleteNode(self, root, key):\n        \"\"\"\n        :type root: TreeNode\n        :type key: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* deleteNode(struct TreeNode* root, int key){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode DeleteNode(TreeNode root, int key) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} key\n * @return {TreeNode}\n */\nvar deleteNode = function(root, key) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} key\n# @return {TreeNode}\ndef delete_node(root, key)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func deleteNode(_ root: TreeNode?, _ key: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def deleteNode(root: TreeNode, key: Int): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun deleteNode(root: TreeNode?, key: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn delete_node(root: Option<Rc<RefCell<TreeNode>>>, key: i32) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $key\n     * @return TreeNode\n     */\n    function deleteNode($root, $key) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction deleteNode(root: TreeNode | null, key: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0451", "frontend_question_id": "0451", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sort-characters-by-frequency", "url_en": "https://leetcode.com/problems/sort-characters-by-frequency", "relative_path_cn": "/leetcode/0400-0499/0451.Sort%20Characters%20By%20Frequency/README.md", "relative_path_en": "/leetcode/0400-0499/0451.Sort%20Characters%20By%20Frequency/README_EN.md", "title_cn": "\u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f", "title_en": "Sort Characters By Frequency", "question_title_slug": "sort-characters-by-frequency", "content_en": "<p>Given a string, sort it in decreasing order based on the frequency of characters.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"tree\"\r\n\r\n<b>Output:</b>\r\n\"eert\"\r\n\r\n<b>Explanation:</b>\r\n'e' appears twice while 'r' and 't' both appear once.\r\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"cccaaa\"\r\n\r\n<b>Output:</b>\r\n\"cccaaa\"\r\n\r\n<b>Explanation:</b>\r\nBoth 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\r\nNote that \"cacaca\" is incorrect, as the same characters must be together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"Aabb\"\r\n\r\n<b>Output:</b>\r\n\"bbAa\"\r\n\r\n<b>Explanation:</b>\r\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\r\nNote that 'A' and 'a' are treated as two different characters.\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5b57\u7b26\u4e32\u91cc\u7684\u5b57\u7b26\u6309\u7167\u51fa\u73b0\u7684\u9891\u7387\u964d\u5e8f\u6392\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;tree&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;eert&quot;\n\n<strong>\u89e3\u91ca:\n</strong>&#39;e&#39;\u51fa\u73b0\u4e24\u6b21\uff0c&#39;r&#39;\u548c&#39;t&#39;\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\u56e0\u6b64&#39;e&#39;\u5fc5\u987b\u51fa\u73b0\u5728&#39;r&#39;\u548c&#39;t&#39;\u4e4b\u524d\u3002\u6b64\u5916\uff0c&quot;eetr&quot;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;cccaaa&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;cccaaa&quot;\n\n<strong>\u89e3\u91ca:\n</strong>&#39;c&#39;\u548c&#39;a&#39;\u90fd\u51fa\u73b0\u4e09\u6b21\u3002\u6b64\u5916\uff0c&quot;aaaccc&quot;\u4e5f\u662f\u6709\u6548\u7684\u7b54\u6848\u3002\n\u6ce8\u610f&quot;cacaca&quot;\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u76f8\u540c\u7684\u5b57\u6bcd\u5fc5\u987b\u653e\u5728\u4e00\u8d77\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;Aabb&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;bbAa&quot;\n\n<strong>\u89e3\u91ca:\n</strong>\u6b64\u5916\uff0c&quot;bbaA&quot;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u7b54\u6848\uff0c\u4f46&quot;Aabb&quot;\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\u6ce8\u610f&#39;A&#39;\u548c&#39;a&#39;\u88ab\u8ba4\u4e3a\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u3002\n</pre>\n", "tags_en": ["Heap", "Hash Table"], "tags_cn": ["\u5806", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string frequencySort(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String frequencySort(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def frequencySort(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * frequencySort(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FrequencySort(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar frequencySort = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef frequency_sort(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func frequencySort(_ s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func frequencySort(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def frequencySort(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun frequencySort(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn frequency_sort(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function frequencySort($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function frequencySort(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0452", "frontend_question_id": "0452", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons", "url_en": "https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons", "relative_path_cn": "/leetcode/0400-0499/0452.Minimum%20Number%20of%20Arrows%20to%20Burst%20Balloons/README.md", "relative_path_en": "/leetcode/0400-0499/0452.Minimum%20Number%20of%20Arrows%20to%20Burst%20Balloons/README_EN.md", "title_cn": "\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403", "title_en": "Minimum Number of Arrows to Burst Balloons", "question_title_slug": "minimum-number-of-arrows-to-burst-balloons", "content_en": "<p>There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it&#39;s horizontal, y-coordinates don&#39;t matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.</p>\n\n<p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> bursts by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &le; x &le; x<sub>end</sub></code>. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.</p>\n\n<p>Given an array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code>, return&nbsp;<em>the minimum number of arrows that must be shot to burst all balloons</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[2,3],[2,3]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= points.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt;&nbsp;x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5\u7eb5\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u6a2a\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002</p>\n\n<p>\u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740 x \u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807 x \u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a <code>x</code><sub><code>start</code>\uff0c</sub><code>x</code><sub><code>end</code>\uff0c</sub> \u4e14\u6ee1\u8db3 \u00a0<code>x<sub>start</sub>\u00a0\u2264 x \u2264 x</code><sub><code>end</code>\uff0c</sub>\u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206<sub>\u3002</sub>\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <code>points</code> \uff0c\u5176\u4e2d <code>points [i] = [x<sub>start</sub>,x<sub>end</sub>]</code> \uff0c\u8fd4\u56de\u5f15\u7206\u6240\u6709\u6c14\u7403\u6240\u5fc5\u987b\u5c04\u51fa\u7684\u6700\u5c0f\u5f13\u7bad\u6570\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0cx = 6 \u53ef\u4ee5\u5c04\u7206 [2,8],[1,6] \u4e24\u4e2a\u6c14\u7403\uff0c\u4ee5\u53ca x = 11 \u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>points = [[2,3],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= points.length <= 10<sup>4</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-2<sup>31</sup> <= x<sub>start</sub> <\u00a0x<sub>end</sub> <= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Greedy", "Sort"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMinArrowShots(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMinArrowShots(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMinArrowShots(int** points, int pointsSize, int* pointsColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMinArrowShots(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar findMinArrowShots = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer}\ndef find_min_arrow_shots(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMinArrowShots(_ points: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMinArrowShots(points [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMinArrowShots(points: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMinArrowShots(points: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_min_arrow_shots(points: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function findMinArrowShots($points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMinArrowShots(points: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0453", "frontend_question_id": "0453", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements", "url_en": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements", "relative_path_cn": "/leetcode/0400-0499/0453.Minimum%20Moves%20to%20Equal%20Array%20Elements/README.md", "relative_path_en": "/leetcode/0400-0499/0453.Minimum%20Moves%20to%20Equal%20Array%20Elements/README_EN.md", "title_cn": "\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49", "title_en": "Minimum Moves to Equal Array Elements", "question_title_slug": "minimum-moves-to-equal-array-elements", "content_en": "<p>Given a <b>non-empty</b> integer array of size <i>n</i>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <i>n</i> - 1 elements by 1.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[1,2,3]\r\n\r\n<b>Output:</b>\r\n3\r\n\r\n<b>Explanation:</b>\r\nOnly three moves are needed (remember each move increments two elements):\r\n\r\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <em>n</em> \u7684<strong>\u975e\u7a7a</strong>\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u8ba9\u6570\u7ec4\u6240\u6709\u5143\u7d20\u76f8\u7b49\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002\u6bcf\u6b21\u79fb\u52a8\u5c06\u4f1a\u4f7f <em>n</em> - 1 \u4e2a\u5143\u7d20\u589e\u52a0 1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[1,2,3]\n\n<strong>\u8f93\u51fa:</strong>\n3\n\n<strong>\u89e3\u91ca:</strong>\n\u53ea\u9700\u89813\u6b21\u79fb\u52a8\uff08\u6ce8\u610f\u6bcf\u6b21\u79fb\u52a8\u4f1a\u589e\u52a0\u4e24\u4e2a\u5143\u7d20\u7684\u503c\uff09\uff1a\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMoves(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minMoves(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minMoves(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minMoves(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinMoves(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minMoves(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minMoves(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minMoves(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minMoves(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_moves(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minMoves($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minMoves(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0454", "frontend_question_id": "0454", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/4sum-ii", "url_en": "https://leetcode.com/problems/4sum-ii", "relative_path_cn": "/leetcode/0400-0499/0454.4Sum%20II/README.md", "relative_path_en": "/leetcode/0400-0499/0454.4Sum%20II/README_EN.md", "title_cn": "\u56db\u6570\u76f8\u52a0 II", "title_en": "4Sum II", "question_title_slug": "4sum-ii", "content_en": "<p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p>\r\n\r\n<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 &le; N &le; 500. All integers are in the range of -2<sup>28</sup> to 2<sup>28</sup> - 1 and the result is guaranteed to be at most 2<sup>31</sup> - 1.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\nA = [ 1, 2]\r\nB = [-2,-1]\r\nC = [-1, 2]\r\nD = [ 0, 2]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nThe two tuples are:\r\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\r\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868&nbsp;A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 <code>(i, j, k, l)</code>&nbsp;\uff0c\u4f7f\u5f97&nbsp;<code>A[i] + B[j] + C[k] + D[l] = 0</code>\u3002</p>\n\n<p>\u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6&nbsp;N\uff0c\u4e14 0 &le; N &le; 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2<sup>28</sup> \u5230 2<sup>28</sup> - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7&nbsp;2<sup>31</sup> - 1 \u3002</p>\n\n<p><strong>\u4f8b\u5982:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u89e3\u91ca:</strong>\n\u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n", "tags_en": ["Hash Table", "Binary Search"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fourSumCount(self, A, B, C, D):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :type D: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FourSumCount(int[] A, int[] B, int[] C, int[] D) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @param {number[]} C\n * @param {number[]} D\n * @return {number}\n */\nvar fourSumCount = function(A, B, C, D) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @param {Integer[]} c\n# @param {Integer[]} d\n# @return {Integer}\ndef four_sum_count(a, b, c, d)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fourSumCount(_ A: [Int], _ B: [Int], _ C: [Int], _ D: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fourSumCount(A []int, B []int, C []int, D []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fourSumCount(A: Array[Int], B: Array[Int], C: Array[Int], D: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fourSumCount(A: IntArray, B: IntArray, C: IntArray, D: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn four_sum_count(a: Vec<i32>, b: Vec<i32>, c: Vec<i32>, d: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @param Integer[] $C\n     * @param Integer[] $D\n     * @return Integer\n     */\n    function fourSumCount($A, $B, $C, $D) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fourSumCount(A: number[], B: number[], C: number[], D: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0455", "frontend_question_id": "0455", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/assign-cookies", "url_en": "https://leetcode.com/problems/assign-cookies", "relative_path_cn": "/leetcode/0400-0499/0455.Assign%20Cookies/README.md", "relative_path_en": "/leetcode/0400-0499/0455.Assign%20Cookies/README_EN.md", "title_cn": "\u5206\u53d1\u997c\u5e72", "title_en": "Assign Cookies", "question_title_slug": "assign-cookies", "content_en": "<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p>\n\n<p>Each child <code>i</code> has&nbsp;a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j]&nbsp;&gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2,3], s = [1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2], s = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= g.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= g[i], s[j] &lt;=&nbsp;2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002</p>\n\n<p>\u5bf9\u6bcf\u4e2a\u5b69\u5b50 <code>i</code>\uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c\u00a0<code>g[i]</code><sub>\uff0c</sub>\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 <code>j</code>\uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 <code>s[j]</code><sub>\u00a0</sub>\u3002\u5982\u679c <code>s[j]\u00a0>= g[i]</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 <code>j</code> \u5206\u914d\u7ed9\u5b69\u5b50 <code>i</code> \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b\u00a01:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> g = [1,2,3], s = [1,1]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \n\u4f60\u6709\u4e09\u4e2a\u5b69\u5b50\u548c\u4e24\u5757\u5c0f\u997c\u5e72\uff0c3\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f\uff1a1,2,3\u3002\n\u867d\u7136\u4f60\u6709\u4e24\u5757\u5c0f\u997c\u5e72\uff0c\u7531\u4e8e\u4ed6\u4eec\u7684\u5c3a\u5bf8\u90fd\u662f1\uff0c\u4f60\u53ea\u80fd\u8ba9\u80c3\u53e3\u503c\u662f1\u7684\u5b69\u5b50\u6ee1\u8db3\u3002\n\u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a02:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> g = [1,2], s = [1,2,3]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u4f60\u6709\u4e24\u4e2a\u5b69\u5b50\u548c\u4e09\u5757\u5c0f\u997c\u5e72\uff0c2\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f1,2\u3002\n\u4f60\u62e5\u6709\u7684\u997c\u5e72\u6570\u91cf\u548c\u5c3a\u5bf8\u90fd\u8db3\u4ee5\u8ba9\u6240\u6709\u5b69\u5b50\u6ee1\u8db3\u3002\n\u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa2.\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= g.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 <= s.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 <= g[i], s[j] <=\u00a02<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findContentChildren(int* g, int gSize, int* s, int sSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindContentChildren(int[] g, int[] s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} g\n * @param {number[]} s\n * @return {number}\n */\nvar findContentChildren = function(g, s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} g\n# @param {Integer[]} s\n# @return {Integer}\ndef find_content_children(g, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findContentChildren(_ g: [Int], _ s: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findContentChildren(g []int, s []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findContentChildren(g: Array[Int], s: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findContentChildren(g: IntArray, s: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_content_children(g: Vec<i32>, s: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $g\n     * @param Integer[] $s\n     * @return Integer\n     */\n    function findContentChildren($g, $s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findContentChildren(g: number[], s: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0456", "frontend_question_id": "0456", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/132-pattern", "url_en": "https://leetcode.com/problems/132-pattern", "relative_path_cn": "/leetcode/0400-0499/0456.132%20Pattern/README.md", "relative_path_en": "/leetcode/0400-0499/0456.132%20Pattern/README_EN.md", "title_cn": "132\u6a21\u5f0f", "title_en": "132 Pattern", "question_title_slug": "132-pattern", "content_en": "<p>Given an array&nbsp;of <code>n</code> integers <code>nums</code>, a <strong>132 pattern</strong> is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p>\n\n<p>Return <em><code>true</code> if there is a <strong>132 pattern</strong> in <code>nums</code>, otherwise, return <code>false</code>.</em></p>\n\n<p><strong>Follow up: </strong>The <code>O(n^2)</code> is trivial, could you come up with the <code>O(n logn)</code> or the <code>O(n)</code> solution?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no 132 pattern in the sequence.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a 132 pattern in the sequence: [1, 4, 2].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,2,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1aa<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>\uff0c\u4e00\u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217&nbsp;a<sub><strong>i</strong></sub>, a<sub><strong>j</strong></sub>, a<sub><strong>k</strong></sub>&nbsp;\u88ab\u5b9a\u4e49\u4e3a\uff1a\u5f53 <strong>i</strong> &lt; <strong>j</strong> &lt; <strong>k</strong> \u65f6\uff0ca<sub><strong>i</strong></sub> &lt; a<sub><strong>k</strong></sub> &lt; a<sub><strong>j</strong></sub>\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5f53\u7ed9\u5b9a\u6709&nbsp;n \u4e2a\u6570\u5b57\u7684\u5e8f\u5217\u65f6\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u662f\u5426\u542b\u6709132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>n \u7684\u503c\u5c0f\u4e8e15000\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2, 3, 4]\n\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 1, 4, 2]\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u6709 1 \u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2].\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [-1, 3, 2, 0]\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u6709 3 \u4e2a132\u6a21\u5f0f\u7684\u7684\u5b50\u5e8f\u5217: [-1, 3, 2], [-1, 3, 0] \u548c [-1, 2, 0].\n</pre>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool find132pattern(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean find132pattern(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def find132pattern(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool find132pattern(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool Find132pattern(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef find132pattern(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func find132pattern(_ nums: [Int]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func find132pattern(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def find132pattern(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun find132pattern(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find132pattern(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function find132pattern($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function find132pattern(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0457", "frontend_question_id": "0457", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/circular-array-loop", "url_en": "https://leetcode.com/problems/circular-array-loop", "relative_path_cn": "/leetcode/0400-0499/0457.Circular%20Array%20Loop/README.md", "relative_path_en": "/leetcode/0400-0499/0457.Circular%20Array%20Loop/README_EN.md", "title_cn": "\u73af\u5f62\u6570\u7ec4\u5faa\u73af", "title_en": "Circular Array Loop", "question_title_slug": "circular-array-loop", "content_en": "<p>You are given a <b>circular</b> array <code>nums</code> of positive and negative integers. If a number <i>k</i> at an index is positive, then move forward <i>k</i> steps. Conversely, if it&#39;s negative (-<i>k</i>), move backward <i>k</i>&nbsp;steps. Since the array is circular, you may assume that the last element&#39;s next element is the first element, and the first element&#39;s previous element is the last element.</p>\r\n\r\n<p>Determine if there is a loop (or a cycle) in <code>nums</code>. A cycle must start and end at the same index and the cycle&#39;s length &gt; 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [2,-1,1,2,2]\r\n<b>Output:</b> true\r\n<b>Explanation:</b> There is a cycle, from index 0 -&gt; 2 -&gt; 3 -&gt; 0. The cycle&#39;s length is 3.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [-1,2]\r\n<b>Output:</b> false\r\n<b>Explanation:</b> The movement from index 1 -&gt; 1 -&gt; 1 ... is not a cycle, because the cycle&#39;s length is 1. By definition the cycle&#39;s length must be greater than 1.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [-2,1,-1,-2,-2]\r\n<b>Output:</b> false\r\n<b>Explanation:</b> The movement from index 1 -&gt; 2 -&gt; 1 -&gt; ... is not a cycle, because movement from index 1 -&gt; 2 is a forward movement, but movement from index 2 -&gt; 1 is a backward movement. All movements in a cycle must follow a single direction.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>\r\n\t<li>nums[i] &ne;&nbsp;0</li>\r\n\t<li>1 &le;&nbsp;nums.length &le; 5000</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>Could you solve it in <b>O(n)</b> time complexity and&nbsp;<strong>O(1)</strong> extra space complexity?</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6b63\u6574\u6570\u548c\u8d1f\u6574\u6570\u7684<strong>\u73af\u5f62</strong>\u6570\u7ec4&nbsp;<code>nums</code>\u3002 \u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u4e2d\u7684\u6570 <em>k</em>&nbsp;\u4e3a\u6b63\u6570\uff0c\u5219\u5411\u524d\u79fb\u52a8 <em>k</em>&nbsp;\u4e2a\u7d22\u5f15\u3002\u76f8\u53cd\uff0c\u5982\u679c\u662f\u8d1f\u6570 (<em>-k</em>)\uff0c\u5219\u5411\u540e\u79fb\u52a8 <em>k</em>&nbsp;\u4e2a\u7d22\u5f15\u3002\u56e0\u4e3a\u6570\u7ec4\u662f\u73af\u5f62\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5047\u8bbe\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p>\n\n<p>\u786e\u5b9a <code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u5faa\u73af\uff08\u6216\u5468\u671f\uff09\u3002\u5faa\u73af\u5fc5\u987b\u5728\u76f8\u540c\u7684\u7d22\u5f15\u5904\u5f00\u59cb\u548c\u7ed3\u675f\u5e76\u4e14\u5faa\u73af\u957f\u5ea6 &gt; 1\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u6240\u6709\u8fd0\u52a8\u90fd\u5fc5\u987b\u6cbf\u7740\u540c\u4e00\u65b9\u5411\u8fdb\u884c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u5faa\u73af\u4e2d\u4e0d\u80fd\u540c\u65f6\u5305\u62ec\u5411\u524d\u7684\u8fd0\u52a8\u548c\u5411\u540e\u7684\u8fd0\u52a8\u3002<br>\n&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,-1,1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u5b58\u5728\u5faa\u73af\uff0c\u6309\u7d22\u5f15 0 -&gt; 2 -&gt; 3 -&gt; 0 \u3002\u5faa\u73af\u957f\u5ea6\u4e3a 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-1,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6309\u7d22\u5f15 1 -&gt; 1 -&gt; 1 ... \u7684\u8fd0\u52a8\u65e0\u6cd5\u6784\u6210\u5faa\u73af\uff0c\u56e0\u4e3a\u5faa\u73af\u7684\u957f\u5ea6\u4e3a 1 \u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5faa\u73af\u7684\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e 1 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-2,1,-1,-2,-2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6309\u7d22\u5f15 1 -&gt; 2 -&gt; 1 -&gt; ... \u7684\u8fd0\u52a8\u65e0\u6cd5\u6784\u6210\u5faa\u73af\uff0c\u56e0\u4e3a\u6309\u7d22\u5f15 1 -&gt; 2 \u7684\u8fd0\u52a8\u662f\u5411\u524d\u7684\u8fd0\u52a8\uff0c\u800c\u6309\u7d22\u5f15 2 -&gt; 1 \u7684\u8fd0\u52a8\u662f\u5411\u540e\u7684\u8fd0\u52a8\u3002\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u6240\u6709\u8fd0\u52a8\u90fd\u5fc5\u987b\u6cbf\u7740\u540c\u4e00\u65b9\u5411\u8fdb\u884c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>\n\t<li>nums[i] &ne;&nbsp;0</li>\n\t<li>0 &le;&nbsp;nums.length &le; 5000</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5199\u51fa\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <strong>O(n)</strong>&nbsp;\u548c\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a <strong>O(1)</strong> \u7684\u7b97\u6cd5\u5417\uff1f</p>\n", "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool circularArrayLoop(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean circularArrayLoop(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def circularArrayLoop(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def circularArrayLoop(self, nums: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool circularArrayLoop(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CircularArrayLoop(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar circularArrayLoop = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef circular_array_loop(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func circularArrayLoop(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func circularArrayLoop(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def circularArrayLoop(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun circularArrayLoop(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn circular_array_loop(nums: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function circularArrayLoop($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function circularArrayLoop(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0458", "frontend_question_id": "0458", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/poor-pigs", "url_en": "https://leetcode.com/problems/poor-pigs", "relative_path_cn": "/leetcode/0400-0499/0458.Poor%20Pigs/README.md", "relative_path_en": "/leetcode/0400-0499/0458.Poor%20Pigs/README_EN.md", "title_cn": "\u53ef\u601c\u7684\u5c0f\u732a", "title_en": "Poor Pigs", "question_title_slug": "poor-pigs", "content_en": "<p>There are <code>buckets</code> buckets of liquid, where <strong>exactly one</strong> of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have <code>minutesToTest</code> minutes to determine which bucket is poisonous.</p>\n\n<p>You can feed the pigs according to these steps:</p>\n\n<ol>\n\t<li>Choose some live pigs to feed.</li>\n\t<li>For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.</li>\n\t<li>Wait for <code>minutesToDie</code> minutes. You may <strong>not</strong> feed any other pigs during this time.</li>\n\t<li>After <code>minutesToDie</code> minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.</li>\n\t<li>Repeat this process until you run out of time.</li>\n</ol>\n\n<p>Given <code>buckets</code>, <code>minutesToDie</code>, and <code>minutesToTest</code>, return <em>the <strong>minimum</strong> number of pigs needed to figure out which bucket is poisonous within the allotted time</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> buckets = 1000, minutesToDie = 15, minutesToTest = 60\n<strong>Output:</strong> 5\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest = 15\n<strong>Output:</strong> 2\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest = 30\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buckets &lt;= 1000</code></li>\n\t<li><code>1 &lt;=&nbsp;minutesToDie &lt;=&nbsp;minutesToTest &lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u6709<code> buckets</code> \u6876\u6db2\u4f53\uff0c\u5176\u4e2d <strong>\u6b63\u597d</strong> \u6709\u4e00\u6876\u542b\u6709\u6bd2\u836f\uff0c\u5176\u4f59\u88c5\u7684\u90fd\u662f\u6c34\u3002\u5b83\u4eec\u4ece\u5916\u89c2\u770b\u8d77\u6765\u90fd\u4e00\u6837\u3002\u4e3a\u4e86\u5f04\u6e05\u695a\u54ea\u53ea\u6c34\u6876\u542b\u6709\u6bd2\u836f\uff0c\u4f60\u53ef\u4ee5\u5582\u4e00\u4e9b\u732a\u559d\uff0c\u901a\u8fc7\u89c2\u5bdf\u732a\u662f\u5426\u4f1a\u6b7b\u8fdb\u884c\u5224\u65ad\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u53ea\u6709\u00a0<code>minutesToTest</code> \u5206\u949f\u65f6\u95f4\u6765\u786e\u5b9a\u54ea\u6876\u6db2\u4f53\u662f\u6709\u6bd2\u7684\u3002</p>\n\n<p>\u5582\u732a\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u9009\u62e9\u82e5\u5e72\u6d3b\u732a\u8fdb\u884c\u5582\u517b</li>\n\t<li>\u53ef\u4ee5\u5141\u8bb8\u5c0f\u732a\u540c\u65f6\u996e\u7528\u4efb\u610f\u6570\u91cf\u7684\u6876\u4e2d\u7684\u6c34\uff0c\u5e76\u4e14\u8be5\u8fc7\u7a0b\u4e0d\u9700\u8981\u65f6\u95f4\u3002</li>\n\t<li>\u5c0f\u732a\u559d\u5b8c\u6c34\u540e\uff0c\u5fc5\u987b\u6709 <code>minutesToDie</code> \u5206\u949f\u7684\u51b7\u5374\u65f6\u95f4\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ea\u80fd\u89c2\u5bdf\uff0c\u800c\u4e0d\u5141\u8bb8\u7ee7\u7eed\u5582\u732a\u3002</li>\n\t<li>\u8fc7\u4e86 <code>minutesToDie</code> \u5206\u949f\u540e\uff0c\u6240\u6709\u559d\u5230\u6bd2\u836f\u7684\u732a\u90fd\u4f1a\u6b7b\u53bb\uff0c\u5176\u4ed6\u6240\u6709\u732a\u90fd\u4f1a\u6d3b\u4e0b\u6765\u3002</li>\n\t<li>\u91cd\u590d\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u76f4\u5230\u65f6\u95f4\u7528\u5b8c\u3002</li>\n</ol>\n\n<p>\u7ed9\u4f60\u6876\u7684\u6570\u76ee <code>buckets</code> \uff0c<code>minutesToDie</code> \u548c <code>minutesToTest</code> \uff0c\u8fd4\u56de\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5224\u65ad\u54ea\u4e2a\u6876\u6709\u6bd2\u6240\u9700\u7684 <strong>\u6700\u5c0f</strong> \u732a\u6570\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>buckets = 1000, minutesToDie = 15, minutesToTest = 60\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>buckets = 4, minutesToDie = 15, minutesToTest = 15\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>buckets = 4, minutesToDie = 15, minutesToTest = 30\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= buckets <= 1000</code></li>\n\t<li><code>1 <=\u00a0minutesToDie <=\u00a0minutesToTest <= 100</code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint poorPigs(int buckets, int minutesToDie, int minutesToTest){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PoorPigs(int buckets, int minutesToDie, int minutesToTest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} buckets\n * @param {number} minutesToDie\n * @param {number} minutesToTest\n * @return {number}\n */\nvar poorPigs = function(buckets, minutesToDie, minutesToTest) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} buckets\n# @param {Integer} minutes_to_die\n# @param {Integer} minutes_to_test\n# @return {Integer}\ndef poor_pigs(buckets, minutes_to_die, minutes_to_test)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func poorPigs(_ buckets: Int, _ minutesToDie: Int, _ minutesToTest: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func poorPigs(buckets int, minutesToDie int, minutesToTest int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn poor_pigs(buckets: i32, minutes_to_die: i32, minutes_to_test: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $buckets\n     * @param Integer $minutesToDie\n     * @param Integer $minutesToTest\n     * @return Integer\n     */\n    function poorPigs($buckets, $minutesToDie, $minutesToTest) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function poorPigs(buckets: number, minutesToDie: number, minutesToTest: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0459", "frontend_question_id": "0459", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/repeated-substring-pattern", "url_en": "https://leetcode.com/problems/repeated-substring-pattern", "relative_path_cn": "/leetcode/0400-0499/0459.Repeated%20Substring%20Pattern/README.md", "relative_path_en": "/leetcode/0400-0499/0459.Repeated%20Substring%20Pattern/README_EN.md", "title_cn": "\u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32", "title_en": "Repeated Substring Pattern", "question_title_slug": "repeated-substring-pattern", "content_en": "<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abab&quot;\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s the substring &quot;ab&quot; twice.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;aba&quot;\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abcabcabcabc&quot;\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abab&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 &quot;ab&quot; \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abcabcabcabc&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 &quot;abc&quot; \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 &quot;abcabc&quot; \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002)\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool repeatedSubstringPattern(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool RepeatedSubstringPattern(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar repeatedSubstringPattern = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef repeated_substring_pattern(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func repeatedSubstringPattern(_ s: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func repeatedSubstringPattern(s string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun repeatedSubstringPattern(s: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn repeated_substring_pattern(s: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function repeatedSubstringPattern($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function repeatedSubstringPattern(s: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0460", "frontend_question_id": "0460", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/lfu-cache", "url_en": "https://leetcode.com/problems/lfu-cache", "relative_path_cn": "/leetcode/0400-0499/0460.LFU%20Cache/README.md", "relative_path_en": "/leetcode/0400-0499/0460.LFU%20Cache/README_EN.md", "title_cn": "LFU \u7f13\u5b58", "title_en": "LFU Cache", "question_title_slug": "lfu-cache", "content_en": "<p>Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache.</p>\n\n<p>Implement the&nbsp;<code>LFUCache</code> class:</p>\n\n<ul>\n\t<li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li>\n\t<li><code>int get(int key)</code> Gets the value&nbsp;of the <code>key</code> if the <code>key</code> exists in the cache.&nbsp;Otherwise, returns <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Sets or inserts the value if the <code>key</code> is not already present. When the cache reaches its <code>capacity</code>, it should invalidate the least frequently used item before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), <strong>the least recently</strong> used <code>key</code> would be evicted.</li>\n</ul>\n\n<p><strong>Notice&nbsp;that</strong> the number of times an item is used is the number of calls to the&nbsp;<code>get</code>&nbsp;and&nbsp;<code>put</code>&nbsp;functions for that item since it was inserted. This number is set to zero when the item is removed.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);\nlfu.put(2, 2);\nlfu.get(1);      // return 1\nlfu.put(3, 3);   // evicts key 2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\nlfu.put(4, 4);   // evicts key 1.\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\nlfu.get(4);      // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;=&nbsp;capacity, key, value &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do both operations in <code>O(1)</code> time complexity?<span style=\"display: none;\">&nbsp;</span>", "content_cn": "<p>\u8bf7\u4f60\u4e3a <a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\">\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09</a>\u7f13\u5b58\u7b97\u6cd5\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u3002</p>\n\n<p>\u5b9e\u73b0 <code>LFUCache</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>LFUCache(int capacity)</code> - \u7528\u6570\u636e\u7ed3\u6784\u7684\u5bb9\u91cf\u00a0<code>capacity</code> \u521d\u59cb\u5316\u5bf9\u8c61</li>\n\t<li><code>int get(int key)</code>\u00a0- \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de -1\u3002</li>\n\t<li><code>void put(int key, int value)</code>\u00a0- \u5982\u679c\u952e\u5df2\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u503c\uff1b\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u63d2\u5165\u952e\u503c\u5bf9\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5219\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c\u5e94\u8be5\u53bb\u9664 <strong>\u6700\u4e45\u672a\u4f7f\u7528</strong> \u7684\u952e\u3002</li>\n</ul>\n\n<p><strong>\u6ce8\u610f</strong>\u300c\u9879\u7684\u4f7f\u7528\u6b21\u6570\u300d\u5c31\u662f\u81ea\u63d2\u5165\u8be5\u9879\u4ee5\u6765\u5bf9\u5176\u8c03\u7528 <code>get</code> \u548c <code>put</code> \u51fd\u6570\u7684\u6b21\u6570\u4e4b\u548c\u3002\u4f7f\u7528\u6b21\u6570\u4f1a\u5728\u5bf9\u5e94\u9879\u88ab\u79fb\u9664\u540e\u7f6e\u4e3a 0 \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u00a0<strong>O(1)\u00a0</strong>\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nLFUCache lFUCache = new LFUCache(2);\nlFUCache.put(1, 1);\nlFUCache.put(2, 2);\nlFUCache.get(1);      // \u8fd4\u56de 1\nlFUCache.put(3, 3);   // \u53bb\u9664\u952e 2\nlFUCache.get(2);      // \u8fd4\u56de -1\uff08\u672a\u627e\u5230\uff09\nlFUCache.get(3);      // \u8fd4\u56de 3\nlFUCache.put(4, 4);   // \u53bb\u9664\u952e 1\nlFUCache.get(1);      // \u8fd4\u56de -1\uff08\u672a\u627e\u5230\uff09\nlFUCache.get(3);      // \u8fd4\u56de 3\nlFUCache.get(4);      // \u8fd4\u56de 4\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <=\u00a0capacity, key, value <= 10<sup>4</sup></code></li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>10<sup>5</sup></code> \u6b21 <code>get</code> \u548c <code>put</code> \u65b9\u6cd5</li>\n</ul>\n", "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class LFUCache {\npublic:\n    LFUCache(int capacity) {\n\n    }\n    \n    int get(int key) {\n\n    }\n    \n    void put(int key, int value) {\n\n    }\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache* obj = new LFUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class LFUCache {\n\n    public LFUCache(int capacity) {\n\n    }\n    \n    public int get(int key) {\n\n    }\n    \n    public void put(int key, int value) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class LFUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n\n\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class LFUCache:\n\n    def __init__(self, capacity: int):\n\n\n    def get(self, key: int) -> int:\n\n\n    def put(self, key: int, value: int) -> None:\n\n\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} LFUCache;\n\n\nLFUCache* lFUCacheCreate(int capacity) {\n\n}\n\nint lFUCacheGet(LFUCache* obj, int key) {\n\n}\n\nvoid lFUCachePut(LFUCache* obj, int key, int value) {\n\n}\n\nvoid lFUCacheFree(LFUCache* obj) {\n\n}\n\n/**\n * Your LFUCache struct will be instantiated and called as such:\n * LFUCache* obj = lFUCacheCreate(capacity);\n * int param_1 = lFUCacheGet(obj, key);\n \n * lFUCachePut(obj, key, value);\n \n * lFUCacheFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class LFUCache {\n\n    public LFUCache(int capacity) {\n\n    }\n    \n    public int Get(int key) {\n\n    }\n    \n    public void Put(int key, int value) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.Get(key);\n * obj.Put(key,value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class LFUCache\n\n=begin\n    :type capacity: Integer\n=end\n    def initialize(capacity)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n\n    end\n\n\nend\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache.new(capacity)\n# param_1 = obj.get(key)\n# obj.put(key, value)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass LFUCache {\n\n    init(_ capacity: Int) {\n\n    }\n    \n    func get(_ key: Int) -> Int {\n\n    }\n    \n    func put(_ key: Int, _ value: Int) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * let obj = LFUCache(capacity)\n * let ret_1: Int = obj.get(key)\n * obj.put(key, value)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type LFUCache struct {\n\n}\n\n\nfunc Constructor(capacity int) LFUCache {\n\n}\n\n\nfunc (this *LFUCache) Get(key int) int {\n\n}\n\n\nfunc (this *LFUCache) Put(key int, value int)  {\n\n}\n\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * obj := Constructor(capacity);\n * param_1 := obj.Get(key);\n * obj.Put(key,value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class LFUCache(_capacity: Int) {\n\n    def get(key: Int): Int = {\n\n    }\n\n    def put(key: Int, value: Int) {\n\n    }\n\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class LFUCache(capacity: Int) {\n\n    fun get(key: Int): Int {\n\n    }\n\n    fun put(key: Int, value: Int) {\n\n    }\n\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct LFUCache {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LFUCache {\n\n    fn new(capacity: i32) -> Self {\n\n    }\n    \n    fn get(&self, key: i32) -> i32 {\n\n    }\n    \n    fn put(&self, key: i32, value: i32) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * let obj = LFUCache::new(capacity);\n * let ret_1: i32 = obj.get(key);\n * obj.put(key, value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class LFUCache {\n    /**\n     * @param Integer $capacity\n     */\n    function __construct($capacity) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * $obj = LFUCache($capacity);\n * $ret_1 = $obj->get($key);\n * $obj->put($key, $value);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class LFUCache {\n    constructor(capacity: number) {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0461", "frontend_question_id": "0461", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/hamming-distance", "url_en": "https://leetcode.com/problems/hamming-distance", "relative_path_cn": "/leetcode/0400-0499/0461.Hamming%20Distance/README.md", "relative_path_en": "/leetcode/0400-0499/0461.Hamming%20Distance/README_EN.md", "title_cn": "\u6c49\u660e\u8ddd\u79bb", "title_en": "Hamming Distance", "question_title_slug": "hamming-distance", "content_en": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\r\n\r\n<p><b>Note:</b><br />\r\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> x = 1, y = 4\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b>\r\n1   (0 0 0 1)\r\n4   (0 1 0 0)\r\n       &uarr;   &uarr;\r\n\r\nThe above arrows point to positions where the corresponding bits are different.\r\n</pre>\r\n</p>", "content_cn": "<p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">\u6c49\u660e\u8ddd\u79bb</a>\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong><br />\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> x = 1, y = 4\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       &uarr;   &uarr;\n\n\u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\n</pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int hammingDistance(int x, int y) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint hammingDistance(int x, int y){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HammingDistance(int x, int y) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef hamming_distance(x, y)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hammingDistance(_ x: Int, _ y: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hammingDistance(x int, y int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hammingDistance(x: Int, y: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hammingDistance(x: Int, y: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn hamming_distance(x: i32, y: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function hammingDistance($x, $y) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hammingDistance(x: number, y: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0462", "frontend_question_id": "0462", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements-ii", "url_en": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii", "relative_path_cn": "/leetcode/0400-0499/0462.Minimum%20Moves%20to%20Equal%20Array%20Elements%20II/README.md", "relative_path_en": "/leetcode/0400-0499/0462.Minimum%20Moves%20to%20Equal%20Array%20Elements%20II/README_EN.md", "title_cn": "\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49 II", "title_en": "Minimum Moves to Equal Array Elements II", "question_title_slug": "minimum-moves-to-equal-array-elements-ii", "content_en": "<p><p>Given a <b>non-empty</b> integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>\r\n\r\n<p>You may assume the array's length is at most 10,000.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[1,2,3]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nOnly two moves are needed (remember each move increments or decrements one element):\r\n\r\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\r\n</pre>\r\n</p></p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4f7f\u6240\u6709\u6570\u7ec4\u5143\u7d20\u76f8\u7b49\u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6570\uff0c\u5176\u4e2d\u6bcf\u6b21\u79fb\u52a8\u53ef\u5c06\u9009\u5b9a\u7684\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u6700\u591a\u4e3a10000\u3002</p>\n\n<p><strong>\u4f8b\u5982:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[1,2,3]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u8bf4\u660e\uff1a\n</strong>\u53ea\u6709\u4e24\u4e2a\u52a8\u4f5c\u662f\u5fc5\u8981\u7684\uff08\u8bb0\u5f97\u6bcf\u4e00\u6b65\u4ec5\u53ef\u4f7f\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\uff09\uff1a \n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minMoves2(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minMoves2(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minMoves2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minMoves2(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinMoves2(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves2 = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves2(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minMoves2(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minMoves2(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minMoves2(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minMoves2(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_moves2(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minMoves2($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minMoves2(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0463", "frontend_question_id": "0463", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/island-perimeter", "url_en": "https://leetcode.com/problems/island-perimeter", "relative_path_cn": "/leetcode/0400-0499/0463.Island%20Perimeter/README.md", "relative_path_en": "/leetcode/0400-0499/0463.Island%20Perimeter/README_EN.md", "title_cn": "\u5c9b\u5c7f\u7684\u5468\u957f", "title_en": "Island Perimeter", "question_title_slug": "island-perimeter", "content_en": "<p>You are given <code>row x col</code> <code>grid</code> representing a map where <code>grid[i][j] = 1</code> represents&nbsp;land and <code>grid[i][j] = 0</code> represents water.</p>\n\n<p>Grid cells are connected <strong>horizontally/vertically</strong> (not diagonally). The <code>grid</code> is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>\n\n<p>The island doesn&#39;t have &quot;lakes&quot;, meaning the water inside isn&#39;t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don&#39;t exceed 100. Determine the perimeter of the island.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/island.png\" style=\"width: 221px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The perimeter is the 16 yellow stripes in the image above.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>row == grid.length</code></li>\n\t<li><code>col == grid[i].length</code></li>\n\t<li><code>1 &lt;= row, col &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a <code>row x col</code> \u7684\u4e8c\u7ef4\u7f51\u683c\u5730\u56fe <code>grid</code> \uff0c\u5176\u4e2d\uff1a<code>grid[i][j] = 1</code> \u8868\u793a\u9646\u5730\uff0c <code>grid[i][j] = 0</code> \u8868\u793a\u6c34\u57df\u3002</p>\n\n<p>\u7f51\u683c\u4e2d\u7684\u683c\u5b50 <strong>\u6c34\u5e73\u548c\u5782\u76f4</strong> \u65b9\u5411\u76f8\u8fde\uff08\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0d\u76f8\u8fde\uff09\u3002\u6574\u4e2a\u7f51\u683c\u88ab\u6c34\u5b8c\u5168\u5305\u56f4\uff0c\u4f46\u5176\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff08\u6216\u8005\u8bf4\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u793a\u9646\u5730\u7684\u683c\u5b50\u76f8\u8fde\u7ec4\u6210\u7684\u5c9b\u5c7f\uff09\u3002</p>\n\n<p>\u5c9b\u5c7f\u4e2d\u6ca1\u6709\u201c\u6e56\u201d\uff08\u201c\u6e56\u201d \u6307\u6c34\u57df\u5728\u5c9b\u5c7f\u5185\u90e8\u4e14\u4e0d\u548c\u5c9b\u5c7f\u5468\u56f4\u7684\u6c34\u76f8\u8fde\uff09\u3002\u683c\u5b50\u662f\u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u3002\u7f51\u683c\u4e3a\u957f\u65b9\u5f62\uff0c\u4e14\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u4e0d\u8d85\u8fc7 100 \u3002\u8ba1\u7b97\u8fd9\u4e2a\u5c9b\u5c7f\u7684\u5468\u957f\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>16\n<strong>\u89e3\u91ca\uff1a</strong>\u5b83\u7684\u5468\u957f\u662f\u4e0a\u9762\u56fe\u7247\u4e2d\u7684 16 \u4e2a\u9ec4\u8272\u7684\u8fb9</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [[1]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>row == grid.length</code></li>\n\t<li><code>col == grid[i].length</code></li>\n\t<li><code>1 <= row, col <= 100</code></li>\n\t<li><code>grid[i][j]</code> \u4e3a <code>0</code> \u6216 <code>1</code></li>\n</ul>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int islandPerimeter(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint islandPerimeter(int** grid, int gridSize, int* gridColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IslandPerimeter(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar islandPerimeter = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef island_perimeter(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func islandPerimeter(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func islandPerimeter(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def islandPerimeter(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun islandPerimeter(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn island_perimeter(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function islandPerimeter($grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function islandPerimeter(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0464", "frontend_question_id": "0464", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/can-i-win", "url_en": "https://leetcode.com/problems/can-i-win", "relative_path_cn": "/leetcode/0400-0499/0464.Can%20I%20Win/README.md", "relative_path_en": "/leetcode/0400-0499/0464.Can%20I%20Win/README_EN.md", "title_cn": "\u6211\u80fd\u8d62\u5417", "title_en": "Can I Win", "question_title_slug": "can-i-win", "content_en": "<p>In the &quot;100 game&quot; two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to <strong>reach or exceed</strong> 100 wins.</p>\n\n<p>What if we change the game so that players <strong>cannot</strong> re-use integers?</p>\n\n<p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p>\n\n<p>Given two integers maxChoosableInteger and&nbsp;desiredTotal, return <code>true</code> if the first player to move can force a win, otherwise return <code>false</code>.&nbsp;Assume&nbsp;both players play <strong>optimally</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 0\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 1\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;maxChoosableInteger &lt;= 20</code></li>\n\t<li><code>0 &lt;=&nbsp;desiredTotal &lt;= 300</code></li>\n</ul>\n", "content_cn": "<p>\u5728 &quot;100 game&quot; \u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u9009\u62e9\u4ece 1 \u5230 10 \u7684\u4efb\u610f\u6574\u6570\uff0c\u7d2f\u8ba1\u6574\u6570\u548c\uff0c\u5148\u4f7f\u5f97\u7d2f\u8ba1\u6574\u6570\u548c\u8fbe\u5230\u6216\u8d85\u8fc7 100 \u7684\u73a9\u5bb6\uff0c\u5373\u4e3a\u80dc\u8005\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u5c06\u6e38\u620f\u89c4\u5219\u6539\u4e3a &ldquo;\u73a9\u5bb6\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u6574\u6570&rdquo; \u5462\uff1f</p>\n\n<p>\u4f8b\u5982\uff0c\u4e24\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u8f6e\u6d41\u4ece\u516c\u5171\u6574\u6570\u6c60\u4e2d\u62bd\u53d6\u4ece 1 \u5230 15 \u7684\u6574\u6570\uff08\u4e0d\u653e\u56de\uff09\uff0c\u76f4\u5230\u7d2f\u8ba1\u6574\u6570\u548c &gt;= 100\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570&nbsp;<code>maxChoosableInteger</code>&nbsp;\uff08\u6574\u6570\u6c60\u4e2d\u53ef\u9009\u62e9\u7684\u6700\u5927\u6570\uff09\u548c\u53e6\u4e00\u4e2a\u6574\u6570&nbsp;<code>desiredTotal</code>\uff08\u7d2f\u8ba1\u548c\uff09\uff0c\u5224\u65ad\u5148\u51fa\u624b\u7684\u73a9\u5bb6\u662f\u5426\u80fd\u7a33\u8d62\uff08\u5047\u8bbe\u4e24\u4f4d\u73a9\u5bb6\u6e38\u620f\u65f6\u90fd\u8868\u73b0\u6700\u4f73\uff09\uff1f</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>maxChoosableInteger</code>&nbsp;\u4e0d\u4f1a\u5927\u4e8e 20\uff0c&nbsp;<code>desiredTotal</code>&nbsp;\u4e0d\u4f1a\u5927\u4e8e 300\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<strong>\u8f93\u51fa\uff1a</strong>\nfalse\n\n<strong>\u89e3\u91ca\uff1a\n</strong>\u65e0\u8bba\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9\u54ea\u4e2a\u6574\u6570\uff0c\u4ed6\u90fd\u4f1a\u5931\u8d25\u3002\n\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u4ece 1 \u5230 10 \u7684\u6574\u6570\u3002\n\u5982\u679c\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9 1\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u53ea\u80fd\u9009\u62e9\u4ece 2 \u5230 10 \u7684\u6574\u6570\u3002\n\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u6574\u6570 10\uff08\u90a3\u4e48\u7d2f\u79ef\u548c\u4e3a 11 &gt;= desiredTotal\uff09\uff0c\u4ece\u800c\u53d6\u5f97\u80dc\u5229.\n\u540c\u6837\u5730\uff0c\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9\u4efb\u610f\u5176\u4ed6\u6574\u6570\uff0c\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u90fd\u4f1a\u8d62\u3002\n</pre>\n", "tags_en": ["Minimax", "Dynamic Programming"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canIWin(self, maxChoosableInteger, desiredTotal):\n        \"\"\"\n        :type maxChoosableInteger: int\n        :type desiredTotal: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canIWin(int maxChoosableInteger, int desiredTotal){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanIWin(int maxChoosableInteger, int desiredTotal) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} maxChoosableInteger\n * @param {number} desiredTotal\n * @return {boolean}\n */\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} max_choosable_integer\n# @param {Integer} desired_total\n# @return {Boolean}\ndef can_i_win(max_choosable_integer, desired_total)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canIWin(_ maxChoosableInteger: Int, _ desiredTotal: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canIWin(maxChoosableInteger int, desiredTotal int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_i_win(max_choosable_integer: i32, desired_total: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $maxChoosableInteger\n     * @param Integer $desiredTotal\n     * @return Boolean\n     */\n    function canIWin($maxChoosableInteger, $desiredTotal) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canIWin(maxChoosableInteger: number, desiredTotal: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0465", "frontend_question_id": "0465", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/optimal-account-balancing", "url_en": "https://leetcode.com/problems/optimal-account-balancing", "relative_path_cn": "/leetcode/0400-0499/0465.Optimal%20Account%20Balancing/README.md", "relative_path_en": "/leetcode/0400-0499/0465.Optimal%20Account%20Balancing/README_EN.md", "title_cn": "\u6700\u4f18\u8d26\u5355\u5e73\u8861", "title_en": "Optimal Account Balancing", "question_title_slug": "optimal-account-balancing", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0466", "frontend_question_id": "0466", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-the-repetitions", "url_en": "https://leetcode.com/problems/count-the-repetitions", "relative_path_cn": "/leetcode/0400-0499/0466.Count%20The%20Repetitions/README.md", "relative_path_en": "/leetcode/0400-0499/0466.Count%20The%20Repetitions/README_EN.md", "title_cn": "\u7edf\u8ba1\u91cd\u590d\u4e2a\u6570", "title_en": "Count The Repetitions", "question_title_slug": "count-the-repetitions", "content_en": "<p>Define <code>S = [s,n]</code> as the string S which consists of n connected strings s. For example, <code>[\"abc\", 3]</code> =\"abcabcabc\". </p>\r\n<p>On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, \u201cabc\u201d  can be obtained from \u201cabdbec\u201d based on our definition, but it can not be obtained from \u201cacbbe\u201d.</p>\r\n<p>You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 &le; n1 &le; 10<sup>6</sup> and 1 &le; n2 &le; 10<sup>6</sup>. Now consider the strings S1 and S2, where <code>S1=[s1,n1]</code> and <code>S2=[s2,n2]</code>. Find the maximum integer M such that <code>[S2,M]</code> can be obtained from <code>S1</code>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\ns1=\"acb\", n1=4\r\ns2=\"ab\", n2=2\r\n\r\nReturn:\r\n2\r\n</pre>\r\n</p>", "content_cn": "<p>\u7531 n \u4e2a\u8fde\u63a5\u7684\u5b57\u7b26\u4e32 s \u7ec4\u6210\u5b57\u7b26\u4e32 S\uff0c\u8bb0\u4f5c&nbsp;<code>S = [s,n]</code>\u3002\u4f8b\u5982\uff0c<code>[&quot;abc&quot;,3]</code>=&ldquo;abcabcabc&rdquo;\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4ece s2<sub>&nbsp;</sub>\u4e2d\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\u4f7f\u5176\u53d8\u4e3a s1\uff0c\u5219\u79f0\u5b57\u7b26\u4e32 s1<sub>&nbsp;</sub>\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32 s2 \u83b7\u5f97\u3002\u4f8b\u5982\uff0c\u6839\u636e\u5b9a\u4e49\uff0c&quot;abc&quot; \u53ef\u4ee5\u4ece &ldquo;abdbec&rdquo; \u83b7\u5f97\uff0c\u4f46\u4e0d\u80fd\u4ece &ldquo;acbbe&rdquo; \u83b7\u5f97\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u4f60\u4e24\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 s1&nbsp;\u548c s2\uff08\u6bcf\u4e2a\u6700\u591a 100 \u4e2a\u5b57\u7b26\u957f\uff09\u548c\u4e24\u4e2a\u6574\u6570 0 &le; n1 &le; 10<sup>6&nbsp;</sup>\u548c 1 &le; n2 &le; 10<sup>6</sup>\u3002\u73b0\u5728\u8003\u8651\u5b57\u7b26\u4e32 S1 \u548c S2\uff0c\u5176\u4e2d <code>S1=[s1,n1]</code>&nbsp;\u3001<code>S2=[s2,n2]</code> \u3002</p>\n\n<p>\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u53ef\u4ee5\u6ee1\u8db3\u4f7f<code>[S2,M]</code> \u4ece <code>S1</code>&nbsp;\u83b7\u5f97\u7684\u6700\u5927\u6574\u6570 M \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u8f93\u5165\uff1a\ns1 =&quot;acb&quot;,n1 = 4\ns2 =&quot;ab&quot;,n2 = 2\n\n\u8fd4\u56de\uff1a\n2\n</pre>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getMaxRepetitions(self, s1, n1, s2, n2):\n        \"\"\"\n        :type s1: str\n        :type n1: int\n        :type s2: str\n        :type n2: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint getMaxRepetitions(char * s1, int n1, char * s2, int n2){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetMaxRepetitions(string s1, int n1, string s2, int n2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {Integer} n1\n# @param {String} s2\n# @param {Integer} n2\n# @return {Integer}\ndef get_max_repetitions(s1, n1, s2, n2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getMaxRepetitions(_ s1: String, _ n1: Int, _ s2: String, _ n2: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func getMaxRepetitions(s1 string, n1 int, s2 string, n2 int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_max_repetitions(s1: String, n1: i32, s2: String, n2: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param Integer $n1\n     * @param String $s2\n     * @param Integer $n2\n     * @return Integer\n     */\n    function getMaxRepetitions($s1, $n1, $s2, $n2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getMaxRepetitions(s1: string, n1: number, s2: string, n2: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0467", "frontend_question_id": "0467", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/unique-substrings-in-wraparound-string", "url_en": "https://leetcode.com/problems/unique-substrings-in-wraparound-string", "relative_path_cn": "/leetcode/0400-0499/0467.Unique%20Substrings%20in%20Wraparound%20String/README.md", "relative_path_en": "/leetcode/0400-0499/0467.Unique%20Substrings%20in%20Wraparound%20String/README_EN.md", "title_cn": "\u73af\u7ed5\u5b57\u7b26\u4e32\u4e2d\u552f\u4e00\u7684\u5b50\u5b57\u7b26\u4e32", "title_en": "Unique Substrings in Wraparound String", "question_title_slug": "unique-substrings-in-wraparound-string", "content_en": "<p>Consider the string <code>s</code> to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so <code>s</code> will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".</p>\r\n\r\n<p>Now we have another string <code>p</code>. Your job is to find out how many unique non-empty substrings of <code>p</code> are present in <code>s</code>. In particular, your input is the string <code>p</code> and you need to output the number of different non-empty substrings of <code>p</code> in the string <code>s</code>.</p>\r\n\r\n<p><b>Note:</b> <code>p</code> consists of only lowercase English letters and the size of p might be over 10000.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"a\"\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> Only the substring \"a\" of string \"a\" is in the string \u0010s.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"cac\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \"zab\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\r\n</pre>\r\n</p>", "content_cn": "<p>\u628a\u5b57\u7b26\u4e32 <code>s</code> \u770b\u4f5c\u662f&ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;\u7684\u65e0\u9650\u73af\u7ed5\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5&nbsp;<code>s</code> \u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;.&nbsp;</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>p</code> \u3002\u4f60\u9700\u8981\u7684\u662f\u627e\u51fa <code>s</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u552f\u4e00\u7684 <code>p</code> \u7684\u975e\u7a7a\u5b50\u4e32\uff0c\u5c24\u5176\u662f\u5f53\u4f60\u7684\u8f93\u5165\u662f\u5b57\u7b26\u4e32 <code>p</code> \uff0c\u4f60\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32&nbsp;<code>s</code> \u4e2d <code>p</code> \u7684\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u6570\u76ee\u3002&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong> <code>p</code>&nbsp;\u4ec5\u7531\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0cp \u7684\u5927\u5c0f\u53ef\u80fd\u8d85\u8fc7 10000\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u5b57\u7b26\u4e32 S \u4e2d\u53ea\u6709\u4e00\u4e2a&quot;a&quot;\u5b50\u5b57\u7b26\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;cac&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u5b57\u7b26\u4e32 S \u4e2d\u7684\u5b57\u7b26\u4e32&ldquo;cac&rdquo;\u53ea\u6709\u4e24\u4e2a\u5b50\u4e32&ldquo;a&rdquo;\u3001&ldquo;c&rdquo;\u3002.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;zab&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u5728\u5b57\u7b26\u4e32 S \u4e2d\u6709\u516d\u4e2a\u5b50\u4e32&ldquo;z&rdquo;\u3001&ldquo;a&rdquo;\u3001&ldquo;b&rdquo;\u3001&ldquo;za&rdquo;\u3001&ldquo;ab&rdquo;\u3001&ldquo;zab&rdquo;\u3002.\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findSubstringInWraproundString(string p) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findSubstringInWraproundString(String p) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findSubstringInWraproundString(self, p):\n        \"\"\"\n        :type p: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findSubstringInWraproundString(self, p: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findSubstringInWraproundString(char * p){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindSubstringInWraproundString(string p) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} p\n * @return {number}\n */\nvar findSubstringInWraproundString = function(p) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} p\n# @return {Integer}\ndef find_substring_in_wrapround_string(p)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findSubstringInWraproundString(_ p: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findSubstringInWraproundString(p string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findSubstringInWraproundString(p: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findSubstringInWraproundString(p: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_substring_in_wrapround_string(p: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $p\n     * @return Integer\n     */\n    function findSubstringInWraproundString($p) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findSubstringInWraproundString(p: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0468", "frontend_question_id": "0468", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/validate-ip-address", "url_en": "https://leetcode.com/problems/validate-ip-address", "relative_path_cn": "/leetcode/0400-0499/0468.Validate%20IP%20Address/README.md", "relative_path_en": "/leetcode/0400-0499/0468.Validate%20IP%20Address/README_EN.md", "title_cn": "\u9a8c\u8bc1IP\u5730\u5740", "title_en": "Validate IP Address", "question_title_slug": "validate-ip-address", "content_en": "<p>Given a string <code>IP</code>, return <code>&quot;IPv4&quot;</code> if IP is a valid IPv4 address,&nbsp;<code>&quot;IPv6&quot;</code> if&nbsp;IP is a valid IPv6 address or <code>&quot;Neither&quot;</code> if IP is not a correct IP of any type.</p>\n\n<p><strong>A valid IPv4</strong> address&nbsp;is an IP in the form <code>&quot;x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>&quot;</code> where <code>0 &lt;=&nbsp;x<sub><span style=\"font-size: 10.8333px;\">i</span></sub>&nbsp;&lt;= 255</code> and <code>x<sub>i</sub></code> <strong>cannot contain</strong> leading zeros. For example, <code>&quot;192.168.1.1&quot;</code> and&nbsp;<code>&quot;192.168.1.0&quot;</code> are valid IPv4 addresses but <code>&quot;192.168.01.1&quot;</code>, while <code>&quot;192.168.1.00&quot;</code>&nbsp;and <code>&quot;192.168@1.1&quot;</code> are invalid IPv4 addresses.</p>\n\n<p><strong>A valid IPv6</strong> address&nbsp;is an IP in the form <code>&quot;x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4:</sub>x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>&quot;</code> where:</p>\n\n<ul>\n\t<li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li>\n\t<li><code>x<sub>i</sub></code> is a&nbsp;<strong>hexadecimal string</strong> which may contain digits, lower-case English letter (<code>&#39;a&#39;</code> to <code>&#39;f&#39;</code>) and upper-case English letters (<code>&#39;A&#39;</code> to <code>&#39;F&#39;</code>).</li>\n\t<li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li>\n</ul>\n\n<p>For example,&nbsp;&quot;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code>&nbsp;and &quot;<code>2001:db8:85a3:0:0:8A2E:0370:7334&quot;</code> are valid IPv6 addresses, while &quot;<code>2001:0db8:85a3::8A2E:037j:7334&quot;</code>&nbsp;and &quot;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> are invalid IPv6 addresses.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;172.16.254.1&quot;\n<strong>Output:</strong> &quot;IPv4&quot;\n<strong>Explanation:</strong> This is a valid IPv4 address, return &quot;IPv4&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n<strong>Output:</strong> &quot;IPv6&quot;\n<strong>Explanation:</strong> This is a valid IPv6 address, return &quot;IPv6&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;256.256.256.256&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n<strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6 address.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334:&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;1e1.4.5.6&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>IP</code> consists only of English letters, digits and the characters <code>&#39;.&#39;</code> and <code>&#39;:&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684 IPv4 \u6216&nbsp;IPv6 \u5730\u5740\u3002</p>\n\n<ul>\n\t<li>\u5982\u679c\u662f\u6709\u6548\u7684 IPv4 \u5730\u5740\uff0c\u8fd4\u56de <code>&quot;IPv4&quot;</code> \uff1b</li>\n\t<li>\u5982\u679c\u662f\u6709\u6548\u7684 IPv6 \u5730\u5740\uff0c\u8fd4\u56de <code>&quot;IPv6&quot;</code> \uff1b</li>\n\t<li>\u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u7c7b\u578b\u7684 IP \u5730\u5740\uff0c\u8fd4\u56de <code>&quot;Neither&quot;</code> \u3002</li>\n</ul>\n\n<p><strong>IPv4</strong>&nbsp;\u5730\u5740\u7531\u5341\u8fdb\u5236\u6570\u548c\u70b9\u6765\u8868\u793a\uff0c\u6bcf\u4e2a\u5730\u5740\u5305\u542b 4 \u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5176\u8303\u56f4\u4e3a&nbsp;0 -&nbsp;255\uff0c&nbsp;\u7528(&quot;.&quot;)\u5206\u5272\u3002\u6bd4\u5982\uff0c<code>172.16.254.1</code>\uff1b</p>\n\n<p>\u540c\u65f6\uff0cIPv4 \u5730\u5740\u5185\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\u6bd4\u5982\uff0c\u5730\u5740&nbsp;<code>172.16.254.01</code> \u662f\u4e0d\u5408\u6cd5\u7684\u3002</p>\n\n<p><strong>IPv6</strong>&nbsp;\u5730\u5740\u7531 8 \u7ec4 16 \u8fdb\u5236\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u6bcf\u7ec4\u8868\u793a&nbsp;16 \u6bd4\u7279\u3002\u8fd9\u4e9b\u7ec4\u6570\u5b57\u901a\u8fc7 (&quot;:&quot;)\u5206\u5272\u3002\u6bd4\u5982,&nbsp;&nbsp;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u800c\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u4e00\u4e9b\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\u3002\u6240\u4ee5\uff0c&nbsp;<code>2001:db8:85a3:0:0:8A2E:0370:7334</code> \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 address\u5730\u5740 (\u5373\uff0c\u5ffd\u7565 0 \u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199)\u3002</p>\n\n<p>\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7ec4\u7684\u503c\u4e3a 0\uff0c\u800c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684\u7ec4\uff0c\u4ee5\u81f3\u4e8e\u51fa\u73b0 (::) \u7684\u60c5\u51b5\u3002&nbsp;\u6bd4\u5982\uff0c&nbsp;<code>2001:0db8:85a3::8A2E:0370:7334</code> \u662f\u65e0\u6548\u7684 IPv6 \u5730\u5740\u3002</p>\n\n<p>\u540c\u65f6\uff0c\u5728 IPv6 \u5730\u5740\u4e2d\uff0c\u591a\u4f59\u7684 0 \u4e5f\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u6bd4\u5982\uff0c&nbsp;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> \u662f\u65e0\u6548\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>IP = &quot;172.16.254.1&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;IPv4&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u6709\u6548\u7684 IPv4 \u5730\u5740\uff0c\u8fd4\u56de &quot;IPv4&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;IPv6&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u6709\u6548\u7684 IPv6 \u5730\u5740\uff0c\u8fd4\u56de &quot;IPv6&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>IP = &quot;256.256.256.256&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;Neither&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u65e2\u4e0d\u662f IPv4 \u5730\u5740\uff0c\u53c8\u4e0d\u662f IPv6 \u5730\u5740\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334:&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;Neither&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>IP = &quot;1e1.4.5.6&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;Neither&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>IP</code> \u4ec5\u7531\u82f1\u6587\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u5b57\u7b26 <code>&#39;.&#39;</code> \u548c <code>&#39;:&#39;</code> \u7ec4\u6210\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string validIPAddress(string IP) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String validIPAddress(String IP) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validIPAddress(self, IP):\n        \"\"\"\n        :type IP: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validIPAddress(self, IP: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * validIPAddress(char * IP){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ValidIPAddress(string IP) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} IP\n * @return {string}\n */\nvar validIPAddress = function(IP) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} ip\n# @return {String}\ndef valid_ip_address(ip)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validIPAddress(_ IP: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validIPAddress(IP string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validIPAddress(IP: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validIPAddress(IP: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_ip_address(ip: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $IP\n     * @return String\n     */\n    function validIPAddress($IP) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validIPAddress(IP: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0469", "frontend_question_id": "0469", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/convex-polygon", "url_en": "https://leetcode.com/problems/convex-polygon", "relative_path_cn": "/leetcode/0400-0499/0469.Convex%20Polygon/README.md", "relative_path_en": "/leetcode/0400-0499/0469.Convex%20Polygon/README_EN.md", "title_cn": "\u51f8\u591a\u8fb9\u5f62", "title_en": "Convex Polygon", "question_title_slug": "convex-polygon", "content_en": null, "content_cn": null, "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0903", "frontend_question_id": "0470", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/implement-rand10-using-rand7", "url_en": "https://leetcode.com/problems/implement-rand10-using-rand7", "relative_path_cn": "/leetcode/0400-0499/0470.Implement%20Rand10%28%29%20Using%20Rand7%28%29/README.md", "relative_path_en": "/leetcode/0400-0499/0470.Implement%20Rand10%28%29%20Using%20Rand7%28%29/README_EN.md", "title_cn": "\u7528 Rand7() \u5b9e\u73b0 Rand10()", "title_en": "Implement Rand10() Using Rand7()", "question_title_slug": "implement-rand10-using-rand7", "content_en": "<p>Given the <strong>API</strong> <code>rand7()</code> that generates a uniform random integer in the range <code>[1, 7]</code>, write a function <code>rand10()</code> that generates a uniform random integer in the range <code>[1, 10]</code>. You can only call the API <code>rand7()</code>, and you shouldn&#39;t call any other API. Please <strong>do not</strong> use a language&#39;s built-in random API.</p>\n\n<p>Each test case will have one <strong>internal</strong> argument <code>n</code>, the number of times that your implemented function <code>rand10()</code> will be called while testing. Note that this is <strong>not an argument</strong> passed to <code>rand10()</code>.</p>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">expected value</a>&nbsp;for the number of calls to&nbsp;<code>rand7()</code>&nbsp;function?</li>\n\t<li>Could you minimize the number of calls to <code>rand7()</code>?</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [2]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 2\n<strong>Output:</strong> [2,8]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [3,8,10]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u5df2\u6709\u65b9\u6cd5&nbsp;<code>rand7</code>&nbsp;\u53ef\u751f\u6210 1 \u5230 7 \u8303\u56f4\u5185\u7684\u5747\u5300\u968f\u673a\u6574\u6570\uff0c\u8bd5\u5199\u4e00\u4e2a\u65b9\u6cd5&nbsp;<code>rand10</code>&nbsp;\u751f\u6210 1 \u5230 10 \u8303\u56f4\u5185\u7684\u5747\u5300\u968f\u673a\u6574\u6570\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u7cfb\u7edf\u7684&nbsp;<code>Math.random()</code>&nbsp;\u65b9\u6cd5\u3002</p>\n\n<ol>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>1\n<strong>\u8f93\u51fa: </strong>[7]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>[8,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>3\n<strong>\u8f93\u51fa: </strong>[8,1,10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>rand7</code>&nbsp;\u5df2\u5b9a\u4e49\u3002</li>\n\t<li>\u4f20\u5165\u53c2\u6570:&nbsp;<code>n</code>&nbsp;\u8868\u793a&nbsp;<code>rand10</code>&nbsp;\u7684\u8c03\u7528\u6b21\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li><code>rand7()</code>\u8c03\u7528\u6b21\u6570\u7684&nbsp;<a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">\u671f\u671b\u503c</a>&nbsp;\u662f\u591a\u5c11&nbsp;?</li>\n\t<li>\u4f60\u80fd\u5426\u5c3d\u91cf\u5c11\u8c03\u7528 <code>rand7()</code> ?</li>\n</ol>\n", "tags_en": ["Random", "Rejection Sampling"], "tags_cn": [null, null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "// The rand7() API is already defined for you.\n// int rand7();\n// @return a random integer in the range 1 to 7\n\nclass Solution {\npublic:\n    int rand10() {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * The rand7() API is already defined in the parent class SolBase.\n * public int rand7();\n * @return a random integer in the range 1 to 7\n */\nclass Solution extends SolBase {\n    public int rand10() {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# The rand7() API is already defined for you.\n# def rand7():\n# @return a random integer in the range 1 to 7\n\nclass Solution(object):\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# The rand7() API is already defined for you.\n# def rand7():\n# @return a random integer in the range 1 to 7\n\nclass Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "// The rand7() API is already defined for you.\n// int rand7();\n// @return a random integer in the range 1 to 7\n\nint rand10() {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * The Rand7() API is already defined in the parent class SolBase.\n * public int Rand7();\n * @return a random integer in the range 1 to 7\n */\npublic class Solution : SolBase {\n    public int Rand10() {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * The rand7() API is already defined for you.\n * var rand7 = function() {}\n * @return {number} a random integer in the range 1 to 7\n */\nvar rand10 = function() {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# The rand7() API is already defined for you.\n# def rand7()\n# @return {Integer} a random integer in the range 1 to 7\n\ndef rand10()\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * The rand7() API is already defined in the parent class SolBase.\n * func rand7() -> Int = {}\n * @return a random integer in the range 1 to 7\n */\nclass Solution : SolBase {\n    func rand10() -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rand10() int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * The rand7() API is already defined in the parent class SolBase.\n * def rand7(): Int = {}\n * @return a random integer in the range 1 to 7\n */\nobject Solution extends SolBase {\n    def rand10(): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * The rand7() API is already defined in the parent class SolBase.\n * fun rand7(): Int {}\n * @return a random integer in the range 1 to 7\n */\nclass Solution : SolBase() {\n    fun rand10(): Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "/** \n * The rand7() API is already defined for you.\n * @return a random integer in the range 1 to 7\n * fn rand7() -> i32;\n */\n\nimpl Solution {\n    pub fn rand10() -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/*\n * The rand7() API is already defined for you.\n * @return a random integer in the range 1 to 7\n * function rand7();\n*/\n\nclass Solution {\n    /**\n     * @param \n     * @return Integer\n     */\n    function rand10() {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * The rand7() API is already defined for you.\n * function rand7(): number {}\n * @return a random integer in the range 1 to 7\n */\n\nfunction rand10(): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0471", "frontend_question_id": "0471", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/encode-string-with-shortest-length", "url_en": "https://leetcode.com/problems/encode-string-with-shortest-length", "relative_path_cn": "/leetcode/0400-0499/0471.Encode%20String%20with%20Shortest%20Length/README.md", "relative_path_en": "/leetcode/0400-0499/0471.Encode%20String%20with%20Shortest%20Length/README_EN.md", "title_cn": "\u7f16\u7801\u6700\u77ed\u957f\u5ea6\u7684\u5b57\u7b26\u4e32", "title_en": "Encode String with Shortest Length", "question_title_slug": "encode-string-with-shortest-length", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0472", "frontend_question_id": "0472", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/concatenated-words", "url_en": "https://leetcode.com/problems/concatenated-words", "relative_path_cn": "/leetcode/0400-0499/0472.Concatenated%20Words/README.md", "relative_path_en": "/leetcode/0400-0499/0472.Concatenated%20Words/README_EN.md", "title_cn": "\u8fde\u63a5\u8bcd", "title_en": "Concatenated Words", "question_title_slug": "concatenated-words", "content_en": "Given a list of words (<b>without duplicates</b>), please write a program that returns all concatenated words in the given list of words.\r\n<p>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\r\n\r\n<b>Output:</b> [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\r\n\r\n<b>Explanation:</b> \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; <br> \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; <br>\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of elements of the given array will not exceed <code>10,000 </code>\r\n<li>The length sum of elements in the given array will not exceed <code>600,000</code>. </li>\r\n<li>All the input string will only include lower case letters.</li>\r\n<li>The returned elements order does not matter. </li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u4e0d\u542b\u91cd\u590d</strong>\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002</p>\n\n<p>\u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u8f93\u51fa:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u89e3\u91ca:</strong> &quot;catsdogcats&quot;\u7531&quot;cats&quot;, &quot;dog&quot; \u548c &quot;cats&quot;\u7ec4\u6210; \n     &quot;dogcatsdog&quot;\u7531&quot;dog&quot;, &quot;cats&quot;\u548c&quot;dog&quot;\u7ec4\u6210; \n     &quot;ratcatdogcat&quot;\u7531&quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot;\u548c&quot;cat&quot;\u7ec4\u6210\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 <code>10000</code>\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 <code>600000</code>\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Trie", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5b57\u5178\u6811", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> findAllConcatenatedWordsInADict(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findAllConcatenatedWordsInADict(char ** words, int wordsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindAllConcatenatedWordsInADict(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findAllConcatenatedWordsInADict = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef find_all_concatenated_words_in_a_dict(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findAllConcatenatedWordsInADict(_ words: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findAllConcatenatedWordsInADict(words []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findAllConcatenatedWordsInADict(words: Array[String]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findAllConcatenatedWordsInADict(words: Array<String>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_all_concatenated_words_in_a_dict(words: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function findAllConcatenatedWordsInADict($words) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findAllConcatenatedWordsInADict(words: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0473", "frontend_question_id": "0473", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/matchsticks-to-square", "url_en": "https://leetcode.com/problems/matchsticks-to-square", "relative_path_cn": "/leetcode/0400-0499/0473.Matchsticks%20to%20Square/README.md", "relative_path_en": "/leetcode/0400-0499/0473.Matchsticks%20to%20Square/README_EN.md", "title_cn": "\u706b\u67f4\u62fc\u6b63\u65b9\u5f62", "title_en": "Matchsticks to Square", "question_title_slug": "matchsticks-to-square", "content_en": "<p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used <b>exactly</b> one time.</P>\r\n\r\n<p> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,1,2,2,2]\r\n<b>Output:</b> true\r\n\r\n<b>Explanation:</b> You can form a square with length 2, one side of the square came two sticks with length 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,3,3,3,4]\r\n<b>Output:</b> false\r\n\r\n<b>Explanation:</b> You cannot find a way to form a square with all the matchsticks.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length sum of the given matchsticks is in the range of <code>0</code> to <code>10^9</code>.\r\n<li>The length of the given matchstick array will not exceed <code>15</code>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u8fd8\u8bb0\u5f97\u7ae5\u8bdd\u300a\u5356\u706b\u67f4\u7684\u5c0f\u5973\u5b69\u300b\u5417\uff1f\u73b0\u5728\uff0c\u4f60\u77e5\u9053\u5c0f\u5973\u5b69\u6709\u591a\u5c11\u6839\u706b\u67f4\uff0c\u8bf7\u627e\u51fa\u4e00\u79cd\u80fd\u4f7f\u7528\u6240\u6709\u706b\u67f4\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u65b9\u6cd5\u3002\u4e0d\u80fd\u6298\u65ad\u706b\u67f4\uff0c\u53ef\u4ee5\u628a\u706b\u67f4\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u4e14\u6bcf\u6839\u706b\u67f4\u90fd\u8981\u7528\u5230\u3002</p>\n\n<p>\u8f93\u5165\u4e3a\u5c0f\u5973\u5b69\u62e5\u6709\u706b\u67f4\u7684\u6570\u76ee\uff0c\u6bcf\u6839\u706b\u67f4\u7528\u5176\u957f\u5ea6\u8868\u793a\u3002\u8f93\u51fa\u5373\u4e3a\u662f\u5426\u80fd\u7528\u6240\u6709\u7684\u706b\u67f4\u62fc\u6210\u6b63\u65b9\u5f62\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,2,2,2]\n<strong>\u8f93\u51fa:</strong> true\n\n<strong>\u89e3\u91ca:</strong> \u80fd\u62fc\u6210\u4e00\u4e2a\u8fb9\u957f\u4e3a2\u7684\u6b63\u65b9\u5f62\uff0c\u6bcf\u8fb9\u4e24\u6839\u706b\u67f4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,3,3,3,4]\n<strong>\u8f93\u51fa:</strong> false\n\n<strong>\u89e3\u91ca:</strong> \u4e0d\u80fd\u7528\u6240\u6709\u706b\u67f4\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u706b\u67f4\u957f\u5ea6\u548c\u5728&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>10^9</code>\u4e4b\u95f4\u3002</li>\n\t<li>\u706b\u67f4\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc715\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool makesquare(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean makesquare(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makesquare(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makesquare(self, nums: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool makesquare(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool Makesquare(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar makesquare = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef makesquare(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makesquare(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func makesquare(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makesquare(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makesquare(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn makesquare(nums: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function makesquare($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makesquare(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0474", "frontend_question_id": "0474", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ones-and-zeroes", "url_en": "https://leetcode.com/problems/ones-and-zeroes", "relative_path_cn": "/leetcode/0400-0499/0474.Ones%20and%20Zeroes/README.md", "relative_path_en": "/leetcode/0400-0499/0474.Ones%20and%20Zeroes/README_EN.md", "title_cn": "\u4e00\u548c\u96f6", "title_en": "Ones and Zeroes", "question_title_slug": "ones-and-zeroes", "content_en": "<p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p>\n\n<p>Return <em>the size of the largest subset of <code>strs</code> such that there are <strong>at most</strong> </em><code>m</code><em> </em><code>0</code><em>&#39;s and </em><code>n</code><em> </em><code>1</code><em>&#39;s in the subset</em>.</p>\n\n<p>A set <code>x</code> is a <strong>subset</strong> of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0001&quot;,&quot;111001&quot;,&quot;1&quot;,&quot;0&quot;], m = 5, n = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The largest subset with at most 5 0&#39;s and 3 1&#39;s is {&quot;10&quot;, &quot;0001&quot;, &quot;1&quot;, &quot;0&quot;}, so the answer is 4.\nOther valid but smaller subsets include {&quot;0001&quot;, &quot;1&quot;} and {&quot;10&quot;, &quot;1&quot;, &quot;0&quot;}.\n{&quot;111001&quot;} is an invalid subset because it contains 4 1&#39;s, greater than the maximum of 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0&quot;,&quot;1&quot;], m = 1, n = 1\n<strong>Output:</strong> 2\n<b>Explanation:</b> The largest subset is {&quot;0&quot;, &quot;1&quot;}, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 600</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists only of digits <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u6570\u7ec4 <code>strs</code> \u548c\u4e24\u4e2a\u6574\u6570 <code>m</code> \u548c <code>n</code> \u3002</p>\n\n<div class=\"MachineTrans-Lines\">\n<p class=\"MachineTrans-lang-zh-CN\">\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de <code>strs</code> \u7684\u6700\u5927\u5b50\u96c6\u7684\u5927\u5c0f\uff0c\u8be5\u5b50\u96c6\u4e2d <strong>\u6700\u591a</strong> \u6709 <code>m</code> \u4e2a <code>0</code> \u548c <code>n</code> \u4e2a <code>1</code> \u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u5982\u679c <code>x</code> \u7684\u6240\u6709\u5143\u7d20\u4e5f\u662f <code>y</code> \u7684\u5143\u7d20\uff0c\u96c6\u5408 <code>x</code> \u662f\u96c6\u5408 <code>y</code> \u7684 <strong>\u5b50\u96c6</strong> \u3002</p>\n</div>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u591a\u6709 5 \u4e2a 0 \u548c 3 \u4e2a 1 \u7684\u6700\u5927\u5b50\u96c6\u662f {\"10\",\"0001\",\"1\",\"0\"} \uff0c\u56e0\u6b64\u7b54\u6848\u662f 4 \u3002\n\u5176\u4ed6\u6ee1\u8db3\u9898\u610f\u4f46\u8f83\u5c0f\u7684\u5b50\u96c6\u5305\u62ec {\"0001\",\"1\"} \u548c {\"10\",\"1\",\"0\"} \u3002{\"111001\"} \u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u56e0\u4e3a\u5b83\u542b 4 \u4e2a 1 \uff0c\u5927\u4e8e n \u7684\u503c 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>strs = [\"10\", \"0\", \"1\"], m = 1, n = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5927\u7684\u5b50\u96c6\u662f {\"0\", \"1\"} \uff0c\u6240\u4ee5\u7b54\u6848\u662f 2 \u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= strs.length <= 600</code></li>\n\t<li><code>1 <= strs[i].length <= 100</code></li>\n\t<li><code>strs[i]</code>\u00a0\u4ec5\u7531\u00a0<code>'0'</code> \u548c\u00a0<code>'1'</code> \u7ec4\u6210</li>\n\t<li><code>1 <= m, n <= 100</code></li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaxForm(self, strs, m, n):\n        \"\"\"\n        :type strs: List[str]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMaxForm(char ** strs, int strsSize, int m, int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxForm(string[] strs, int m, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} strs\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef find_max_form(strs, m, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaxForm(_ strs: [String], _ m: Int, _ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaxForm(strs []string, m int, n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaxForm(strs: Array[String], m: Int, n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaxForm(strs: Array<String>, m: Int, n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_form(strs: Vec<String>, m: i32, n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function findMaxForm($strs, $m, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaxForm(strs: string[], m: number, n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0475", "frontend_question_id": "0475", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/heaters", "url_en": "https://leetcode.com/problems/heaters", "relative_path_cn": "/leetcode/0400-0499/0475.Heaters/README.md", "relative_path_en": "/leetcode/0400-0499/0475.Heaters/README_EN.md", "title_cn": "\u4f9b\u6696\u5668", "title_en": "Heaters", "question_title_slug": "heaters", "content_en": "<p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p>\n\n<p>Every house can be warmed, as long as the house is within the heater&#39;s warm radius range.&nbsp;</p>\n\n<p>Given the positions of <code>houses</code> and <code>heaters</code> on a horizontal line, return <em>the minimum radius standard of heaters&nbsp;so that those heaters could cover all houses.</em></p>\n\n<p><strong>Notice</strong> that&nbsp;all the <code>heaters</code> follow your radius standard, and the warm radius will the same.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3], heaters = [2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3,4], heaters = [1,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,5], heaters = [2]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u51ac\u5b63\u5df2\u7ecf\u6765\u4e34\u3002\u00a0\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\u4e2a\u6709\u56fa\u5b9a\u52a0\u70ed\u534a\u5f84\u7684\u4f9b\u6696\u5668\u5411\u6240\u6709\u623f\u5c4b\u4f9b\u6696\u3002</p>\n\n<p>\u5728\u52a0\u70ed\u5668\u7684\u52a0\u70ed\u534a\u5f84\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u623f\u5c4b\u90fd\u53ef\u4ee5\u83b7\u5f97\u4f9b\u6696\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u51fa\u4f4d\u4e8e\u4e00\u6761\u6c34\u5e73\u7ebf\u4e0a\u7684\u623f\u5c4b\u00a0<code>houses</code> \u548c\u4f9b\u6696\u5668\u00a0<code>heaters</code> \u7684\u4f4d\u7f6e\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u623f\u5c4b\u7684\u6700\u5c0f\u52a0\u70ed\u534a\u5f84\u3002</p>\n\n<p><strong>\u8bf4\u660e</strong>\uff1a\u6240\u6709\u4f9b\u6696\u5668\u90fd\u9075\u5faa\u4f60\u7684\u534a\u5f84\u6807\u51c6\uff0c\u52a0\u70ed\u7684\u534a\u5f84\u4e5f\u4e00\u6837\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> houses = [1,2,3], heaters = [2]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u4ec5\u5728\u4f4d\u7f6e2\u4e0a\u6709\u4e00\u4e2a\u4f9b\u6696\u5668\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u70ed\u534a\u5f84\u8bbe\u4e3a1\uff0c\u90a3\u4e48\u6240\u6709\u623f\u5c4b\u5c31\u90fd\u80fd\u5f97\u5230\u4f9b\u6696\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> houses = [1,2,3,4], heaters = [1,4]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u5728\u4f4d\u7f6e1, 4\u4e0a\u6709\u4e24\u4e2a\u4f9b\u6696\u5668\u3002\u6211\u4eec\u9700\u8981\u5c06\u52a0\u70ed\u534a\u5f84\u8bbe\u4e3a1\uff0c\u8fd9\u6837\u6240\u6709\u623f\u5c4b\u5c31\u90fd\u80fd\u5f97\u5230\u4f9b\u6696\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>houses = [1,5], heaters = [2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= houses.length, heaters.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 <= houses[i], heaters[i] <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findRadius(int[] houses, int[] heaters) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRadius(self, houses, heaters):\n        \"\"\"\n        :type houses: List[int]\n        :type heaters: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findRadius(int* houses, int housesSize, int* heaters, int heatersSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindRadius(int[] houses, int[] heaters) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} houses\n * @param {number[]} heaters\n * @return {number}\n */\nvar findRadius = function(houses, heaters) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} houses\n# @param {Integer[]} heaters\n# @return {Integer}\ndef find_radius(houses, heaters)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRadius(_ houses: [Int], _ heaters: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRadius(houses []int, heaters []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRadius(houses: Array[Int], heaters: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRadius(houses: IntArray, heaters: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_radius(houses: Vec<i32>, heaters: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $houses\n     * @param Integer[] $heaters\n     * @return Integer\n     */\n    function findRadius($houses, $heaters) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRadius(houses: number[], heaters: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0476", "frontend_question_id": "0476", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-complement", "url_en": "https://leetcode.com/problems/number-complement", "relative_path_cn": "/leetcode/0400-0499/0476.Number%20Complement/README.md", "relative_path_en": "/leetcode/0400-0499/0476.Number%20Complement/README_EN.md", "title_cn": "\u6570\u5b57\u7684\u8865\u6570", "title_en": "Number Complement", "question_title_slug": "number-complement", "content_en": "<p>Given a <strong>positive</strong> integer <code>num</code>, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The given integer <code>num</code> is guaranteed to fit within the range of a 32-bit signed integer.</li>\n\t<li><code>num &gt;= 1</code></li>\n\t<li>You could assume no leading zero bit in the integer&rsquo;s binary representation.</li>\n\t<li>This question is the same as 1009:&nbsp;<a href=\"https://leetcode.com/problems/complement-of-base-10-integer/\">https://leetcode.com/problems/complement-of-base-10-integer/</a></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> 5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a 010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> 1 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a 0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u5728 32 \u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002</li>\n\t<li>\u672c\u9898\u4e0e 1009 <a href=\"https://leetcode-cn.com/problems/complement-of-base-10-integer/\">https://leetcode-cn.com/problems/complement-of-base-10-integer/</a> \u76f8\u540c</li>\n</ol>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findComplement(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findComplement(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findComplement(self, num: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findComplement(int num){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindComplement(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar findComplement = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef find_complement(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findComplement(_ num: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findComplement(num int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findComplement(num: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findComplement(num: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_complement(num: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function findComplement($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findComplement(num: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0477", "frontend_question_id": "0477", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/total-hamming-distance", "url_en": "https://leetcode.com/problems/total-hamming-distance", "relative_path_cn": "/leetcode/0400-0499/0477.Total%20Hamming%20Distance/README.md", "relative_path_en": "/leetcode/0400-0499/0477.Total%20Hamming%20Distance/README_EN.md", "title_cn": "\u6c49\u660e\u8ddd\u79bb\u603b\u548c", "title_en": "Total Hamming Distance", "question_title_slug": "total-hamming-distance", "content_en": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p\u0010\u0010\u0010\u0010>\r\n\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> 4, 14, 2\r\n\r\n<b>Output:</b> 6\r\n\r\n<b>Explanation:</b> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\r\nshowing the four bits relevant in this case). So the answer will be:\r\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>Elements of the given array are in the range of <code>0 </code> to <code>10^9</code>\r\n<li>Length of the array will not exceed <code>10^4</code>. </li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u4e24\u4e2a\u6574\u6570\u7684&nbsp;<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin\">\u6c49\u660e\u8ddd\u79bb</a> \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002</p>\n\n<p>\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 4, 14, 2\n\n<strong>\u8f93\u51fa:</strong> 6\n\n<strong>\u89e3\u91ca:</strong> \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09\n\u6240\u4ee5\u7b54\u6848\u4e3a\uff1a\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece&nbsp;<code>0</code>\u5230&nbsp;<code>10^9</code>\u3002</li>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>10^4</code>\u3002</li>\n</ol>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int totalHammingDistance(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def totalHammingDistance(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint totalHammingDistance(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int TotalHammingDistance(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar totalHammingDistance = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef total_hamming_distance(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func totalHammingDistance(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func totalHammingDistance(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def totalHammingDistance(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun totalHammingDistance(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn total_hamming_distance(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function totalHammingDistance($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function totalHammingDistance(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0915", "frontend_question_id": "0478", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/generate-random-point-in-a-circle", "url_en": "https://leetcode.com/problems/generate-random-point-in-a-circle", "relative_path_cn": "/leetcode/0400-0499/0478.Generate%20Random%20Point%20in%20a%20Circle/README.md", "relative_path_en": "/leetcode/0400-0499/0478.Generate%20Random%20Point%20in%20a%20Circle/README_EN.md", "title_cn": "\u5728\u5706\u5185\u968f\u673a\u751f\u6210\u70b9", "title_en": "Generate Random Point in a Circle", "question_title_slug": "generate-random-point-in-a-circle", "content_en": "<p>Given the radius and x-y positions of the center of a circle, write a function <code>randPoint</code>&nbsp;which&nbsp;generates a uniform random&nbsp;point in the circle.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li>input and output values are&nbsp;in&nbsp;<a href=\"https://www.webopedia.com/TERM/F/floating_point_number.html\" target=\"_blank\">floating-point</a>.</li>\r\n\t<li>radius and x-y position of the center of the circle is passed into the class constructor.</li>\r\n\t<li>a point on the circumference of the circle is considered to be&nbsp;in the circle.</li>\r\n\t<li><code>randPoint</code>&nbsp;returns&nbsp;a size 2 array containing x-position and y-position of the random point, in that order.</li>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\r\n</span><span id=\"example-input-1-2\">[[1,0,0],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\r\n</span><span id=\"example-input-2-2\">[[10,5,-7.5],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has three arguments, the radius, x-position of the center, and y-position of the center of the circle. <code>randPoint</code> has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u5706\u7684\u534a\u5f84\u548c\u5706\u5fc3\u7684 x\u3001y \u5750\u6807\uff0c\u5199\u4e00\u4e2a\u5728\u5706\u4e2d\u4ea7\u751f\u5747\u5300\u968f\u673a\u70b9\u7684\u51fd\u6570&nbsp;<code>randPoint</code>&nbsp;\u3002</p>\n\n<p>\u8bf4\u660e:</p>\n\n<ol>\n\t<li>\u8f93\u5165\u503c\u548c\u8f93\u51fa\u503c\u90fd\u5c06\u662f<a href=\"https://baike.baidu.com/item/%E6%B5%AE%E7%82%B9%E6%95%B0/6162520\">\u6d6e\u70b9\u6570</a>\u3002</li>\n\t<li>\u5706\u7684\u534a\u5f84\u548c\u5706\u5fc3\u7684 x\u3001y \u5750\u6807\u5c06\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002</li>\n\t<li>\u5706\u5468\u4e0a\u7684\u70b9\u4e5f\u8ba4\u4e3a\u662f\u5728\u5706\u4e2d\u3002</li>\n\t<li><code>randPoint</code>&nbsp;\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u968f\u673a\u70b9\u7684x\u5750\u6807\u548cy\u5750\u6807\u7684\u5927\u5c0f\u4e3a2\u7684\u6570\u7ec4\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[1,0,0],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[10,5,-7.5],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u6210\u5458\u51fd\u6570\u540d\u548c\u8c03\u7528\u7684\u53c2\u6570\u3002<code>Solution</code>&nbsp;\u7684\u6784\u9020\u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5706\u7684\u534a\u5f84\u3001\u5706\u5fc3\u7684 x \u5750\u6807\u3001\u5706\u5fc3\u7684 y \u5750\u6807\u3002<code>randPoint</code>&nbsp;\u6ca1\u6709\u53c2\u6570\u3002\u8f93\u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u53c2\u6570\u4e3a\u7a7a\uff0c\u4e5f\u4f1a\u8f93\u5165\u4e00\u4e2a [] \u7a7a\u5217\u8868\u3002</p>\n", "tags_en": ["Math", "Random", "Rejection Sampling"], "tags_cn": ["\u6570\u5b66", null, null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(double radius, double x_center, double y_center) {\n\n    }\n    \n    vector<double> randPoint() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(radius, x_center, y_center);\n * vector<double> param_1 = obj->randPoint();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(double radius, double x_center, double y_center) {\n\n    }\n    \n    public double[] randPoint() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(radius, x_center, y_center);\n * double[] param_1 = obj.randPoint();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, radius, x_center, y_center):\n        \"\"\"\n        :type radius: float\n        :type x_center: float\n        :type y_center: float\n        \"\"\"\n        \n\n    def randPoint(self):\n        \"\"\"\n        :rtype: List[float]\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(radius, x_center, y_center)\n# param_1 = obj.randPoint()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        \n\n    def randPoint(self) -> List[float]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(radius, x_center, y_center)\n# param_1 = obj.randPoint()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(double radius, double x_center, double y_center) {\n    \n}\n\ndouble* solutionRandPoint(Solution* obj, int* retSize) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(radius, x_center, y_center);\n * double* param_1 = solutionRandPoint(obj, retSize);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(double radius, double x_center, double y_center) {\n\n    }\n    \n    public double[] RandPoint() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(radius, x_center, y_center);\n * double[] param_1 = obj.RandPoint();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} radius\n * @param {number} x_center\n * @param {number} y_center\n */\nvar Solution = function(radius, x_center, y_center) {\n\n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.randPoint = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type radius: Float\n    :type x_center: Float\n    :type y_center: Float\n=end\n    def initialize(radius, x_center, y_center)\n\n    end\n\n\n=begin\n    :rtype: Float[]\n=end\n    def rand_point()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(radius, x_center, y_center)\n# param_1 = obj.rand_point()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ radius: Double, _ x_center: Double, _ y_center: Double) {\n        \n    }\n    \n    func randPoint() -> [Double] {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(radius, x_center, y_center)\n * let ret_1: [Double] = obj.randPoint()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(radius float64, x_center float64, y_center float64) Solution {\n\n}\n\n\nfunc (this *Solution) RandPoint() []float64 {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(radius, x_center, y_center);\n * param_1 := obj.RandPoint();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_radius: Double, _x_center: Double, _y_center: Double) {\n\n    def randPoint(): Array[Double] = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(radius: Double, x_center: Double, y_center: Double) {\n\n    fun randPoint(): DoubleArray {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(radius: f64, x_center: f64, y_center: f64) -> Self {\n        \n    }\n    \n    fn rand_point(&self) -> Vec<f64> {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(radius, x_center, y_center);\n * let ret_1: Vec<f64> = obj.rand_point();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Float $radius\n     * @param Float $x_center\n     * @param Float $y_center\n     */\n    function __construct($radius, $x_center, $y_center) {\n        \n    }\n  \n    /**\n     * @return Float[]\n     */\n    function randPoint() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($radius, $x_center, $y_center);\n * $ret_1 = $obj->randPoint();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(radius: number, x_center: number, y_center: number) {\n\n    }\n\n    randPoint(): number[] {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0479", "frontend_question_id": "0479", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-palindrome-product", "url_en": "https://leetcode.com/problems/largest-palindrome-product", "relative_path_cn": "/leetcode/0400-0499/0479.Largest%20Palindrome%20Product/README.md", "relative_path_en": "/leetcode/0400-0499/0479.Largest%20Palindrome%20Product/README_EN.md", "title_cn": "\u6700\u5927\u56de\u6587\u6570\u4e58\u79ef", "title_en": "Largest Palindrome Product", "question_title_slug": "largest-palindrome-product", "content_en": "<p>Find the largest palindrome made from the product of two n-digit numbers.</p>\r\n\r\n<p>Since the result could be very large, you should return the largest palindrome mod 1337.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<p>Input: 2</p>\r\n\r\n<p>Output: 987</p>\r\n\r\n<p>Explanation: 99 x 91 = 9009, 9009 % 1337 = 987</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>The range of n is [1,8].</p>\r\n", "content_cn": "<p>\u4f60\u9700\u8981\u627e\u5230\u7531\u4e24\u4e2a n \u4f4d\u6570\u7684\u4e58\u79ef\u7ec4\u6210\u7684\u6700\u5927\u56de\u6587\u6570\u3002</p>\n\n<p>\u7531\u4e8e\u7ed3\u679c\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8fd4\u56de\u6700\u5927\u56de\u6587\u6570 mod 1337\u5f97\u5230\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u8f93\u5165: 2</p>\n\n<p>\u8f93\u51fa: 987</p>\n\n<p>\u89e3\u91ca: 99 x 91 = 9009, 9009 % 1337 = 987</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>n \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;[1,8]\u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestPalindrome(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int largestPalindrome(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint largestPalindrome(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LargestPalindrome(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar largestPalindrome = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef largest_palindrome(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestPalindrome(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestPalindrome(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestPalindrome(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestPalindrome(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_palindrome(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function largestPalindrome($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestPalindrome(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0480", "frontend_question_id": "0480", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sliding-window-median", "url_en": "https://leetcode.com/problems/sliding-window-median", "relative_path_cn": "/leetcode/0400-0499/0480.Sliding%20Window%20Median/README.md", "relative_path_en": "/leetcode/0400-0499/0480.Sliding%20Window%20Median/README_EN.md", "title_cn": "\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570", "title_en": "Sliding Window Median", "question_title_slug": "sliding-window-median", "content_en": "<p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\nExamples:\n\n<p><code>[2,3,4]</code> , the median is <code>3</code></p>\n\n<p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code></p>\n\n<p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.</p>\n\n<p>For example,<br />\nGiven <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p>\n\n<pre>\nWindow position                Median\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n<p>Therefore, return the median sliding window as <code>[1,-1,-1,3,5,6]</code>.</p>\n\n<p><b>Note: </b><br />\nYou may assume <code>k</code> is always valid, ie: <code>k</code> is always smaller than input array&#39;s size for non-empty array.<br />\nAnswers within&nbsp;<code>10^-5</code>&nbsp;of the actual value will be accepted as correct.</p>\n", "content_cn": "<p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5e8f\u5217\u6700\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\u3002\u5982\u679c\u5e8f\u5217\u7684\u5927\u5c0f\u662f\u5076\u6570\uff0c\u5219\u6ca1\u6709\u6700\u4e2d\u95f4\u7684\u6570\uff1b\u6b64\u65f6\u4e2d\u4f4d\u6570\u662f\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u6570\u3002</p>\n\n<p>\u4f8b\u5982\uff1a</p>\n\n<ul>\n\t<li><code>[2,3,4]</code>\uff0c\u4e2d\u4f4d\u6570\u662f&nbsp;<code>3</code></li>\n\t<li><code>[2,3]</code>\uff0c\u4e2d\u4f4d\u6570\u662f <code>(2 + 3) / 2 = 2.5</code></li>\n</ul>\n\n<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <em>nums</em>\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a <em>k</em> \u7684\u7a97\u53e3\u4ece\u6700\u5de6\u7aef\u6ed1\u52a8\u5230\u6700\u53f3\u7aef\u3002\u7a97\u53e3\u4e2d\u6709 <em>k</em> \u4e2a\u6570\uff0c\u6bcf\u6b21\u7a97\u53e3\u5411\u53f3\u79fb\u52a8 <em>1</em> \u4f4d\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u6bcf\u6b21\u7a97\u53e3\u79fb\u52a8\u540e\u5f97\u5230\u7684\u65b0\u7a97\u53e3\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u8f93\u51fa\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u7ed9\u51fa&nbsp;<em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>\uff0c\u4ee5\u53ca&nbsp;<em>k</em> = 3\u3002</p>\n\n<pre>\u7a97\u53e3\u4f4d\u7f6e                      \u4e2d\u4f4d\u6570\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7      -1\n 1  3 [-1  -3  5] 3  6  7      -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n<p>&nbsp;\u56e0\u6b64\uff0c\u8fd4\u56de\u8be5\u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\u6570\u7ec4&nbsp;<code>[1,-1,-1,3,5,6]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>k</code>&nbsp;\u59cb\u7ec8\u6709\u6548\uff0c\u5373\uff1a<code>k</code> \u59cb\u7ec8\u5c0f\u4e8e\u8f93\u5165\u7684\u975e\u7a7a\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002</li>\n\t<li>\u4e0e\u771f\u5b9e\u503c\u8bef\u5dee\u5728 <code>10 ^ -5</code> \u4ee5\u5185\u7684\u7b54\u6848\u5c06\u88ab\u89c6\u4f5c\u6b63\u786e\u7b54\u6848\u3002</li>\n</ul>\n", "tags_en": ["Sliding Window"], "tags_cn": [null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<double> medianSlidingWindow(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double[] medianSlidingWindow(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* medianSlidingWindow(int* nums, int numsSize, int k, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double[] MedianSlidingWindow(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar medianSlidingWindow = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float[]}\ndef median_sliding_window(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func medianSlidingWindow(_ nums: [Int], _ k: Int) -> [Double] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func medianSlidingWindow(nums []int, k int) []float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def medianSlidingWindow(nums: Array[Int], k: Int): Array[Double] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun medianSlidingWindow(nums: IntArray, k: Int): DoubleArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn median_sliding_window(nums: Vec<i32>, k: i32) -> Vec<f64> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float[]\n     */\n    function medianSlidingWindow($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function medianSlidingWindow(nums: number[], k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0481", "frontend_question_id": "0481", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/magical-string", "url_en": "https://leetcode.com/problems/magical-string", "relative_path_cn": "/leetcode/0400-0499/0481.Magical%20String/README.md", "relative_path_en": "/leetcode/0400-0499/0481.Magical%20String/README_EN.md", "title_cn": "\u795e\u5947\u5b57\u7b26\u4e32", "title_en": "Magical String", "question_title_slug": "magical-string", "content_en": "<p>\r\nA magical string <b>S</b> consists of only '1' and '2' and obeys the following rules:\r\n</p>\r\n<p>\r\nThe string <b>S</b> is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string <b>S</b> itself.\r\n</p>\r\n\r\n<p>\r\nThe first few elements of string <b>S</b> is the following:\r\n<b>S</b> = \"1221121221221121122\u2026\u2026\"\r\n</p>\r\n\r\n<p>\r\nIf we group the consecutive '1's and '2's in <b>S</b>, it will be:\r\n</p>\r\n<p>\r\n1   22  11  2  1  22  1  22  11  2  11  22 ......\r\n</p>\r\n<p>\r\nand the occurrences of '1's or '2's in each group are:\r\n</p>\r\n<p>\r\n1   2\t   2    1   1    2     1    2     2    1    2    2 ......\r\n</p>\r\n\r\n<p>\r\nYou can see that the occurrence sequence above is the <b>S</b> itself. \r\n</p>\r\n\r\n<p>\r\nGiven an integer N as input, return the number of '1's in the first N number in the magical string <b>S</b>.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nN will not exceed 100,000.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 6\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The first 6 elements of magical string S is \"12211\" and it contains three 1's, so return 3.\r\n</pre>\r\n</p>", "content_cn": "<p>\u795e\u5947\u7684\u5b57\u7b26\u4e32&nbsp;<strong>S&nbsp;</strong>\u53ea\u5305\u542b &#39;1&#39; \u548c &#39;2&#39;\uff0c\u5e76\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<p>\u5b57\u7b26\u4e32 <strong>S</strong> \u662f\u795e\u5947\u7684\uff0c\u56e0\u4e3a\u4e32\u8054\u5b57\u7b26 &#39;1&#39; \u548c &#39;2&#39; \u7684\u8fde\u7eed\u51fa\u73b0\u6b21\u6570\u4f1a\u751f\u6210\u5b57\u7b26\u4e32 <strong>S</strong> \u672c\u8eab\u3002</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<strong>S&nbsp;</strong>\u7684\u524d\u51e0\u4e2a\u5143\u7d20\u5982\u4e0b\uff1a<strong>S </strong>= &ldquo;1221121221221121122 ......&rdquo;</p>\n\n<p>\u5982\u679c\u6211\u4eec\u5c06&nbsp;<strong>S</strong> \u4e2d\u8fde\u7eed\u7684 1 \u548c 2 \u8fdb\u884c\u5206\u7ec4\uff0c\u5b83\u5c06\u53d8\u6210\uff1a</p>\n\n<p>1 22 11 2 1 22 1 22 11 2 11 22 ......</p>\n\n<p>\u5e76\u4e14\u6bcf\u4e2a\u7ec4\u4e2d &#39;1&#39; \u6216 &#39;2&#39; \u7684\u51fa\u73b0\u6b21\u6570\u5206\u522b\u662f\uff1a</p>\n\n<p>1 2 2 1 1 2 1 2 2 1 2 2 ......</p>\n\n<p>\u4f60\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u51fa\u73b0\u6b21\u6570\u5c31\u662f <strong>S</strong> \u672c\u8eab\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 N \u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u795e\u5947\u5b57\u7b26\u4e32 <strong>S&nbsp;</strong>\u4e2d\u524d N \u4e2a\u6570\u5b57\u4e2d\u7684 &#39;1&#39; \u7684\u6570\u76ee\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>N \u4e0d\u4f1a\u8d85\u8fc7 100,000\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>6\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u795e\u5947\u5b57\u7b26\u4e32 S \u7684\u524d 6 \u4e2a\u5143\u7d20\u662f &ldquo;12211&rdquo;\uff0c\u5b83\u5305\u542b\u4e09\u4e2a 1\uff0c\u56e0\u6b64\u8fd4\u56de 3\u3002\n</pre>\n\n<p>&nbsp;</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int magicalString(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int magicalString(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def magicalString(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def magicalString(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint magicalString(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MagicalString(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar magicalString = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef magical_string(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func magicalString(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func magicalString(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def magicalString(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun magicalString(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn magical_string(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function magicalString($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function magicalString(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0482", "frontend_question_id": "0482", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/license-key-formatting", "url_en": "https://leetcode.com/problems/license-key-formatting", "relative_path_cn": "/leetcode/0400-0499/0482.License%20Key%20Formatting/README.md", "relative_path_en": "/leetcode/0400-0499/0482.License%20Key%20Formatting/README_EN.md", "title_cn": "\u5bc6\u94a5\u683c\u5f0f\u5316", "title_en": "License Key Formatting", "question_title_slug": "license-key-formatting", "content_en": "<p>You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.</p>\r\n\r\n<p>Given a number K, we would want to reformat the strings such that each group contains <i>exactly</i> K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.</p>\r\n\r\n<p>Given a non-empty string S and a number K, format the string according to the rules described above.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"5F3Z-2e-9-w\", K = 4\r\n\r\n<b>Output:</b> \"5F3Z-2E9W\"\r\n\r\n<b>Explanation:</b> The string S has been split into two parts, each part has 4 characters.\r\nNote that the two extra dashes are not needed and can be removed.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"2-5g-3-J\", K = 2\r\n\r\n<b>Output:</b> \"2-5G-3J\"\r\n\r\n<b>Explanation:</b> The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\r\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\r\n<li>String S is non-empty.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u6709\u4e00\u4e2a\u5bc6\u94a5\u5b57\u7b26\u4e32 S \uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca &#39;-&#39;\uff08\u7834\u6298\u53f7\uff09\u3002\u5176\u4e2d\uff0c N \u4e2a &#39;-&#39; \u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e86 N+1 \u7ec4\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 K\uff0c\u8bf7\u4f60\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5206\u7ec4\u6070\u597d\u5305\u542b K \u4e2a\u5b57\u7b26\u3002\u7279\u522b\u5730\uff0c\u7b2c\u4e00\u4e2a\u5206\u7ec4\u5305\u542b\u7684\u5b57\u7b26\u4e2a\u6570\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e K\uff0c\u4f46\u81f3\u5c11\u8981\u5305\u542b 1 \u4e2a\u5b57\u7b26\u3002\u4e24\u4e2a\u5206\u7ec4\u4e4b\u95f4\u9700\u8981\u7528 &#39;-&#39;\uff08\u7834\u6298\u53f7\uff09\u9694\u5f00\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u7ed9\u5b9a\u975e\u7a7a\u5b57\u7b26\u4e32 S \u548c\u6570\u5b57 K\uff0c\u6309\u7167\u4e0a\u9762\u63cf\u8ff0\u7684\u89c4\u5219\u8fdb\u884c\u683c\u5f0f\u5316\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;5F3Z-2e-9-w&quot;, K = 4\n<strong>\u8f93\u51fa\uff1a</strong>&quot;5F3Z-2E9W&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u6bcf\u90e8\u5206 4 \u4e2a\u5b57\u7b26\uff1b\n&nbsp;    \u6ce8\u610f\uff0c\u4e24\u4e2a\u989d\u5916\u7684\u7834\u6298\u53f7\u9700\u8981\u5220\u6389\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;2-5g-3-J&quot;, K = 2\n<strong>\u8f93\u51fa\uff1a</strong>&quot;2-5G-3J&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86 3 \u4e2a\u90e8\u5206\uff0c\u6309\u7167\u524d\u9762\u7684\u89c4\u5219\u63cf\u8ff0\uff0c\u7b2c\u4e00\u90e8\u5206\u7684\u5b57\u7b26\u53ef\u4ee5\u5c11\u4e8e\u7ed9\u5b9a\u7684\u6570\u91cf\uff0c\u5176\u4f59\u90e8\u5206\u7686\u4e3a 2 \u4e2a\u5b57\u7b26\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>S \u7684\u957f\u5ea6\u53ef\u80fd\u5f88\u957f\uff0c\u8bf7\u6309\u9700\u5206\u914d\u5927\u5c0f\u3002K \u4e3a\u6b63\u6574\u6570\u3002</li>\n\t<li>S \u53ea\u5305\u542b\u5b57\u6bcd\u6570\u5b57\uff08a-z\uff0cA-Z\uff0c0-9\uff09\u4ee5\u53ca\u7834\u6298\u53f7&#39;-&#39;</li>\n\t<li>S \u975e\u7a7a</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string licenseKeyFormatting(string S, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String licenseKeyFormatting(String S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def licenseKeyFormatting(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def licenseKeyFormatting(self, S: str, K: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * licenseKeyFormatting(char * S, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LicenseKeyFormatting(string S, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar licenseKeyFormatting = function(S, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef license_key_formatting(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func licenseKeyFormatting(_ S: String, _ K: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func licenseKeyFormatting(S string, K int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def licenseKeyFormatting(S: String, K: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun licenseKeyFormatting(S: String, K: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn license_key_formatting(s: String, k: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param Integer $K\n     * @return String\n     */\n    function licenseKeyFormatting($S, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function licenseKeyFormatting(S: string, K: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0483", "frontend_question_id": "0483", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-good-base", "url_en": "https://leetcode.com/problems/smallest-good-base", "relative_path_cn": "/leetcode/0400-0499/0483.Smallest%20Good%20Base/README.md", "relative_path_en": "/leetcode/0400-0499/0483.Smallest%20Good%20Base/README_EN.md", "title_cn": "\u6700\u5c0f\u597d\u8fdb\u5236", "title_en": "Smallest Good Base", "question_title_slug": "smallest-good-base", "content_en": "<p>For an integer n, we call k&gt;=2 a <i><b>good base</b></i> of n, if all digits of n base k are 1.</p>\r\n\r\n<p>Now given a string representing n, you should return the smallest good base of n in string format.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;13&quot;\r\n<b>Output:</b> &quot;3&quot;\r\n<b>Explanation:</b> 13 base 3 is 111.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;4681&quot;\r\n<b>Output:</b> &quot;8&quot;\r\n<b>Explanation:</b> 4681 base 8 is 11111.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;1000000000000000000&quot;\r\n<b>Output:</b> &quot;999999999999999999&quot;\r\n<b>Explanation:</b> 1000000000000000000 base 999999999999999999 is 11.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The range of n is [3, 10^18].</li>\r\n\t<li>The string representing n is always valid and will not have leading zeros.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6574\u6570 n, \u5982\u679cn\u7684k\uff08k&gt;=2\uff09\u8fdb\u5236\u6570\u7684\u6240\u6709\u6570\u4f4d\u5168\u4e3a1\uff0c\u5219\u79f0&nbsp;k\uff08k&gt;=2\uff09\u662f n \u7684\u4e00\u4e2a<em><strong>\u597d\u8fdb\u5236</strong></em>\u3002</p>\n\n<p>\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7ed9\u51fa n, \u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de n \u7684\u6700\u5c0f\u597d\u8fdb\u5236\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;13&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;3&quot;\n<strong>\u89e3\u91ca\uff1a</strong>13 \u7684 3 \u8fdb\u5236\u662f 111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;4681&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;8&quot;\n<strong>\u89e3\u91ca\uff1a</strong>4681 \u7684 8 \u8fdb\u5236\u662f 11111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;1000000000000000000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;999999999999999999&quot;\n<strong>\u89e3\u91ca\uff1a</strong>1000000000000000000 \u7684 999999999999999999 \u8fdb\u5236\u662f 11\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>n\u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;[3, 10^18]\u3002</li>\n\t<li>\u8f93\u5165\u603b\u662f\u6709\u6548\u4e14\u6ca1\u6709\u524d\u5bfc 0\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Math", "Binary Search"], "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string smallestGoodBase(string n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String smallestGoodBase(String n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestGoodBase(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * smallestGoodBase(char * n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string SmallestGoodBase(string n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} n\n * @return {string}\n */\nvar smallestGoodBase = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} n\n# @return {String}\ndef smallest_good_base(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestGoodBase(_ n: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestGoodBase(n string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestGoodBase(n: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestGoodBase(n: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_good_base(n: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $n\n     * @return String\n     */\n    function smallestGoodBase($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestGoodBase(n: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0484", "frontend_question_id": "0484", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-permutation", "url_en": "https://leetcode.com/problems/find-permutation", "relative_path_cn": "/leetcode/0400-0499/0484.Find%20Permutation/README.md", "relative_path_en": "/leetcode/0400-0499/0484.Find%20Permutation/README_EN.md", "title_cn": "\u5bfb\u627e\u6392\u5217", "title_en": "Find Permutation", "question_title_slug": "find-permutation", "content_en": null, "content_cn": null, "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0485", "frontend_question_id": "0485", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-consecutive-ones", "url_en": "https://leetcode.com/problems/max-consecutive-ones", "relative_path_cn": "/leetcode/0400-0499/0485.Max%20Consecutive%20Ones/README.md", "relative_path_en": "/leetcode/0400-0499/0485.Max%20Consecutive%20Ones/README_EN.md", "title_cn": "\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570", "title_en": "Max Consecutive Ones", "question_title_slug": "max-consecutive-ones", "content_en": "<p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,1,0,1,1,1]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The first two digits or the last three digits are consecutive 1s.\r\n    The maximum number of consecutive 1s is 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ul>\r\n<li>The input array will only contain <code>0</code> and <code>1</code>.</li>\r\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\r\n</ul>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4\uff0c \u8ba1\u7b97\u5176\u4e2d\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,0,1,1,1]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u5f00\u5934\u7684\u4e24\u4f4d\u548c\u6700\u540e\u7684\u4e09\u4f4d\u90fd\u662f\u8fde\u7eed1\uff0c\u6240\u4ee5\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570\u662f 3.\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u53ea\u5305\u542b&nbsp;<code>0</code> \u548c<code>1</code>\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u6b63\u6574\u6570\uff0c\u4e14\u4e0d\u8d85\u8fc7 10,000\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxConsecutiveOnes(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMaxConsecutiveOnes(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxConsecutiveOnes(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxConsecutiveOnes = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_consecutive_ones(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaxConsecutiveOnes(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaxConsecutiveOnes(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaxConsecutiveOnes(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaxConsecutiveOnes(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_consecutive_ones(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxConsecutiveOnes($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaxConsecutiveOnes(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0486", "frontend_question_id": "0486", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/predict-the-winner", "url_en": "https://leetcode.com/problems/predict-the-winner", "relative_path_cn": "/leetcode/0400-0499/0486.Predict%20the%20Winner/README.md", "relative_path_en": "/leetcode/0400-0499/0486.Predict%20the%20Winner/README_EN.md", "title_cn": "\u9884\u6d4b\u8d62\u5bb6", "title_en": "Predict the Winner", "question_title_slug": "predict-the-winner", "content_en": "<p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.</p>\n\n<p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> [1, 5, 2]\n<b>Output:</b> False\n<b>Explanation:</b> Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return False.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> [1, 5, 233, 7]\n<b>Output:</b> True\n<b>Explanation:</b> Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>1 &lt;= length of the array &lt;= 20.</li>\n\t<li>Any scores in the given array are non-negative integers and will not exceed 10,000,000.</li>\n\t<li>If the scores of both players are equal, then player 1 is still the winner.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u3002 \u73a9\u5bb6 1 \u4ece\u6570\u7ec4\u4efb\u610f\u4e00\u7aef\u62ff\u53d6\u4e00\u4e2a\u5206\u6570\uff0c\u968f\u540e\u73a9\u5bb6 2 \u7ee7\u7eed\u4ece\u5269\u4f59\u6570\u7ec4\u4efb\u610f\u4e00\u7aef\u62ff\u53d6\u5206\u6570\uff0c\u7136\u540e\u73a9\u5bb6 1 \u62ff\uff0c&hellip;&hellip; \u3002\u6bcf\u6b21\u4e00\u4e2a\u73a9\u5bb6\u53ea\u80fd\u62ff\u53d6\u4e00\u4e2a\u5206\u6570\uff0c\u5206\u6570\u88ab\u62ff\u53d6\u4e4b\u540e\u4e0d\u518d\u53ef\u53d6\u3002\u76f4\u5230\u6ca1\u6709\u5269\u4f59\u5206\u6570\u53ef\u53d6\u65f6\u6e38\u620f\u7ed3\u675f\u3002\u6700\u7ec8\u83b7\u5f97\u5206\u6570\u603b\u548c\u6700\u591a\u7684\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u7684\u6570\u7ec4\uff0c\u9884\u6d4b\u73a9\u5bb61\u662f\u5426\u4f1a\u6210\u4e3a\u8d62\u5bb6\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u73a9\u5bb6\u7684\u73a9\u6cd5\u90fd\u4f1a\u4f7f\u4ed6\u7684\u5206\u6570\u6700\u5927\u5316\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1, 5, 2]\n<strong>\u8f93\u51fa\uff1a</strong>False\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u5f00\u59cb\uff0c\u73a9\u5bb61\u53ef\u4ee5\u4ece1\u548c2\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\n\u5982\u679c\u4ed6\u9009\u62e9 2\uff08\u6216\u8005 1 \uff09\uff0c\u90a3\u4e48\u73a9\u5bb6 2 \u53ef\u4ee5\u4ece 1\uff08\u6216\u8005 2 \uff09\u548c 5 \u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5982\u679c\u73a9\u5bb6 2 \u9009\u62e9\u4e86 5 \uff0c\u90a3\u4e48\u73a9\u5bb6 1 \u5219\u53ea\u5269\u4e0b 1\uff08\u6216\u8005 2 \uff09\u53ef\u9009\u3002\n\u6240\u4ee5\uff0c\u73a9\u5bb6 1 \u7684\u6700\u7ec8\u5206\u6570\u4e3a 1 + 2 = 3\uff0c\u800c\u73a9\u5bb6 2 \u4e3a 5 \u3002\n\u56e0\u6b64\uff0c\u73a9\u5bb6 1 \u6c38\u8fdc\u4e0d\u4f1a\u6210\u4e3a\u8d62\u5bb6\uff0c\u8fd4\u56de False \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1, 5, 233, 7]\n<strong>\u8f93\u51fa\uff1a</strong>True\n<strong>\u89e3\u91ca\uff1a</strong>\u73a9\u5bb6 1 \u4e00\u5f00\u59cb\u9009\u62e9 1 \u3002\u7136\u540e\u73a9\u5bb6 2 \u5fc5\u987b\u4ece 5 \u548c 7 \u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u65e0\u8bba\u73a9\u5bb6 2 \u9009\u62e9\u4e86\u54ea\u4e2a\uff0c\u73a9\u5bb6 1 \u90fd\u53ef\u4ee5\u9009\u62e9 233 \u3002\n     \u6700\u7ec8\uff0c\u73a9\u5bb6 1\uff08234 \u5206\uff09\u6bd4\u73a9\u5bb6 2\uff0812 \u5206\uff09\u83b7\u5f97\u66f4\u591a\u7684\u5206\u6570\uff0c\u6240\u4ee5\u8fd4\u56de True\uff0c\u8868\u793a\u73a9\u5bb6 1 \u53ef\u4ee5\u6210\u4e3a\u8d62\u5bb6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>1 &lt;= \u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6&nbsp;&lt;= 20.</li>\n\t<li>\u6570\u7ec4\u91cc\u6240\u6709\u5206\u6570\u90fd\u4e3a\u975e\u8d1f\u6570\u4e14\u4e0d\u4f1a\u5927\u4e8e 10000000 \u3002</li>\n\t<li>\u5982\u679c\u6700\u7ec8\u4e24\u4e2a\u73a9\u5bb6\u7684\u5206\u6570\u76f8\u7b49\uff0c\u90a3\u4e48\u73a9\u5bb6 1 \u4ecd\u4e3a\u8d62\u5bb6\u3002</li>\n</ul>\n", "tags_en": ["Minimax", "Dynamic Programming"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool PredictTheWinner(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean PredictTheWinner(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def PredictTheWinner(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool PredictTheWinner(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool PredictTheWinner(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar PredictTheWinner = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef predict_the_winner(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func PredictTheWinner(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func PredictTheWinner(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def PredictTheWinner(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun PredictTheWinner(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn predict_the_winner(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function PredictTheWinner($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function PredictTheWinner(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0487", "frontend_question_id": "0487", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/max-consecutive-ones-ii", "url_en": "https://leetcode.com/problems/max-consecutive-ones-ii", "relative_path_cn": "/leetcode/0400-0499/0487.Max%20Consecutive%20Ones%20II/README.md", "relative_path_en": "/leetcode/0400-0499/0487.Max%20Consecutive%20Ones%20II/README_EN.md", "title_cn": "\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 II", "title_en": "Max Consecutive Ones II", "question_title_slug": "max-consecutive-ones-ii", "content_en": null, "content_cn": null, "tags_en": ["Two Pointers"], "tags_cn": ["\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0488", "frontend_question_id": "0488", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/zuma-game", "url_en": "https://leetcode.com/problems/zuma-game", "relative_path_cn": "/leetcode/0400-0499/0488.Zuma%20Game/README.md", "relative_path_en": "/leetcode/0400-0499/0488.Zuma%20Game/README_EN.md", "title_cn": "\u7956\u739b\u6e38\u620f", "title_en": "Zuma Game", "question_title_slug": "zuma-game", "content_en": "<p>Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.</p>\n\n<p>Each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.</p>\n\n<p>Find the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WRRBBW&quot;, hand = &quot;RB&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WWRRBBWW&quot;, hand = &quot;WRBRW&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;G&quot;, hand = &quot;GGGGG&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;RBYYBBRRB&quot;, hand = &quot;YRBGB&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>You may assume that the initial row of balls on the table won&rsquo;t have any 3 or more consecutive balls with the same color.</li>\n\t<li><code>1 &lt;= board.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= hand.length &lt;= 5</code></li>\n\t<li>Both input strings will be non-empty and only contain characters &#39;R&#39;,&#39;Y&#39;,&#39;B&#39;,&#39;G&#39;,&#39;W&#39;.</li>\n</ul>\n", "content_cn": "<p>\u56de\u5fc6\u4e00\u4e0b\u7956\u739b\u6e38\u620f\u3002\u73b0\u5728\u684c\u4e0a\u6709\u4e00\u4e32\u7403\uff0c\u989c\u8272\u6709\u7ea2\u8272(R)\uff0c\u9ec4\u8272(Y)\uff0c\u84dd\u8272(B)\uff0c\u7eff\u8272(G)\uff0c\u8fd8\u6709\u767d\u8272(W)\u3002 \u73b0\u5728\u4f60\u624b\u91cc\u4e5f\u6709\u51e0\u4e2a\u7403\u3002</p>\n\n<p>\u6bcf\u4e00\u6b21\uff0c\u4f60\u53ef\u4ee5\u4ece\u624b\u91cc\u7684\u7403\u9009\u4e00\u4e2a\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7403\u63d2\u5165\u5230\u4e00\u4e32\u7403\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\uff08\u5305\u62ec\u6700\u5de6\u7aef\uff0c\u6700\u53f3\u7aef\uff09\u3002\u63a5\u7740\uff0c\u5982\u679c\u6709\u51fa\u73b0\u4e09\u4e2a\u6216\u8005\u4e09\u4e2a\u4ee5\u4e0a\u989c\u8272\u76f8\u540c\u7684\u7403\u76f8\u8fde\u7684\u8bdd\uff0c\u5c31\u628a\u5b83\u4eec\u79fb\u9664\u6389\u3002\u91cd\u590d\u8fd9\u4e00\u6b65\u9aa4\u76f4\u5230\u684c\u4e0a\u6240\u6709\u7684\u7403\u90fd\u88ab\u79fb\u9664\u3002</p>\n\n<p>\u627e\u5230\u63d2\u5165\u5e76\u53ef\u4ee5\u79fb\u9664\u6389\u684c\u4e0a\u6240\u6709\u7403\u6240\u9700\u7684\u6700\u5c11\u7684\u7403\u6570\u3002\u5982\u679c\u4e0d\u80fd\u79fb\u9664\u684c\u4e0a\u6240\u6709\u7684\u7403\uff0c\u8f93\u51fa -1 \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = \"WRRBBW\", hand = \"RB\"\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = \"WWRRBBWW\", hand = \"WRBRW\"\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = \"G\", hand = \"GGGGG\"\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>G -> G[G] -> GG[G] -> empty \n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = \"RBYYBBRRB\", hand = \"YRBGB\"\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty \n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u684c\u4e0a\u4e00\u5f00\u59cb\u7684\u7403\u4e2d\uff0c\u4e0d\u4f1a\u6709\u4e09\u4e2a\u53ca\u4e09\u4e2a\u4ee5\u4e0a\u989c\u8272\u76f8\u540c\u4e14\u8fde\u7740\u7684\u7403\u3002</li>\n\t<li><code>1 <= board.length <= 16</code></li>\n\t<li><code>1 <= hand.length <= 5</code></li>\n\t<li>\u8f93\u5165\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u4e14\u53ea\u5305\u542b\u5b57\u7b26 'R','Y','B','G','W'\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMinStep(string board, string hand) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMinStep(String board, String hand) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMinStep(self, board, hand):\n        \"\"\"\n        :type board: str\n        :type hand: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMinStep(char * board, char * hand){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMinStep(string board, string hand) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} board\n * @param {string} hand\n * @return {number}\n */\nvar findMinStep = function(board, hand) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} board\n# @param {String} hand\n# @return {Integer}\ndef find_min_step(board, hand)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMinStep(_ board: String, _ hand: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMinStep(board string, hand string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMinStep(board: String, hand: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMinStep(board: String, hand: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_min_step(board: String, hand: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $board\n     * @param String $hand\n     * @return Integer\n     */\n    function findMinStep($board, $hand) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMinStep(board: string, hand: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0865", "frontend_question_id": "0489", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/robot-room-cleaner", "url_en": "https://leetcode.com/problems/robot-room-cleaner", "relative_path_cn": "/leetcode/0400-0499/0489.Robot%20Room%20Cleaner/README.md", "relative_path_en": "/leetcode/0400-0499/0489.Robot%20Room%20Cleaner/README_EN.md", "title_cn": "\u626b\u5730\u673a\u5668\u4eba", "title_en": "Robot Room Cleaner", "question_title_slug": "robot-room-cleaner", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0490", "frontend_question_id": "0490", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/the-maze", "url_en": "https://leetcode.com/problems/the-maze", "relative_path_cn": "/leetcode/0400-0499/0490.The%20Maze/README.md", "relative_path_en": "/leetcode/0400-0499/0490.The%20Maze/README_EN.md", "title_cn": "\u8ff7\u5bab", "title_en": "The Maze", "question_title_slug": "the-maze", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0491", "frontend_question_id": "0491", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/increasing-subsequences", "url_en": "https://leetcode.com/problems/increasing-subsequences", "relative_path_cn": "/leetcode/0400-0499/0491.Increasing%20Subsequences/README.md", "relative_path_en": "/leetcode/0400-0499/0491.Increasing%20Subsequences/README_EN.md", "title_cn": "\u9012\u589e\u5b50\u5e8f\u5217", "title_en": "Increasing Subsequences", "question_title_slug": "increasing-subsequences", "content_en": "<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example:</b></p>\n\n<pre>\n<b>Input:</b> [4, 6, 7, 7]\n<b>Output:</b> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The length of the given array will not exceed 15.</li>\n\t<li>The range of integer in the given array is [-100,100].</li>\n\t<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u6570\u7ec4, \u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u6240\u6709\u8be5\u6570\u7ec4\u7684\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u81f3\u5c11\u662f2\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [4, 6, 7, 7]\n<strong>\u8f93\u51fa:</strong> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc715\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u8303\u56f4\u662f&nbsp;[-100,100]\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u76f8\u7b49\u7684\u6570\u5b57\u5e94\u8be5\u88ab\u89c6\u4e3a\u9012\u589e\u7684\u4e00\u79cd\u60c5\u51b5\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findSubsequences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** findSubsequences(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> FindSubsequences(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef find_subsequences(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findSubsequences(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findSubsequences(nums []int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findSubsequences(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findSubsequences(nums: IntArray): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_subsequences(nums: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function findSubsequences($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findSubsequences(nums: number[]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0492", "frontend_question_id": "0492", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/construct-the-rectangle", "url_en": "https://leetcode.com/problems/construct-the-rectangle", "relative_path_cn": "/leetcode/0400-0499/0492.Construct%20the%20Rectangle/README.md", "relative_path_en": "/leetcode/0400-0499/0492.Construct%20the%20Rectangle/README_EN.md", "title_cn": "\u6784\u9020\u77e9\u5f62", "title_en": "Construct the Rectangle", "question_title_slug": "construct-the-rectangle", "content_en": "<p>A web developer needs to know how to design a web page&#39;s size. So, given a specific rectangular web page&rsquo;s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p>\n\n<ol>\n\t<li>The area of the rectangular web page you designed must equal to the given target area.</li>\n\t<li>The width <code>W</code> should not be larger than the length <code>L</code>, which means <code>L &gt;= W</code>.</li>\n\t<li>The difference between length <code>L</code> and width <code>W</code> should be as small as possible.</li>\n</ol>\n\n<p>Return <em>an array <code>[L, W]</code> where <code>L</code> and <code>W</code> are the length and width of the&nbsp;web page you designed in sequence.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 4\n<strong>Output:</strong> [2,2]\n<strong>Explanation:</strong> The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 37\n<strong>Output:</strong> [37,1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 122122\n<strong>Output:</strong> [427,286]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= area &lt;= 10<sup>7</sup></code></li>\n</ul>\n", "content_cn": "<p>\u4f5c\u4e3a\u4e00\u4f4dweb\u5f00\u53d1\u8005\uff0c \u61c2\u5f97\u600e\u6837\u53bb\u89c4\u5212\u4e00\u4e2a\u9875\u9762\u7684\u5c3a\u5bf8\u662f\u5f88\u91cd\u8981\u7684\u3002 \u73b0\u7ed9\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u77e9\u5f62\u9875\u9762\u9762\u79ef\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\u4e2a\u957f\u5ea6\u4e3a L \u548c\u5bbd\u5ea6\u4e3a W \u4e14\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\u7684\u77e9\u5f62\u7684\u9875\u9762\u3002\u8981\u6c42\uff1a</p>\n\n<pre>\n1. \u4f60\u8bbe\u8ba1\u7684\u77e9\u5f62\u9875\u9762\u5fc5\u987b\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u9762\u79ef\u3002\n\n2. \u5bbd\u5ea6 W \u4e0d\u5e94\u5927\u4e8e\u957f\u5ea6 L\uff0c\u6362\u8a00\u4e4b\uff0c\u8981\u6c42 L &gt;= W \u3002\n\n3. \u957f\u5ea6 L \u548c\u5bbd\u5ea6 W \u4e4b\u95f4\u7684\u5dee\u8ddd\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c0f\u3002\n</pre>\n\n<p>\u4f60\u9700\u8981\u6309\u987a\u5e8f\u8f93\u51fa\u4f60\u8bbe\u8ba1\u7684\u9875\u9762\u7684\u957f\u5ea6 L \u548c\u5bbd\u5ea6 W\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> [2, 2]\n<strong>\u89e3\u91ca:</strong> \u76ee\u6807\u9762\u79ef\u662f 4\uff0c \u6240\u6709\u53ef\u80fd\u7684\u6784\u9020\u65b9\u6848\u6709 [1,4], [2,2], [4,1]\u3002\n\u4f46\u662f\u6839\u636e\u8981\u6c422\uff0c[1,4] \u4e0d\u7b26\u5408\u8981\u6c42; \u6839\u636e\u8981\u6c423\uff0c[2,2] \u6bd4 [4,1] \u66f4\u80fd\u7b26\u5408\u8981\u6c42. \u6240\u4ee5\u8f93\u51fa\u957f\u5ea6 L \u4e3a 2\uff0c \u5bbd\u5ea6 W \u4e3a 2\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u9762\u79ef\u4e0d\u5927\u4e8e 10,000,000 \u4e14\u4e3a\u6b63\u6574\u6570\u3002</li>\n\t<li>\u4f60\u8bbe\u8ba1\u7684\u9875\u9762\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u5fc5\u987b\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> constructRectangle(int area) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] constructRectangle(int area) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def constructRectangle(self, area: int) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* constructRectangle(int area, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ConstructRectangle(int area) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} area\n * @return {number[]}\n */\nvar constructRectangle = function(area) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} area\n# @return {Integer[]}\ndef construct_rectangle(area)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func constructRectangle(_ area: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func constructRectangle(area int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def constructRectangle(area: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun constructRectangle(area: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn construct_rectangle(area: i32) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $area\n     * @return Integer[]\n     */\n    function constructRectangle($area) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function constructRectangle(area: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0493", "frontend_question_id": "0493", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-pairs", "url_en": "https://leetcode.com/problems/reverse-pairs", "relative_path_cn": "/leetcode/0400-0499/0493.Reverse%20Pairs/README.md", "relative_path_en": "/leetcode/0400-0499/0493.Reverse%20Pairs/README_EN.md", "title_cn": "\u7ffb\u8f6c\u5bf9", "title_en": "Reverse Pairs", "question_title_slug": "reverse-pairs", "content_en": "<p>Given an array <code>nums</code>, we call <code>(i, j)</code> an <b><i>important reverse pair</i></b> if <code>i &lt; j</code> and <code>nums[i] &gt; 2*nums[j]</code>.</p>\r\n\r\n<p>You need to return the number of important reverse pairs in the given array.</p>\r\n\r\n<p><b>Example1:</b>\r\n<pre>\r\n<b>Input</b>: [1,3,2,3,1]\r\n<b>Output</b>: 2\r\n</pre></p>\r\n\r\n<p><b>Example2:</b>\r\n<pre>\r\n<b>Input</b>: [2,4,3,5,1]\r\n<b>Output</b>: 3\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array will not exceed <code>50,000</code>.</li>\r\n<li>All the numbers in the input array are in the range of 32-bit integer.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\uff0c\u5982\u679c&nbsp;<code>i &lt; j</code>&nbsp;\u4e14&nbsp;<code>nums[i] &gt; 2*nums[j]</code>&nbsp;\u6211\u4eec\u5c31\u5c06&nbsp;<code>(i, j)</code>&nbsp;\u79f0\u4f5c\u4e00\u4e2a<strong><em>\u91cd\u8981\u7ffb\u8f6c\u5bf9</em></strong>\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8fd4\u56de\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u91cd\u8981\u7ffb\u8f6c\u5bf9\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>: [1,3,2,3,1]\n<strong>\u8f93\u51fa</strong>: 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>: [2,4,3,5,1]\n<strong>\u8f93\u51fa</strong>: 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7<code>50000</code>\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u572832\u4f4d\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5185\u3002</li>\n</ol>\n", "tags_en": ["Sort", "Binary Indexed Tree", "Segment Tree", "Binary Search", "Divide and Conquer"], "tags_cn": ["\u6392\u5e8f", "\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811", "\u4e8c\u5206\u67e5\u627e", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int reversePairs(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int reversePairs(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint reversePairs(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ReversePairs(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef reverse_pairs(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reversePairs(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reversePairs(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reversePairs(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reversePairs(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function reversePairs($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reversePairs(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0494", "frontend_question_id": "0494", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/target-sum", "url_en": "https://leetcode.com/problems/target-sum", "relative_path_cn": "/leetcode/0400-0499/0494.Target%20Sum/README.md", "relative_path_en": "/leetcode/0400-0499/0494.Target%20Sum/README_EN.md", "title_cn": "\u76ee\u6807\u548c", "title_en": "Target Sum", "question_title_slug": "target-sum", "content_en": "<p>You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.</p>\n\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> nums is [1, 1, 1, 1, 1], S is 3. \n<b>Output:</b> 5\n<b>Explanation:</b> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The length of the given array is positive and will not exceed 20.</li>\n\t<li>The sum of elements in the given array will not exceed 1000.</li>\n\t<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0ca1, a2, ..., an, \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0cS\u3002\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u7b26\u53f7&nbsp;<code>+</code>&nbsp;\u548c&nbsp;<code>-</code>\u3002\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u4ece&nbsp;<code>+</code>&nbsp;\u6216&nbsp;<code>-</code>\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b26\u53f7\u6dfb\u52a0\u5728\u524d\u9762\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u4f7f\u6700\u7ec8\u6570\u7ec4\u548c\u4e3a\u76ee\u6807\u6570 S \u7684\u6240\u6709\u6dfb\u52a0\u7b26\u53f7\u7684\u65b9\u6cd5\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums: [1, 1, 1, 1, 1], S: 3\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n\u4e00\u5171\u67095\u79cd\u65b9\u6cd5\u8ba9\u6700\u7ec8\u76ee\u6807\u548c\u4e3a3\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6570\u7ec4\u975e\u7a7a\uff0c\u4e14\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 20 \u3002</li>\n\t<li>\u521d\u59cb\u7684\u6570\u7ec4\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc7 1000 \u3002</li>\n\t<li>\u4fdd\u8bc1\u8fd4\u56de\u7684\u6700\u7ec8\u7ed3\u679c\u80fd\u88ab 32 \u4f4d\u6574\u6570\u5b58\u4e0b\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findTargetSumWays(int[] nums, int S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findTargetSumWays(self, nums, S):\n        \"\"\"\n        :type nums: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findTargetSumWays(int* nums, int numsSize, int S){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindTargetSumWays(int[] nums, int S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function(nums, S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} s\n# @return {Integer}\ndef find_target_sum_ways(nums, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findTargetSumWays(_ nums: [Int], _ S: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findTargetSumWays(nums []int, S int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findTargetSumWays(nums: Array[Int], S: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findTargetSumWays(nums: IntArray, S: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_target_sum_ways(nums: Vec<i32>, s: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $S\n     * @return Integer\n     */\n    function findTargetSumWays($nums, $S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findTargetSumWays(nums: number[], S: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0495", "frontend_question_id": "0495", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/teemo-attacking", "url_en": "https://leetcode.com/problems/teemo-attacking", "relative_path_cn": "/leetcode/0400-0499/0495.Teemo%20Attacking/README.md", "relative_path_en": "/leetcode/0400-0499/0495.Teemo%20Attacking/README_EN.md", "title_cn": "\u63d0\u83ab\u653b\u51fb", "title_en": "Teemo Attacking", "question_title_slug": "teemo-attacking", "content_en": "<p>In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo&#39;s attacking <b>ascending</b> time series towards Ashe and the poisoning time duration per Teemo&#39;s attacking, you need to output the total time that Ashe is in poisoned condition.</p>\r\n\r\n<p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,4], 2\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nAnd at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. \r\nSo you finally need to output 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2], 2\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nHowever, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. \r\nSince the poisoned status won&#39;t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. \r\nSo you finally need to output 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You may assume the length of given time series array won&#39;t exceed 10000.</li>\r\n\t<li>You may assume the numbers in the Teemo&#39;s attacking time series and his poisoning time duration per attacking are non-negative integers, which won&#39;t exceed 10,000,000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb &ldquo;\u63d0\u83ab&rdquo; \u7684\u82f1\u96c4\uff0c\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002\u73b0\u5728\uff0c\u7ed9\u51fa\u63d0\u83ab\u5bf9\u827e\u5e0c\u7684\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u603b\u65f6\u957f\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u63d0\u83ab\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u653b\u51fb\uff0c\u5e76\u7acb\u5373\u4f7f\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,4], 2\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u539f\u56e0:</strong> \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002\n\u7b2c 4 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u4f7f\u5f97\u827e\u5e0c\u83b7\u5f97\u53e6\u5916 2 \u79d2\u4e2d\u6bd2\u65f6\u95f4\u3002\n\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 4 \u79d2\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2], 2\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u539f\u56e0:</strong> \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002\n\u4f46\u662f\u7b2c 2 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u4e86\u5df2\u7ecf\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u827e\u5e0c\u3002\n\u7531\u4e8e\u4e2d\u6bd2\u72b6\u6001\u4e0d\u53ef\u53e0\u52a0\uff0c\u63d0\u83ab\u5728\u7b2c 2 \u79d2\u521d\u7684\u8fd9\u6b21\u653b\u51fb\u4f1a\u5728\u7b2c 3 \u79d2\u672b\u7ed3\u675f\u3002\n\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 3 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u65f6\u95f4\u5e8f\u5217\u6570\u7ec4\u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 10000\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u63d0\u83ab\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 10,000,000\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findPoisonedDuration(self, timeSeries, duration):\n        \"\"\"\n        :type timeSeries: List[int]\n        :type duration: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findPoisonedDuration(int* timeSeries, int timeSeriesSize, int duration){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} time_series\n# @param {Integer} duration\n# @return {Integer}\ndef find_poisoned_duration(time_series, duration)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findPoisonedDuration(_ timeSeries: [Int], _ duration: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findPoisonedDuration(timeSeries []int, duration int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findPoisonedDuration(timeSeries: Array[Int], duration: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findPoisonedDuration(timeSeries: IntArray, duration: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $timeSeries\n     * @param Integer $duration\n     * @return Integer\n     */\n    function findPoisonedDuration($timeSeries, $duration) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findPoisonedDuration(timeSeries: number[], duration: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0496", "frontend_question_id": "0496", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/next-greater-element-i", "url_en": "https://leetcode.com/problems/next-greater-element-i", "relative_path_cn": "/leetcode/0400-0499/0496.Next%20Greater%20Element%20I/README.md", "relative_path_en": "/leetcode/0400-0499/0496.Next%20Greater%20Element%20I/README_EN.md", "title_cn": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I", "title_en": "Next Greater Element I", "question_title_slug": "next-greater-element-i", "content_en": "<p>\r\nYou are given two arrays <b>(without duplicates)</b> <code>nums1</code> and <code>nums2</code> where <code>nums1</code>\u2019s elements are subset of <code>nums2</code>. Find all the next greater numbers for <code>nums1</code>'s elements in the corresponding places of <code>nums2</code>. \r\n</p>\r\n\r\n<p>\r\nThe Next Greater Number of a number <b>x</b> in <code>nums1</code> is the first greater number to its right in <code>nums2</code>. If it does not exist, output -1 for this number.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> <b>nums1</b> = [4,1,2], <b>nums2</b> = [1,3,4,2].\r\n<b>Output:</b> [-1,3,-1]\r\n<b>Explanation:</b>\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> <b>nums1</b> = [2,4], <b>nums2</b> = [1,2,3,4].\r\n<b>Output:</b> [3,-1]\r\n<b>Explanation:</b>\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>All elements in <code>nums1</code> and <code>nums2</code> are unique.</li>\r\n<li>The length of both <code>nums1</code> and <code>nums2</code> would not exceed 1000.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a<strong> \u6ca1\u6709\u91cd\u590d\u5143\u7d20</strong> \u7684\u6570\u7ec4&nbsp;<code>nums1</code> \u548c&nbsp;<code>nums2</code>&nbsp;\uff0c\u5176\u4e2d<code>nums1</code>&nbsp;\u662f&nbsp;<code>nums2</code>&nbsp;\u7684\u5b50\u96c6\u3002\u627e\u5230&nbsp;<code>nums1</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5728&nbsp;<code>nums2</code>&nbsp;\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6bd4\u5176\u5927\u7684\u503c\u3002</p>\n\n<p><code>nums1</code>&nbsp;\u4e2d\u6570\u5b57&nbsp;<strong>x</strong>&nbsp;\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u662f\u6307&nbsp;<strong>x</strong>&nbsp;\u5728&nbsp;<code>nums2</code>&nbsp;\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u6bd4&nbsp;<strong>x&nbsp;</strong>\u5927\u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u8f93\u51fa -1 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].\n<strong>\u8f93\u51fa:</strong> [-1,3,-1]\n<strong>\u89e3\u91ca:</strong>\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b574\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u627e\u5230\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1\u3002\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b571\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6570\u5b571\u53f3\u8fb9\u7684\u4e0b\u4e00\u4e2a\u8f83\u5927\u6570\u5b57\u662f 3\u3002\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b572\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].\n<strong>\u8f93\u51fa:</strong> [3,-1]\n<strong>\u89e3\u91ca:</strong>\n&nbsp;   \u5bf9\u4e8e num1 \u4e2d\u7684\u6570\u5b57 2 \uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8f83\u5927\u6570\u5b57\u662f 3 \u3002\n    \u5bf9\u4e8e num1 \u4e2d\u7684\u6570\u5b57 4 \uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>nums1</code>\u548c<code>nums2</code>\u4e2d\u6240\u6709\u5143\u7d20\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li><code>nums1</code>\u548c<code>nums2</code>&nbsp;\u7684\u6570\u7ec4\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc71000\u3002</li>\n</ol>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextGreaterElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextGreaterElement(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] NextGreaterElement(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar nextGreaterElement = function(nums1, nums2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef next_greater_element(nums1, nums2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextGreaterElement(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nextGreaterElement(nums1 []int, nums2 []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextGreaterElement(nums1: IntArray, nums2: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_greater_element(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function nextGreaterElement($nums1, $nums2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextGreaterElement(nums1: number[], nums2: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0914", "frontend_question_id": "0497", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles", "url_en": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles", "relative_path_cn": "/leetcode/0400-0499/0497.Random%20Point%20in%20Non-overlapping%20Rectangles/README.md", "relative_path_en": "/leetcode/0400-0499/0497.Random%20Point%20in%20Non-overlapping%20Rectangles/README_EN.md", "title_cn": "\u975e\u91cd\u53e0\u77e9\u5f62\u4e2d\u7684\u968f\u673a\u70b9", "title_en": "Random Point in Non-overlapping Rectangles", "question_title_slug": "random-point-in-non-overlapping-rectangles", "content_en": "<p>Given a list of <strong>non-overlapping</strong>&nbsp;axis-aligned rectangles <code>rects</code>, write a function <code>pick</code> which randomly and uniformily picks an <strong>integer point</strong> in the space&nbsp;covered by the rectangles.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li>An <strong>integer point</strong>&nbsp;is a point that has integer coordinates.&nbsp;</li>\r\n\t<li>A point&nbsp;on the perimeter&nbsp;of a rectangle is&nbsp;<strong>included</strong> in the space covered by the rectangles.&nbsp;</li>\r\n\t<li><code>i</code>th rectangle = <code>rects[i]</code> =&nbsp;<code>[x1,y1,x2,y2]</code>, where <code>[x1, y1]</code>&nbsp;are the integer coordinates of the bottom-left corner, and <code>[x2, y2]</code>&nbsp;are the integer coordinates of the top-right corner.</li>\r\n\t<li>length and width of each rectangle does not exceed <code>2000</code>.</li>\r\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\r\n\t<li><code>pick</code> return a point as an array of integer coordinates&nbsp;<code>[p_x, p_y]</code></li>\r\n\t<li><code>pick</code> is called at most <code>10000</code>&nbsp;times.</li>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-1-2\">[[[[1,1,5,5]]],[],[],[]]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-1\">[null,[4,1],[4,1],[3,3]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-2-2\">[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-2\">[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has one argument, the array of rectangles <code>rects</code>. <code>pick</code>&nbsp;has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u91cd\u53e0\u8f74\u5bf9\u9f50\u77e9\u5f62\u7684\u5217\u8868 <code>rects</code>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570 <code>pick</code> \u968f\u673a\u5747\u5300\u5730\u9009\u53d6\u77e9\u5f62\u8986\u76d6\u7684\u7a7a\u95f4\u4e2d\u7684\u6574\u6570\u70b9\u3002</p>\n\n<p>\u63d0\u793a\uff1a</p>\n\n<ol>\n\t<li><strong>\u6574\u6570\u70b9</strong>\u662f\u5177\u6709\u6574\u6570\u5750\u6807\u7684\u70b9\u3002</li>\n\t<li>\u77e9\u5f62\u5468\u8fb9\u4e0a\u7684\u70b9\u5305\u542b\u5728\u77e9\u5f62\u8986\u76d6\u7684\u7a7a\u95f4\u4e2d\u3002</li>\n\t<li>\u7b2c <code>i</code> \u4e2a\u77e9\u5f62 <code>rects [i] = [x1\uff0cy1\uff0cx2\uff0cy2]</code>\uff0c\u5176\u4e2d&nbsp;<code>[x1\uff0cy1]</code> \u662f\u5de6\u4e0b\u89d2\u7684\u6574\u6570\u5750\u6807\uff0c<code>[x2\uff0cy2]</code> \u662f\u53f3\u4e0a\u89d2\u7684\u6574\u6570\u5750\u6807\u3002</li>\n\t<li>\u6bcf\u4e2a\u77e9\u5f62\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u4e0d\u8d85\u8fc7 2000\u3002</li>\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\n\t<li><code>pick</code> \u4ee5\u6574\u6570\u5750\u6807\u6570\u7ec4&nbsp;<code>[p_x, p_y]</code>&nbsp;\u7684\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u70b9\u3002</li>\n\t<li><code>pick</code> \u6700\u591a\u88ab\u8c03\u752810000\u6b21\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[1,1,5,5]]],[],[],[]]\n<strong>\u8f93\u51fa: \n</strong>[null,[4,1],[4,1],[3,3]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\n<strong>\u8f93\u51fa: \n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u7684\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u7684\u5b50\u4f8b\u7a0b\u53ca\u5176\u53c2\u6570\u3002<code>Solution</code> \u7684\u6784\u9020\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u77e9\u5f62\u6570\u7ec4 <code>rects</code>\u3002<code>pick</code> \u6ca1\u6709\u53c2\u6570\u3002\u53c2\u6570\u603b\u662f\u7528\u5217\u8868\u5305\u88c5\u7684\uff0c\u5373\u4f7f\u6ca1\u6709\u4e5f\u662f\u5982\u6b64\u3002</p>\n\n<p>&nbsp;</p>\n", "tags_en": ["Binary Search", "Random"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(vector<vector<int>>& rects) {\n\n    }\n    \n    vector<int> pick() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(rects);\n * vector<int> param_1 = obj->pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int[][] rects) {\n\n    }\n    \n    public int[] pick() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(rects);\n * int[] param_1 = obj.pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, rects):\n        \"\"\"\n        :type rects: List[List[int]]\n        \"\"\"\n        \n\n    def pick(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(rects)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, rects: List[List[int]]):\n        \n\n    def pick(self) -> List[int]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(rects)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int** rects, int rectsSize, int* rectsColSize) {\n    \n}\n\nint* solutionPick(Solution* obj, int* retSize) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(rects, rectsSize, rectsColSize);\n * int* param_1 = solutionPick(obj, retSize);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int[][] rects) {\n\n    }\n    \n    public int[] Pick() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(rects);\n * int[] param_1 = obj.Pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} rects\n */\nvar Solution = function(rects) {\n\n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.pick = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(rects)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type rects: Integer[][]\n=end\n    def initialize(rects)\n\n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def pick()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(rects)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\r\nclass Solution {\r\n\r\n    init(_ rects: [[Int]]) {\r\n        \r\n    }\r\n    \r\n    func pick() -> [Int] {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * let obj = Solution(rects)\r\n * let ret_1: [Int] = obj.pick()\r\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(rects [][]int) Solution {\n\n}\n\n\nfunc (this *Solution) Pick() []int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(rects);\n * param_1 := obj.Pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_rects: Array[Array[Int]]) {\n\n    def pick(): Array[Int] = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(rects)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(rects: Array<IntArray>) {\n\n    fun pick(): IntArray {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(rects)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(rects: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn pick(&self) -> Vec<i32> {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(rects);\n * let ret_1: Vec<i32> = obj.pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer[][] $rects\n     */\n    function __construct($rects) {\n        \n    }\n  \n    /**\n     * @return Integer[]\n     */\n    function pick() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($rects);\n * $ret_1 = $obj->pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(rects: number[][]) {\n\n    }\n\n    pick(): number[] {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(rects)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0498", "frontend_question_id": "0498", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/diagonal-traverse", "url_en": "https://leetcode.com/problems/diagonal-traverse", "relative_path_cn": "/leetcode/0400-0499/0498.Diagonal%20Traverse/README.md", "relative_path_en": "/leetcode/0400-0499/0498.Diagonal%20Traverse/README_EN.md", "title_cn": "\u5bf9\u89d2\u7ebf\u904d\u5386", "title_en": "Diagonal Traverse", "question_title_slug": "diagonal-traverse", "content_en": "<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n\r\n<b>Output:</b>  [1,2,4,7,5,3,6,8,9]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>The total number of elements of the given matrix will not exceed 10,000.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 M x N \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08M \u884c\uff0cN \u5217\uff09\uff0c\u8bf7\u4ee5\u5bf9\u89d2\u7ebf\u904d\u5386\u7684\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e2a\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5bf9\u89d2\u7ebf\u904d\u5386\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>\u8f93\u51fa:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>\u89e3\u91ca:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7 100000 \u3002</li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findDiagonalOrder(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDiagonalOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDiagonalOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindDiagonalOrder(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar findDiagonalOrder = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef find_diagonal_order(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDiagonalOrder(_ matrix: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findDiagonalOrder(matrix [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDiagonalOrder(matrix: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDiagonalOrder(matrix: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_diagonal_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function findDiagonalOrder($matrix) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDiagonalOrder(matrix: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0499", "frontend_question_id": "0499", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/the-maze-iii", "url_en": "https://leetcode.com/problems/the-maze-iii", "relative_path_cn": "/leetcode/0400-0499/0499.The%20Maze%20III/README.md", "relative_path_en": "/leetcode/0400-0499/0499.The%20Maze%20III/README_EN.md", "title_cn": "\u8ff7\u5bab III", "title_en": "The Maze III", "question_title_slug": "the-maze-iii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}]}