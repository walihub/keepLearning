{"leetcode": [{"question_id": "0783", "frontend_question_id": "0700", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/search-in-a-binary-search-tree", "url_en": "https://leetcode.com/problems/search-in-a-binary-search-tree", "relative_path_cn": "/leetcode/0700-0799/0700.Search%20in%20a%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0700-0799/0700.Search%20in%20a%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22", "title_en": "Search in a Binary Search Tree", "question_title_slug": "search-in-a-binary-search-tree", "content_en": "<p>Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node&#39;s value equals the given value. Return the subtree rooted with that node. If such node doesn&#39;t exist, you should return NULL.</p>\r\n\r\n<p>For example,&nbsp;</p>\r\n\r\n<pre>\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\n\r\nAnd the value to search: 2\r\n</pre>\r\n\r\n<p>You should return this subtree:</p>\r\n\r\n<pre>\r\n      2     \r\n     / \\   \r\n    1   3\r\n</pre>\r\n\r\n<p>In the example above, if we want to search the value <code>5</code>, since there is no node with value <code>5</code>, we should return <code>NULL</code>.</p>\r\n\r\n<p>Note that an empty tree is represented by <code>NULL</code>, therefore you would see the expected output (serialized tree format) as&nbsp;<code>[]</code>, not <code>null</code>.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u503c\u3002 \u4f60\u9700\u8981\u5728BST\u4e2d\u627e\u5230\u8282\u70b9\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u8282\u70b9\u3002 \u8fd4\u56de\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002 \u5982\u679c\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de NULL\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<pre>\n\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n\u548c\u503c: 2\n</pre>\n\n<p>\u4f60\u5e94\u8be5\u8fd4\u56de\u5982\u4e0b\u5b50\u6811:</p>\n\n<pre>\n      2     \n     / \\   \n    1   3\n</pre>\n\n<p>\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u8981\u627e\u7684\u503c\u662f <code>5</code>\uff0c\u4f46\u56e0\u4e3a\u6ca1\u6709\u8282\u70b9\u503c\u4e3a <code>5</code>\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de <code>NULL</code>\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def searchBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* searchBST(struct TreeNode* root, int val){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode SearchBST(TreeNode root, int val) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */\nvar searchBST = function(root, val) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} val\n# @return {TreeNode}\ndef search_bst(root, val)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func searchBST(_ root: TreeNode?, _ val: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc searchBST(root *TreeNode, val int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def searchBST(root: TreeNode, `val`: Int): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun searchBST(root: TreeNode?, `val`: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn search_bst(root: Option<Rc<RefCell<TreeNode>>>, val: i32) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $val\n     * @return TreeNode\n     */\n    function searchBST($root, $val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction searchBST(root: TreeNode | null, val: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0784", "frontend_question_id": "0701", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/insert-into-a-binary-search-tree", "url_en": "https://leetcode.com/problems/insert-into-a-binary-search-tree", "relative_path_cn": "/leetcode/0700-0799/0701.Insert%20into%20a%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0700-0799/0701.Insert%20into%20a%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c", "title_en": "Insert into a Binary Search Tree", "question_title_slug": "insert-into-a-binary-search-tree", "content_en": "<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return <em>the root node of the BST after the insertion</em>. It is <strong>guaranteed</strong> that the new value does not exist in the original BST.</p>\n\n<p><strong>Notice</strong>&nbsp;that there may exist&nbsp;multiple valid ways for the&nbsp;insertion, as long as the tree remains a BST after insertion. You can return <strong>any of them</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg\" style=\"width: 752px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n<strong>Explanation:</strong> Another accepted tree is:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/bst.jpg\" style=\"width: 352px; height: 301px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [40,20,60,10,30,50,70], val = 25\n<strong>Output:</strong> [40,20,60,10,30,50,70,null,null,25]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in&nbsp;the tree will be in the range <code>[0,&nbsp;10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup></code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup></code></li>\n\t<li>It&#39;s <strong>guaranteed</strong> that <code>val</code> does not exist in the original BST.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u8981\u63d2\u5165\u6811\u4e2d\u7684\u503c\uff0c\u5c06\u503c\u63d2\u5165\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u8fd4\u56de\u63d2\u5165\u540e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002 \u8f93\u5165\u6570\u636e <strong>\u4fdd\u8bc1</strong> \uff0c\u65b0\u503c\u548c\u539f\u59cb\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4efb\u610f\u8282\u70b9\u503c\u90fd\u4e0d\u540c\u3002</p>\n\n<p><strong>\u6ce8\u610f</strong>\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u63d2\u5165\u65b9\u5f0f\uff0c\u53ea\u8981\u6811\u5728\u63d2\u5165\u540e\u4ecd\u4fdd\u6301\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u8fd4\u56de <strong>\u4efb\u610f\u6709\u6548\u7684\u7ed3\u679c</strong> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg\" style=\"width: 752px; height: 221px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [4,2,7,1,3], val = 5\n<strong>\u8f93\u51fa\uff1a</strong>[4,2,7,1,3,5]\n<strong>\u89e3\u91ca\uff1a</strong>\u53e6\u4e00\u4e2a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u53ef\u4ee5\u901a\u8fc7\u7684\u6811\u662f\uff1a\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/bst.jpg\" style=\"width: 352px; height: 301px;\" />\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [40,20,60,10,30,50,70], val = 25\n<strong>\u8f93\u51fa\uff1a</strong>[40,20,60,10,30,50,70,null,null,25]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n<strong>\u8f93\u51fa\uff1a</strong>[4,2,7,1,3,5]\n</pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u6811\u4e0a\u7684\u8282\u70b9\u6570\u4ecb\u4e8e <code>0</code> \u548c <code>10^4</code> \u4e4b\u95f4</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6574\u6570\u503c\uff0c\u53d6\u503c\u8303\u56f4\u4ece <code>0</code> \u5230 <code>10^8</code></li>\n\t<li><code>-10^8 <= val <= 10^8</code></li>\n\t<li>\u65b0\u503c\u548c\u539f\u59cb\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4efb\u610f\u8282\u70b9\u503c\u90fd\u4e0d\u540c</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def insertIntoBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* insertIntoBST(struct TreeNode* root, int val){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode InsertIntoBST(TreeNode root, int val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */\nvar insertIntoBST = function(root, val) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} val\n# @return {TreeNode}\ndef insert_into_bst(root, val)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func insertIntoBST(_ root: TreeNode?, _ val: Int) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc insertIntoBST(root *TreeNode, val int) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def insertIntoBST(root: TreeNode, `val`: Int): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun insertIntoBST(root: TreeNode?, `val`: Int): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn insert_into_bst(root: Option<Rc<RefCell<TreeNode>>>, val: i32) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $val\n     * @return TreeNode\n     */\n    function insertIntoBST($root, $val) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction insertIntoBST(root: TreeNode | null, val: number): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0786", "frontend_question_id": "0702", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/search-in-a-sorted-array-of-unknown-size", "url_en": "https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size", "relative_path_cn": "/leetcode/0700-0799/0702.Search%20in%20a%20Sorted%20Array%20of%20Unknown%20Size/README.md", "relative_path_en": "/leetcode/0700-0799/0702.Search%20in%20a%20Sorted%20Array%20of%20Unknown%20Size/README_EN.md", "title_cn": "\u641c\u7d22\u957f\u5ea6\u672a\u77e5\u7684\u6709\u5e8f\u6570\u7ec4", "title_en": "Search in a Sorted Array of Unknown Size", "question_title_slug": "search-in-a-sorted-array-of-unknown-size", "content_en": null, "content_cn": null, "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0789", "frontend_question_id": "0703", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/kth-largest-element-in-a-stream", "url_en": "https://leetcode.com/problems/kth-largest-element-in-a-stream", "relative_path_cn": "/leetcode/0700-0799/0703.Kth%20Largest%20Element%20in%20a%20Stream/README.md", "relative_path_en": "/leetcode/0700-0799/0703.Kth%20Largest%20Element%20in%20a%20Stream/README_EN.md", "title_cn": "\u6570\u636e\u6d41\u4e2d\u7684\u7b2c K \u5927\u5143\u7d20", "title_en": "Kth Largest Element in a Stream", "question_title_slug": "kth-largest-element-in-a-stream", "content_en": "<p>Design a class to find&nbsp;the <code>k<sup>th</sup></code> largest element in a stream. Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>Implement&nbsp;<code>KthLargest</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>KthLargest(int k, int[] nums)</code>&nbsp;Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li>\n\t<li><code>int add(int val)</code>&nbsp;Returns the element representing the <code>k<sup>th</sup></code> largest element in the stream.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n<strong>Output</strong>\n[null, 4, 5, 5, 8, 8]\n\n<strong>Explanation</strong>\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>.</li>\n\t<li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the <code>k<sup>th</sup></code> element.</li>\n</ul>\n", "content_cn": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u627e\u5230\u6570\u636e\u6d41\u4e2d\u7b2c <code>k</code> \u5927\u5143\u7d20\u7684\u7c7b\uff08class\uff09\u3002\u6ce8\u610f\u662f\u6392\u5e8f\u540e\u7684\u7b2c <code>k</code> \u5927\u5143\u7d20\uff0c\u4e0d\u662f\u7b2c <code>k</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p>\n\n<p>\u8bf7\u5b9e\u73b0 <code>KthLargest</code>\u00a0\u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>KthLargest(int k, int[] nums)</code> \u4f7f\u7528\u6574\u6570 <code>k</code> \u548c\u6574\u6570\u6d41 <code>nums</code> \u521d\u59cb\u5316\u5bf9\u8c61\u3002</li>\n\t<li><code>int add(int val)</code> \u8fd4\u56de\u5f53\u524d\u6570\u636e\u6d41\u4e2d\u7b2c <code>k</code> \u5927\u7684\u5143\u7d20\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null, 4, 5, 5, 8, 8]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre>\n\n<p>\u00a0</p>\n<strong>\u63d0\u793a\uff1a</strong>\n\n<ul>\n\t<li><code>1 <= k <= 10<sup>4</sup></code></li>\n\t<li><code>0 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> <= val <= 10<sup>4</sup></code></li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>add</code> \u65b9\u6cd5 <code>10<sup>4</sup></code> \u6b21</li>\n\t<li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\uff0c\u5728\u67e5\u627e\u7b2c <code>k</code> \u5927\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u4e2d\u81f3\u5c11\u6709 <code>k</code> \u4e2a\u5143\u7d20</li>\n</ul>\n", "tags_en": ["Heap", "Design"], "tags_cn": ["\u5806", "\u8bbe\u8ba1"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class KthLargest {\npublic:\n    KthLargest(int k, vector<int>& nums) {\n\n    }\n    \n    int add(int val) {\n\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n\n    }\n    \n    public int add(int val) {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.add(val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class KthLargest(object):\n\n    def __init__(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n\n\n    def add(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n\n\n    def add(self, val: int) -> int:\n\n\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} KthLargest;\n\n\nKthLargest* kthLargestCreate(int k, int* nums, int numsSize) {\n\n}\n\nint kthLargestAdd(KthLargest* obj, int val) {\n\n}\n\nvoid kthLargestFree(KthLargest* obj) {\n\n}\n\n/**\n * Your KthLargest struct will be instantiated and called as such:\n * KthLargest* obj = kthLargestCreate(k, nums, numsSize);\n * int param_1 = kthLargestAdd(obj, val);\n \n * kthLargestFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class KthLargest {\n\n    public KthLargest(int k, int[] nums) {\n\n    }\n    \n    public int Add(int val) {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.Add(val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number[]} nums\n */\nvar KthLargest = function(k, nums) {\n\n};\n\n/** \n * @param {number} val\n * @return {number}\n */\nKthLargest.prototype.add = function(val) {\n\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class KthLargest\n\n=begin\n    :type k: Integer\n    :type nums: Integer[]\n=end\n    def initialize(k, nums)\n\n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Integer\n=end\n    def add(val)\n\n    end\n\n\nend\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest.new(k, nums)\n# param_1 = obj.add(val)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass KthLargest {\n\n    init(_ k: Int, _ nums: [Int]) {\n\n    }\n    \n    func add(_ val: Int) -> Int {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest(k, nums)\n * let ret_1: Int = obj.add(val)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type KthLargest struct {\n\n}\n\n\nfunc Constructor(k int, nums []int) KthLargest {\n\n}\n\n\nfunc (this *KthLargest) Add(val int) int {\n\n}\n\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * obj := Constructor(k, nums);\n * param_1 := obj.Add(val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class KthLargest(_k: Int, _nums: Array[Int]) {\n\n    def add(`val`: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class KthLargest(k: Int, nums: IntArray) {\n\n    fun add(`val`: Int): Int {\n\n    }\n\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = KthLargest(k, nums)\n * var param_1 = obj.add(`val`)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct KthLargest {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl KthLargest {\n\n    fn new(k: i32, nums: Vec<i32>) -> Self {\n\n    }\n    \n    fn add(&self, val: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * let obj = KthLargest::new(k, nums);\n * let ret_1: i32 = obj.add(val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class KthLargest {\n    /**\n     * @param Integer $k\n     * @param Integer[] $nums\n     */\n    function __construct($k, $nums) {\n\n    }\n\n    /**\n     * @param Integer $val\n     * @return Integer\n     */\n    function add($val) {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * $obj = KthLargest($k, $nums);\n * $ret_1 = $obj->add($val);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class KthLargest {\n    constructor(k: number, nums: number[]) {\n\n    }\n\n    add(val: number): number {\n\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0792", "frontend_question_id": "0704", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-search", "url_en": "https://leetcode.com/problems/binary-search", "relative_path_cn": "/leetcode/0700-0799/0704.Binary%20Search/README.md", "relative_path_en": "/leetcode/0700-0799/0704.Binary%20Search/README_EN.md", "title_cn": "\u4e8c\u5206\u67e5\u627e", "title_en": "Binary Search", "question_title_slug": "binary-search", "content_en": "<p>Given a <strong>sorted</strong> (in ascending order) integer array <code>nums</code> of <code>n</code> elements and a <code>target</code> value, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p><br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> 9 exists in <code>nums</code> and its index is 4\r\n\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 2 does not exist in <code>nums</code> so return -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>You may assume that all elements in <code>nums</code> are unique.</li>\r\n\t<li><code>n</code> will be in the range <code>[1, 10000]</code>.</li>\r\n\t<li>The value of each element in <code>nums</code> will be in the range <code>[-9999, 9999]</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>n</code>&nbsp;\u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4&nbsp;<code>nums</code> \u548c\u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code> &nbsp;\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22&nbsp;<code>nums</code>&nbsp;\u4e2d\u7684 <code>target</code>\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p><br>\n<strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> 9 \u51fa\u73b0\u5728 <code>nums</code> \u4e2d\u5e76\u4e14\u4e0b\u6807\u4e3a 4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong> 2 \u4e0d\u5b58\u5728 <code>nums</code> \u4e2d\u56e0\u6b64\u8fd4\u56de -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <code>nums</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\u3002</li>\n\t<li><code>n</code>&nbsp;\u5c06\u5728&nbsp;<code>[1, 10000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>nums</code>&nbsp;\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5728&nbsp;<code>[-9999, 9999]</code>\u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int search(int[] nums, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint search(int* nums, int numsSize, int target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func search(nums []int, target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function search(nums: number[], target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0816", "frontend_question_id": "0705", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-hashset", "url_en": "https://leetcode.com/problems/design-hashset", "relative_path_cn": "/leetcode/0700-0799/0705.Design%20HashSet/README.md", "relative_path_en": "/leetcode/0700-0799/0705.Design%20HashSet/README_EN.md", "title_cn": "\u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408", "title_en": "Design HashSet", "question_title_slug": "design-hashset", "content_en": "<p>Design a HashSet&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>add(value)</code>:&nbsp;Insert a value into the HashSet.&nbsp;</li>\r\n\t<li><code>contains(value)</code> : Return whether the value exists in the HashSet or not.</li>\r\n\t<li><code>remove(value)</code>: Remove a value in&nbsp;the HashSet. If the value does not exist in the HashSet, do nothing.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashSet hashSet = new MyHashSet();\r\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// returns false (not found)\r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns false (already removed)\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashSet library.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u5efa\u7684\u54c8\u5e0c\u8868\u5e93\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u96c6\u5408</p>\n\n<p>\u5177\u4f53\u5730\u8bf4\uff0c\u4f60\u7684\u8bbe\u8ba1\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u7684\u529f\u80fd</p>\n\n<ul>\n\t<li><code>add(value)</code>\uff1a\u5411\u54c8\u5e0c\u96c6\u5408\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c\u3002</li>\n\t<li><code>contains(value)</code> \uff1a\u8fd4\u56de\u54c8\u5e0c\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u503c\u3002</li>\n\t<li><code>remove(value)</code>\uff1a\u5c06\u7ed9\u5b9a\u503c\u4ece\u54c8\u5e0c\u96c6\u5408\u4e2d\u5220\u9664\u3002\u5982\u679c\u54c8\u5e0c\u96c6\u5408\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u503c\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002</li>\n</ul>\n\n<p><br>\n<strong>\u793a\u4f8b:</strong></p>\n\n<pre>MyHashSet hashSet = new MyHashSet();\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de true\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de false (\u672a\u627e\u5230)\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de true\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de  false (\u5df2\u7ecf\u88ab\u5220\u9664)\n</pre>\n\n<p><br>\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728&nbsp;<code>[0, 1000000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u7684\u603b\u6570\u76ee\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0d\u8981\u4f7f\u7528\u5185\u5efa\u7684\u54c8\u5e0c\u96c6\u5408\u5e93\u3002</li>\n</ul>\n", "tags_en": ["Design", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyHashSet {\npublic:\n    /** Initialize your data structure here. */\n    MyHashSet() {\n\n    }\n    \n    void add(int key) {\n\n    }\n    \n    void remove(int key) {\n\n    }\n    \n    /** Returns true if this set contains the specified element */\n    bool contains(int key) {\n\n    }\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyHashSet {\n\n    /** Initialize your data structure here. */\n    public MyHashSet() {\n\n    }\n    \n    public void add(int key) {\n\n    }\n    \n    public void remove(int key) {\n\n    }\n    \n    /** Returns true if this set contains the specified element */\n    public boolean contains(int key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.add(key);\n * obj.remove(key);\n * boolean param_3 = obj.contains(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyHashSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n\n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n\n\n    def contains(self, key):\n        \"\"\"\n        Returns true if this set contains the specified element\n        :type key: int\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyHashSet:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def add(self, key: int) -> None:\n\n\n    def remove(self, key: int) -> None:\n\n\n    def contains(self, key: int) -> bool:\n        \"\"\"\n        Returns true if this set contains the specified element\n        \"\"\"\n\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} MyHashSet;\n\n/** Initialize your data structure here. */\n\nMyHashSet* myHashSetCreate() {\n\n}\n\nvoid myHashSetAdd(MyHashSet* obj, int key) {\n\n}\n\nvoid myHashSetRemove(MyHashSet* obj, int key) {\n\n}\n\n/** Returns true if this set contains the specified element */\nbool myHashSetContains(MyHashSet* obj, int key) {\n\n}\n\nvoid myHashSetFree(MyHashSet* obj) {\n\n}\n\n/**\n * Your MyHashSet struct will be instantiated and called as such:\n * MyHashSet* obj = myHashSetCreate();\n * myHashSetAdd(obj, key);\n \n * myHashSetRemove(obj, key);\n \n * bool param_3 = myHashSetContains(obj, key);\n \n * myHashSetFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyHashSet {\n\n    /** Initialize your data structure here. */\n    public MyHashSet() {\n\n    }\n    \n    public void Add(int key) {\n\n    }\n    \n    public void Remove(int key) {\n\n    }\n    \n    /** Returns true if this set contains the specified element */\n    public bool Contains(int key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.Add(key);\n * obj.Remove(key);\n * bool param_3 = obj.Contains(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n\n};\n\n/**\n * Returns true if this set contains the specified element \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyHashSet\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n\n    end\n\n\n=begin\n    Returns true if this set contains the specified element\n    :type key: Integer\n    :rtype: Boolean\n=end\n    def contains(key)\n\n    end\n\n\nend\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet.new()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyHashSet {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func add(_ key: Int) {\n        \n    }\n    \n    func remove(_ key: Int) {\n        \n    }\n    \n    /** Returns true if this set contains the specified element */\n    func contains(_ key: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * let ret_3: Bool = obj.contains(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyHashSet struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyHashSet {\n\n}\n\n\nfunc (this *MyHashSet) Add(key int)  {\n\n}\n\n\nfunc (this *MyHashSet) Remove(key int)  {\n\n}\n\n\n/** Returns true if this set contains the specified element */\nfunc (this *MyHashSet) Contains(key int) bool {\n\n}\n\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Add(key);\n * obj.Remove(key);\n * param_3 := obj.Contains(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyHashSet() {\n\n    /** Initialize your data structure here. */\n\n\n    def add(key: Int) {\n\n    }\n\n    def remove(key: Int) {\n\n    }\n\n    /** Returns true if this set contains the specified element */\n    def contains(key: Int): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyHashSet() {\n\n    /** Initialize your data structure here. */\n\n\n    fun add(key: Int) {\n\n    }\n\n    fun remove(key: Int) {\n\n    }\n\n    /** Returns true if this set contains the specified element */\n    fun contains(key: Int): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyHashSet {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashSet {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    fn add(&self, key: i32) {\n\n    }\n    \n    fn remove(&self, key: i32) {\n\n    }\n    \n    /** Returns true if this set contains the specified element */\n    fn contains(&self, key: i32) -> bool {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet::new();\n * obj.add(key);\n * obj.remove(key);\n * let ret_3: bool = obj.contains(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyHashSet {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function add($key) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n\n    }\n\n    /**\n     * Returns true if this set contains the specified element\n     * @param Integer $key\n     * @return Boolean\n     */\n    function contains($key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * $obj = MyHashSet();\n * $obj->add($key);\n * $obj->remove($key);\n * $ret_3 = $obj->contains($key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyHashSet {\n    constructor() {\n\n    }\n\n    add(key: number): void {\n\n    }\n\n    remove(key: number): void {\n\n    }\n\n    contains(key: number): boolean {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0817", "frontend_question_id": "0706", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-hashmap", "url_en": "https://leetcode.com/problems/design-hashmap", "relative_path_cn": "/leetcode/0700-0799/0706.Design%20HashMap/README.md", "relative_path_en": "/leetcode/0700-0799/0706.Design%20HashMap/README_EN.md", "title_cn": "\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04", "title_en": "Design HashMap", "question_title_slug": "design-hashmap", "content_en": "<p>Design a HashMap&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>put(key, value)</code> :&nbsp;Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>\r\n\t<li><code>get(key)</code>: Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>\r\n\t<li><code>remove(key)</code> :&nbsp;Remove the mapping for the value key if this map contains the mapping for the key.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashMap hashMap = new MyHashMap();\r\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1\r\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found)\r\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// update the existing value\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1 \r\nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// remove the mapping for 2\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found) \r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All keys and values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashMap library.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u5efa\u7684\u54c8\u5e0c\u8868\u5e93\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u6620\u5c04</p>\n\n<p>\u5177\u4f53\u5730\u8bf4\uff0c\u4f60\u7684\u8bbe\u8ba1\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u7684\u529f\u80fd</p>\n\n<ul>\n\t<li><code>put(key, value)</code>\uff1a\u5411\u54c8\u5e0c\u6620\u5c04\u4e2d\u63d2\u5165(\u952e,\u503c)\u7684\u6570\u503c\u5bf9\u3002\u5982\u679c\u952e\u5bf9\u5e94\u7684\u503c\u5df2\u7ecf\u5b58\u5728\uff0c\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002</li>\n\t<li><code>get(key)</code>\uff1a\u8fd4\u56de\u7ed9\u5b9a\u7684\u952e\u6240\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u6620\u5c04\u4e2d\u4e0d\u5305\u542b\u8fd9\u4e2a\u952e\uff0c\u8fd4\u56de-1\u3002</li>\n\t<li><code>remove(key)</code>\uff1a\u5982\u679c\u6620\u5c04\u4e2d\u5b58\u5728\u8fd9\u4e2a\u952e\uff0c\u5220\u9664\u8fd9\u4e2a\u6570\u503c\u5bf9\u3002</li>\n</ul>\n\n<p><br>\n<strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de 1\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de -1 (\u672a\u627e\u5230)\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; // \u66f4\u65b0\u5df2\u6709\u7684\u503c\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de 1 \nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; // \u5220\u9664\u952e\u4e3a2\u7684\u6570\u636e\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de -1 (\u672a\u627e\u5230) \n</pre>\n\n<p><br>\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728&nbsp;<code>[0, 1000000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u7684\u603b\u6570\u76ee\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0d\u8981\u4f7f\u7528\u5185\u5efa\u7684\u54c8\u5e0c\u5e93\u3002</li>\n</ul>\n", "tags_en": ["Design", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyHashMap {\npublic:\n    /** Initialize your data structure here. */\n    MyHashMap() {\n\n    }\n    \n    /** value will always be non-negative. */\n    void put(int key, int value) {\n\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    int get(int key) {\n\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    void remove(int key) {\n\n    }\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap* obj = new MyHashMap();\n * obj->put(key,value);\n * int param_2 = obj->get(key);\n * obj->remove(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyHashMap {\n\n    /** Initialize your data structure here. */\n    public MyHashMap() {\n\n    }\n    \n    /** value will always be non-negative. */\n    public void put(int key, int value) {\n\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    public int get(int key) {\n\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    public void remove(int key) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.put(key,value);\n * int param_2 = obj.get(key);\n * obj.remove(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyHashMap(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def put(self, key, value):\n        \"\"\"\n        value will always be non-negative.\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n    def get(self, key):\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        :type key: int\n        :rtype: int\n        \"\"\"\n        \n\n    def remove(self, key):\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        :type key: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyHashMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        value will always be non-negative.\n        \"\"\"\n        \n\n    def get(self, key: int) -> int:\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        \"\"\"\n        \n\n    def remove(self, key: int) -> None:\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        \"\"\"\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyHashMap;\n\n/** Initialize your data structure here. */\n\nMyHashMap* myHashMapCreate() {\n    \n}\n\n/** value will always be non-negative. */\nvoid myHashMapPut(MyHashMap* obj, int key, int value) {\n  \n}\n\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\nint myHashMapGet(MyHashMap* obj, int key) {\n  \n}\n\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\nvoid myHashMapRemove(MyHashMap* obj, int key) {\n  \n}\n\nvoid myHashMapFree(MyHashMap* obj) {\n    \n}\n\n/**\n * Your MyHashMap struct will be instantiated and called as such:\n * MyHashMap* obj = myHashMapCreate();\n * myHashMapPut(obj, key, value);\n \n * int param_2 = myHashMapGet(obj, key);\n \n * myHashMapRemove(obj, key);\n \n * myHashMapFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyHashMap {\n\n    /** Initialize your data structure here. */\n    public MyHashMap() {\n\n    }\n    \n    /** value will always be non-negative. */\n    public void Put(int key, int value) {\n\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    public int Get(int key) {\n\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    public void Remove(int key) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.Put(key,value);\n * int param_2 = obj.Get(key);\n * obj.Remove(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MyHashMap = function() {\n\n};\n\n/**\n * value will always be non-negative. \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nMyHashMap.prototype.put = function(key, value) {\n\n};\n\n/**\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \n * @param {number} key\n * @return {number}\n */\nMyHashMap.prototype.get = function(key) {\n\n};\n\n/**\n * Removes the mapping of the specified value key if this map contains a mapping for the key \n * @param {number} key\n * @return {void}\n */\nMyHashMap.prototype.remove = function(key) {\n\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyHashMap\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    value will always be non-negative.\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n\n    end\n\n\n=begin\n    Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n\n    end\n\n\n=begin\n    Removes the mapping of the specified value key if this map contains a mapping for the key\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n\n    end\n\n\nend\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap.new()\n# obj.put(key, value)\n# param_2 = obj.get(key)\n# obj.remove(key)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyHashMap {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    func put(_ key: Int, _ value: Int) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    func get(_ key: Int) -> Int {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    func remove(_ key: Int) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap()\n * obj.put(key, value)\n * let ret_2: Int = obj.get(key)\n * obj.remove(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyHashMap struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyHashMap {\n\n}\n\n\n/** value will always be non-negative. */\nfunc (this *MyHashMap) Put(key int, value int)  {\n\n}\n\n\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\nfunc (this *MyHashMap) Get(key int) int {\n\n}\n\n\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\nfunc (this *MyHashMap) Remove(key int)  {\n\n}\n\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Put(key,value);\n * param_2 := obj.Get(key);\n * obj.Remove(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyHashMap() {\n\n    /** Initialize your data structure here. */\n\n\n    /** value will always be non-negative. */\n    def put(key: Int, value: Int) {\n\n    }\n\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    def get(key: Int): Int = {\n\n    }\n\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    def remove(key: Int) {\n\n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyHashMap() {\n\n    /** Initialize your data structure here. */\n\n\n    /** value will always be non-negative. */\n    fun put(key: Int, value: Int) {\n\n    }\n\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    fun get(key: Int): Int {\n\n    }\n\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    fun remove(key: Int) {\n\n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyHashMap {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashMap {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** value will always be non-negative. */\n    fn put(&self, key: i32, value: i32) {\n        \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    fn get(&self, key: i32) -> i32 {\n        \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    fn remove(&self, key: i32) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap::new();\n * obj.put(key, value);\n * let ret_2: i32 = obj.get(key);\n * obj.remove(key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyHashMap {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * value will always be non-negative.\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n        \n    }\n  \n    /**\n     * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n        \n    }\n  \n    /**\n     * Removes the mapping of the specified value key if this map contains a mapping for the key\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n        \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * $obj = MyHashMap();\n * $obj->put($key, $value);\n * $ret_2 = $obj->get($key);\n * $obj->remove($key);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyHashMap {\n    constructor() {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    remove(key: number): void {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0838", "frontend_question_id": "0707", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-linked-list", "url_en": "https://leetcode.com/problems/design-linked-list", "relative_path_cn": "/leetcode/0700-0799/0707.Design%20Linked%20List/README.md", "relative_path_en": "/leetcode/0700-0799/0707.Design%20Linked%20List/README_EN.md", "title_cn": "\u8bbe\u8ba1\u94fe\u8868", "title_en": "Design Linked List", "question_title_slug": "design-linked-list", "content_en": "<p>Design your&nbsp;implementation of the linked list. You can choose to use a singly or doubly linked list.<br />\nA node in a singly&nbsp;linked list should have two attributes: <code>val</code>&nbsp;and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code>&nbsp;is&nbsp;a&nbsp;pointer/reference to the next node.<br />\nIf you want to use the doubly linked list,&nbsp;you will need&nbsp;one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are <strong>0-indexed</strong>.</p>\n\n<p>Implement the <code>MyLinkedList</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code>&nbsp;Initializes&nbsp;the&nbsp;<code>MyLinkedList</code> object.</li>\n\t<li><code>int get(int index)</code>&nbsp;Get the value of&nbsp;the <code>index<sup>th</sup></code>&nbsp;node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li><code>void addAtHead(int val)</code>&nbsp;Add a node of value <code>val</code>&nbsp;before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li><code>void addAtTail(int val)</code>&nbsp;Append a node of value <code>val</code>&nbsp;as the last element of the linked list.</li>\n\t<li><code>void addAtIndex(int index, int val)</code>&nbsp;Add a node of value <code>val</code>&nbsp;before the <code>index<sup>th</sup></code>&nbsp;node in the linked list.&nbsp;If <code>index</code>&nbsp;equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node <strong>will not be inserted</strong>.</li>\n\t<li><code>void deleteAtIndex(int index)</code>&nbsp;Delete&nbsp;the <code>index<sup>th</sup></code>&nbsp;node in the linked list, if the index is valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>Explanation</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n\t<li>At most <code>2000</code>&nbsp;calls will be made to&nbsp;<code>get</code>,&nbsp;<code>addAtHead</code>,&nbsp;<code>addAtTail</code>,&nbsp; <code>addAtIndex</code> and&nbsp;<code>deleteAtIndex</code>.</li>\n</ul>\n", "content_cn": "<p>\u8bbe\u8ba1\u94fe\u8868\u7684\u5b9e\u73b0\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u94fe\u8868\u6216\u53cc\u94fe\u8868\u3002\u5355\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5e94\u8be5\u5177\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a<code>val</code>&nbsp;\u548c&nbsp;<code>next</code>\u3002<code>val</code>&nbsp;\u662f\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c<code>next</code>&nbsp;\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488/\u5f15\u7528\u3002\u5982\u679c\u8981\u4f7f\u7528\u53cc\u5411\u94fe\u8868\uff0c\u5219\u8fd8\u9700\u8981\u4e00\u4e2a\u5c5e\u6027&nbsp;<code>prev</code>&nbsp;\u4ee5\u6307\u793a\u94fe\u8868\u4e2d\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u94fe\u8868\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f 0-index \u7684\u3002</p>\n\n<p>\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a</p>\n\n<ul>\n\t<li>get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de<code>-1</code>\u3002</li>\n\t<li>addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a&nbsp;<code>val</code>&nbsp;\u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002</li>\n\t<li>addAtTail(val)\uff1a\u5c06\u503c\u4e3a&nbsp;<code>val</code> \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</li>\n\t<li>addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a&nbsp;<code>val</code>&nbsp; \u7684\u8282\u70b9\u3002\u5982\u679c&nbsp;<code>index</code>&nbsp;\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c <code>index</code> \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002\u5982\u679c<code>index</code>\u5c0f\u4e8e0\uff0c\u5219\u5728\u5934\u90e8\u63d2\u5165\u8282\u70b9\u3002</li>\n\t<li>deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15&nbsp;<code>index</code> \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code> \u4e2a\u8282\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //\u94fe\u8868\u53d8\u4e3a1-&gt; 2-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de2\nlinkedList.deleteAtIndex(1);  //\u73b0\u5728\u94fe\u8868\u662f1-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709<code>val</code>\u503c\u90fd\u5728&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u6b21\u6570\u5c06\u5728&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684 LinkedList \u5e93\u3002</li>\n</ul>\n", "tags_en": ["Design", "Linked List"], "tags_cn": ["\u8bbe\u8ba1", "\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyLinkedList {\npublic:\n    /** Initialize your data structure here. */\n    MyLinkedList() {\n\n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    int get(int index) {\n\n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    void addAtHead(int val) {\n\n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    void addAtTail(int val) {\n\n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    void addAtIndex(int index, int val) {\n\n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    void deleteAtIndex(int index) {\n\n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyLinkedList {\n\n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n\n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    public int get(int index) {\n\n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    public void addAtHead(int val) {\n\n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    public void addAtTail(int val) {\n\n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    public void addAtIndex(int index, int val) {\n\n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    public void deleteAtIndex(int index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyLinkedList(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def get(self, index):\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        :type index: int\n        :rtype: int\n        \"\"\"\n\n\n    def addAtHead(self, val):\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def addAtTail(self, val):\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        :type index: int\n        :rtype: None\n        \"\"\"\n\n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyLinkedList:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def get(self, index: int) -> int:\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        \"\"\"\n\n\n    def addAtHead(self, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n        \"\"\"\n\n\n    def addAtTail(self, val: int) -> None:\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        \"\"\"\n\n\n    def addAtIndex(self, index: int, val: int) -> None:\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n        \"\"\"\n\n\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        \"\"\"\n\n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} MyLinkedList;\n\n/** Initialize your data structure here. */\n\nMyLinkedList* myLinkedListCreate() {\n\n}\n\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\nint myLinkedListGet(MyLinkedList* obj, int index) {\n\n}\n\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\n\n}\n\n/** Append a node of value val to the last element of the linked list. */\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\n\n}\n\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\n\n}\n\n/** Delete the index-th node in the linked list, if the index is valid. */\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\n\n}\n\nvoid myLinkedListFree(MyLinkedList* obj) {\n\n}\n\n/**\n * Your MyLinkedList struct will be instantiated and called as such:\n * MyLinkedList* obj = myLinkedListCreate();\n * int param_1 = myLinkedListGet(obj, index);\n \n * myLinkedListAddAtHead(obj, val);\n \n * myLinkedListAddAtTail(obj, val);\n \n * myLinkedListAddAtIndex(obj, index, val);\n \n * myLinkedListDeleteAtIndex(obj, index);\n \n * myLinkedListFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyLinkedList {\n\n    /** Initialize your data structure here. */\n    public MyLinkedList() {\n\n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    public int Get(int index) {\n\n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    public void AddAtHead(int val) {\n\n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    public void AddAtTail(int val) {\n\n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    public void AddAtIndex(int index, int val) {\n\n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    public void DeleteAtIndex(int index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MyLinkedList = function() {\n\n};\n\n/**\n * Get the value of the index-th node in the linked list. If the index is invalid, return -1. \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n\n};\n\n/**\n * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n\n};\n\n/**\n * Append a node of value val to the last element of the linked list. \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtTail = function(val) {\n\n};\n\n/**\n * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtIndex = function(index, val) {\n\n};\n\n/**\n * Delete the index-th node in the linked list, if the index is valid. \n * @param {number} index\n * @return {void}\n */\nMyLinkedList.prototype.deleteAtIndex = function(index) {\n\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyLinkedList\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n\n    end\n\n\n=begin\n    Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_head(val)\n\n    end\n\n\n=begin\n    Append a node of value val to the last element of the linked list.\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_tail(val)\n\n    end\n\n\n=begin\n    Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_index(index, val)\n\n    end\n\n\n=begin\n    Delete the index-th node in the linked list, if the index is valid.\n    :type index: Integer\n    :rtype: Void\n=end\n    def delete_at_index(index)\n\n    end\n\n\nend\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList.new()\n# param_1 = obj.get(index)\n# obj.add_at_head(val)\n# obj.add_at_tail(val)\n# obj.add_at_index(index, val)\n# obj.delete_at_index(index)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyLinkedList {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    func get(_ index: Int) -> Int {\n        \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    func addAtHead(_ val: Int) {\n        \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    func addAtTail(_ val: Int) {\n        \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    func addAtIndex(_ index: Int, _ val: Int) {\n        \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    func deleteAtIndex(_ index: Int) {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList()\n * let ret_1: Int = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index, val)\n * obj.deleteAtIndex(index)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyLinkedList struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyLinkedList {\n\n}\n\n\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\nfunc (this *MyLinkedList) Get(index int) int {\n\n}\n\n\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\nfunc (this *MyLinkedList) AddAtHead(val int)  {\n\n}\n\n\n/** Append a node of value val to the last element of the linked list. */\nfunc (this *MyLinkedList) AddAtTail(val int)  {\n\n}\n\n\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\n\n}\n\n\n/** Delete the index-th node in the linked list, if the index is valid. */\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\n\n}\n\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyLinkedList() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    def get(index: Int): Int = {\n\n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    def addAtHead(`val`: Int) {\n\n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    def addAtTail(`val`: Int) {\n\n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    def addAtIndex(index: Int, `val`: Int) {\n\n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    def deleteAtIndex(index: Int) {\n\n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyLinkedList() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    fun get(index: Int): Int {\n\n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    fun addAtHead(`val`: Int) {\n\n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    fun addAtTail(`val`: Int) {\n\n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    fun addAtIndex(index: Int, `val`: Int) {\n\n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    fun deleteAtIndex(index: Int) {\n\n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyLinkedList {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    fn get(&self, index: i32) -> i32 {\n\n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    fn add_at_head(&self, val: i32) {\n\n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    fn add_at_tail(&self, val: i32) {\n\n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    fn add_at_index(&self, index: i32, val: i32) {\n\n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    fn delete_at_index(&self, index: i32) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyLinkedList {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n\n    }\n\n    /**\n     * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtHead($val) {\n\n    }\n\n    /**\n     * Append a node of value val to the last element of the linked list.\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtTail($val) {\n\n    }\n\n    /**\n     * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtIndex($index, $val) {\n\n    }\n\n    /**\n     * Delete the index-th node in the linked list, if the index is valid.\n     * @param Integer $index\n     * @return NULL\n     */\n    function deleteAtIndex($index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * $obj = MyLinkedList();\n * $ret_1 = $obj->get($index);\n * $obj->addAtHead($val);\n * $obj->addAtTail($val);\n * $obj->addAtIndex($index, $val);\n * $obj->deleteAtIndex($index);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyLinkedList {\n    constructor() {\n\n    }\n\n    get(index: number): number {\n\n    }\n\n    addAtHead(val: number): void {\n\n    }\n\n    addAtTail(val: number): void {\n\n    }\n\n    addAtIndex(index: number, val: number): void {\n\n    }\n\n    deleteAtIndex(index: number): void {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0850", "frontend_question_id": "0708", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/insert-into-a-sorted-circular-linked-list", "url_en": "https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list", "relative_path_cn": "/leetcode/0700-0799/0708.Insert%20into%20a%20Sorted%20Circular%20Linked%20List/README.md", "relative_path_en": "/leetcode/0700-0799/0708.Insert%20into%20a%20Sorted%20Circular%20Linked%20List/README_EN.md", "title_cn": "\u5faa\u73af\u6709\u5e8f\u5217\u8868\u7684\u63d2\u5165", "title_en": "Insert into a Sorted Circular Linked List", "question_title_slug": "insert-into-a-sorted-circular-linked-list", "content_en": null, "content_cn": null, "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0742", "frontend_question_id": "0709", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/to-lower-case", "url_en": "https://leetcode.com/problems/to-lower-case", "relative_path_cn": "/leetcode/0700-0799/0709.To%20Lower%20Case/README.md", "relative_path_en": "/leetcode/0700-0799/0709.To%20Lower%20Case/README_EN.md", "title_cn": "\u8f6c\u6362\u6210\u5c0f\u5199\u5b57\u6bcd", "title_en": "To Lower Case", "question_title_slug": "to-lower-case", "content_en": "<p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;Hello&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;hello&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;here&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;here&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;LOVELY&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;lovely&quot;</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>", "content_cn": "<p>\u5b9e\u73b0\u51fd\u6570 ToLowerCase()\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570 str\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e4b\u540e\u8fd4\u56de\u65b0\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;Hello&quot;\n<strong>\u8f93\u51fa: </strong>&quot;hello&quot;</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;here&quot;\n<strong>\u8f93\u51fa: </strong>&quot;here&quot;</pre>\n\n<p><strong>\u793a\u4f8b</strong><strong>&nbsp;3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;LOVELY&quot;\n<strong>\u8f93\u51fa: </strong>&quot;lovely&quot;\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string toLowerCase(string str) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String toLowerCase(String str) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def toLowerCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def toLowerCase(self, str: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * toLowerCase(char * str){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ToLowerCase(string str) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} str\n * @return {string}\n */\nvar toLowerCase = function(str) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} str\n# @return {String}\ndef to_lower_case(str)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func toLowerCase(_ str: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func toLowerCase(str string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def toLowerCase(str: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun toLowerCase(str: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn to_lower_case(str: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $str\n     * @return String\n     */\n    function toLowerCase($str) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function toLowerCase(str: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0894", "frontend_question_id": "0710", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/random-pick-with-blacklist", "url_en": "https://leetcode.com/problems/random-pick-with-blacklist", "relative_path_cn": "/leetcode/0700-0799/0710.Random%20Pick%20with%20Blacklist/README.md", "relative_path_en": "/leetcode/0700-0799/0710.Random%20Pick%20with%20Blacklist/README_EN.md", "title_cn": "\u9ed1\u540d\u5355\u4e2d\u7684\u968f\u673a\u6570", "title_en": "Random Pick with Blacklist", "question_title_slug": "random-pick-with-blacklist", "content_en": "<p>Given a blacklist&nbsp;<code>B</code> containing unique integers&nbsp;from <code>[0, N)</code>, write a function to return a uniform random integer from <code>[0, N)</code> which is <strong>NOT</strong>&nbsp;in <code>B</code>.</p>\r\n\r\n<p>Optimize it such that it minimizes the call to system&rsquo;s <code>Math.random()</code>.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\r\n\t<li><code>[0, N)</code>&nbsp;does NOT include N. See <a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-1-2\">[[1,[]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,0,0]</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-2-2\">[[2,[]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,1,1,1]</span>\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-3-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-3-2\">[[3,[1]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[null,0,0,2]</span>\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-4-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-4-2\">[[4,[2]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[null,1,3,1]</span>\r\n</pre>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has two arguments,&nbsp;<code>N</code> and the blacklist <code>B</code>. <code>pick</code> has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b [0\uff0cn ) \u4e2d\u72ec\u7279\u7684\u6574\u6570\u7684\u9ed1\u540d\u5355 B\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u4ece [ 0\uff0cn ) \u4e2d\u8fd4\u56de\u4e00\u4e2a<strong>\u4e0d\u5728</strong> B \u4e2d\u7684\u968f\u673a\u6574\u6570\u3002</p>\n\n<p>\u5bf9\u5b83\u8fdb\u884c\u4f18\u5316\u4f7f\u5176\u5c3d\u91cf\u5c11\u8c03\u7528\u7cfb\u7edf\u65b9\u6cd5 <code>Math.random()</code> \u3002</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;\u4e0d\u5305\u542b&nbsp;N\uff0c\u8be6\u7ec6\u53c2\u89c1&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>&nbsp;\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[1,[]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[2,[]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[4,[2]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u6210\u5458\u51fd\u6570\u540d\u548c\u8c03\u7528\u7684\u53c2\u6570\u3002<code>Solution</code>\u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c<code>N</code>&nbsp;\u548c\u9ed1\u540d\u5355&nbsp;<code>B</code>\u3002<code>pick</code>&nbsp;\u6ca1\u6709\u53c2\u6570\uff0c\u8f93\u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u53c2\u6570\u4e3a\u7a7a\uff0c\u4e5f\u4f1a\u8f93\u5165\u4e00\u4e2a [] \u7a7a\u5217\u8868\u3002</p>\n", "tags_en": ["Sort", "Hash Table", "Binary Search", "Random"], "tags_cn": ["\u6392\u5e8f", "\u54c8\u5e0c\u8868", "\u4e8c\u5206\u67e5\u627e", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(int N, vector<int>& blacklist) {\n\n    }\n    \n    int pick() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(N, blacklist);\n * int param_1 = obj->pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int N, int[] blacklist) {\n\n    }\n    \n    public int pick() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(N, blacklist);\n * int param_1 = obj.pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, N, blacklist):\n        \"\"\"\n        :type N: int\n        :type blacklist: List[int]\n        \"\"\"\n        \n\n    def pick(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(N, blacklist)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, N: int, blacklist: List[int]):\n        \n\n    def pick(self) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(N, blacklist)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int N, int* blacklist, int blacklistSize) {\n    \n}\n\nint solutionPick(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(N, blacklist, blacklistSize);\n * int param_1 = solutionPick(obj);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int N, int[] blacklist) {\n\n    }\n    \n    public int Pick() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(N, blacklist);\n * int param_1 = obj.Pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number[]} blacklist\n */\nvar Solution = function(N, blacklist) {\n\n};\n\n/**\n * @return {number}\n */\nSolution.prototype.pick = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(N, blacklist)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type n: Integer\n    :type blacklist: Integer[]\n=end\n    def initialize(n, blacklist)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pick()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(n, blacklist)\n# param_1 = obj.pick()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ N: Int, _ blacklist: [Int]) {\n        \n    }\n    \n    func pick() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(N, blacklist)\n * let ret_1: Int = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(N int, blacklist []int) Solution {\n\n}\n\n\nfunc (this *Solution) Pick() int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(N, blacklist);\n * param_1 := obj.Pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_N: Int, _blacklist: Array[Int]) {\n\n    def pick(): Int = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(N, blacklist)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(N: Int, blacklist: IntArray) {\n\n    fun pick(): Int {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(N, blacklist)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(N: i32, blacklist: Vec<i32>) -> Self {\n        \n    }\n    \n    fn pick(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(N, blacklist);\n * let ret_1: i32 = obj.pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer $N\n     * @param Integer[] $blacklist\n     */\n    function __construct($N, $blacklist) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pick() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($N, $blacklist);\n * $ret_1 = $obj->pick();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(N: number, blacklist: number[]) {\n\n    }\n\n    pick(): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(N, blacklist)\n * var param_1 = obj.pick()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0711", "frontend_question_id": "0711", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/number-of-distinct-islands-ii", "url_en": "https://leetcode.com/problems/number-of-distinct-islands-ii", "relative_path_cn": "/leetcode/0700-0799/0711.Number%20of%20Distinct%20Islands%20II/README.md", "relative_path_en": "/leetcode/0700-0799/0711.Number%20of%20Distinct%20Islands%20II/README_EN.md", "title_cn": "\u4e0d\u540c\u5c9b\u5c7f\u7684\u6570\u91cf II", "title_en": "Number of Distinct Islands II", "question_title_slug": "number-of-distinct-islands-ii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Hash Table"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u54c8\u5e0c\u8868"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0712", "frontend_question_id": "0712", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-ascii-delete-sum-for-two-strings", "url_en": "https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings", "relative_path_cn": "/leetcode/0700-0799/0712.Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/README.md", "relative_path_en": "/leetcode/0700-0799/0712.Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/README_EN.md", "title_cn": "\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0fASCII\u5220\u9664\u548c", "title_en": "Minimum ASCII Delete Sum for Two Strings", "question_title_slug": "minimum-ascii-delete-sum-for-two-strings", "content_en": "<p>Given two strings <code>s1, s2</code>, find the lowest ASCII sum of deleted characters to make two strings equal.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"sea\", s2 = \"eat\"\r\n<b>Output:</b> 231\r\n<b>Explanation:</b> Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\nDeleting \"t\" from \"eat\" adds 116 to the sum.\r\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"delete\", s2 = \"leet\"\r\n<b>Output:</b> 403\r\n<b>Explanation:</b> Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < s1.length, s2.length <= 1000</code>.</li>\r\n<li>All elements of each string will have an ASCII value in <code>[97, 122]</code>.</li> \r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32<code>s1, s2</code>\uff0c\u627e\u5230\u4f7f\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u6240\u9700\u5220\u9664\u5b57\u7b26\u7684ASCII\u503c\u7684\u6700\u5c0f\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\n<strong>\u8f93\u51fa:</strong> 231\n<strong>\u89e3\u91ca:</strong> \u5728 &quot;sea&quot; \u4e2d\u5220\u9664 &quot;s&quot; \u5e76\u5c06 &quot;s&quot; \u7684\u503c(115)\u52a0\u5165\u603b\u548c\u3002\n\u5728 &quot;eat&quot; \u4e2d\u5220\u9664 &quot;t&quot; \u5e76\u5c06 116 \u52a0\u5165\u603b\u548c\u3002\n\u7ed3\u675f\u65f6\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c115 + 116 = 231 \u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5c0f\u548c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\n<strong>\u8f93\u51fa:</strong> 403\n<strong>\u89e3\u91ca:</strong> \u5728 &quot;delete&quot; \u4e2d\u5220\u9664 &quot;dee&quot; \u5b57\u7b26\u4e32\u53d8\u6210 &quot;let&quot;\uff0c\n\u5c06 100[d]+101[e]+101[e] \u52a0\u5165\u603b\u548c\u3002\u5728 &quot;leet&quot; \u4e2d\u5220\u9664 &quot;e&quot; \u5c06 101[e] \u52a0\u5165\u603b\u548c\u3002\n\u7ed3\u675f\u65f6\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u7b49\u4e8e &quot;let&quot;\uff0c\u7ed3\u679c\u5373\u4e3a 100+101+101+101 = 403 \u3002\n\u5982\u679c\u6539\u4e3a\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a &quot;lee&quot; \u6216 &quot;eet&quot;\uff0c\u6211\u4eec\u4f1a\u5f97\u5230 433 \u6216 417 \u7684\u7ed3\u679c\uff0c\u6bd4\u7b54\u6848\u66f4\u5927\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; s1.length, s2.length &lt;= 1000</code>\u3002</li>\n\t<li>\u6240\u6709\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26ASCII\u503c\u5728<code>[97, 122]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minimumDeleteSum(string s1, string s2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minimumDeleteSum(String s1, String s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minimumDeleteSum(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minimumDeleteSum(char * s1, char * s2){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinimumDeleteSum(string s1, string s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumDeleteSum = function(s1, s2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef minimum_delete_sum(s1, s2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minimumDeleteSum(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minimumDeleteSum(s1 string, s2 string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minimumDeleteSum(s1: String, s2: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minimumDeleteSum(s1: String, s2: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn minimum_delete_sum(s1: String, s2: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function minimumDeleteSum($s1, $s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minimumDeleteSum(s1: string, s2: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0713", "frontend_question_id": "0713", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subarray-product-less-than-k", "url_en": "https://leetcode.com/problems/subarray-product-less-than-k", "relative_path_cn": "/leetcode/0700-0799/0713.Subarray%20Product%20Less%20Than%20K/README.md", "relative_path_en": "/leetcode/0700-0799/0713.Subarray%20Product%20Less%20Than%20K/README_EN.md", "title_cn": "\u4e58\u79ef\u5c0f\u4e8eK\u7684\u5b50\u6570\u7ec4", "title_en": "Subarray Product Less Than K", "question_title_slug": "subarray-product-less-than-k", "content_en": "<p>Your are given an array of positive integers <code>nums</code>.</p>\r\n<p>Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than <code>k</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums = [10, 5, 2, 6], k = 100\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\r\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < nums.length <= 50000</code>.</li>\r\n<li><code>0 < nums[i] < 1000</code>.</li>\r\n<li><code>0 <= k < 10^6</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\u3002</p>\n\n<p>\u627e\u51fa\u8be5\u6570\u7ec4\u5185\u4e58\u79ef\u5c0f\u4e8e&nbsp;<code>k</code>&nbsp;\u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [10,5,2,6], k = 100\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> 8\u4e2a\u4e58\u79ef\u5c0f\u4e8e100\u7684\u5b50\u6570\u7ec4\u5206\u522b\u4e3a: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f [10,5,2] \u5e76\u4e0d\u662f\u4e58\u79ef\u5c0f\u4e8e100\u7684\u5b50\u6570\u7ec4\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; nums.length &lt;= 50000</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 1000</code></li>\n\t<li><code>0 &lt;= k &lt; 10^6</code></li>\n</ul>\n", "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSubarrayProductLessThanK(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSubarrayProductLessThanK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSubarrayProductLessThanK(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSubarrayProductLessThanK(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar numSubarrayProductLessThanK = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef num_subarray_product_less_than_k(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSubarrayProductLessThanK(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSubarrayProductLessThanK(nums []int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSubarrayProductLessThanK(nums: Array[Int], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSubarrayProductLessThanK(nums: IntArray, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_subarray_product_less_than_k(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function numSubarrayProductLessThanK($nums, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSubarrayProductLessThanK(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0714", "frontend_question_id": "0714", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee", "url_en": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee", "relative_path_cn": "/leetcode/0700-0799/0714.Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee/README.md", "relative_path_en": "/leetcode/0700-0799/0714.Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee/README_EN.md", "title_cn": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39", "title_en": "Best Time to Buy and Sell Stock with Transaction Fee", "question_title_slug": "best-time-to-buy-and-sell-stock-with-transaction-fee", "content_en": "<p>Your are given an array of integers <code>prices</code>, for which the <code>i</code>-th element is the price of a given stock on day <code>i</code>; and a non-negative integer <code>fee</code> representing a transaction fee.</p>\r\n<p>You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.  You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)</p>\r\n<p>Return the maximum profit you can make.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> prices = [1, 3, 2, 8, 4, 9], fee = 2\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> The maximum profit can be achieved by:\r\n<li>Buying at prices[0] = 1</li><li>Selling at prices[3] = 8</li><li>Buying at prices[4] = 4</li><li>Selling at prices[5] = 9</li>The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < prices.length <= 50000</code>.</li>\r\n<li><code>0 < prices[i] < 50000</code>.</li>\r\n<li><code>0 <= fee < 50000</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>prices</code>\uff0c\u5176\u4e2d\u7b2c&nbsp;<code>i</code>&nbsp;\u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c&nbsp;<code>i</code>&nbsp;\u5929\u7684\u80a1\u7968\u4ef7\u683c \uff1b\u975e\u8d1f\u6574\u6570&nbsp;<code>fee</code> \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002</p>\n\n<p>\u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u8fd9\u91cc\u7684\u4e00\u7b14\u4ea4\u6613\u6307\u4e70\u5165\u6301\u6709\u5e76\u5356\u51fa\u80a1\u7968\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u7b14\u4ea4\u6613\u4f60\u53ea\u9700\u8981\u4e3a\u652f\u4ed8\u4e00\u6b21\u624b\u7eed\u8d39\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> \u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u5229\u6da6:  \n\u5728\u6b64\u5904\u4e70\u5165&nbsp;prices[0] = 1\n\u5728\u6b64\u5904\u5356\u51fa prices[3] = 8\n\u5728\u6b64\u5904\u4e70\u5165 prices[4] = 4\n\u5728\u6b64\u5904\u5356\u51fa prices[5] = 9\n\u603b\u5229\u6da6:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; prices.length &lt;= 50000</code>.</li>\n\t<li><code>0 &lt; prices[i] &lt; 50000</code>.</li>\n\t<li><code>0 &lt;= fee &lt; 50000</code>.</li>\n</ul>\n", "tags_en": ["Greedy", "Array", "Dynamic Programming"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxProfit(int[] prices, int fee) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxProfit(int* prices, int pricesSize, int fee){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxProfit(int[] prices, int fee) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\nvar maxProfit = function(prices, fee) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @param {Integer} fee\n# @return {Integer}\ndef max_profit(prices, fee)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxProfit(_ prices: [Int], _ fee: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxProfit(prices []int, fee int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxProfit(prices: Array[Int], fee: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxProfit(prices: IntArray, fee: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>, fee: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @param Integer $fee\n     * @return Integer\n     */\n    function maxProfit($prices, $fee) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxProfit(prices: number[], fee: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0715", "frontend_question_id": "0715", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-module", "url_en": "https://leetcode.com/problems/range-module", "relative_path_cn": "/leetcode/0700-0799/0715.Range%20Module/README.md", "relative_path_en": "/leetcode/0700-0799/0715.Range%20Module/README_EN.md", "title_cn": "Range \u6a21\u5757", "title_en": "Range Module", "question_title_slug": "range-module", "content_en": "<p>A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.</p>\r\n\r\n<p><li><code>addRange(int left, int right)</code> Adds the half-open interval <code>[left, right)</code>, tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval <code>[left, right)</code> that are not already tracked.</li></p>\r\n\r\n<p><li><code>queryRange(int left, int right)</code> Returns true if and only if every real number in the interval <code>[left, right)</code>\r\n is currently being tracked.</li></p>\r\n\r\n<p><li><code>removeRange(int left, int right)</code> Stops tracking every real number currently being tracked in the interval <code>[left, right)</code>.</li></p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>addRange(10, 20)</b>: null\r\n<b>removeRange(14, 16)</b>: null\r\n<b>queryRange(10, 14)</b>: true (Every number in [10, 14) is being tracked)\r\n<b>queryRange(13, 15)</b>: false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\r\n<b>queryRange(16, 17)</b>: true (The number 16 in [16, 17) is still being tracked, despite the remove operation)\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>A half open interval <code>[left, right)</code> denotes all real numbers <code>left <= x < right</code>.</li>\r\n\r\n<li><code>0 < left < right < 10^9</code> in all calls to <code>addRange, queryRange, removeRange</code>.</li>\r\n<li>The total number of calls to <code>addRange</code> in a single test case is at most <code>1000</code>.</li>\r\n<li>The total number of calls to <code>queryRange</code> in a single test case is at most <code>5000</code>.</li>\r\n<li>The total number of calls to <code>removeRange</code> in a single test case is at most <code>1000</code>.</li>\r\n</p>", "content_cn": "<p>Range \u6a21\u5757\u662f\u8ddf\u8e2a\u6570\u5b57\u8303\u56f4\u7684\u6a21\u5757\u3002\u4f60\u7684\u4efb\u52a1\u662f\u4ee5\u4e00\u79cd\u6709\u6548\u7684\u65b9\u5f0f\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4ee5\u4e0b\u63a5\u53e3\u3002</p>\n\n<ul>\n\t<li><code>addRange(int left, int right)</code> \u6dfb\u52a0\u534a\u5f00\u533a\u95f4&nbsp;<code>[left, right)</code>\uff0c\u8ddf\u8e2a\u8be5\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u6570\u3002\u6dfb\u52a0\u4e0e\u5f53\u524d\u8ddf\u8e2a\u7684\u6570\u5b57\u90e8\u5206\u91cd\u53e0\u7684\u533a\u95f4\u65f6\uff0c\u5e94\u5f53\u6dfb\u52a0\u5728\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u5c1a\u672a\u8ddf\u8e2a\u7684\u4efb\u4f55\u6570\u5b57\u5230\u8be5\u533a\u95f4\u4e2d\u3002</li>\n\t<li><code>queryRange(int left, int right)</code>&nbsp;\u53ea\u6709\u5728\u5f53\u524d\u6b63\u5728\u8ddf\u8e2a\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b9e\u6570\u65f6\uff0c\u624d\u8fd4\u56de true\u3002</li>\n\t<li><code>removeRange(int left, int right)</code>&nbsp;\u505c\u6b62\u8ddf\u8e2a\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u5f53\u524d\u6b63\u5728\u8ddf\u8e2a\u7684\u6bcf\u4e2a\u5b9e\u6570\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true \uff08\u533a\u95f4 [10, 14) \u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u6b63\u5728\u88ab\u8ddf\u8e2a\uff09\n<strong>queryRange(13, 15)</strong>: false \uff08\u672a\u8ddf\u8e2a\u533a\u95f4 [13, 15) \u4e2d\u50cf 14, 14.03, 14.17 \u8fd9\u6837\u7684\u6570\u5b57\uff09\n<strong>queryRange(16, 17)</strong>: true \uff08\u5c3d\u7ba1\u6267\u884c\u4e86\u5220\u9664\u64cd\u4f5c\uff0c\u533a\u95f4 [16, 17) \u4e2d\u7684\u6570\u5b57 16 \u4ecd\u7136\u4f1a\u88ab\u8ddf\u8e2a\uff09\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u534a\u5f00\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u8868\u793a\u6240\u6709\u6ee1\u8db3&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;\u7684\u5b9e\u6570\u3002</li>\n\t<li>\u5bf9&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;\u7684\u6240\u6709\u8c03\u7528\u4e2d&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>addRange</code>&nbsp;\u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7&nbsp;<code>1000</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9&nbsp; <code>queryRange</code> \u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7 <code>5000</code> \u6b21\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9 <code>removeRange</code> \u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7&nbsp;<code>1000</code>&nbsp;\u6b21\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Segment Tree", "Ordered Map"], "tags_cn": ["\u7ebf\u6bb5\u6811", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class RangeModule {\npublic:\n    RangeModule() {\n\n    }\n    \n    void addRange(int left, int right) {\n\n    }\n    \n    bool queryRange(int left, int right) {\n\n    }\n    \n    void removeRange(int left, int right) {\n\n    }\n};\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule* obj = new RangeModule();\n * obj->addRange(left,right);\n * bool param_2 = obj->queryRange(left,right);\n * obj->removeRange(left,right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class RangeModule {\n\n    public RangeModule() {\n\n    }\n    \n    public void addRange(int left, int right) {\n\n    }\n    \n    public boolean queryRange(int left, int right) {\n\n    }\n    \n    public void removeRange(int left, int right) {\n\n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.addRange(left,right);\n * boolean param_2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class RangeModule(object):\n\n    def __init__(self):\n        \n\n    def addRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None\n        \"\"\"\n        \n\n    def queryRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def removeRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class RangeModule:\n\n    def __init__(self):\n        \n\n    def addRange(self, left: int, right: int) -> None:\n        \n\n    def queryRange(self, left: int, right: int) -> bool:\n        \n\n    def removeRange(self, left: int, right: int) -> None:\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} RangeModule;\n\n\nRangeModule* rangeModuleCreate() {\n    \n}\n\nvoid rangeModuleAddRange(RangeModule* obj, int left, int right) {\n  \n}\n\nbool rangeModuleQueryRange(RangeModule* obj, int left, int right) {\n  \n}\n\nvoid rangeModuleRemoveRange(RangeModule* obj, int left, int right) {\n  \n}\n\nvoid rangeModuleFree(RangeModule* obj) {\n    \n}\n\n/**\n * Your RangeModule struct will be instantiated and called as such:\n * RangeModule* obj = rangeModuleCreate();\n * rangeModuleAddRange(obj, left, right);\n \n * bool param_2 = rangeModuleQueryRange(obj, left, right);\n \n * rangeModuleRemoveRange(obj, left, right);\n \n * rangeModuleFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class RangeModule {\n\n    public RangeModule() {\n\n    }\n    \n    public void AddRange(int left, int right) {\n\n    }\n    \n    public bool QueryRange(int left, int right) {\n\n    }\n    \n    public void RemoveRange(int left, int right) {\n\n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.AddRange(left,right);\n * bool param_2 = obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar RangeModule = function() {\n\n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.addRange = function(left, right) {\n\n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {boolean}\n */\nRangeModule.prototype.queryRange = function(left, right) {\n\n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.removeRange = function(left, right) {\n\n};\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class RangeModule\n    def initialize()\n\n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def add_range(left, right)\n\n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Boolean\n=end\n    def query_range(left, right)\n\n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def remove_range(left, right)\n\n    end\n\n\nend\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule.new()\n# obj.add_range(left, right)\n# param_2 = obj.query_range(left, right)\n# obj.remove_range(left, right)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass RangeModule {\n\n    init() {\n        \n    }\n    \n    func addRange(_ left: Int, _ right: Int) {\n        \n    }\n    \n    func queryRange(_ left: Int, _ right: Int) -> Bool {\n        \n    }\n    \n    func removeRange(_ left: Int, _ right: Int) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * let obj = RangeModule()\n * obj.addRange(left, right)\n * let ret_2: Bool = obj.queryRange(left, right)\n * obj.removeRange(left, right)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type RangeModule struct {\n\n}\n\n\nfunc Constructor() RangeModule {\n\n}\n\n\nfunc (this *RangeModule) AddRange(left int, right int)  {\n\n}\n\n\nfunc (this *RangeModule) QueryRange(left int, right int) bool {\n\n}\n\n\nfunc (this *RangeModule) RemoveRange(left int, right int)  {\n\n}\n\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddRange(left,right);\n * param_2 := obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class RangeModule() {\n\n    def addRange(left: Int, right: Int) {\n\n    }\n\n    def queryRange(left: Int, right: Int): Boolean = {\n\n    }\n\n    def removeRange(left: Int, right: Int) {\n\n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class RangeModule() {\n\n    fun addRange(left: Int, right: Int) {\n\n    }\n\n    fun queryRange(left: Int, right: Int): Boolean {\n\n    }\n\n    fun removeRange(left: Int, right: Int) {\n\n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct RangeModule {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RangeModule {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn add_range(&self, left: i32, right: i32) {\n        \n    }\n    \n    fn query_range(&self, left: i32, right: i32) -> bool {\n        \n    }\n    \n    fn remove_range(&self, left: i32, right: i32) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * let obj = RangeModule::new();\n * obj.add_range(left, right);\n * let ret_2: bool = obj.query_range(left, right);\n * obj.remove_range(left, right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class RangeModule {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function addRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Boolean\n     */\n    function queryRange($left, $right) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return NULL\n     */\n    function removeRange($left, $right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * $obj = RangeModule();\n * $obj->addRange($left, $right);\n * $ret_2 = $obj->queryRange($left, $right);\n * $obj->removeRange($left, $right);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class RangeModule {\n    constructor() {\n\n    }\n\n    addRange(left: number, right: number): void {\n\n    }\n\n    queryRange(left: number, right: number): boolean {\n\n    }\n\n    removeRange(left: number, right: number): void {\n\n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0716", "frontend_question_id": "0716", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/max-stack", "url_en": "https://leetcode.com/problems/max-stack", "relative_path_cn": "/leetcode/0700-0799/0716.Max%20Stack/README.md", "relative_path_en": "/leetcode/0700-0799/0716.Max%20Stack/README_EN.md", "title_cn": "\u6700\u5927\u6808", "title_en": "Max Stack", "question_title_slug": "max-stack", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0717", "frontend_question_id": "0717", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/1-bit-and-2-bit-characters", "url_en": "https://leetcode.com/problems/1-bit-and-2-bit-characters", "relative_path_cn": "/leetcode/0700-0799/0717.1-bit%20and%202-bit%20Characters/README.md", "relative_path_en": "/leetcode/0700-0799/0717.1-bit%20and%202-bit%20Characters/README_EN.md", "title_cn": "1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26", "title_en": "1-bit and 2-bit Characters", "question_title_slug": "1-bit-and-2-bit-characters", "content_en": "<p>We have two special characters. The first character can be represented by one bit <code>0</code>. The second character can be represented by two bits (<code>10</code> or <code>11</code>).  </p>\r\n\r\n<p>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nbits = [1, 0, 0]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> \r\nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nbits = [1, 1, 1, 0]\r\n<b>Output:</b> False\r\n<b>Explanation:</b> \r\nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>1 <= len(bits) <= 1000</code>.</li>\r\n<li><code>bits[i]</code> is always <code>0</code> or <code>1</code>.</li>\r\n</p>", "content_cn": "<p>\u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279<code>0</code>\u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279(<code>10</code>&nbsp;\u6216&nbsp;<code>11</code>)\u6765\u8868\u793a\u3002</p>\n\n<p>\u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nbits = [1, 0, 0]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nbits = [1, 1, 1, 0]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= len(bits) &lt;= 1000</code>.</li>\n\t<li><code>bits[i]</code> \u603b\u662f<code>0</code> \u6216&nbsp;<code>1</code>.</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isOneBitCharacter(vector<int>& bits) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isOneBitCharacter(int[] bits) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isOneBitCharacter(self, bits):\n        \"\"\"\n        :type bits: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isOneBitCharacter(int* bits, int bitsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsOneBitCharacter(int[] bits) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} bits\n * @return {boolean}\n */\nvar isOneBitCharacter = function(bits) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} bits\n# @return {Boolean}\ndef is_one_bit_character(bits)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isOneBitCharacter(_ bits: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isOneBitCharacter(bits []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isOneBitCharacter(bits: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isOneBitCharacter(bits: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_one_bit_character(bits: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $bits\n     * @return Boolean\n     */\n    function isOneBitCharacter($bits) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isOneBitCharacter(bits: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0718", "frontend_question_id": "0718", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray", "url_en": "https://leetcode.com/problems/maximum-length-of-repeated-subarray", "relative_path_cn": "/leetcode/0700-0799/0718.Maximum%20Length%20of%20Repeated%20Subarray/README.md", "relative_path_en": "/leetcode/0700-0799/0718.Maximum%20Length%20of%20Repeated%20Subarray/README_EN.md", "title_cn": "\u6700\u957f\u91cd\u590d\u5b50\u6570\u7ec4", "title_en": "Maximum Length of Repeated Subarray", "question_title_slug": "maximum-length-of-repeated-subarray", "content_en": "<p>Given two integer arrays <code>A</code> and <code>B</code>, return the maximum length of an subarray that appears in both arrays.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\nA: [1,2,3,2,1]\r\nB: [3,2,1,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe repeated subarray with maximum length is [3, 2, 1].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>1 &lt;= len(A), len(B) &lt;= 1000</li>\r\n\t<li>0 &lt;= A[i], B[i] &lt; 100</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u4e24\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u4e2d\u516c\u5171\u7684\u3001\u957f\u5ea6\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u957f\u5ea6\u6700\u957f\u7684\u516c\u5171\u5b50\u6570\u7ec4\u662f [3, 2, 1] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= len(A), len(B) &lt;= 1000</code></li>\n\t<li><code>0 &lt;= A[i], B[i] &lt; 100</code></li>\n</ul>\n", "tags_en": ["Array", "Hash Table", "Binary Search", "Dynamic Programming"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868", "\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLength(vector<int>& A, vector<int>& B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLength(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLength(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLength(self, A: List[int], B: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLength(int* A, int ASize, int* B, int BSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLength(int[] A, int[] B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number}\n */\nvar findLength = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer}\ndef find_length(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLength(_ A: [Int], _ B: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLength(A []int, B []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLength(A: Array[Int], B: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLength(A: IntArray, B: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_length(a: Vec<i32>, b: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer[] $B\n     * @return Integer\n     */\n    function findLength($A, $B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLength(A: number[], B: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0719", "frontend_question_id": "0719", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance", "url_en": "https://leetcode.com/problems/find-k-th-smallest-pair-distance", "relative_path_cn": "/leetcode/0700-0799/0719.Find%20K-th%20Smallest%20Pair%20Distance/README.md", "relative_path_en": "/leetcode/0700-0799/0719.Find%20K-th%20Smallest%20Pair%20Distance/README_EN.md", "title_cn": "\u627e\u51fa\u7b2c k \u5c0f\u7684\u8ddd\u79bb\u5bf9", "title_en": "Find K-th Smallest Pair Distance", "question_title_slug": "find-k-th-smallest-pair-distance", "content_en": "<p>Given an integer array, return the k-th smallest <b>distance</b> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. </p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nnums = [1,3,1]\r\nk = 1\r\n<b>Output: 0</b> \r\n<b>Explanation:</b>\r\nHere are all the pairs:\r\n(1,3) -> 2\r\n(1,1) -> 0\r\n(3,1) -> 2\r\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>2 <= len(nums) <= 10000</code>.</li>\r\n<li><code>0 <= nums[i] < 1000000</code>.</li>\r\n<li><code>1 <= k <= len(nums) * (len(nums) - 1) / 2</code>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u6240\u6709\u6570\u5bf9\u4e4b\u95f4\u7684\u7b2c k \u4e2a\u6700\u5c0f<strong>\u8ddd\u79bb</strong>\u3002\u4e00\u5bf9 (A, B) \u7684\u8ddd\u79bb\u88ab\u5b9a\u4e49\u4e3a A \u548c B \u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\nnums = [1,3,1]\nk = 1\n<strong>\u8f93\u51fa\uff1a0</strong> \n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709\u6570\u5bf9\u5982\u4e0b\uff1a\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n\u56e0\u6b64\u7b2c 1 \u4e2a\u6700\u5c0f\u8ddd\u79bb\u7684\u6570\u5bf9\u662f (1,1)\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 0\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n", "tags_en": ["Heap", "Array", "Binary Search"], "tags_cn": ["\u5806", "\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int smallestDistancePair(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def smallestDistancePair(self, nums: List[int], k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint smallestDistancePair(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SmallestDistancePair(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar smallestDistancePair = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef smallest_distance_pair(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func smallestDistancePair(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func smallestDistancePair(nums []int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def smallestDistancePair(nums: Array[Int], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun smallestDistancePair(nums: IntArray, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn smallest_distance_pair(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function smallestDistancePair($nums, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function smallestDistancePair(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0720", "frontend_question_id": "0720", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-word-in-dictionary", "url_en": "https://leetcode.com/problems/longest-word-in-dictionary", "relative_path_cn": "/leetcode/0700-0799/0720.Longest%20Word%20in%20Dictionary/README.md", "relative_path_en": "/leetcode/0700-0799/0720.Longest%20Word%20in%20Dictionary/README_EN.md", "title_cn": "\u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd", "title_en": "Longest Word in Dictionary", "question_title_slug": "longest-word-in-dictionary", "content_en": "<p>Given a list of strings <code>words</code> representing an English Dictionary, find the longest word in <code>words</code> that can be built one character at a time by other words in <code>words</code>.  If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p>  If there is no answer, return the empty string.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\r\n<b>Output:</b> \"world\"\r\n<b>Explanation:</b> \r\nThe word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\r\n<b>Output:</b> \"apple\"\r\n<b>Explanation:</b> \r\nBoth \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>All the strings in the input will only contain lowercase letters.</li>\r\n<li>The length of <code>words</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>words[i]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4<code>words</code>\u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531<code>words</code>\u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nwords = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;world&quot;\n<strong>\u89e3\u91ca\uff1a</strong> \n\u5355\u8bcd&quot;world&quot;\u53ef\u7531&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, \u548c &quot;worl&quot;\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nwords = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;apple&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n&quot;apply&quot;\u548c&quot;apple&quot;\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f&quot;apple&quot;\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e&quot;apply&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>words</code>\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1,1000]</code>\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1,30]</code>\u3002</li>\n</ul>\n", "tags_en": ["Trie", "Hash Table"], "tags_cn": ["\u5b57\u5178\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string longestWord(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String longestWord(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestWord(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * longestWord(char ** words, int wordsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string LongestWord(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string}\n */\nvar longestWord = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String}\ndef longest_word(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestWord(_ words: [String]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestWord(words []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestWord(words: Array[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestWord(words: Array<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_word(words: Vec<String>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String\n     */\n    function longestWord($words) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestWord(words: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0721", "frontend_question_id": "0721", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/accounts-merge", "url_en": "https://leetcode.com/problems/accounts-merge", "relative_path_cn": "/leetcode/0700-0799/0721.Accounts%20Merge/README.md", "relative_path_en": "/leetcode/0700-0799/0721.Accounts%20Merge/README_EN.md", "title_cn": "\u8d26\u6237\u5408\u5e76", "title_en": "Accounts Merge", "question_title_slug": "accounts-merge", "content_en": "<p>Given a list <code>accounts</code>, each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a <i>name</i>, and the rest of the elements are <i>emails</i> representing emails of the account.</p>\r\n\r\n<p>Now, we would like to merge these accounts.  Two accounts definitely belong to the same person if there is some email that is common to both accounts.  Note that even if two accounts have the same name, they may belong to different people as people could have the same name.  A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\r\n\r\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <b>in sorted order</b>.  The accounts themselves can be returned in any order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Output:</b> [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Explanation:</b> \r\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\r\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\r\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \r\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>accounts</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>accounts[i]</code> will be in the range <code>[1, 10]</code>.</li>\r\n<li>The length of <code>accounts[i][j]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 <code>accounts</code>\uff0c\u6bcf\u4e2a\u5143\u7d20 <code>accounts[i]</code>&nbsp;\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20 <code>accounts[i][0]</code>&nbsp;\u662f&nbsp;<em>\u540d\u79f0 (name)</em>\uff0c\u5176\u4f59\u5143\u7d20\u662f <em>emails </em>\u8868\u793a\u8be5\u5e10\u6237\u7684\u90ae\u7bb1\u5730\u5740\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u5408\u5e76\u8fd9\u4e9b\u5e10\u6237\u3002\u5982\u679c\u4e24\u4e2a\u5e10\u6237\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u7684\u90ae\u4ef6\u5730\u5740\uff0c\u5219\u4e24\u4e2a\u5e10\u6237\u5fc5\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u4e24\u4e2a\u5e10\u6237\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4eba\u4eec\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002\u4e00\u4e2a\u4eba\u6700\u521d\u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u6570\u91cf\u7684\u5e10\u6237\uff0c\u4f46\u5176\u6240\u6709\u5e10\u6237\u90fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002</p>\n\n<p>\u5408\u5e76\u5e10\u6237\u540e\uff0c\u6309\u4ee5\u4e0b\u683c\u5f0f\u8fd4\u56de\u5e10\u6237\uff1a\u6bcf\u4e2a\u5e10\u6237\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u540d\u79f0\uff0c\u5176\u4f59\u5143\u7d20\u662f\u6309\u987a\u5e8f\u6392\u5217\u7684\u90ae\u7bb1\u5730\u5740\u3002accounts \u672c\u8eab\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u3002</p>\n\n<p><strong>\u4f8b\u5b50 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \naccounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Explanation:</strong> \n  \u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a John \u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6709\u5171\u540c\u7684\u7535\u5b50\u90ae\u4ef6 &quot;johnsmith@mail.com&quot;\u3002 \n  \u7b2c\u4e8c\u4e2a John \u548c Mary \u662f\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6ca1\u6709\u88ab\u5176\u4ed6\u5e10\u6237\u4f7f\u7528\u3002\n  \u6211\u4eec\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e9b\u5217\u8868\uff0c\u4f8b\u5982\u7b54\u6848[[&#39;Mary&#39;\uff0c&#39;mary@mail.com&#39;]\uff0c[&#39;John&#39;\uff0c&#39;johnnybravo@mail.com&#39;]\uff0c\n  [&#39;John&#39;\uff0c&#39;john00@mail.com&#39;\uff0c&#39;john_newyork@mail.com&#39;\uff0c&#39;johnsmith@mail.com&#39;]]\u4ecd\u7136\u4f1a\u88ab\u63a5\u53d7\u3002\n\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>accounts</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c1000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li><code>accounts[i]</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c10]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li><code>accounts[i][j]</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c30]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def accountsMerge(self, accounts):\n        \"\"\"\n        :type accounts: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** accountsMerge(char *** accounts, int accountsSize, int* accountsColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> AccountsMerge(IList<IList<string>> accounts) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[][]} accounts\n * @return {string[][]}\n */\nvar accountsMerge = function(accounts) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[][]} accounts\n# @return {String[][]}\ndef accounts_merge(accounts)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func accountsMerge(_ accounts: [[String]]) -> [[String]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func accountsMerge(accounts [][]string) [][]string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def accountsMerge(accounts: List[List[String]]): List[List[String]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun accountsMerge(accounts: List<List<String>>): List<List<String>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn accounts_merge(accounts: Vec<Vec<String>>) -> Vec<Vec<String>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $accounts\n     * @return String[][]\n     */\n    function accountsMerge($accounts) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function accountsMerge(accounts: string[][]): string[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0722", "frontend_question_id": "0722", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-comments", "url_en": "https://leetcode.com/problems/remove-comments", "relative_path_cn": "/leetcode/0700-0799/0722.Remove%20Comments/README.md", "relative_path_en": "/leetcode/0700-0799/0722.Remove%20Comments/README_EN.md", "title_cn": "\u5220\u9664\u6ce8\u91ca", "title_en": "Remove Comments", "question_title_slug": "remove-comments", "content_en": "<p>Given a C++ program, remove comments from it. The program <code>source</code> is an array where <code>source[i]</code> is the <code>i</code>-th line of the source code.  This represents the result of splitting the original source code string by the newline character <code>\\n</code>.</p>\r\n\r\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\r\n<p>\r\nThe string <code>//</code> denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n</p><p>\r\nThe string <code>/*</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>*/</code> should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string <code>/*/</code> does not yet end the block comment, as the ending would be overlapping the beginning.\r\n</p><p>\r\nThe first effective comment takes precedence over others: if the string <code>//</code> occurs in a block comment, it is ignored. Similarly, if the string <code>/*</code> occurs in a line or block comment, it is also ignored.\r\n</p><p>\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n</p><p>\r\nThere will be no control characters, single quote, or double quote characters.  For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\r\n</p><p>\r\nIt is guaranteed that every open block comment will eventually be closed, so <code>/*</code> outside of a line or block comment always starts a new comment.\r\n</p><p>\r\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\r\n</p>\r\n\r\n<p>After removing the comments from the source code, return the source code in the same format.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\n<b>Output:</b> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\n<b>Explanation:</b> \r\nThe string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\n<b>Output:</b> [\"ab\"]\r\n<b>Explanation:</b> The original source string is \"a/*comment<b>\\n</b>line<b>\\n</b>more_comment*/b\", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>source</code> is in the range <code>[1, 100]</code>.</li>\r\n<li>The length of <code>source[i]</code> is in the range <code>[0, 80]</code>.</li>\r\n<li>Every open block comment is eventually closed.</li>\r\n<li>There are no single-quote, double-quote, or control characters in the source code.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u4e00\u4e2a C++ \u7a0b\u5e8f\uff0c\u5220\u9664\u7a0b\u5e8f\u4e2d\u7684\u6ce8\u91ca\u3002\u8fd9\u4e2a\u7a0b\u5e8f<code>source</code>\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d<code>source[i]</code>\u8868\u793a\u7b2c<code>i</code>\u884c\u6e90\u7801\u3002&nbsp;\u8fd9\u8868\u793a\u6bcf\u884c\u6e90\u7801\u7531<code>\\n</code>\u5206\u9694\u3002</p>\n\n<p>\u5728 C++ \u4e2d\u6709\u4e24\u79cd\u6ce8\u91ca\u98ce\u683c\uff0c\u884c\u5185\u6ce8\u91ca\u548c\u5757\u6ce8\u91ca\u3002</p>\n\n<p>\u5b57\u7b26\u4e32<code>//</code> \u8868\u793a\u884c\u6ce8\u91ca\uff0c\u8868\u793a<code>//</code>\u548c\u5176\u53f3\u4fa7\u7684\u5176\u4f59\u5b57\u7b26\u5e94\u8be5\u88ab\u5ffd\u7565\u3002</p>\n\n<p>\u5b57\u7b26\u4e32<code>/*</code> \u8868\u793a\u4e00\u4e2a\u5757\u6ce8\u91ca\uff0c\u5b83\u8868\u793a\u76f4\u5230<code>*/</code>\u7684\u4e0b\u4e00\u4e2a\uff08\u975e\u91cd\u53e0\uff09\u51fa\u73b0\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5e94\u8be5\u88ab\u5ffd\u7565\u3002\uff08\u9605\u8bfb\u987a\u5e8f\u4e3a\u4ece\u5de6\u5230\u53f3\uff09\u975e\u91cd\u53e0\u662f\u6307\uff0c\u5b57\u7b26\u4e32<code>/*/</code>\u5e76\u6ca1\u6709\u7ed3\u675f\u5757\u6ce8\u91ca\uff0c\u56e0\u4e3a\u6ce8\u91ca\u7684\u7ed3\u5c3e\u4e0e\u5f00\u5934\u76f8\u91cd\u53e0\u3002</p>\n\n<p>\u7b2c\u4e00\u4e2a\u6709\u6548\u6ce8\u91ca\u4f18\u5148\u4e8e\u5176\u4ed6\u6ce8\u91ca\uff1a\u5982\u679c\u5b57\u7b26\u4e32<code>//</code>\u51fa\u73b0\u5728\u5757\u6ce8\u91ca\u4e2d\u4f1a\u88ab\u5ffd\u7565\u3002 \u540c\u6837\uff0c\u5982\u679c\u5b57\u7b26\u4e32<code>/*</code>\u51fa\u73b0\u5728\u884c\u6216\u5757\u6ce8\u91ca\u4e2d\u4e5f\u4f1a\u88ab\u5ffd\u7565\u3002</p>\n\n<p>\u5982\u679c\u4e00\u884c\u5728\u5220\u9664\u6ce8\u91ca\u4e4b\u540e\u53d8\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48<strong>\u4e0d\u8981</strong>\u8f93\u51fa\u8be5\u884c\u3002\u5373\uff0c\u7b54\u6848\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f\u975e\u7a7a\u7684\u3002</p>\n\n<p>\u6837\u4f8b\u4e2d<strong>\u6ca1\u6709</strong>\u63a7\u5236\u5b57\u7b26\uff0c\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5b57\u7b26\u3002\u6bd4\u5982\uff0c<code>source = &quot;string s = &quot;/* Not a comment. */&quot;;&quot;</code> \u4e0d\u4f1a\u51fa\u73b0\u5728\u6d4b\u8bd5\u6837\u4f8b\u91cc\u3002\uff08\u6b64\u5916\uff0c\u6ca1\u6709\u5176\u4ed6\u5185\u5bb9\uff08\u5982\u5b9a\u4e49\u6216\u5b8f\uff09\u4f1a\u5e72\u6270\u6ce8\u91ca\u3002\uff09</p>\n\n<p>\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5757\u6ce8\u91ca\u6700\u7ec8\u90fd\u4f1a\u88ab\u95ed\u5408\uff0c \u6240\u4ee5\u5728\u884c\u6216\u5757\u6ce8\u91ca\u4e4b\u5916\u7684<code>/*</code>\u603b\u662f\u5f00\u59cb\u65b0\u7684\u6ce8\u91ca\u3002</p>\n\n<p>\u6700\u540e\uff0c\u9690\u5f0f\u6362\u884c\u7b26<strong>\u53ef\u4ee5</strong>\u901a\u8fc7\u5757\u6ce8\u91ca\u5220\u9664\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u793a\u4f8b\u3002</p>\n\n<p>\u4ece\u6e90\u4ee3\u7801\u4e2d\u5220\u9664\u6ce8\u91ca\u540e\uff0c\u9700\u8981\u4ee5\u76f8\u540c\u7684\u683c\u5f0f\u8fd4\u56de\u6e90\u4ee3\u7801\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nsource = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]\n\n\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u7f16\u6392\u6210\u8fd9\u6837:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\n\n<strong>\u8f93\u51fa:</strong> [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]\n\n\u7f16\u6392\u540e:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c 1 \u884c\u548c\u7b2c 6-9 \u884c\u7684\u5b57\u7b26\u4e32 /* \u8868\u793a\u5757\u6ce8\u91ca\u3002\u7b2c 4 \u884c\u7684\u5b57\u7b26\u4e32 // \u8868\u793a\u884c\u6ce8\u91ca\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nsource = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;ab&quot;]\n<strong>\u89e3\u91ca:</strong> \u539f\u59cb\u7684 source \u5b57\u7b26\u4e32\u662f &quot;a/*comment<strong>\\n</strong>line<strong>\\n</strong>more_comment*/b&quot;, \u5176\u4e2d\u6211\u4eec\u7528\u7c97\u4f53\u663e\u793a\u4e86\u6362\u884c\u7b26\u3002\u5220\u9664\u6ce8\u91ca\u540e\uff0c\u9690\u542b\u7684\u6362\u884c\u7b26\u88ab\u5220\u9664\uff0c\u7559\u4e0b\u5b57\u7b26\u4e32 &quot;ab&quot; \u7528\u6362\u884c\u7b26\u5206\u9694\u6210\u6570\u7ec4\u65f6\u5c31\u662f [&quot;ab&quot;].\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>source</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1, 100]</code>.</li>\n\t<li><code>source[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[0, 80]</code>.</li>\n\t<li>\u6bcf\u4e2a\u5757\u6ce8\u91ca\u90fd\u4f1a\u88ab\u95ed\u5408\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6e90\u7801\u4e2d\u4e0d\u4f1a\u6709\u5355\u5f15\u53f7\u3001\u53cc\u5f15\u53f7\u6216\u5176\u4ed6\u63a7\u5236\u5b57\u7b26\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> removeComments(vector<string>& source) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> removeComments(String[] source) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** removeComments(char ** source, int sourceSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> RemoveComments(string[] source) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} source\n * @return {string[]}\n */\nvar removeComments = function(source) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} source\n# @return {String[]}\ndef remove_comments(source)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeComments(_ source: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeComments(source []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeComments(source: Array[String]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeComments(source: Array<String>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_comments(source: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $source\n     * @return String[]\n     */\n    function removeComments($source) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeComments(source: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0723", "frontend_question_id": "0723", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/candy-crush", "url_en": "https://leetcode.com/problems/candy-crush", "relative_path_cn": "/leetcode/0700-0799/0723.Candy%20Crush/README.md", "relative_path_en": "/leetcode/0700-0799/0723.Candy%20Crush/README_EN.md", "title_cn": "\u7c89\u788e\u7cd6\u679c", "title_en": "Candy Crush", "question_title_slug": "candy-crush", "content_en": null, "content_cn": null, "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0724", "frontend_question_id": "0724", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-pivot-index", "url_en": "https://leetcode.com/problems/find-pivot-index", "relative_path_cn": "/leetcode/0700-0799/0724.Find%20Pivot%20Index/README.md", "relative_path_en": "/leetcode/0700-0799/0724.Find%20Pivot%20Index/README_EN.md", "title_cn": "\u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u7d22\u5f15", "title_en": "Find Pivot Index", "question_title_slug": "find-pivot-index", "content_en": "<p>Given an array of integers <code>nums</code>, write a method that returns the &quot;pivot&quot; index of this array.</p>\n\n<p>We define the pivot index as the index where the sum of all the numbers to the left of the index is equal to the sum of all the numbers to the right of the index.</p>\n\n<p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,3,6,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\nAlso, 3 is the first index where this occurs.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nThere is no index that satisfies the conditions in the problem statement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The length of <code>nums</code> will be in the range <code>[0, 10000]</code>.</li>\n\t<li>Each element <code>nums[i]</code> will be an integer in the range <code>[-1000, 1000]</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u7c7b\u578b\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u80fd\u591f\u8fd4\u56de\u6570\u7ec4 <strong>&ldquo;\u4e2d\u5fc3\u7d22\u5f15&rdquo; </strong>\u7684\u65b9\u6cd5\u3002</p>\n\n<p>\u6211\u4eec\u662f\u8fd9\u6837\u5b9a\u4e49\u6570\u7ec4<strong> \u4e2d\u5fc3\u7d22\u5f15 </strong>\u7684\uff1a\u6570\u7ec4\u4e2d\u5fc3\u7d22\u5f15\u7684\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u7b49\u4e8e\u53f3\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u3002</p>\n\n<p>\u5982\u679c\u6570\u7ec4\u4e0d\u5b58\u5728\u4e2d\u5fc3\u7d22\u5f15\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u8fd4\u56de -1\u3002\u5982\u679c\u6570\u7ec4\u6709\u591a\u4e2a\u4e2d\u5fc3\u7d22\u5f15\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u6700\u9760\u8fd1\u5de6\u8fb9\u7684\u90a3\u4e00\u4e2a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nnums = [1, 7, 3, 6, 5, 6]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7d22\u5f15 3 (nums[3] = 6) \u7684\u5de6\u4fa7\u6570\u4e4b\u548c (1 + 7 + 3 = 11)\uff0c\u4e0e\u53f3\u4fa7\u6570\u4e4b\u548c (5 + 6 = 11) \u76f8\u7b49\u3002\n\u540c\u65f6, 3 \u4e5f\u662f\u7b2c\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u4e2d\u5fc3\u7d22\u5f15\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nnums = [1, 2, 3]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u4e2d\u5fc3\u7d22\u5f15\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li><code>nums</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[0, 10000]</code>\u3002</li>\n\t<li>\u4efb\u4f55\u4e00\u4e2a&nbsp;<code>nums[i]</code> \u5c06\u4f1a\u662f\u4e00\u4e2a\u8303\u56f4\u5728&nbsp;<code>[-1000, 1000]</code>\u7684\u6574\u6570\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int pivotIndex(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint pivotIndex(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PivotIndex(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef pivot_index(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func pivotIndex(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func pivotIndex(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pivotIndex(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pivotIndex(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn pivot_index(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function pivotIndex($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pivotIndex(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0725", "frontend_question_id": "0725", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/split-linked-list-in-parts", "url_en": "https://leetcode.com/problems/split-linked-list-in-parts", "relative_path_cn": "/leetcode/0700-0799/0725.Split%20Linked%20List%20in%20Parts/README.md", "relative_path_en": "/leetcode/0700-0799/0725.Split%20Linked%20List%20in%20Parts/README_EN.md", "title_cn": "\u5206\u9694\u94fe\u8868", "title_en": "Split Linked List in Parts", "question_title_slug": "split-linked-list-in-parts", "content_en": "<p>Given a (singly) linked list with head node <code>root</code>, write a function to split the linked list into <code>k</code> consecutive linked list \"parts\".\r\n</p><p>\r\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\r\n</p><p>\r\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\r\n</p><p>\r\nReturn a List of ListNode's representing the linked list parts that are formed.\r\n</p>\r\n\r\nExamples\r\n1->2->3->4, k = 5 // 5 equal parts\r\n[ [1], \r\n[2],\r\n[3],\r\n[4],\r\nnull ]\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-line\">\r\n<b>Input:</b> \r\nroot = [1, 2, 3], k = 5\r\n<b>Output:</b> [[1],[2],[3],[],[]]\r\n<b>Explanation:</b>\r\nThe input and each element of the output are ListNodes, not arrays.\r\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\nThe first element output[0] has output[0].val = 1, output[0].next = null.\r\nThe last element output[4] is null, but it's string representation as a ListNode is [].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n<b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n<b>Explanation:</b>\r\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>root</code> will be in the range <code>[0, 1000]</code>.</li>\r\n<li>Each value of a node in the input will be an integer in the range <code>[0, 999]</code>.</li>\r\n<li><code>k</code> will be an integer in the range <code>[1, 50]</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a <code>root</code> \u7684\u94fe\u8868, \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u4ee5\u5c06\u94fe\u8868\u5206\u9694\u4e3a <code>k</code> \u4e2a\u8fde\u7eed\u7684\u90e8\u5206\u3002</p>\n\n<p>\u6bcf\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u76f8\u7b49: \u4efb\u610f\u4e24\u90e8\u5206\u7684\u957f\u5ea6\u5dee\u8ddd\u4e0d\u80fd\u8d85\u8fc7 1\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u80fd\u6709\u4e9b\u90e8\u5206\u4e3a null\u3002</p>\n\n<p>\u8fd9k\u4e2a\u90e8\u5206\u5e94\u8be5\u6309\u7167\u5728\u94fe\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u8fdb\u884c\u8f93\u51fa\uff0c\u5e76\u4e14\u6392\u5728\u524d\u9762\u7684\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5927\u4e8e\u6216\u7b49\u4e8e\u540e\u9762\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u7b26\u5408\u4e0a\u8ff0\u89c4\u5219\u7684\u94fe\u8868\u7684\u5217\u8868\u3002</p>\n\n<p>\u4e3e\u4f8b\uff1a 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 \u7ed3\u679c [ [1], [2], [3], [4], null ]</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nroot = [1, 2, 3], k = 5\n<strong>\u8f93\u51fa:</strong> [[1],[2],[3],[],[]]\n<strong>\u89e3\u91ca:</strong>\n\u8f93\u5165\u8f93\u51fa\u5404\u90e8\u5206\u90fd\u5e94\u8be5\u662f\u94fe\u8868\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\u4f8b\u5982, \u8f93\u5165\u7684\u7ed3\u70b9 root \u7684 val= 1, root.next.val = 2, \\root.next.next.val = 3, \u4e14 root.next.next.next = null\u3002\n\u7b2c\u4e00\u4e2a\u8f93\u51fa output[0] \u662f output[0].val = 1, output[0].next = null\u3002\n\u6700\u540e\u4e00\u4e2a\u5143\u7d20 output[4] \u4e3a null, \u5b83\u4ee3\u8868\u4e86\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u4e3a\u7a7a\u94fe\u8868\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>\u8f93\u51fa:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>\u89e3\u91ca:</strong>\n\u8f93\u5165\u88ab\u5206\u6210\u4e86\u51e0\u4e2a\u8fde\u7eed\u7684\u90e8\u5206\uff0c\u5e76\u4e14\u6bcf\u90e8\u5206\u7684\u957f\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71.\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u540e\u9762\u90e8\u5206\u7684\u957f\u5ea6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li><code>root</code> \u7684\u957f\u5ea6\u8303\u56f4\uff1a&nbsp;<code>[0, 1000]</code>.</li>\n\t<li>\u8f93\u5165\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\u8303\u56f4\uff1a<code>[0, 999]</code>.</li>\n\t<li><code>k</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\uff1a&nbsp;<code>[1, 50]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* root, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode[] splitListToParts(ListNode root, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def splitListToParts(self, root, k):\n        \"\"\"\n        :type root: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct ListNode** splitListToParts(struct ListNode* root, int k, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode[] SplitListToParts(ListNode root, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} root\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(root, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} root\n# @param {Integer} k\n# @return {ListNode[]}\ndef split_list_to_parts(root, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func splitListToParts(_ root: ListNode?, _ k: Int) -> [ListNode?] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc splitListToParts(root *ListNode, k int) []*ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def splitListToParts(root: ListNode, k: Int): Array[ListNode] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun splitListToParts(root: ListNode?, k: Int): Array<ListNode?> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn split_list_to_parts(root: Option<Box<ListNode>>, k: i32) -> Vec<Option<Box<ListNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $root\n     * @param Integer $k\n     * @return ListNode[]\n     */\n    function splitListToParts($root, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction splitListToParts(root: ListNode | null, k: number): Array<ListNode | null> {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0726", "frontend_question_id": "0726", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-atoms", "url_en": "https://leetcode.com/problems/number-of-atoms", "relative_path_cn": "/leetcode/0700-0799/0726.Number%20of%20Atoms/README.md", "relative_path_en": "/leetcode/0700-0799/0726.Number%20of%20Atoms/README_EN.md", "title_cn": "\u539f\u5b50\u7684\u6570\u91cf", "title_en": "Number of Atoms", "question_title_slug": "number-of-atoms", "content_en": "<p>Given a chemical <code>formula</code> (given as a string), return the count of each atom.</p>\n\n<p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>\n\n<p>One or more digits representing that element&#39;s count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.</p>\n\n<p>Two formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.</p>\n\n<p>A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.</p>\n\n<p>Given a <code>formula</code>, return <em>the count of all elements as a string in the following form</em>: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;H2O&quot;\n<strong>Output:</strong> &quot;H2O&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;O&#39;: 1}.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;Mg(OH)2&quot;\n<strong>Output:</strong> &quot;H2MgO2&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;K4(ON(SO3)2)2&quot;\n<strong>Output:</strong> &quot;K4N2O14S4&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;Be32&quot;\n<strong>Output:</strong> &quot;Be32&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= formula.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>formula</code> consists of English letters, digits, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</li>\n\t<li><code>formula</code> is always valid.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5316\u5b66\u5f0f<code>formula</code>\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\uff0c\u8fd4\u56de\u6bcf\u79cd\u539f\u5b50\u7684\u6570\u91cf\u3002</p>\n\n<p>\u539f\u5b50\u603b\u662f\u4ee5\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u59cb\uff0c\u63a5\u7740\u8ddf\u968f0\u4e2a\u6216\u4efb\u610f\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u8868\u793a\u539f\u5b50\u7684\u540d\u5b57\u3002</p>\n\n<p>\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff0c\u539f\u5b50\u540e\u4f1a\u8ddf\u7740\u6570\u5b57\u8868\u793a\u539f\u5b50\u7684\u6570\u91cf\u3002\u5982\u679c\u6570\u91cf\u7b49\u4e8e 1 \u5219\u4e0d\u4f1a\u8ddf\u6570\u5b57\u3002\u4f8b\u5982\uff0cH2O \u548c H2O2 \u662f\u53ef\u884c\u7684\uff0c\u4f46 H1O2 \u8fd9\u4e2a\u8868\u8fbe\u662f\u4e0d\u53ef\u884c\u7684\u3002</p>\n\n<p>\u4e24\u4e2a\u5316\u5b66\u5f0f\u8fde\u5728\u4e00\u8d77\u662f\u65b0\u7684\u5316\u5b66\u5f0f\u3002\u4f8b\u5982&nbsp;H2O2He3Mg4 \u4e5f\u662f\u5316\u5b66\u5f0f\u3002</p>\n\n<p>\u4e00\u4e2a\u62ec\u53f7\u4e2d\u7684\u5316\u5b66\u5f0f\u548c\u6570\u5b57\uff08\u53ef\u9009\u62e9\u6027\u6dfb\u52a0\uff09\u4e5f\u662f\u5316\u5b66\u5f0f\u3002\u4f8b\u5982 (H2O2) \u548c (H2O2)3 \u662f\u5316\u5b66\u5f0f\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5316\u5b66\u5f0f\uff0c\u8f93\u51fa\u6240\u6709\u539f\u5b50\u7684\u6570\u91cf\u3002\u683c\u5f0f\u4e3a\uff1a\u7b2c\u4e00\u4e2a\uff08\u6309\u5b57\u5178\u5e8f\uff09\u539f\u5b50\u7684\u540d\u5b50\uff0c\u8ddf\u7740\u5b83\u7684\u6570\u91cf\uff08\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff09\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u4e2a\u539f\u5b50\u7684\u540d\u5b57\uff08\u6309\u5b57\u5178\u5e8f\uff09\uff0c\u8ddf\u7740\u5b83\u7684\u6570\u91cf\uff08\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;H2O&quot;\n<strong>\u8f93\u51fa:</strong> &quot;H2O&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;H&#39;: 2, &#39;O&#39;: 1}\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;Mg(OH)2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;H2MgO2&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;K4(ON(SO3)2)2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;K4N2O14S4&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u539f\u5b50\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e3a\u5927\u5199\uff0c\u5269\u4f59\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u3002</li>\n\t<li><code>formula</code>\u7684\u957f\u5ea6\u5728<code>[1, 1000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>formula</code>\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u5706\u62ec\u53f7\uff0c\u5e76\u4e14\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u662f\u5408\u6cd5\u7684\u5316\u5b66\u5f0f\u3002</li>\n</ul>\n", "tags_en": ["Stack", "Recursion", "Hash Table"], "tags_cn": ["\u6808", "\u9012\u5f52", "\u54c8\u5e0c\u8868"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string countOfAtoms(string formula) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String countOfAtoms(String formula) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countOfAtoms(self, formula: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * countOfAtoms(char * formula){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string CountOfAtoms(string formula) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} formula\n * @return {string}\n */\nvar countOfAtoms = function(formula) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} formula\n# @return {String}\ndef count_of_atoms(formula)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countOfAtoms(_ formula: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countOfAtoms(formula string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countOfAtoms(formula: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countOfAtoms(formula: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_of_atoms(formula: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $formula\n     * @return String\n     */\n    function countOfAtoms($formula) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countOfAtoms(formula: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0727", "frontend_question_id": "0727", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/minimum-window-subsequence", "url_en": "https://leetcode.com/problems/minimum-window-subsequence", "relative_path_cn": "/leetcode/0700-0799/0727.Minimum%20Window%20Subsequence/README.md", "relative_path_en": "/leetcode/0700-0799/0727.Minimum%20Window%20Subsequence/README_EN.md", "title_cn": "\u6700\u5c0f\u7a97\u53e3\u5b50\u5e8f\u5217", "title_en": "Minimum Window Subsequence", "question_title_slug": "minimum-window-subsequence", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming", "Sliding Window"], "tags_cn": ["\u52a8\u6001\u89c4\u5212", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0728", "frontend_question_id": "0728", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/self-dividing-numbers", "url_en": "https://leetcode.com/problems/self-dividing-numbers", "relative_path_cn": "/leetcode/0700-0799/0728.Self%20Dividing%20Numbers/README.md", "relative_path_en": "/leetcode/0700-0799/0728.Self%20Dividing%20Numbers/README_EN.md", "title_cn": "\u81ea\u9664\u6570", "title_en": "Self Dividing Numbers", "question_title_slug": "self-dividing-numbers", "content_en": "<p>\r\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\r\n</p><p>\r\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\r\n</p><p>\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n</p><p>\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nleft = 1, right = 22\r\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The boundaries of each input argument are <code>1 <= left <= right <= 10000</code>.</li>\r\n</p>", "content_cn": "<p><em>\u81ea\u9664\u6570&nbsp;</em>\u662f\u6307\u53ef\u4ee5\u88ab\u5b83\u5305\u542b\u7684\u6bcf\u4e00\u4f4d\u6570\u9664\u5c3d\u7684\u6570\u3002</p>\n\n<p>\u4f8b\u5982\uff0c128 \u662f\u4e00\u4e2a\u81ea\u9664\u6570\uff0c\u56e0\u4e3a&nbsp;<code>128 % 1 == 0</code>\uff0c<code>128 % 2 == 0</code>\uff0c<code>128 % 8 == 0</code>\u3002</p>\n\n<p>\u8fd8\u6709\uff0c\u81ea\u9664\u6570\u4e0d\u5141\u8bb8\u5305\u542b 0 \u3002</p>\n\n<p>\u7ed9\u5b9a\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u6570\u5b57\uff0c\u8f93\u51fa\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u5143\u7d20\u662f\u8fb9\u754c\uff08\u542b\u8fb9\u754c\uff09\u5185\u6240\u6709\u7684\u81ea\u9664\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong> \n\u4e0a\u8fb9\u754cleft = 1, \u4e0b\u8fb9\u754cright = 22\n<strong>\u8f93\u51fa\uff1a</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u8fb9\u754c\u6ee1\u8db3&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>\u3002</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> selfDividingNumbers(int left, int right) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> selfDividingNumbers(int left, int right) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* selfDividingNumbers(int left, int right, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> SelfDividingNumbers(int left, int right) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar selfDividingNumbers = function(left, right) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} left\n# @param {Integer} right\n# @return {Integer[]}\ndef self_dividing_numbers(left, right)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func selfDividingNumbers(_ left: Int, _ right: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func selfDividingNumbers(left int, right int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def selfDividingNumbers(left: Int, right: Int): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun selfDividingNumbers(left: Int, right: Int): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn self_dividing_numbers(left: i32, right: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer[]\n     */\n    function selfDividingNumbers($left, $right) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function selfDividingNumbers(left: number, right: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0729", "frontend_question_id": "0729", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/my-calendar-i", "url_en": "https://leetcode.com/problems/my-calendar-i", "relative_path_cn": "/leetcode/0700-0799/0729.My%20Calendar%20I/README.md", "relative_path_en": "/leetcode/0700-0799/0729.My%20Calendar%20I/README_EN.md", "title_cn": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 I", "title_en": "My Calendar I", "question_title_slug": "my-calendar-i", "content_en": "<p>Implement a <code>MyCalendar</code> class to store your events. A new event can be added if adding the event will not cause a double booking.</p>\r\n\r\n<p>Your class will have the method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>double booking</i> happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return <code>true</code> if the event can be added to the calendar successfully without causing a double booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</p>\r\nYour class will be called like this: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(15, 25); // returns false\r\nMyCalendar.book(20, 30); // returns true\r\n<b>Explanation:</b> \r\nThe first event can be booked.  The second can&#39;t because time 15 is already booked by another event.\r\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendar.book</code> per test case will be at most <code>1000</code>.</li>\r\n\t<li>In calls to <code>MyCalendar.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65f6\u95f4\u5185\u6ca1\u6709\u5176\u4ed6\u5b89\u6392\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728 start \u5230 end \u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f\u91cd\u590d\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u65e5\u7a0b\u5b89\u6392\u6210\u529f\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u800c\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u590d\u9884\u8ba2\uff0c\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>&nbsp;\u5e76\u4e14\u4e0d\u8981\u5c06\u8be5\u65e5\u7a0b\u5b89\u6392\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528 <code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d.  \u7b2c\u4e8c\u4e2a\u65e5\u7a0b\u5b89\u6392\u4e0d\u80fd\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u65f6\u95f4 15 \u5df2\u7ecf\u88ab\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u9884\u5b9a\u4e86\u3002\n\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u5e76\u4e0d\u5305\u542b\u65f6\u95f4 20 \u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>100</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCalendar {\npublic:\n    MyCalendar() {\n\n    }\n    \n    bool book(int start, int end) {\n\n    }\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar* obj = new MyCalendar();\n * bool param_1 = obj->book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyCalendar {\n\n    public MyCalendar() {\n\n    }\n    \n    public boolean book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyCalendar(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCalendar:\n\n    def __init__(self):\n        \n\n    def book(self, start: int, end: int) -> bool:\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyCalendar;\n\n\nMyCalendar* myCalendarCreate() {\n    \n}\n\nbool myCalendarBook(MyCalendar* obj, int start, int end) {\n  \n}\n\nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n\n/**\n * Your MyCalendar struct will be instantiated and called as such:\n * MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, start, end);\n \n * myCalendarFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCalendar {\n\n    public MyCalendar() {\n\n    }\n    \n    public bool Book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar MyCalendar = function() {\n\n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCalendar\n    def initialize()\n\n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n\n    end\n\n\nend\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\r\nclass MyCalendar {\r\n\r\n    init() {\r\n        \r\n    }\r\n    \r\n    func book(_ start: Int, _ end: Int) -> Bool {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCalendar object will be instantiated and called as such:\r\n * let obj = MyCalendar()\r\n * let ret_1: Bool = obj.book(start, end)\r\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCalendar struct {\n\n}\n\n\nfunc Constructor() MyCalendar {\n\n}\n\n\nfunc (this *MyCalendar) Book(start int, end int) bool {\n\n}\n\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCalendar() {\n\n    def book(start: Int, end: Int): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCalendar() {\n\n    fun book(start: Int, end: Int): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCalendar {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendar {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar::new();\n * let ret_1: bool = obj.book(start, end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCalendar {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * $obj = MyCalendar();\n * $ret_1 = $obj->book($start, $end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCalendar {\n    constructor() {\n\n    }\n\n    book(start: number, end: number): boolean {\n\n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0730", "frontend_question_id": "0730", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-different-palindromic-subsequences", "url_en": "https://leetcode.com/problems/count-different-palindromic-subsequences", "relative_path_cn": "/leetcode/0700-0799/0730.Count%20Different%20Palindromic%20Subsequences/README.md", "relative_path_en": "/leetcode/0700-0799/0730.Count%20Different%20Palindromic%20Subsequences/README_EN.md", "title_cn": "\u7edf\u8ba1\u4e0d\u540c\u56de\u6587\u5b50\u5e8f\u5217", "title_en": "Count Different Palindromic Subsequences", "question_title_slug": "count-different-palindromic-subsequences", "content_en": "<p>\r\nGiven a string S, find the number of different non-empty palindromic subsequences in S, and <b>return that number modulo <code>10^9 + 7</code>.</b>\r\n</p><p>\r\nA subsequence of a string S is obtained by deleting 0 or more characters from S.\r\n</p><p>\r\nA sequence is palindromic if it is equal to the sequence reversed.\r\n</p><p>\r\nTwo sequences <code>A_1, A_2, ...</code> and <code>B_1, B_2, ...</code> are different if there is some <code>i</code> for which <code>A_i != B_i</code>.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nS = 'bccb'\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> \r\nThe 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\r\nNote that 'bcb' is counted only once, even though it occurs twice.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nS = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'\r\n<b>Output:</b> 104860361\r\n<b>Explanation:</b> \r\nThere are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>S</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>Each character <code>S[i]</code> will be in the set <code>{'a', 'b', 'c', 'd'}</code>.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S\uff0c\u627e\u51fa S \u4e2d\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u5e76<strong>\u8fd4\u56de\u8be5\u6570\u5b57\u4e0e <code>10^9 + 7 </code>\u7684\u6a21\u3002</strong></p>\n\n<p>\u901a\u8fc7\u4ece S \u4e2d\u5220\u9664 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u6765\u83b7\u5f97\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e0e\u5b83\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u5e8f\u5217\u4e00\u81f4\uff0c\u90a3\u4e48\u5b83\u662f\u56de\u6587\u5b57\u7b26\u5e8f\u5217\u3002</p>\n\n<p>\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a&nbsp;&nbsp;<code>i</code>\uff0c<code>A_i != B_i</code>\uff0c\u90a3\u4e48&nbsp;<code>A_1, A_2, ...</code> \u548c&nbsp;<code>B_1, B_2, ...</code> \u8fd9\u4e24\u4e2a\u5b57\u7b26\u5e8f\u5217\u662f\u4e0d\u540c\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nS = &#39;bccb&#39;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n6 \u4e2a\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5b57\u7b26\u5e8f\u5217\u5206\u522b\u4e3a\uff1a&#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;\u3002\n\u6ce8\u610f\uff1a&#39;bcb&#39; \u867d\u7136\u51fa\u73b0\u4e24\u6b21\u4f46\u4ec5\u8ba1\u6570\u4e00\u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nS = &#39;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&#39;\n<strong>\u8f93\u51fa\uff1a</strong>104860361\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5171\u6709 3104860382 \u4e2a\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5bf9 10^9 + 7 \u53d6\u6a21\u4e3a 104860361\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u7684\u957f\u5ea6\u5c06\u5728<code>[1, 1000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u6bcf\u4e2a\u5b57\u7b26&nbsp;<code>S[i]</code>&nbsp;\u5c06\u4f1a\u662f\u96c6\u5408&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;}</code>&nbsp;\u4e2d\u7684\u67d0\u4e00\u4e2a\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["String", "Dynamic Programming"], "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPalindromicSubsequences(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPalindromicSubsequences(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPalindromicSubsequences(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPalindromicSubsequences(self, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countPalindromicSubsequences(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPalindromicSubsequences(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number}\n */\nvar countPalindromicSubsequences = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef count_palindromic_subsequences(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPalindromicSubsequences(_ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countPalindromicSubsequences(S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPalindromicSubsequences(S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPalindromicSubsequences(S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_palindromic_subsequences(s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer\n     */\n    function countPalindromicSubsequences($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPalindromicSubsequences(S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0731", "frontend_question_id": "0731", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/my-calendar-ii", "url_en": "https://leetcode.com/problems/my-calendar-ii", "relative_path_cn": "/leetcode/0700-0799/0731.My%20Calendar%20II/README.md", "relative_path_en": "/leetcode/0700-0799/0731.My%20Calendar%20II/README_EN.md", "title_cn": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 II", "title_en": "My Calendar II", "question_title_slug": "my-calendar-ii", "content_en": "<p>Implement a <code>MyCalendarTwo</code> class to store your events. A new event can be added if adding the event will not cause a <b>triple</b> booking.</p>\r\n\r\n<p>Your class will have one method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>triple booking</i> happens when <b>three</b> events have some non-empty intersection (ie., there is some time that is common to all 3 events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return <code>true</code> if the event can be added to the calendar successfully without causing a <b>triple</b> booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</p>\r\nYour class will be called like this: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(50, 60); // returns true\r\nMyCalendar.book(10, 40); // returns true\r\nMyCalendar.book(5, 15); // returns false\r\nMyCalendar.book(5, 10); // returns true\r\nMyCalendar.book(25, 55); // returns true\r\n<b>Explanation:</b> \r\nThe first two events can be booked.  The third event can be double booked.\r\nThe fourth event (5, 15) can&#39;t be booked, because it would result in a triple booking.\r\nThe fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.\r\nThe sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;\r\nthe time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendar.book</code> per test case will be at most <code>1000</code>.</li>\r\n\t<li>In calls to <code>MyCalendar.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65f6\u95f4\u5185\u4e0d\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\u65f6\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728 <code>start</code> \u5230 <code>end</code> \u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e09\u91cd\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u65e5\u7a0b\u5b89\u6392\u6210\u529f\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u800c\u4e0d\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\uff0c\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u5e76\u4e14\u4e0d\u8981\u5c06\u8be5\u65e5\u7a0b\u5b89\u6392\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528<code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\n<strong>\u89e3\u91ca\uff1a</strong> \n\u524d\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\u3002 \u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u4f1a\u5bfc\u81f4\u53cc\u91cd\u9884\u8ba2\uff0c\u4f46\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\u3002\n\u7b2c\u56db\u4e2a\u65e5\u7a0b\u5b89\u6392\u6d3b\u52a8\uff085,15\uff09\u4e0d\u80fd\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\u3002\n\u7b2c\u4e94\u4e2a\u65e5\u7a0b\u5b89\u6392\uff085,10\uff09\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u5b83\u672a\u4f7f\u7528\u5df2\u7ecf\u53cc\u91cd\u9884\u8ba2\u7684\u65f6\u95f410\u3002\n\u7b2c\u516d\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0825,55\uff09\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u65f6\u95f4 [25,40] \u5c06\u548c\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u53cc\u91cd\u9884\u8ba2\uff1b\n\u65f6\u95f4 [40,50] \u5c06\u5355\u72ec\u9884\u8ba2\uff0c\u65f6\u95f4 [50,55\uff09\u5c06\u548c\u7b2c\u4e8c\u4e2a\u65e5\u7a0b\u5b89\u6392\u53cc\u91cd\u9884\u8ba2\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>1000</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n", "tags_en": ["Ordered Map"], "tags_cn": [null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCalendarTwo {\npublic:\n    MyCalendarTwo() {\n\n    }\n    \n    bool book(int start, int end) {\n\n    }\n};\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * MyCalendarTwo* obj = new MyCalendarTwo();\n * bool param_1 = obj->book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyCalendarTwo {\n\n    public MyCalendarTwo() {\n\n    }\n    \n    public boolean book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * MyCalendarTwo obj = new MyCalendarTwo();\n * boolean param_1 = obj.book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyCalendarTwo(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendarTwo object will be instantiated and called as such:\n# obj = MyCalendarTwo()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCalendarTwo:\n\n    def __init__(self):\n        \n\n    def book(self, start: int, end: int) -> bool:\n        \n\n\n# Your MyCalendarTwo object will be instantiated and called as such:\n# obj = MyCalendarTwo()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyCalendarTwo;\n\n\nMyCalendarTwo* myCalendarTwoCreate() {\n    \n}\n\nbool myCalendarTwoBook(MyCalendarTwo* obj, int start, int end) {\n  \n}\n\nvoid myCalendarTwoFree(MyCalendarTwo* obj) {\n    \n}\n\n/**\n * Your MyCalendarTwo struct will be instantiated and called as such:\n * MyCalendarTwo* obj = myCalendarTwoCreate();\n * bool param_1 = myCalendarTwoBook(obj, start, end);\n \n * myCalendarTwoFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCalendarTwo {\n\n    public MyCalendarTwo() {\n\n    }\n    \n    public bool Book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * MyCalendarTwo obj = new MyCalendarTwo();\n * bool param_1 = obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar MyCalendarTwo = function() {\n\n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendarTwo.prototype.book = function(start, end) {\n\n};\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * var obj = new MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCalendarTwo\n    def initialize()\n\n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n\n    end\n\n\nend\n\n# Your MyCalendarTwo object will be instantiated and called as such:\n# obj = MyCalendarTwo.new()\n# param_1 = obj.book(start, end)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyCalendarTwo {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * let obj = MyCalendarTwo()\n * let ret_1: Bool = obj.book(start, end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCalendarTwo struct {\n\n}\n\n\nfunc Constructor() MyCalendarTwo {\n\n}\n\n\nfunc (this *MyCalendarTwo) Book(start int, end int) bool {\n\n}\n\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCalendarTwo() {\n\n    def book(start: Int, end: Int): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * var obj = new MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCalendarTwo() {\n\n    fun book(start: Int, end: Int): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * var obj = MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCalendarTwo {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendarTwo {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * let obj = MyCalendarTwo::new();\n * let ret_1: bool = obj.book(start, end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCalendarTwo {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Boolean\n     */\n    function book($start, $end) {\n        \n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * $obj = MyCalendarTwo();\n * $ret_1 = $obj->book($start, $end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCalendarTwo {\n    constructor() {\n\n    }\n\n    book(start: number, end: number): boolean {\n\n    }\n}\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * var obj = new MyCalendarTwo()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0732", "frontend_question_id": "0732", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/my-calendar-iii", "url_en": "https://leetcode.com/problems/my-calendar-iii", "relative_path_cn": "/leetcode/0700-0799/0732.My%20Calendar%20III/README.md", "relative_path_en": "/leetcode/0700-0799/0732.My%20Calendar%20III/README_EN.md", "title_cn": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 III", "title_en": "My Calendar III", "question_title_slug": "my-calendar-iii", "content_en": "<p>Implement a <code>MyCalendarThree</code> class to store your events. A new event can <b>always</b> be added.</p>\r\n\r\n<p>Your class will have one method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>K-booking</i> happens when <b>K</b> events have some non-empty intersection (ie., there is some time that is common to all K events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return an integer <code>K</code> representing the largest integer such that there exists a <code>K</code>-booking in the calendar.</p>\r\nYour class will be called like this: <code>MyCalendarThree cal = new MyCalendarThree();</code> <code>MyCalendarThree.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendarThree();\r\nMyCalendarThree.book(10, 20); // returns 1\r\nMyCalendarThree.book(50, 60); // returns 1\r\nMyCalendarThree.book(10, 40); // returns 2\r\nMyCalendarThree.book(5, 15); // returns 3\r\nMyCalendarThree.book(5, 10); // returns 3\r\nMyCalendarThree.book(25, 55); // returns 3\r\n<b>Explanation:</b> \r\nThe first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.\r\nThe third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.\r\nThe remaining events cause the maximum K-booking to be only a 3-booking.\r\nNote that the last event locally causes a 2-booking, but the answer is still 3 because\r\neg. [10, 20), [10, 40), and [5, 15) are still triple booked.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendarThree.book</code> per test case will be at most <code>400</code>.</li>\r\n\t<li>In calls to <code>MyCalendarThree.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\uff0c\u4f60\u53ef\u4ee5\u4e00\u76f4\u6dfb\u52a0\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728start\u5230end\u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53 <strong>K</strong> \u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982K\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f <strong>K</strong> \u6b21\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570 <code>K</code> \uff0c\u8868\u793a\u6700\u5927\u7684 <code>K</code> \u6b21\u9884\u8ba2\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528<code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nMyCalendarThree();\nMyCalendarThree.book(10, 20); // returns 1\nMyCalendarThree.book(50, 60); // returns 1\nMyCalendarThree.book(10, 40); // returns 2\nMyCalendarThree.book(5, 15); // returns 3\nMyCalendarThree.book(5, 10); // returns 3\nMyCalendarThree.book(25, 55); // returns 3\n<strong>\u89e3\u91ca:</strong> \n\u524d\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u9884\u8ba2\u5e76\u4e14\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u6700\u5927\u7684K\u6b21\u9884\u8ba2\u662f1\u3002\n\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392[10,40]\u4e0e\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u76f8\u4ea4\uff0c\u6700\u9ad8\u7684K\u6b21\u9884\u8ba2\u4e3a2\u3002\n\u5176\u4f59\u7684\u65e5\u7a0b\u5b89\u6392\u7684\u6700\u9ad8K\u6b21\u9884\u8ba2\u4ec5\u4e3a3\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u6b21\u65e5\u7a0b\u5b89\u6392\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5c40\u90e8\u6700\u9ad8K\u6b21\u9884\u8ba2\u4e3a2\uff0c\u4f46\u7b54\u6848\u4ecd\u7136\u662f3\uff0c\u539f\u56e0\u662f\u4ece\u5f00\u59cb\u5230\u6700\u540e\uff0c\u65f6\u95f4[10,20]\uff0c[10,40]\u548c[5,15]\u4ecd\u7136\u4f1a\u5bfc\u81f43\u6b21\u9884\u8ba2\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>400</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n", "tags_en": ["Segment Tree", "Ordered Map"], "tags_cn": ["\u7ebf\u6bb5\u6811", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyCalendarThree {\npublic:\n    MyCalendarThree() {\n\n    }\n    \n    int book(int start, int end) {\n\n    }\n};\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree* obj = new MyCalendarThree();\n * int param_1 = obj->book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyCalendarThree {\n\n    public MyCalendarThree() {\n\n    }\n    \n    public int book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree obj = new MyCalendarThree();\n * int param_1 = obj.book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyCalendarThree(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyCalendarThree:\n\n    def __init__(self):\n        \n\n    def book(self, start: int, end: int) -> int:\n        \n\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree()\n# param_1 = obj.book(start,end)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MyCalendarThree;\n\n\nMyCalendarThree* myCalendarThreeCreate() {\n    \n}\n\nint myCalendarThreeBook(MyCalendarThree* obj, int start, int end) {\n  \n}\n\nvoid myCalendarThreeFree(MyCalendarThree* obj) {\n    \n}\n\n/**\n * Your MyCalendarThree struct will be instantiated and called as such:\n * MyCalendarThree* obj = myCalendarThreeCreate();\n * int param_1 = myCalendarThreeBook(obj, start, end);\n \n * myCalendarThreeFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyCalendarThree {\n\n    public MyCalendarThree() {\n\n    }\n    \n    public int Book(int start, int end) {\n\n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree obj = new MyCalendarThree();\n * int param_1 = obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar MyCalendarThree = function() {\n\n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {number}\n */\nMyCalendarThree.prototype.book = function(start, end) {\n\n};\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = new MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyCalendarThree\n    def initialize()\n\n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Integer\n=end\n    def book(start, end)\n\n    end\n\n\nend\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree.new()\n# param_1 = obj.book(start, end)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyCalendarThree {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * let obj = MyCalendarThree()\n * let ret_1: Int = obj.book(start, end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyCalendarThree struct {\n\n}\n\n\nfunc Constructor() MyCalendarThree {\n\n}\n\n\nfunc (this *MyCalendarThree) Book(start int, end int) int {\n\n}\n\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyCalendarThree() {\n\n    def book(start: Int, end: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = new MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyCalendarThree() {\n\n    fun book(start: Int, end: Int): Int {\n\n    }\n\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyCalendarThree {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendarThree {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start: i32, end: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * let obj = MyCalendarThree::new();\n * let ret_1: i32 = obj.book(start, end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyCalendarThree {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $start\n     * @param Integer $end\n     * @return Integer\n     */\n    function book($start, $end) {\n        \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * $obj = MyCalendarThree();\n * $ret_1 = $obj->book($start, $end);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyCalendarThree {\n    constructor() {\n\n    }\n\n    book(start: number, end: number): number {\n\n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = new MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0733", "frontend_question_id": "0733", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flood-fill", "url_en": "https://leetcode.com/problems/flood-fill", "relative_path_cn": "/leetcode/0700-0799/0733.Flood%20Fill/README.md", "relative_path_en": "/leetcode/0700-0799/0733.Flood%20Fill/README_EN.md", "title_cn": "\u56fe\u50cf\u6e32\u67d3", "title_en": "Flood Fill", "question_title_slug": "flood-fill", "content_en": "<p>\r\nAn <code>image</code> is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\r\n</p><p>\r\nGiven a coordinate <code>(sr, sc)</code> representing the starting pixel (row and column) of the flood fill, and a pixel value <code>newColor</code>, \"flood fill\" the image.\r\n</p><p>\r\nTo perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.\r\n</p><p>\r\nAt the end, return the modified image.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nimage = [[1,1,1],[1,1,0],[1,0,1]]\r\nsr = 1, sc = 1, newColor = 2\r\n<b>Output:</b> [[2,2,2],[2,2,0],[2,0,1]]\r\n<b>Explanation:</b> \r\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels connected \r\nby a path of the same color as the starting pixel are colored with the new color.\r\nNote the bottom corner is not colored 2, because it is not 4-directionally connected\r\nto the starting pixel.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>image</code> and <code>image[0]</code> will be in the range <code>[1, 50]</code>.</li>\r\n<li>The given starting pixel will satisfy <code>0 <= sr < image.length</code> and <code>0 <= sc < image[0].length</code>.</li>\r\n<li>The value of each color in <code>image[i][j]</code> and <code>newColor</code> will be an integer in <code>[0, 65535]</code>.</li>\r\n</p>", "content_cn": "<p>\u6709\u4e00\u5e45\u4ee5\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u8868\u793a\u7684\u56fe\u753b\uff0c\u6bcf\u4e00\u4e2a\u6574\u6570\u8868\u793a\u8be5\u56fe\u753b\u7684\u50cf\u7d20\u503c\u5927\u5c0f\uff0c\u6570\u503c\u5728 0 \u5230 65535 \u4e4b\u95f4\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u4e2a\u5750\u6807&nbsp;<code>(sr, sc)</code>&nbsp;\u8868\u793a\u56fe\u50cf\u6e32\u67d3\u5f00\u59cb\u7684\u50cf\u7d20\u503c\uff08\u884c \uff0c\u5217\uff09\u548c\u4e00\u4e2a\u65b0\u7684\u989c\u8272\u503c&nbsp;<code>newColor</code>\uff0c\u8ba9\u4f60\u91cd\u65b0\u4e0a\u8272\u8fd9\u5e45\u56fe\u50cf\u3002</p>\n\n<p>\u4e3a\u4e86\u5b8c\u6210\u4e0a\u8272\u5de5\u4f5c\uff0c\u4ece\u521d\u59cb\u5750\u6807\u5f00\u59cb\uff0c\u8bb0\u5f55\u521d\u59cb\u5750\u6807\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c\u63a5\u7740\u518d\u8bb0\u5f55\u8fd9\u56db\u4e2a\u65b9\u5411\u4e0a\u7b26\u5408\u6761\u4ef6\u7684\u50cf\u7d20\u70b9\u4e0e\u4ed6\u4eec\u5bf9\u5e94\u56db\u4e2a\u65b9\u5411\u4e0a\u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c&hellip;&hellip;\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002\u5c06\u6240\u6709\u6709\u8bb0\u5f55\u7684\u50cf\u7d20\u70b9\u7684\u989c\u8272\u503c\u6539\u4e3a\u65b0\u7684\u989c\u8272\u503c\u3002</p>\n\n<p>\u6700\u540e\u8fd4\u56de\u7ecf\u8fc7\u4e0a\u8272\u6e32\u67d3\u540e\u7684\u56fe\u50cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>\u8f93\u51fa:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>\u89e3\u6790:</strong> \n\u5728\u56fe\u50cf\u7684\u6b63\u4e2d\u95f4\uff0c(\u5750\u6807(sr,sc)=(1,1)),\n\u5728\u8def\u5f84\u4e0a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u50cf\u7d20\u70b9\u7684\u989c\u8272\u90fd\u88ab\u66f4\u6539\u62102\u3002\n\u6ce8\u610f\uff0c\u53f3\u4e0b\u89d2\u7684\u50cf\u7d20\u6ca1\u6709\u66f4\u6539\u4e3a2\uff0c\n\u56e0\u4e3a\u5b83\u4e0d\u662f\u5728\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u4e0e\u521d\u59cb\u70b9\u76f8\u8fde\u7684\u50cf\u7d20\u70b9\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>image</code> \u548c&nbsp;<code>image[0]</code>&nbsp;\u7684\u957f\u5ea6\u5728\u8303\u56f4&nbsp;<code>[1, 50]</code> \u5185\u3002</li>\n\t<li>\u7ed9\u51fa\u7684\u521d\u59cb\u70b9\u5c06\u6ee1\u8db3&nbsp;<code>0 &lt;= sr &lt; image.length</code> \u548c&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>\u3002</li>\n\t<li><code>image[i][j]</code> \u548c&nbsp;<code>newColor</code>&nbsp;\u8868\u793a\u7684\u989c\u8272\u503c\u5728\u8303\u56f4&nbsp;<code>[0, 65535]</code>\u5185\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def floodFill(self, image, sr, sc, newColor):\n        \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type newColor: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** floodFill(int** image, int imageSize, int* imageColSize, int sr, int sc, int newColor, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] FloodFill(int[][] image, int sr, int sc, int newColor) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */\nvar floodFill = function(image, sr, sc, newColor) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} image\n# @param {Integer} sr\n# @param {Integer} sc\n# @param {Integer} new_color\n# @return {Integer[][]}\ndef flood_fill(image, sr, sc, new_color)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func floodFill(_ image: [[Int]], _ sr: Int, _ sc: Int, _ newColor: Int) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func floodFill(image [][]int, sr int, sc int, newColor int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def floodFill(image: Array[Array[Int]], sr: Int, sc: Int, newColor: Int): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun floodFill(image: Array<IntArray>, sr: Int, sc: Int, newColor: Int): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn flood_fill(image: Vec<Vec<i32>>, sr: i32, sc: i32, new_color: i32) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $sr\n     * @param Integer $sc\n     * @param Integer $newColor\n     * @return Integer[][]\n     */\n    function floodFill($image, $sr, $sc, $newColor) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function floodFill(image: number[][], sr: number, sc: number, newColor: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0734", "frontend_question_id": "0734", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sentence-similarity", "url_en": "https://leetcode.com/problems/sentence-similarity", "relative_path_cn": "/leetcode/0700-0799/0734.Sentence%20Similarity/README.md", "relative_path_en": "/leetcode/0700-0799/0734.Sentence%20Similarity/README_EN.md", "title_cn": "\u53e5\u5b50\u76f8\u4f3c\u6027", "title_en": "Sentence Similarity", "question_title_slug": "sentence-similarity", "content_en": null, "content_cn": null, "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0735", "frontend_question_id": "0735", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/asteroid-collision", "url_en": "https://leetcode.com/problems/asteroid-collision", "relative_path_cn": "/leetcode/0700-0799/0735.Asteroid%20Collision/README.md", "relative_path_en": "/leetcode/0700-0799/0735.Asteroid%20Collision/README_EN.md", "title_cn": "\u884c\u661f\u78b0\u649e", "title_en": "Asteroid Collision", "question_title_slug": "asteroid-collision", "content_en": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<b>Explanation:</b> The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<b>Explanation:</b> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<b>Explanation:</b> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [-2,-1,1,2]\n<strong>Output:</strong> [-2,-1,1,2]\n<b>Explanation:</b> The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= asteroids &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>asteroids</code>\uff0c\u8868\u793a\u5728\u540c\u4e00\u884c\u7684\u884c\u661f\u3002</p>\n\n<p>\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u7edd\u5bf9\u503c\u8868\u793a\u884c\u661f\u7684\u5927\u5c0f\uff0c\u6b63\u8d1f\u8868\u793a\u884c\u661f\u7684\u79fb\u52a8\u65b9\u5411\uff08\u6b63\u8868\u793a\u5411\u53f3\u79fb\u52a8\uff0c\u8d1f\u8868\u793a\u5411\u5de6\u79fb\u52a8\uff09\u3002\u6bcf\u4e00\u9897\u884c\u661f\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u79fb\u52a8\u3002</p>\n\n<p>\u627e\u51fa\u78b0\u649e\u540e\u5269\u4e0b\u7684\u6240\u6709\u884c\u661f\u3002\u78b0\u649e\u89c4\u5219\uff1a\u4e24\u4e2a\u884c\u661f\u76f8\u4e92\u78b0\u649e\uff0c\u8f83\u5c0f\u7684\u884c\u661f\u4f1a\u7206\u70b8\u3002\u5982\u679c\u4e24\u9897\u884c\u661f\u5927\u5c0f\u76f8\u540c\uff0c\u5219\u4e24\u9897\u884c\u661f\u90fd\u4f1a\u7206\u70b8\u3002\u4e24\u9897\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u884c\u661f\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [5, 10, -5]\n<strong>\u8f93\u51fa:</strong> [5, 10]\n<strong>\u89e3\u91ca:</strong> \n10 \u548c -5 \u78b0\u649e\u540e\u53ea\u5269\u4e0b 10\u3002 5 \u548c 10 \u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [8, -8]\n<strong>\u8f93\u51fa:</strong> []\n<strong>\u89e3\u91ca:</strong> \n8 \u548c -8 \u78b0\u649e\u540e\uff0c\u4e24\u8005\u90fd\u53d1\u751f\u7206\u70b8\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [10, 2, -5]\n<strong>\u8f93\u51fa:</strong> [10]\n<strong>\u89e3\u91ca:</strong> \n2 \u548c -5 \u53d1\u751f\u78b0\u649e\u540e\u5269\u4e0b -5\u300210 \u548c -5 \u53d1\u751f\u78b0\u649e\u540e\u5269\u4e0b 10\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [-2, -1, 1, 2]\n<strong>\u8f93\u51fa:</strong> [-2, -1, 1, 2]\n<strong>\u89e3\u91ca:</strong> \n-2 \u548c -1 \u5411\u5de6\u79fb\u52a8\uff0c\u800c 1 \u548c 2 \u5411\u53f3\u79fb\u52a8\u3002\n\u7531\u4e8e\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u884c\u661f\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\uff0c\u6240\u4ee5\u6700\u7ec8\u6ca1\u6709\u884c\u661f\u53d1\u751f\u78b0\u649e\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6570\u7ec4&nbsp;<code>asteroids</code> \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u9897\u884c\u661f\u7684\u5927\u5c0f\u90fd\u662f\u975e\u96f6\u6574\u6570\uff0c\u8303\u56f4\u662f&nbsp;<code>[-1000, 1000]</code>&nbsp;\u3002</li>\n</ul>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def asteroidCollision(self, asteroids):\n        \"\"\"\n        :type asteroids: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] AsteroidCollision(int[] asteroids) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} asteroids\n# @return {Integer[]}\ndef asteroid_collision(asteroids)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func asteroidCollision(_ asteroids: [Int]) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func asteroidCollision(asteroids []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun asteroidCollision(asteroids: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn asteroid_collision(asteroids: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $asteroids\n     * @return Integer[]\n     */\n    function asteroidCollision($asteroids) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function asteroidCollision(asteroids: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0736", "frontend_question_id": "0736", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/parse-lisp-expression", "url_en": "https://leetcode.com/problems/parse-lisp-expression", "relative_path_cn": "/leetcode/0700-0799/0736.Parse%20Lisp%20Expression/README.md", "relative_path_en": "/leetcode/0700-0799/0736.Parse%20Lisp%20Expression/README_EN.md", "title_cn": "Lisp \u8bed\u6cd5\u89e3\u6790", "title_en": "Parse Lisp Expression", "question_title_slug": "parse-lisp-expression", "content_en": "<p>\r\nYou are given a string <code>expression</code> representing a Lisp-like expression to return the integer value of.\r\n</p><p>\r\nThe syntax for these expressions is given as follows.\r\n</p><p>\r\n<li>An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.</li>\r\n</p><p>\r\n<li>(An integer could be positive or negative.)</li>\r\n</p><p>\r\n<li>A let-expression takes the form <code>(let v1 e1 v2 e2 ... vn en expr)</code>, where <code>let</code> is always the string <code>\"let\"</code>, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable <code>v1</code> is assigned the value of the expression <code>e1</code>, the second variable <code>v2</code> is assigned the value of the expression <code>e2</code>, and so on <b>sequentially</b>; and then the value of this let-expression is the value of the expression <code>expr</code>.</li>\r\n</p><p>\r\n<li>An add-expression takes the form <code>(add e1 e2)</code> where <code>add</code> is always the string <code>\"add\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the addition of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>A mult-expression takes the form <code>(mult e1 e2)</code> where <code>mult</code> is always the string <code>\"mult\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the multiplication of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.</li>\r\n</p><p>\r\n<li>Finally, there is the concept of scope.  When an expression of a variable name is evaluated, <b>within the context of that evaluation</b>, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.</li>\r\n</p>\r\n\r\n<p><b>Evaluation Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> (add 1 2)\r\n<b>Output:</b> 3\r\n\r\n<b>Input:</b> (mult 3 (add 2 3))\r\n<b>Output:</b> 15\r\n\r\n<b>Input:</b> (let x 2 (mult x 5))\r\n<b>Output:</b> 10\r\n\r\n<b>Input:</b> (let x 2 (mult x (let x 3 y 4 (add x y))))\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> In the expression (add x y), when checking for the value of the variable x,\r\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\nSince x = 3 is found first, the value of x is 3.\r\n\r\n<b>Input:</b> (let x 3 x 2 x)\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Assignment in let statements is processed sequentially.\r\n\r\n<b>Input:</b> (let x 1 y 2 x (add x y) (add x y))\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The first (add x y) evaluates as 3, and is assigned to x.\r\nThe second (add x y) evaluates as 3+2 = 5.\r\n\r\n<b>Input:</b> (let x 2 (add (let x 3 (let x 4 x)) x))\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Even though (let x 4 x) has a deeper scope, it is outside the context\r\nof the final x in the add-expression.  That final x will equal 2.\r\n\r\n<b>Input:</b> (let a1 3 b2 (add a1 1) b2) \r\n<b>Output</b> 4\r\n<b>Explanation:</b> Variable names can contain digits after the first character.\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b>\r\n<li>The given string <code>expression</code> is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.</li>\r\n<li>The length of <code>expression</code> is at most 2000.  (It is also non-empty, as that would not be a legal expression.)</li>\r\n<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.</li>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c Lisp \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f <code>expression</code>\uff0c\u6c42\u51fa\u5176\u8ba1\u7b97\u7ed3\u679c\u3002</p>\n\n<p>\u8868\u8fbe\u5f0f\u8bed\u6cd5\u5982\u4e0b\u6240\u793a:</p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e3a\u6574\u6570\uff0clet \u8bed\u6cd5\uff0cadd \u8bed\u6cd5\uff0cmult \u8bed\u6cd5\uff0c\u6216\u8d4b\u503c\u7684\u53d8\u91cf\u3002\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u603b\u662f\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>(\u6574\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\u3001\u8d1f\u6574\u6570\u30010)</li>\n\t<li><strong>let</strong> \u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(let v1 e1 v2 e2 ... vn en expr)</code>,&nbsp;\u5176\u4e2d&nbsp;<code>let</code>\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;let&quot;</code>\u6765\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u4f1a\u8ddf\u968f\u4e00\u4e2a\u6216\u591a\u4e2a\u4ea4\u66ff\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u53d8\u91cf&nbsp;<code>v1</code>\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e1</code>&nbsp;\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf&nbsp;<code>v2</code>&nbsp;\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e2</code>&nbsp;\u7684\u503c\uff0c<strong>\u4ee5\u6b64\u7c7b\u63a8</strong>\uff1b\u6700\u7ec8 let \u8bed\u6cd5\u7684\u503c\u4e3a&nbsp;<code>expr</code>\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li>\n\t<li><strong>add </strong>\u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(add e1 e2)</code>\uff0c\u5176\u4e2d&nbsp;<code>add</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;add&quot;</code>\u6765\u8868\u793a\uff0c\u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f<code>e1</code>\u3001<code>e2</code>, \u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u548c</strong>\u3002</li>\n\t<li><strong>mult</strong> \u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(mult e1 e2)</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>mult</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32<code>&quot;mult&quot;</code>\u8868\u793a\uff0c \u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f <code>e1</code>\u3001<code>e2</code>\uff0c\u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u79ef</strong>\u3002</li>\n\t<li>\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u53d8\u91cf\u7684\u547d\u540d\u4ee5\u5c0f\u5199\u5b57\u7b26\u5f00\u59cb\uff0c\u4e4b\u540e\u8ddf\u968f0\u4e2a\u6216\u591a\u4e2a\u5c0f\u5199\u5b57\u7b26\u6216\u6570\u5b57\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c&quot;add&quot;\uff0c&quot;let&quot;\uff0c&quot;mult&quot;\u4f1a\u88ab\u5b9a\u4e49\u4e3a&quot;\u5173\u952e\u5b57&quot;\uff0c\u4e0d\u4f1a\u5728\u8868\u8fbe\u5f0f\u7684\u53d8\u91cf\u547d\u540d\u4e2d\u51fa\u73b0\u3002</li>\n\t<li>\u6700\u540e\uff0c\u8981\u8bf4\u4e00\u4e0b\u4f5c\u7528\u57df\u7684\u6982\u5ff5\u3002\u8ba1\u7b97\u53d8\u91cf\u540d\u6240\u5bf9\u5e94\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0b\u6587\u4e2d\uff0c\u9996\u5148\u68c0\u67e5\u6700\u5185\u5c42\u4f5c\u7528\u57df\uff08\u6309\u62ec\u53f7\u8ba1\uff09\uff0c\u7136\u540e\u6309\u987a\u5e8f\u4f9d\u6b21\u68c0\u67e5\u5916\u90e8\u4f5c\u7528\u57df\u3002\u6211\u4eec\u5c06\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u5408\u6cd5\u7684\u3002\u6709\u5173\u4f5c\u7528\u57df\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u793a\u4f8b\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> (add 1 2)\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u8f93\u5165:</strong> (mult 3 (add 2 3))\n<strong>\u8f93\u51fa:</strong> 15\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x 5))\n<strong>\u8f93\u51fa:</strong> 10\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x (let x 3 y 4 (add x y))))\n<strong>\u8f93\u51fa:</strong> 14\n<strong>\u89e3\u91ca:</strong> \n\u8868\u8fbe\u5f0f (add x y), \u5728\u83b7\u53d6 x \u503c\u65f6, \u6211\u4eec\u5e94\u5f53\u7531\u6700\u5185\u5c42\u4f9d\u6b21\u5411\u5916\u8ba1\u7b97, \u9996\u5148\u9047\u5230\u4e86 x=3, \u6240\u4ee5\u6b64\u5904\u7684 x \u503c\u662f 3.\n\n\n<strong>\u8f93\u5165:</strong> (let x 3 x 2 x)\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> let \u8bed\u53e5\u4e2d\u7684\u8d4b\u503c\u8fd0\u7b97\u6309\u987a\u5e8f\u5904\u7406\u5373\u53ef\n\n<strong>\u8f93\u5165:</strong> (let x 1 y 2 x (add x y) (add x y))\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u662f 3\uff0c\u5e76\u4e14\u5c06\u6b64\u503c\u8d4b\u7ed9\u4e86 x \u3002\n\u7b2c\u4e8c\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u5c31\u662f 3+2 = 5 \u3002\n\n<strong>\u8f93\u5165:</strong> (let x 2 (add (let x 3 (let x 4 x)) x))\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n(let x 4 x) \u4e2d\u7684 x \u7684\u4f5c\u7528\u57df\u4ec5\u5728()\u4e4b\u5185\u3002\u6240\u4ee5\u6700\u7ec8\u505a\u52a0\u6cd5\u64cd\u4f5c\u65f6\uff0cx \u7684\u503c\u662f 2 \u3002\n\n<strong>\u8f93\u5165:</strong> (let a1 3 b2 (add a1 1) b2) \n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca:</strong> \n\u53d8\u91cf\u547d\u540d\u65f6\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u540e\u8ddf\u968f\u6570\u5b57.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684&nbsp;<code>expression</code>&nbsp;\u8868\u8fbe\u5f0f\u90fd\u662f\u683c\u5f0f\u5316\u540e\u7684\uff1a\u8868\u8fbe\u5f0f\u524d\u540e\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u8868\u8fbe\u5f0f\u7684\u4e0d\u540c\u90e8\u5206(\u5173\u952e\u5b57\u3001\u53d8\u91cf\u3001\u8868\u8fbe\u5f0f)\u4e4b\u95f4\u4ec5\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\uff0c\u5e76\u4e14\u5728\u76f8\u90bb\u62ec\u53f7\u4e4b\u95f4\u4e5f\u6ca1\u6709\u7a7a\u683c\u3002\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u5747\u4e3a\u5408\u6cd5\u7684\u4e14\u6700\u7ec8\u7ed3\u679c\u4e3a\u6574\u6570\u3002</li>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u957f\u5ea6\u6700\u591a\u4e3a 2000&nbsp;(\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u4f1a\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u90a3\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f)\u3002</li>\n\t<li>\u6700\u7ec8\u7684\u7ed3\u679c\u548c\u4e2d\u95f4\u7684\u8ba1\u7b97\u7ed3\u679c\u90fd\u5c06\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int evaluate(string expression) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int evaluate(String expression) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def evaluate(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def evaluate(self, expression: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint evaluate(char * expression){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Evaluate(string expression) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} expression\n * @return {number}\n */\nvar evaluate = function(expression) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} expression\n# @return {Integer}\ndef evaluate(expression)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func evaluate(_ expression: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func evaluate(expression string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def evaluate(expression: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun evaluate(expression: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn evaluate(expression: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return Integer\n     */\n    function evaluate($expression) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function evaluate(expression: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0737", "frontend_question_id": "0737", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sentence-similarity-ii", "url_en": "https://leetcode.com/problems/sentence-similarity-ii", "relative_path_cn": "/leetcode/0700-0799/0737.Sentence%20Similarity%20II/README.md", "relative_path_en": "/leetcode/0700-0799/0737.Sentence%20Similarity%20II/README_EN.md", "title_cn": "\u53e5\u5b50\u76f8\u4f3c\u6027 II", "title_en": "Sentence Similarity II", "question_title_slug": "sentence-similarity-ii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0738", "frontend_question_id": "0738", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/monotone-increasing-digits", "url_en": "https://leetcode.com/problems/monotone-increasing-digits", "relative_path_cn": "/leetcode/0700-0799/0738.Monotone%20Increasing%20Digits/README.md", "relative_path_en": "/leetcode/0700-0799/0738.Monotone%20Increasing%20Digits/README_EN.md", "title_cn": "\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57", "title_en": "Monotone Increasing Digits", "question_title_slug": "monotone-increasing-digits", "content_en": "<p>\r\nGiven a non-negative integer <code>N</code>, find the largest number that is less than or equal to <code>N</code> with monotone increasing digits.\r\n</p><p>\r\n(Recall that an integer has <i>monotone increasing digits</i> if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x <= y</code>.)\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 10\r\n<b>Output:</b> 9\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 1234\r\n<b>Output:</b> 1234\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 332\r\n<b>Output:</b> 299\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<code>N</code> is an integer in the range <code>[0, 10^9]</code>.\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<code>N</code>\uff0c\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>N</code>&nbsp;\u7684\u6700\u5927\u7684\u6574\u6570\uff0c\u540c\u65f6\u8fd9\u4e2a\u6574\u6570\u9700\u8981\u6ee1\u8db3\u5176\u5404\u4e2a\u4f4d\u6570\u4e0a\u7684\u6570\u5b57\u662f\u5355\u8c03\u9012\u589e\u3002</p>\n\n<p>\uff08\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u76f8\u90bb\u4f4d\u6570\u4e0a\u7684\u6570\u5b57&nbsp;<code>x</code>&nbsp;\u548c&nbsp;<code>y</code>&nbsp;\u6ee1\u8db3&nbsp;<code>x &lt;= y</code>&nbsp;\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6574\u6570\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 10\n<strong>\u8f93\u51fa:</strong> 9\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 1234\n<strong>\u8f93\u51fa:</strong> 1234\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 332\n<strong>\u8f93\u51fa:</strong> 299\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong> <code>N</code>&nbsp;\u662f\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u6574\u6570\u3002</p>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int monotoneIncreasingDigits(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int monotoneIncreasingDigits(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def monotoneIncreasingDigits(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def monotoneIncreasingDigits(self, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint monotoneIncreasingDigits(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MonotoneIncreasingDigits(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar monotoneIncreasingDigits = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef monotone_increasing_digits(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func monotoneIncreasingDigits(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func monotoneIncreasingDigits(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def monotoneIncreasingDigits(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun monotoneIncreasingDigits(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn monotone_increasing_digits(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function monotoneIncreasingDigits($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function monotoneIncreasingDigits(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0739", "frontend_question_id": "0739", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/daily-temperatures", "url_en": "https://leetcode.com/problems/daily-temperatures", "relative_path_cn": "/leetcode/0700-0799/0739.Daily%20Temperatures/README.md", "relative_path_en": "/leetcode/0700-0799/0739.Daily%20Temperatures/README_EN.md", "title_cn": "\u6bcf\u65e5\u6e29\u5ea6", "title_en": "Daily Temperatures", "question_title_slug": "daily-temperatures", "content_en": "<p>\r\nGiven a list of daily temperatures <code>T</code>, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put <code>0</code> instead.\r\n</p><p>\r\nFor example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>.\r\nEach temperature will be an integer in the range <code>[30, 100]</code>.\r\n</p>", "content_cn": "<p>\u8bf7\u6839\u636e\u6bcf\u65e5 <code>\u6c14\u6e29</code> \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528&nbsp;<code>0</code> \u6765\u4ee3\u66ff\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868&nbsp;<code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f&nbsp;<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>\u3002</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><code>\u6c14\u6e29</code> \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f&nbsp;<code>[1, 30000]</code>\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728&nbsp;<code>[30, 100]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</p>\n", "tags_en": ["Stack", "Hash Table"], "tags_cn": ["\u6808", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& T) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] dailyTemperatures(int[] T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def dailyTemperatures(self, T):\n        \"\"\"\n        :type T: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def dailyTemperatures(self, T: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* T, int TSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] DailyTemperatures(int[] T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} T\n * @return {number[]}\n */\nvar dailyTemperatures = function(T) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} t\n# @return {Integer[]}\ndef daily_temperatures(t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func dailyTemperatures(_ T: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func dailyTemperatures(T []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def dailyTemperatures(T: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun dailyTemperatures(T: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn daily_temperatures(t: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $T\n     * @return Integer[]\n     */\n    function dailyTemperatures($T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function dailyTemperatures(T: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0740", "frontend_question_id": "0740", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-and-earn", "url_en": "https://leetcode.com/problems/delete-and-earn", "relative_path_cn": "/leetcode/0700-0799/0740.Delete%20and%20Earn/README.md", "relative_path_en": "/leetcode/0700-0799/0740.Delete%20and%20Earn/README_EN.md", "title_cn": "\u5220\u9664\u4e0e\u83b7\u5f97\u70b9\u6570", "title_en": "Delete and Earn", "question_title_slug": "delete-and-earn", "content_en": "<p>Given an array <code>nums</code> of integers, you can perform operations on the array.</p>\r\n\r\n<p>In each operation, you pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. After, you must delete <b>every</b> element equal to <code>nums[i] - 1</code> or <code>nums[i] + 1</code>.</p>\r\n\r\n<p>You start with 0 points. Return the maximum number of points you can earn by applying such operations.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [3, 4, 2]\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> \r\nDelete 4 to earn 4 points, consequently 3 is also deleted.\r\nThen, delete 2 to earn 2 points. 6 total points are earned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [2, 2, 3, 3, 3, 4]\r\n<b>Output:</b> 9\r\n<b>Explanation:</b> \r\nDelete 3 to earn 3 points, deleting both 2&#39;s and the 4.\r\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\r\n9 total points are earned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>nums</code> is at most <code>20000</code>.</li>\r\n\t<li>Each element <code>nums[i]</code> is an integer in the range <code>[1, 10000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002</p>\n\n<p>\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u9009\u62e9\u4efb\u610f\u4e00\u4e2a&nbsp;<code>nums[i]</code>&nbsp;\uff0c\u5220\u9664\u5b83\u5e76\u83b7\u5f97&nbsp;<code>nums[i]</code>&nbsp;\u7684\u70b9\u6570\u3002\u4e4b\u540e\uff0c\u4f60\u5fc5\u987b\u5220\u9664<strong>\u6bcf\u4e2a</strong>\u7b49\u4e8e&nbsp;<code>nums[i] - 1</code>&nbsp;\u6216&nbsp;<code>nums[i] + 1</code>&nbsp;\u7684\u5143\u7d20\u3002</p>\n\n<p>\u5f00\u59cb\u4f60\u62e5\u6709 0 \u4e2a\u70b9\u6570\u3002\u8fd4\u56de\u4f60\u80fd\u901a\u8fc7\u8fd9\u4e9b\u64cd\u4f5c\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [3, 4, 2]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n\u5220\u9664 4 \u6765\u83b7\u5f97 4 \u4e2a\u70b9\u6570\uff0c\u56e0\u6b64 3 \u4e5f\u88ab\u5220\u9664\u3002\n\u4e4b\u540e\uff0c\u5220\u9664 2 \u6765\u83b7\u5f97 2 \u4e2a\u70b9\u6570\u3002\u603b\u5171\u83b7\u5f97 6 \u4e2a\u70b9\u6570\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [2, 2, 3, 3, 3, 4]\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong> \n\u5220\u9664 3 \u6765\u83b7\u5f97 3 \u4e2a\u70b9\u6570\uff0c\u63a5\u7740\u8981\u5220\u9664\u4e24\u4e2a 2 \u548c 4 \u3002\n\u4e4b\u540e\uff0c\u518d\u6b21\u5220\u9664 3 \u83b7\u5f97 3 \u4e2a\u70b9\u6570\uff0c\u518d\u6b21\u5220\u9664 3 \u83b7\u5f97 3 \u4e2a\u70b9\u6570\u3002\n\u603b\u5171\u83b7\u5f97 9 \u4e2a\u70b9\u6570\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums</code>\u7684\u957f\u5ea6\u6700\u5927\u4e3a<code>20000</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u6574\u6570<code>nums[i]</code>\u7684\u5927\u5c0f\u90fd\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int deleteAndEarn(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int deleteAndEarn(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def deleteAndEarn(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint deleteAndEarn(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DeleteAndEarn(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar deleteAndEarn = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef delete_and_earn(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func deleteAndEarn(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func deleteAndEarn(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def deleteAndEarn(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun deleteAndEarn(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn delete_and_earn(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function deleteAndEarn($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function deleteAndEarn(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0741", "frontend_question_id": "0741", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cherry-pickup", "url_en": "https://leetcode.com/problems/cherry-pickup", "relative_path_cn": "/leetcode/0700-0799/0741.Cherry%20Pickup/README.md", "relative_path_en": "/leetcode/0700-0799/0741.Cherry%20Pickup/README_EN.md", "title_cn": "\u6458\u6a31\u6843", "title_en": "Cherry Pickup", "question_title_slug": "cherry-pickup", "content_en": "<p>You are given an <code>n x n</code> <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p>\n\n<ul>\n\t<li><code>0</code> means the cell is empty, so you can pass through,</li>\n\t<li><code>1</code> means the cell contains a cherry that you can pick up and pass through, or</li>\n\t<li><code>-1</code> means the cell contains a thorn that blocks your way.</li>\n</ul>\n\n<p>Return <em>the maximum number of cherries you can collect by following the rules below</em>:</p>\n\n<ul>\n\t<li>Starting at the position <code>(0, 0)</code> and reaching <code>(n - 1, n - 1)</code> by moving right or down through valid path cells (cells with value <code>0</code> or <code>1</code>).</li>\n\t<li>After reaching <code>(n - 1, n - 1)</code>, returning to <code>(0, 0)</code> by moving left or up through valid path cells.</li>\n\t<li>When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell <code>0</code>.</li>\n\t<li>If there is no valid path between <code>(0, 0)</code> and <code>(n - 1, n - 1)</code>, then no cherries can be collected.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/grid.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li>\n\t<li><code>grid[0][0] != -1</code></li>\n\t<li><code>grid[n - 1][n - 1] != -1</code></li>\n</ul>\n", "content_cn": "<p>\u4e00\u4e2aN x N\u7684\u7f51\u683c<code>(grid)</code>&nbsp;\u4ee3\u8868\u4e86\u4e00\u5757\u6a31\u6843\u5730\uff0c\u6bcf\u4e2a\u683c\u5b50\u7531\u4ee5\u4e0b\u4e09\u79cd\u6570\u5b57\u7684\u4e00\u79cd\u6765\u8868\u793a\uff1a</p>\n\n<ul>\n\t<li>0 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7a7f\u8fc7\u5b83\u3002</li>\n\t<li>1 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u91cc\u88c5\u7740\u4e00\u4e2a\u6a31\u6843\uff0c\u4f60\u53ef\u4ee5\u6458\u5230\u6a31\u6843\u7136\u540e\u7a7f\u8fc7\u5b83\u3002</li>\n\t<li>-1 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u91cc\u6709\u8346\u68d8\uff0c\u6321\u7740\u4f60\u7684\u8def\u3002</li>\n</ul>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u5728\u9075\u5b88\u4e0b\u5217\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u7684\u6458\u5230\u6700\u591a\u6a31\u6843\uff1a</p>\n\n<ul>\n\t<li>\u4ece\u4f4d\u7f6e&nbsp;(0, 0) \u51fa\u53d1\uff0c\u6700\u540e\u5230\u8fbe (N-1, N-1) \uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u8d70\uff0c\u5e76\u4e14\u53ea\u80fd\u7a7f\u8d8a\u6709\u6548\u7684\u683c\u5b50\uff08\u5373\u53ea\u53ef\u4ee5\u7a7f\u8fc7\u503c\u4e3a0\u6216\u80051\u7684\u683c\u5b50\uff09\uff1b</li>\n\t<li>\u5f53\u5230\u8fbe (N-1, N-1) \u540e\uff0c\u4f60\u8981\u7ee7\u7eed\u8d70\uff0c\u76f4\u5230\u8fd4\u56de\u5230 (0, 0) \uff0c\u53ea\u80fd\u5411\u4e0a\u6216\u5411\u5de6\u8d70\uff0c\u5e76\u4e14\u53ea\u80fd\u7a7f\u8d8a\u6709\u6548\u7684\u683c\u5b50\uff1b</li>\n\t<li>\u5f53\u4f60\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u4e14\u8fd9\u4e2a\u683c\u5b50\u5305\u542b\u4e00\u4e2a\u6a31\u6843\u65f6\uff0c\u4f60\u5c06\u6458\u5230\u6a31\u6843\u5e76\u4e14\u8fd9\u4e2a\u683c\u5b50\u4f1a\u53d8\u6210\u7a7a\u7684\uff08\u503c\u53d8\u4e3a0\uff09\uff1b</li>\n\t<li>\u5982\u679c\u5728 (0, 0) \u548c (N-1, N-1) \u4e4b\u95f4\u4e0d\u5b58\u5728\u4e00\u6761\u53ef\u7ecf\u8fc7\u7684\u8def\u5f84\uff0c\u5219\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u6a31\u6843\u80fd\u88ab\u6458\u5230\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> grid =\n[[0, 1, -1],\n [1, 0, -1],\n [1, 1,  1]]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca\uff1a</strong> \n\u73a9\u5bb6\u4ece\uff080,0\uff09\u70b9\u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e86\u5411\u4e0b\u8d70\uff0c\u5411\u4e0b\u8d70\uff0c\u5411\u53f3\u8d70\uff0c\u5411\u53f3\u8d70\uff0c\u5230\u8fbe\u4e86\u70b9(2, 2)\u3002\n\u5728\u8fd9\u8d9f\u5355\u7a0b\u4e2d\uff0c\u603b\u5171\u6458\u5230\u4e864\u9897\u6a31\u6843\uff0c\u77e9\u9635\u53d8\u6210\u4e86[[0,1,-1],[0,0,-1],[0,0,0]]\u3002\n\u63a5\u7740\uff0c\u8fd9\u540d\u73a9\u5bb6\u5411\u5de6\u8d70\uff0c\u5411\u4e0a\u8d70\uff0c\u5411\u4e0a\u8d70\uff0c\u5411\u5de6\u8d70\uff0c\u8fd4\u56de\u4e86\u8d77\u59cb\u70b9\uff0c\u53c8\u6458\u5230\u4e861\u9897\u6a31\u6843\u3002\n\u5728\u65c5\u7a0b\u4e2d\uff0c\u603b\u5171\u6458\u5230\u4e865\u9897\u6a31\u6843\uff0c\u8fd9\u662f\u53ef\u4ee5\u6458\u5230\u7684\u6700\u5927\u503c\u4e86\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>grid</code> \u662f\u4e00\u4e2a&nbsp;<code>N</code> * <code>N</code> \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0cN\u7684\u53d6\u503c\u8303\u56f4\u662f<code>1 &lt;= N &lt;= 50</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u4e2a&nbsp;<code>grid[i][j]</code> \u90fd\u662f\u96c6\u5408&nbsp;<code>{-1, 0, 1}</code>\u5176\u4e2d\u7684\u4e00\u4e2a\u6570\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u8d77\u70b9&nbsp;<code>grid[0][0]</code>&nbsp;\u548c\u7ec8\u70b9&nbsp;<code>grid[N-1][N-1]</code>&nbsp;\u7684\u503c\u90fd\u4e0d\u4f1a\u662f -1\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int cherryPickup(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int cherryPickup(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint cherryPickup(int** grid, int gridSize, int* gridColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CherryPickup(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar cherryPickup = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef cherry_pickup(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func cherryPickup(_ grid: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func cherryPickup(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def cherryPickup(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun cherryPickup(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn cherry_pickup(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function cherryPickup($grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function cherryPickup(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0743", "frontend_question_id": "0742", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/closest-leaf-in-a-binary-tree", "url_en": "https://leetcode.com/problems/closest-leaf-in-a-binary-tree", "relative_path_cn": "/leetcode/0700-0799/0742.Closest%20Leaf%20in%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0700-0799/0742.Closest%20Leaf%20in%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u6700\u8fd1\u7684\u53f6\u8282\u70b9", "title_en": "Closest Leaf in a Binary Tree", "question_title_slug": "closest-leaf-in-a-binary-tree", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0744", "frontend_question_id": "0743", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/network-delay-time", "url_en": "https://leetcode.com/problems/network-delay-time", "relative_path_cn": "/leetcode/0700-0799/0743.Network%20Delay%20Time/README.md", "relative_path_en": "/leetcode/0700-0799/0743.Network%20Delay%20Time/README_EN.md", "title_cn": "\u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4", "title_en": "Network Delay Time", "question_title_slug": "network-delay-time", "content_en": "<p>There are <code>N</code> network nodes, labelled <code>1</code> to <code>N</code>.</p>\r\n\r\n<p>Given <code>times</code>, a list of travel times as <b>directed</b> edges <code>times[i] = (u, v, w)</code>, where <code>u</code> is the source node, <code>v</code> is the target node, and <code>w</code> is the time it takes for a signal to travel from source to target.</p>\r\n\r\n<p>Now, we send a signal from a certain node <code>K</code>. How long will it take for all nodes to receive the signal? If it is impossible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png\" style=\"width: 200px; height: 220px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>times = <span id=\"example-input-1-1\">[[2,1,1],[2,3,1],[3,4,1]]</span>, N = <span id=\"example-input-1-2\">4</span>, K = <span id=\"example-input-1-3\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><code>N</code> will be in the range <code>[1, 100]</code>.</li>\r\n\t<li><code>K</code> will be in the range <code>[1, N]</code>.</li>\r\n\t<li>The length of <code>times</code> will be in the range <code>[1, 6000]</code>.</li>\r\n\t<li>All edges <code>times[i] = (u, v, w)</code> will have <code>1 &lt;= u, v &lt;= N</code> and <code>0 &lt;= w &lt;= 100</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u6709&nbsp;<code>N</code>&nbsp;\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>N</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868&nbsp;<code>times</code>\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7<strong>\u6709\u5411</strong>\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002&nbsp;<code>times[i] = (u, v, w)</code>\uff0c\u5176\u4e2d&nbsp;<code>u</code>&nbsp;\u662f\u6e90\u8282\u70b9\uff0c<code>v</code>&nbsp;\u662f\u76ee\u6807\u8282\u70b9\uff0c <code>w</code>&nbsp;\u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9&nbsp;<code>K</code>&nbsp;\u53d1\u51fa\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png\" style=\"height: 220px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, 100]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>K</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, N]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>times</code>&nbsp;\u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 6000]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6240\u6709\u7684\u8fb9&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;\u4e14&nbsp;<code>0 &lt;= w &lt;= 100</code>\u3002</li>\n</ol>\n", "tags_en": ["Heap", "Depth-first Search", "Breadth-first Search", "Graph"], "tags_cn": ["\u5806", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int networkDelayTime(vector<vector<int>>& times, int N, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int networkDelayTime(int[][] times, int N, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint networkDelayTime(int** times, int timesSize, int* timesColSize, int N, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NetworkDelayTime(int[][] times, int N, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nvar networkDelayTime = function(times, N, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} times\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef network_delay_time(times, n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func networkDelayTime(_ times: [[Int]], _ N: Int, _ K: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func networkDelayTime(times [][]int, N int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def networkDelayTime(times: Array[Array[Int]], N: Int, K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun networkDelayTime(times: Array<IntArray>, N: Int, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn network_delay_time(times: Vec<Vec<i32>>, n: i32, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $times\n     * @param Integer $N\n     * @param Integer $K\n     * @return Integer\n     */\n    function networkDelayTime($times, $N, $K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function networkDelayTime(times: number[][], N: number, K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0745", "frontend_question_id": "0744", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target", "url_en": "https://leetcode.com/problems/find-smallest-letter-greater-than-target", "relative_path_cn": "/leetcode/0700-0799/0744.Find%20Smallest%20Letter%20Greater%20Than%20Target/README.md", "relative_path_en": "/leetcode/0700-0799/0744.Find%20Smallest%20Letter%20Greater%20Than%20Target/README_EN.md", "title_cn": "\u5bfb\u627e\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd", "title_en": "Find Smallest Letter Greater Than Target", "question_title_slug": "find-smallest-letter-greater-than-target", "content_en": "<p>\r\nGiven a list of sorted characters <code>letters</code> containing only lowercase letters, and given a target letter <code>target</code>, find the smallest element in the list that is larger than the given target.\r\n</p><p>\r\nLetters also wrap around.  For example, if the target is <code>target = 'z'</code> and <code>letters = ['a', 'b']</code>, the answer is <code>'a'</code>.\r\n</p>\r\n\r\n<p><b>Examples:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"a\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"c\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"d\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"g\"\r\n<b>Output:</b> \"j\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"j\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"k\"\r\n<b>Output:</b> \"c\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>letters</code> has a length in range <code>[2, 10000]</code>.</li>\r\n<li><code>letters</code> consists of lowercase letters, and contains at least 2 unique letters.</li>\r\n<li><code>target</code> is a lowercase letter.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u5217\u8868 <code>letters</code> \uff0c\u5217\u8868\u4e2d\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\u53e6\u7ed9\u51fa\u4e00\u4e2a\u76ee\u6807\u5b57\u6bcd&nbsp;<code>target</code>\uff0c\u8bf7\u4f60\u5bfb\u627e\u5728\u8fd9\u4e00\u6709\u5e8f\u5217\u8868\u91cc\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd\u3002</p>\n\n<p>\u5728\u6bd4\u8f83\u65f6\uff0c\u5b57\u6bcd\u662f\u4f9d\u5e8f\u5faa\u73af\u51fa\u73b0\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u76ee\u6807\u5b57\u6bcd <code>target = &#39;z&#39;</code> \u5e76\u4e14\u5b57\u7b26\u5217\u8868\u4e3a&nbsp;<code>letters = [&#39;a&#39;, &#39;b&#39;]</code>\uff0c\u5219\u7b54\u6848\u8fd4\u56de&nbsp;<code>&#39;a&#39;</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;c&quot;\n<strong>\u8f93\u51fa:</strong> &quot;f&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;d&quot;\n<strong>\u8f93\u51fa:</strong> &quot;f&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;g&quot;\n<strong>\u8f93\u51fa:</strong> &quot;j&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;j&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;k&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>letters</code>\u957f\u5ea6\u8303\u56f4\u5728<code>[2, 10000]</code>\u533a\u95f4\u5185\u3002</li>\n\t<li><code>letters</code> \u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u6700\u5c11\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\u3002</li>\n\t<li>\u76ee\u6807\u5b57\u6bcd<code>target</code> \u662f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar nextGreatestLetter(char* letters, int lettersSize, char target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public char NextGreatestLetter(char[] letters, char target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextGreatestLetter(_ letters: [Character], _ target: Character) -> Character {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nextGreatestLetter(letters []byte, target byte) byte {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextGreatestLetter(letters: CharArray, target: Char): Char {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_greatest_letter(letters: Vec<char>, target: char) -> char {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $letters\n     * @param String $target\n     * @return String\n     */\n    function nextGreatestLetter($letters, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextGreatestLetter(letters: string[], target: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0746", "frontend_question_id": "0745", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/prefix-and-suffix-search", "url_en": "https://leetcode.com/problems/prefix-and-suffix-search", "relative_path_cn": "/leetcode/0700-0799/0745.Prefix%20and%20Suffix%20Search/README.md", "relative_path_en": "/leetcode/0700-0799/0745.Prefix%20and%20Suffix%20Search/README_EN.md", "title_cn": "\u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22", "title_en": "Prefix and Suffix Search", "question_title_slug": "prefix-and-suffix-search", "content_en": "<p>Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.</p>\n\n<p>Implement the <code>WordFilter</code> class:</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li>\n\t<li><code>f(string prefix, string suffix)</code> Returns <em>the index of the word in the dictionary</em> which has the prefix <code>prefix</code> and the suffix <code>suffix</code>. If there is&nbsp;more than one valid index, return <strong>the largest</strong> of them. If there is no such word in the dictionary, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordFilter&quot;, &quot;f&quot;]\n[[[&quot;apple&quot;]], [&quot;a&quot;, &quot;e&quot;]]\n<strong>Output</strong>\n[null, 0]\n\n<strong>Explanation</strong>\nWordFilter wordFilter = new WordFilter([&quot;apple&quot;]);\nwordFilter.f(&quot;a&quot;, &quot;e&quot;); // return 0, because the word at index 0 has prefix = &quot;a&quot; and suffix = &#39;e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 15000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= prefix.length, suffix.length&nbsp;&lt;= 10</code></li>\n\t<li><code>words[i]</code>, <code>prefix</code> and <code>suffix</code> consist of lower-case English letters only.</li>\n\t<li>At most <code>15000</code> calls will be made to the function <code>f</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u591a\u4e2a&nbsp;<code>words</code>\uff0c<code>words[i]</code>&nbsp;\u7684\u6743\u91cd\u4e3a&nbsp;<code>i</code>&nbsp;\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7c7b&nbsp;<code>WordFilter</code>&nbsp;\u5b9e\u73b0\u51fd\u6570<code>WordFilter.f(String prefix, String suffix)</code>\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u5177\u6709\u524d\u7f00&nbsp;<code>prefix</code>&nbsp;\u548c\u540e\u7f00<code>suffix</code>&nbsp;\u7684\u8bcd\u7684\u6700\u5927\u6743\u91cd\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u8bcd\uff0c\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nWordFilter([&quot;apple&quot;])\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // \u8fd4\u56de 0\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // \u8fd4\u56de -1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>words</code>\u7684\u957f\u5ea6\u5728<code>[1, 15000]</code>\u4e4b\u95f4\u3002</li>\n\t<li>\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6700\u591a\u4f1a\u6709<code>words.length</code>\u6b21\u5bf9<code>WordFilter.f</code>\u7684\u8c03\u7528\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u5728<code>[1, 10]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>prefix, suffix</code>\u7684\u957f\u5ea6\u5728<code>[0, 10]</code>\u4e4b\u524d\u3002</li>\n\t<li><code>words[i]</code>\u548c<code>prefix, suffix</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["Trie"], "tags_cn": ["\u5b57\u5178\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class WordFilter {\npublic:\n    WordFilter(vector<string>& words) {\n\n    }\n    \n    int f(string prefix, string suffix) {\n\n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(prefix,suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class WordFilter {\n\n    public WordFilter(String[] words) {\n\n    }\n    \n    public int f(String prefix, String suffix) {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.f(prefix,suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class WordFilter(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n\n\n    def f(self, prefix, suffix):\n        \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n\n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class WordFilter:\n\n    def __init__(self, words: List[str]):\n\n\n    def f(self, prefix: str, suffix: str) -> int:\n\n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} WordFilter;\n\n\nWordFilter* wordFilterCreate(char ** words, int wordsSize) {\n    \n}\n\nint wordFilterF(WordFilter* obj, char * prefix, char * suffix) {\n  \n}\n\nvoid wordFilterFree(WordFilter* obj) {\n    \n}\n\n/**\n * Your WordFilter struct will be instantiated and called as such:\n * WordFilter* obj = wordFilterCreate(words, wordsSize);\n * int param_1 = wordFilterF(obj, prefix, suffix);\n \n * wordFilterFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class WordFilter {\n\n    public WordFilter(string[] words) {\n\n    }\n    \n    public int F(string prefix, string suffix) {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.F(prefix,suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n */\nvar WordFilter = function(words) {\n\n};\n\n/** \n * @param {string} prefix \n * @param {string} suffix\n * @return {number}\n */\nWordFilter.prototype.f = function(prefix, suffix) {\n\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class WordFilter\n\n=begin\n    :type words: String[]\n=end\n    def initialize(words)\n\n    end\n\n\n=begin\n    :type prefix: String\n    :type suffix: String\n    :rtype: Integer\n=end\n    def f(prefix, suffix)\n\n    end\n\n\nend\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter.new(words)\n# param_1 = obj.f(prefix, suffix)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass WordFilter {\n\n    init(_ words: [String]) {\n        \n    }\n    \n    func f(_ prefix: String, _ suffix: String) -> Int {\n        \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj = WordFilter(words)\n * let ret_1: Int = obj.f(prefix, suffix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type WordFilter struct {\n\n}\n\n\nfunc Constructor(words []string) WordFilter {\n\n}\n\n\nfunc (this *WordFilter) F(prefix string, suffix string) int {\n\n}\n\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * obj := Constructor(words);\n * param_1 := obj.F(prefix,suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class WordFilter(_words: Array[String]) {\n\n    def f(prefix: String, suffix: String): Int = {\n\n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class WordFilter(words: Array<String>) {\n\n    fun f(prefix: String, suffix: String): Int {\n\n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct WordFilter {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl WordFilter {\n\n    fn new(words: Vec<String>) -> Self {\n\n    }\n    \n    fn f(&self, prefix: String, suffix: String) -> i32 {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj = WordFilter::new(words);\n * let ret_1: i32 = obj.f(prefix, suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class WordFilter {\n    /**\n     * @param String[] $words\n     */\n    function __construct($words) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @param String $suffix\n     * @return Integer\n     */\n    function f($prefix, $suffix) {\n        \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * $obj = WordFilter($words);\n * $ret_1 = $obj->f($prefix, $suffix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class WordFilter {\n    constructor(words: string[]) {\n\n    }\n\n    f(prefix: string, suffix: string): number {\n\n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0747", "frontend_question_id": "0746", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/min-cost-climbing-stairs", "url_en": "https://leetcode.com/problems/min-cost-climbing-stairs", "relative_path_cn": "/leetcode/0700-0799/0746.Min%20Cost%20Climbing%20Stairs/README.md", "relative_path_en": "/leetcode/0700-0799/0746.Min%20Cost%20Climbing%20Stairs/README_EN.md", "title_cn": "\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af", "title_en": "Min Cost Climbing Stairs", "question_title_slug": "min-cost-climbing-stairs", "content_en": "<p>\r\nOn a staircase, the <code>i</code>-th step has some non-negative cost <code>cost[i]</code> assigned (0 indexed).\r\n</p><p>\r\nOnce you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> cost = [10, 15, 20]\r\n<b>Output:</b> 15\r\n<b>Explanation:</b> Cheapest is start on cost[1], pay that cost and go to the top.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>cost</code> will have a length in the range <code>[2, 1000]</code>.</li>\r\n<li>Every <code>cost[i]</code> will be an integer in the range <code>[0, 999]</code>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u4f5c\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c&nbsp;<code>i</code>\u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c&nbsp;<code>cost[i]</code>(\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002</p>\n\n<p>\u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002</p>\n\n<p>\u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> cost = [10, 15, 20]\n<strong>\u8f93\u51fa:</strong> 15\n<strong>\u89e3\u91ca:</strong> \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>cost</code>&nbsp;\u7684\u957f\u5ea6\u5c06\u4f1a\u5728&nbsp;<code>[2, 1000]</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u4e2a&nbsp;<code>cost[i]</code> \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a&nbsp;<code>[0, 999]</code>\u3002</li>\n</ol>\n", "tags_en": ["Array", "Dynamic Programming"], "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minCostClimbingStairs(int* cost, int costSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function(cost) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minCostClimbingStairs(_ cost: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minCostClimbingStairs(cost []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minCostClimbingStairs(cost: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minCostClimbingStairs(cost: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minCostClimbingStairs($cost) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minCostClimbingStairs(cost: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0748", "frontend_question_id": "0747", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others", "url_en": "https://leetcode.com/problems/largest-number-at-least-twice-of-others", "relative_path_cn": "/leetcode/0700-0799/0747.Largest%20Number%20At%20Least%20Twice%20of%20Others/README.md", "relative_path_en": "/leetcode/0700-0799/0747.Largest%20Number%20At%20Least%20Twice%20of%20Others/README_EN.md", "title_cn": "\u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570", "title_en": "Largest Number At Least Twice of Others", "question_title_slug": "largest-number-at-least-twice-of-others", "content_en": "<p>In a given integer array <code>nums</code>, there is always exactly one largest element.</p>\r\n\r\n<p>Find whether the largest element in the array is at least twice as much as every other number in the array.</p>\r\n\r\n<p>If it is, return the <strong>index</strong> of the largest element, otherwise return -1.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [3, 6, 1, 0]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> 6 is the largest integer, and for every other number in the array x,\r\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1, 2, 3, 4]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 4 isn&#39;t at least as big as twice the value of 3, so we return -1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>nums</code> will have a length in the range <code>[1, 50]</code>.</li>\r\n\t<li>Every <code>nums[i]</code> will be an integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4<code>nums</code>\u4e2d\uff0c\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u5143\u7d20 \u3002</p>\n\n<p>\u67e5\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u662f\u5426\u81f3\u5c11\u662f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5176\u4ed6\u6570\u5b57\u7684\u4e24\u500d\u3002</p>\n\n<p>\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de-1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [3, 6, 1, 0]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> 6\u662f\u6700\u5927\u7684\u6574\u6570, \u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6574\u6570,\n6\u5927\u4e8e\u6570\u7ec4\u4e2d\u5176\u4ed6\u5143\u7d20\u7684\u4e24\u500d\u30026\u7684\u7d22\u5f15\u662f1, \u6240\u4ee5\u6211\u4eec\u8fd4\u56de1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1, 2, 3, 4]\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong> 4\u6ca1\u6709\u8d85\u8fc73\u7684\u4e24\u500d\u5927, \u6240\u4ee5\u6211\u4eec\u8fd4\u56de -1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>nums</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[1, 50]</code>.</li>\n\t<li>\u6bcf\u4e2a&nbsp;<code>nums[i]</code>&nbsp;\u7684\u6574\u6570\u8303\u56f4\u5728&nbsp;<code>[0, 100]</code>.</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int dominantIndex(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int dominantIndex(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def dominantIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint dominantIndex(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DominantIndex(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar dominantIndex = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef dominant_index(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func dominantIndex(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func dominantIndex(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def dominantIndex(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun dominantIndex(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn dominant_index(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function dominantIndex($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function dominantIndex(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0749", "frontend_question_id": "0748", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-completing-word", "url_en": "https://leetcode.com/problems/shortest-completing-word", "relative_path_cn": "/leetcode/0700-0799/0748.Shortest%20Completing%20Word/README.md", "relative_path_en": "/leetcode/0700-0799/0748.Shortest%20Completing%20Word/README_EN.md", "title_cn": "\u6700\u77ed\u8865\u5168\u8bcd", "title_en": "Shortest Completing Word", "question_title_slug": "shortest-completing-word", "content_en": "<p>Given a string <code>licensePlate</code> and an array of strings <code>words</code>, find the <strong>shortest completing</strong> word in <code>words</code>.</p>\n\n<p>A <strong>completing</strong> word is a word that <strong>contains all the letters</strong> in <code>licensePlate</code>. <strong>Ignore numbers and spaces</strong> in <code>licensePlate</code>, and treat letters as <strong>case insensitive</strong>. If a letter appears more than once in <code>licensePlate</code>, then it must appear in the word the same number of times or more.</p>\n\n<p>For example, if <code>licensePlate</code><code> = &quot;aBc 12c&quot;</code>, then it contains letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code> (ignoring case), and <code>&#39;c&#39;</code> twice. Possible <strong>completing</strong> words are <code>&quot;abccdef&quot;</code>, <code>&quot;caaacab&quot;</code>, and <code>&quot;cbca&quot;</code>.</p>\n\n<p>Return <em>the shortest <strong>completing</strong> word in </em><code>words</code><em>.</em> It is guaranteed an answer exists. If there are multiple shortest <strong>completing</strong> words, return the <strong>first</strong> one that occurs in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;,&quot;steps&quot;,&quot;stripe&quot;,&quot;stepple&quot;]\n<strong>Output:</strong> &quot;steps&quot;\n<strong>Explanation:</strong> licensePlate contains letters &#39;s&#39;, &#39;p&#39;, &#39;s&#39; (ignoring case), and &#39;t&#39;.\n&quot;step&quot; contains &#39;t&#39; and &#39;p&#39;, but only contains 1 &#39;s&#39;.\n&quot;steps&quot; contains &#39;t&#39;, &#39;p&#39;, and both &#39;s&#39; characters.\n&quot;stripe&quot; is missing an &#39;s&#39;.\n&quot;stepple&quot; is missing an &#39;s&#39;.\nSince &quot;steps&quot; is the only word containing all the letters, that is the answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;,&quot;pest&quot;,&quot;stew&quot;,&quot;show&quot;]\n<strong>Output:</strong> &quot;pest&quot;\n<strong>Explanation:</strong> licensePlate only contains the letter &#39;s&#39;. All the words contain &#39;s&#39;, but among these &quot;pest&quot;, &quot;stew&quot;, and &quot;show&quot; are shortest. The answer is &quot;pest&quot; because it is the word that appears earliest of the 3.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;Ah71752&quot;, words = [&quot;suggest&quot;,&quot;letter&quot;,&quot;of&quot;,&quot;husband&quot;,&quot;easy&quot;,&quot;education&quot;,&quot;drug&quot;,&quot;prevent&quot;,&quot;writer&quot;,&quot;old&quot;]\n<strong>Output:</strong> &quot;husband&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;OgEu755&quot;, words = [&quot;enough&quot;,&quot;these&quot;,&quot;play&quot;,&quot;wide&quot;,&quot;wonder&quot;,&quot;box&quot;,&quot;arrive&quot;,&quot;money&quot;,&quot;tax&quot;,&quot;thus&quot;]\n<strong>Output:</strong> &quot;enough&quot;\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;iMSlpe4&quot;, words = [&quot;claim&quot;,&quot;consumer&quot;,&quot;student&quot;,&quot;camera&quot;,&quot;public&quot;,&quot;never&quot;,&quot;wonder&quot;,&quot;simple&quot;,&quot;thought&quot;,&quot;use&quot;]\n<strong>Output:</strong> &quot;simple&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li>\n\t<li><code>licensePlate</code> contains digits, letters (uppercase or lowercase), or space <code>&#39; &#39;</code>.</li>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\n\t<li><code>words[i]</code> consists of lower case English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u724c\u7167 <code>licensePlate</code> \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 <code>words</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de <code>words</code> \u4e2d\u7684 <strong>\u6700\u77ed\u8865\u5168\u8bcd</strong> \u3002</p>\n\n<p>\u5982\u679c\u5355\u8bcd\u5217\u8868\uff08<code>words</code>\uff09\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u5305\u542b\u724c\u7167\uff08<code>licensePlate</code>\uff09\u4e2d\u6240\u6709\u7684\u5b57\u6bcd\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u4e4b\u4e3a <strong>\u8865\u5168\u8bcd</strong> \u3002\u5728\u6240\u6709\u5b8c\u6574\u8bcd\u4e2d\uff0c\u6700\u77ed\u7684\u5355\u8bcd\u6211\u4eec\u79f0\u4e4b\u4e3a <strong>\u6700\u77ed\u8865\u5168\u8bcd</strong> \u3002</p>\n\n<p>\u5355\u8bcd\u5728\u5339\u914d\u724c\u7167\u4e2d\u7684\u5b57\u6bcd\u65f6\u8981\uff1a</p>\n\n<ul>\n\t<li>\u5ffd\u7565\u724c\u7167\u4e2d\u7684\u6570\u5b57\u548c\u7a7a\u683c\u3002</li>\n\t<li>\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6bd4\u5982\u724c\u7167\u4e2d\u7684&nbsp;<code>&quot;P&quot;</code>&nbsp;\u4f9d\u7136\u53ef\u4ee5\u5339\u914d\u5355\u8bcd\u4e2d\u7684&nbsp;<code>&quot;p&quot;</code>&nbsp;\u5b57\u6bcd\u3002</li>\n\t<li>\u5982\u679c\u67d0\u4e2a\u5b57\u6bcd\u5728\u724c\u7167\u4e2d\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff0c\u90a3\u4e48\u8be5\u5b57\u6bcd\u5728\u8865\u5168\u8bcd\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u5e94\u5f53\u4e00\u81f4\u6216\u8005\u66f4\u591a\u3002</li>\n</ul>\n\n<p>\u4f8b\u5982\uff1a<code>licensePlate</code><code> = &quot;aBc 12c&quot;</code>\uff0c\u90a3\u4e48\u5b83\u7531\u5b57\u6bcd <code>&#39;a&#39;</code>\u3001<code>&#39;b&#39;</code> \uff08\u5ffd\u7565\u5927\u5199\uff09\u548c\u4e24\u4e2a <code>&#39;c&#39;</code> \u3002\u53ef\u80fd\u7684 <strong>\u8865\u5168\u8bcd</strong> \u662f <code>&quot;abccdef&quot;</code>\u3001<code>&quot;caaacab&quot;</code> \u4ee5\u53ca <code>&quot;cbca&quot;</code> \u3002</p>\n\n<p>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u77ed\u8865\u5168\u8bcd\u3002\u5f53\u6709\u591a\u4e2a\u5355\u8bcd\u90fd\u7b26\u5408\u6700\u77ed\u8865\u5168\u8bcd\u7684\u5339\u914d\u6761\u4ef6\u65f6\u53d6\u5355\u8bcd\u5217\u8868\u4e2d\u6700\u9760\u524d\u7684\u4e00\u4e2a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;steps&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u6700\u77ed\u8865\u5168\u8bcd\u5e94\u8be5\u5305\u62ec &quot;s&quot;\u3001&quot;p&quot;\u3001&quot;s&quot; \u4ee5\u53ca &quot;t&quot;\u3002\u5728\u5339\u914d\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5ffd\u7565\u724c\u7167\u4e2d\u7684\u5927\u5c0f\u5199\u3002\n&quot;step&quot; \u5305\u542b &quot;t&quot;\u3001&quot;p&quot;\uff0c\u4f46\u53ea\u5305\u542b\u4e00\u4e2a &quot;s&quot;\uff0c\u6240\u4ee5\u5b83\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\n&quot;steps&quot; \u5305\u542b &quot;t&quot;\u3001&quot;p&quot; \u548c\u4e24\u4e2a &quot;s&quot;\u3002\n&quot;stripe&quot; \u7f3a\u4e00\u4e2a &quot;s&quot;\u3002\n&quot;stepple&quot; \u7f3a\u4e00\u4e2a &quot;s&quot;\u3002\n\u56e0\u6b64\uff0c&quot;steps&quot; \u662f\u552f\u4e00\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5b57\u6bcd\u7684\u5355\u8bcd\uff0c\u4e5f\u662f\u672c\u6837\u4f8b\u7684\u7b54\u6848\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;pest&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u5b58\u5728 3 \u4e2a\u5305\u542b\u5b57\u6bcd &quot;s&quot; \u4e14\u6709\u7740\u6700\u77ed\u957f\u5ea6\u7684\u8865\u5168\u8bcd\uff0c&quot;pest&quot;\u3001&quot;stew&quot;\u3001\u548c &quot;show&quot; \u4e09\u8005\u957f\u5ea6\u76f8\u540c\uff0c\u4f46\u6211\u4eec\u8fd4\u56de\u6700\u5148\u51fa\u73b0\u7684\u8865\u5168\u8bcd &quot;pest&quot; \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;Ah71752&quot;, words = [&quot;suggest&quot;,&quot;letter&quot;,&quot;of&quot;,&quot;husband&quot;,&quot;easy&quot;,&quot;education&quot;,&quot;drug&quot;,&quot;prevent&quot;,&quot;writer&quot;,&quot;old&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;husband&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;OgEu755&quot;, words = [&quot;enough&quot;,&quot;these&quot;,&quot;play&quot;,&quot;wide&quot;,&quot;wonder&quot;,&quot;box&quot;,&quot;arrive&quot;,&quot;money&quot;,&quot;tax&quot;,&quot;thus&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;enough&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;iMSlpe4&quot;, words = [&quot;claim&quot;,&quot;consumer&quot;,&quot;student&quot;,&quot;camera&quot;,&quot;public&quot;,&quot;never&quot;,&quot;wonder&quot;,&quot;simple&quot;,&quot;thought&quot;,&quot;use&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;simple&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li>\n\t<li><code>licensePlate</code> \u7531\u6570\u5b57\u3001\u5927\u5c0f\u5199\u5b57\u6bcd\u6216\u7a7a\u683c <code>&#39; &#39;</code> \u7ec4\u6210</li>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\n\t<li><code>words[i]</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shortestCompletingWord(string licensePlate, vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shortestCompletingWord(String licensePlate, String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestCompletingWord(self, licensePlate, words):\n        \"\"\"\n        :type licensePlate: str\n        :type words: List[str]\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * shortestCompletingWord(char * licensePlate, char ** words, int wordsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShortestCompletingWord(string licensePlate, string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} license_plate\n# @param {String[]} words\n# @return {String}\ndef shortest_completing_word(license_plate, words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestCompletingWord(_ licensePlate: String, _ words: [String]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestCompletingWord(licensePlate string, words []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestCompletingWord(licensePlate: String, words: Array[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestCompletingWord(licensePlate: String, words: Array<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_completing_word(license_plate: String, words: Vec<String>) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $licensePlate\n     * @param String[] $words\n     * @return String\n     */\n    function shortestCompletingWord($licensePlate, $words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestCompletingWord(licensePlate: string, words: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0750", "frontend_question_id": "0749", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/contain-virus", "url_en": "https://leetcode.com/problems/contain-virus", "relative_path_cn": "/leetcode/0700-0799/0749.Contain%20Virus/README.md", "relative_path_en": "/leetcode/0700-0799/0749.Contain%20Virus/README_EN.md", "title_cn": "\u9694\u79bb\u75c5\u6bd2", "title_en": "Contain Virus", "question_title_slug": "contain-virus", "content_en": "<p>\r\nA virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\r\n</p><p>\r\nThe world is modeled as a 2-D array of cells, where <code>0</code> represents uninfected cells, and <code>1</code> represents cells contaminated with the virus.  A wall (and only one wall) can be installed <b>between any two 4-directionally adjacent cells</b>, on the shared boundary.\r\n</p><p>\r\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.\r\nResources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.\r\n</p><p>\r\nCan you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[0,1,0,0,0,0,0,1],\r\n [0,1,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,0]]\r\n<b>Output:</b> 10\r\n<b>Explanation:</b>\r\nThere are 2 contaminated regions.\r\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\r\n\r\n[[0,1,0,0,0,0,1,1],\r\n [0,1,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,0,1]]\r\n\r\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> Even though there is only one cell saved, there are 4 walls built.\r\nNotice that walls are only built on the shared boundary of two different cells.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[1,1,1,0,0,0,0,0,0],\r\n [1,0,1,0,1,1,1,1,1],\r\n [1,1,1,0,0,0,0,0,0]]\r\n<b>Output:</b> 13\r\n<b>Explanation:</b> The region on the left only builds two new walls.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of rows and columns of <code>grid</code> will each be in the range <code>[1, 50]</code>.</li>\r\n<li>Each <code>grid[i][j]</code> will be either <code>0</code> or <code>1</code>.</li>\r\n<li>Throughout the described process, there is always a contiguous viral region that will infect <b>strictly more</b> uncontaminated squares in the next round.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u75c5\u6bd2\u6269\u6563\u5f97\u5f88\u5feb\uff0c\u73b0\u5728\u4f60\u7684\u4efb\u52a1\u662f\u5c3d\u53ef\u80fd\u5730\u901a\u8fc7\u5b89\u88c5\u9632\u706b\u5899\u6765\u9694\u79bb\u75c5\u6bd2\u3002</p>\n\n<p>\u5047\u8bbe\u4e16\u754c\u7531\u4e8c\u7ef4\u77e9\u9635\u7ec4\u6210\uff0c<code>0</code> \u8868\u793a\u8be5\u533a\u57df\u672a\u611f\u67d3\u75c5\u6bd2\uff0c\u800c <code>1</code> \u8868\u793a\u8be5\u533a\u57df\u5df2\u611f\u67d3\u75c5\u6bd2\u3002\u53ef\u4ee5\u5728\u4efb\u610f 2 \u4e2a\u56db\u65b9\u5411\u76f8\u90bb\u5355\u5143\u4e4b\u95f4\u7684\u5171\u4eab\u8fb9\u754c\u4e0a\u5b89\u88c5\u4e00\u4e2a\u9632\u706b\u5899\uff08\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u9632\u706b\u5899\uff09\u3002</p>\n\n<p>\u6bcf\u5929\u665a\u4e0a\uff0c\u75c5\u6bd2\u4f1a\u4ece\u88ab\u611f\u67d3\u533a\u57df\u5411\u76f8\u90bb\u672a\u611f\u67d3\u533a\u57df\u6269\u6563\uff0c\u9664\u975e\u88ab\u9632\u706b\u5899\u9694\u79bb\u3002\u73b0\u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u6bcf\u5929\u4f60\u53ea\u80fd\u5b89\u88c5\u4e00\u7cfb\u5217\u9632\u706b\u5899\u6765\u9694\u79bb\u5176\u4e2d\u4e00\u4e2a\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u533a\u57df\uff08\u4e00\u4e2a\u533a\u57df\u6216\u8fde\u7eed\u7684\u4e00\u7247\u533a\u57df\uff09\uff0c\u4e14\u8be5\u611f\u67d3\u533a\u57df\u5bf9\u672a\u611f\u67d3\u533a\u57df\u7684\u5a01\u80c1\u6700\u5927\u4e14\u4fdd\u8bc1\u552f\u4e00\u3002</p>\n\n<p>\u4f60\u9700\u8981\u52aa\u529b\u4f7f\u5f97\u6700\u540e\u6709\u90e8\u5206\u533a\u57df\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\uff0c\u5982\u679c\u53ef\u4ee5\u6210\u529f\uff0c\u90a3\u4e48\u8fd4\u56de\u9700\u8981\u4f7f\u7528\u7684\u9632\u706b\u5899\u4e2a\u6570; \u5982\u679c\u65e0\u6cd5\u5b9e\u73b0\uff0c\u5219\u8fd4\u56de\u5728\u4e16\u754c\u88ab\u75c5\u6bd2\u5168\u90e8\u611f\u67d3\u65f6\u5df2\u5b89\u88c5\u7684\u9632\u706b\u5899\u4e2a\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\n<strong>\u8f93\u51fa:</strong> 10\n<strong>\u8bf4\u660e:</strong>\n\u4e00\u5171\u6709\u4e24\u5757\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u533a\u57df: \u4ece\u5de6\u5f80\u53f3\u7b2c\u4e00\u5757\u9700\u8981 5 \u4e2a\u9632\u706b\u5899\uff0c\u540c\u65f6\u82e5\u8be5\u533a\u57df\u4e0d\u9694\u79bb\uff0c\u665a\u4e0a\u5c06\u611f\u67d3 5 \u4e2a\u672a\u611f\u67d3\u533a\u57df\uff08\u5373\u88ab\u5a01\u80c1\u7684\u672a\u611f\u67d3\u533a\u57df\u4e2a\u6570\u4e3a 5\uff09;\n\u7b2c\u4e8c\u5757\u9700\u8981 4 \u4e2a\u9632\u706b\u5899\uff0c\u540c\u7406\u88ab\u5a01\u80c1\u7684\u672a\u611f\u67d3\u533a\u57df\u4e2a\u6570\u662f 4\u3002\u56e0\u6b64\uff0c\u7b2c\u4e00\u5929\u5148\u9694\u79bb\u5de6\u8fb9\u7684\u611f\u67d3\u533a\u57df\uff0c\u7ecf\u8fc7\u4e00\u665a\u540e\uff0c\u75c5\u6bd2\u4f20\u64ad\u540e\u4e16\u754c\u5982\u4e0b:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\n\u7b2c\u4e8c\u9898\uff0c\u53ea\u5269\u4e0b\u4e00\u5757\u672a\u9694\u79bb\u7684\u88ab\u611f\u67d3\u7684\u8fde\u7eed\u533a\u57df\uff0c\u6b64\u65f6\u9700\u8981\u5b89\u88c5 5 \u4e2a\u9632\u706b\u5899\uff0c\u4e14\u5b89\u88c5\u5b8c\u6bd5\u540e\u75c5\u6bd2\u9694\u79bb\u4efb\u52a1\u5b8c\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u8bf4\u660e:</strong> \n\u6b64\u65f6\u53ea\u9700\u8981\u5b89\u88c5 4 \u9762\u9632\u706b\u5899\uff0c\u5c31\u6709\u4e00\u5c0f\u533a\u57df\u53ef\u4ee5\u5e78\u5b58\uff0c\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\u3002\n\u6ce8\u610f\u4e0d\u9700\u8981\u5728\u4e16\u754c\u8fb9\u754c\u5efa\u7acb\u9632\u706b\u5899\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\n<strong>\u8f93\u51fa:</strong> 13\n<strong>\u8bf4\u660e:</strong> \n\u5728\u9694\u79bb\u53f3\u8fb9\u611f\u67d3\u533a\u57df\u540e\uff0c\u9694\u79bb\u5de6\u8fb9\u75c5\u6bd2\u533a\u57df\u53ea\u9700\u8981 2 \u4e2a\u9632\u706b\u5899\u4e86\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>grid</code> \u7684\u884c\u6570\u548c\u5217\u6570\u8303\u56f4\u662f [1, 50]\u3002</li>\n\t<li>&nbsp;<code>grid[i][j]</code>&nbsp;\u53ea\u5305\u542b&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n\t<li>\u9898\u76ee\u4fdd\u8bc1\u6bcf\u6b21\u9009\u53d6\u611f\u67d3\u533a\u57df\u8fdb\u884c\u9694\u79bb\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u552f\u4e00\u4e00\u4e2a\u5bf9\u672a\u611f\u67d3\u533a\u57df\u7684\u5a01\u80c1\u6700\u5927\u7684\u533a\u57df\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int containVirus(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int containVirus(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def containVirus(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def containVirus(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint containVirus(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ContainVirus(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar containVirus = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef contain_virus(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func containVirus(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func containVirus(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def containVirus(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun containVirus(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn contain_virus(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function containVirus($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function containVirus(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0751", "frontend_question_id": "0750", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/number-of-corner-rectangles", "url_en": "https://leetcode.com/problems/number-of-corner-rectangles", "relative_path_cn": "/leetcode/0700-0799/0750.Number%20Of%20Corner%20Rectangles/README.md", "relative_path_en": "/leetcode/0700-0799/0750.Number%20Of%20Corner%20Rectangles/README_EN.md", "title_cn": "\u89d2\u77e9\u5f62\u7684\u6570\u91cf", "title_en": "Number Of Corner Rectangles", "question_title_slug": "number-of-corner-rectangles", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0752", "frontend_question_id": "0751", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/ip-to-cidr", "url_en": "https://leetcode.com/problems/ip-to-cidr", "relative_path_cn": "/leetcode/0700-0799/0751.IP%20to%20CIDR/README.md", "relative_path_en": "/leetcode/0700-0799/0751.IP%20to%20CIDR/README_EN.md", "title_cn": "IP \u5230 CIDR", "title_en": "IP to CIDR", "question_title_slug": "ip-to-cidr", "content_en": null, "content_cn": null, "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0753", "frontend_question_id": "0752", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/open-the-lock", "url_en": "https://leetcode.com/problems/open-the-lock", "relative_path_cn": "/leetcode/0700-0799/0752.Open%20the%20Lock/README.md", "relative_path_en": "/leetcode/0700-0799/0752.Open%20the%20Lock/README_EN.md", "title_cn": "\u6253\u5f00\u8f6c\u76d8\u9501", "title_en": "Open the Lock", "question_title_slug": "open-the-lock", "content_en": "<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code>. The wheels can rotate freely and wrap around: for example we can turn <code>&#39;9&#39;</code> to be <code>&#39;0&#39;</code>, or <code>&#39;0&#39;</code> to be <code>&#39;9&#39;</code>. Each move consists of turning one wheel one slot.</p>\n\n<p>The lock initially starts at <code>&#39;0000&#39;</code>, a string representing the state of the 4 wheels.</p>\n\n<p>You are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>\n\n<p>Given a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nA sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.\nNote that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWe can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>Output:</strong> -1\nExplanation:\nWe can&#39;t reach the target without getting stuck.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;deadends.length &lt;= 500</code></li>\n\t<li><code><font face=\"monospace\">deadends[i].length == 4</font></code></li>\n\t<li><code><font face=\"monospace\">target.length == 4</font></code></li>\n\t<li>target <strong>will not be</strong> in the list <code>deadends</code>.</li>\n\t<li><code>target</code> and <code>deadends[i]</code> consist of digits only.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u6709\u4e00\u4e2a\u5e26\u6709\u56db\u4e2a\u5706\u5f62\u62e8\u8f6e\u7684\u8f6c\u76d8\u9501\u3002\u6bcf\u4e2a\u62e8\u8f6e\u90fd\u670910\u4e2a\u6570\u5b57\uff1a <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code> \u3002\u6bcf\u4e2a\u62e8\u8f6e\u53ef\u4ee5\u81ea\u7531\u65cb\u8f6c\uff1a\u4f8b\u5982\u628a <code>&#39;9&#39;</code> \u53d8\u4e3a&nbsp; <code>&#39;0&#39;</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">\uff0c</span></font><code>&#39;0&#39;</code> \u53d8\u4e3a <code>&#39;9&#39;</code> \u3002\u6bcf\u6b21\u65cb\u8f6c\u90fd\u53ea\u80fd\u65cb\u8f6c\u4e00\u4e2a\u62e8\u8f6e\u7684\u4e00\u4f4d\u6570\u5b57\u3002</p>\n\n<p>\u9501\u7684\u521d\u59cb\u6570\u5b57\u4e3a <code>&#39;0000&#39;</code> \uff0c\u4e00\u4e2a\u4ee3\u8868\u56db\u4e2a\u62e8\u8f6e\u7684\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u5217\u8868 <code>deadends</code> \u5305\u542b\u4e86\u4e00\u7ec4\u6b7b\u4ea1\u6570\u5b57\uff0c\u4e00\u65e6\u62e8\u8f6e\u7684\u6570\u5b57\u548c\u5217\u8868\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff0c\u8fd9\u4e2a\u9501\u5c06\u4f1a\u88ab\u6c38\u4e45\u9501\u5b9a\uff0c\u65e0\u6cd5\u518d\u88ab\u65cb\u8f6c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32 <code>target</code> \u4ee3\u8868\u53ef\u4ee5\u89e3\u9501\u7684\u6570\u5b57\uff0c\u4f60\u9700\u8981\u7ed9\u51fa\u6700\u5c0f\u7684\u65cb\u8f6c\u6b21\u6570\uff0c\u5982\u679c\u65e0\u8bba\u5982\u4f55\u4e0d\u80fd\u89e3\u9501\uff0c\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u79fb\u52a8\u5e8f\u5217\u4e3a &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;\u3002\n\u6ce8\u610f &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; \u8fd9\u6837\u7684\u5e8f\u5217\u662f\u4e0d\u80fd\u89e3\u9501\u7684\uff0c\n\u56e0\u4e3a\u5f53\u62e8\u52a8\u5230 &quot;0102&quot; \u65f6\u8fd9\u4e2a\u9501\u5c31\u4f1a\u88ab\u9501\u5b9a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u628a\u6700\u540e\u4e00\u4f4d\u53cd\u5411\u65cb\u8f6c\u4e00\u6b21\u5373\u53ef &quot;0000&quot; -&gt; &quot;0009&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a\n</strong>\u65e0\u6cd5\u65cb\u8f6c\u5230\u76ee\u6807\u6570\u5b57\u4e14\u4e0d\u88ab\u9501\u5b9a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6b7b\u4ea1\u5217\u8868 <code>deadends</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 500]</code>\u3002</li>\n\t<li>\u76ee\u6807\u6570\u5b57 <code>target</code> \u4e0d\u4f1a\u5728 <code>deadends</code> \u4e4b\u4e2d\u3002</li>\n\t<li>\u6bcf\u4e2a <code>deadends</code> \u548c <code>target</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u6570\u5b57\u4f1a\u5728 10,000 \u4e2a\u53ef\u80fd\u7684\u60c5\u51b5 <code>&#39;0000&#39;</code> \u5230 <code>&#39;9999&#39;</code> \u4e2d\u4ea7\u751f\u3002</li>\n</ol>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int openLock(vector<string>& deadends, string target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int openLock(String[] deadends, String target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def openLock(self, deadends, target):\n        \"\"\"\n        :type deadends: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint openLock(char ** deadends, int deadendsSize, char * target){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int OpenLock(string[] deadends, string target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} deadends\n * @param {string} target\n * @return {number}\n */\nvar openLock = function(deadends, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} deadends\n# @param {String} target\n# @return {Integer}\ndef open_lock(deadends, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func openLock(_ deadends: [String], _ target: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func openLock(deadends []string, target string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def openLock(deadends: Array[String], target: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun openLock(deadends: Array<String>, target: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn open_lock(deadends: Vec<String>, target: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $deadends\n     * @param String $target\n     * @return Integer\n     */\n    function openLock($deadends, $target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function openLock(deadends: string[], target: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0754", "frontend_question_id": "0753", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cracking-the-safe", "url_en": "https://leetcode.com/problems/cracking-the-safe", "relative_path_cn": "/leetcode/0700-0799/0753.Cracking%20the%20Safe/README.md", "relative_path_en": "/leetcode/0700-0799/0753.Cracking%20the%20Safe/README_EN.md", "title_cn": "\u7834\u89e3\u4fdd\u9669\u7bb1", "title_en": "Cracking the Safe", "question_title_slug": "cracking-the-safe", "content_en": "<p>There is a box protected by a password. The password is a sequence of&nbsp;<code>n</code> digits&nbsp;where each digit can be one of the first <code>k</code> digits <code>0, 1, ..., k-1</code>.</p>\n\n<p>While entering a password,&nbsp;the last <code>n</code> digits entered will automatically be matched against the correct password.</p>\n\n<p>For example, assuming the correct password is <code>&quot;345&quot;</code>,&nbsp;if you type <code>&quot;012345&quot;</code>, the box will open because the correct password matches the suffix of the entered password.</p>\n\n<p>Return any password of <strong>minimum length</strong> that is guaranteed to open the box at some point of entering it.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> n = 1, k = 2\n<b>Output:</b> &quot;01&quot;\n<b>Note:</b> &quot;10&quot; will be accepted too.\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> n = 2, k = 2\n<b>Output:</b> &quot;00110&quot;\n<b>Note:</b> &quot;01100&quot;, &quot;10011&quot;, &quot;11001&quot; will be accepted too.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ol>\n\t<li><code>n</code> will be in the range <code>[1, 4]</code>.</li>\n\t<li><code>k</code> will be in the range <code>[1, 10]</code>.</li>\n\t<li><code>k^n</code> will be at most <code>4096</code>.</li>\n</ol>\n\n<p>&nbsp;</p>\n", "content_cn": "<p>\u6709\u4e00\u4e2a\u9700\u8981\u5bc6\u7801\u624d\u80fd\u6253\u5f00\u7684\u4fdd\u9669\u7bb1\u3002\u5bc6\u7801\u662f&nbsp;<code>n</code> \u4f4d\u6570, \u5bc6\u7801\u7684\u6bcf\u4e00\u4f4d\u662f&nbsp;<code>k</code>&nbsp;\u4f4d\u5e8f\u5217&nbsp;<code>0, 1, ..., k-1</code>&nbsp;\u4e2d\u7684\u4e00\u4e2a \u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u968f\u610f\u8f93\u5165\u5bc6\u7801\uff0c\u4fdd\u9669\u7bb1\u4f1a\u81ea\u52a8\u8bb0\u4f4f\u6700\u540e&nbsp;<code>n</code>&nbsp;\u4f4d\u8f93\u5165\uff0c\u5982\u679c\u5339\u914d\uff0c\u5219\u80fd\u591f\u6253\u5f00\u4fdd\u9669\u7bb1\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u5bc6\u7801\u662f&nbsp;<code>&quot;345&quot;</code>\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165&nbsp;<code>&quot;012345&quot;</code>&nbsp;\u6765\u6253\u5f00\u5b83\uff0c\u53ea\u662f\u4f60\u8f93\u5165\u4e86 6&nbsp;\u4e2a\u5b57\u7b26.</p>\n\n<p>\u8bf7\u8fd4\u56de\u4e00\u4e2a\u80fd\u6253\u5f00\u4fdd\u9669\u7bb1\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 1, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;01&quot;\n<strong>\u8bf4\u660e:</strong> &quot;10&quot;\u4e5f\u53ef\u4ee5\u6253\u5f00\u4fdd\u9669\u7bb1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 2, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;00110&quot;\n<strong>\u8bf4\u660e: </strong>&quot;01100&quot;, &quot;10011&quot;, &quot;11001&quot; \u4e5f\u80fd\u6253\u5f00\u4fdd\u9669\u7bb1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>n</code> \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 4]</code>\u3002</li>\n\t<li><code>k</code> \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 10]</code>\u3002</li>\n\t<li><code>k^n</code> \u6700\u5927\u53ef\u80fd\u4e3a&nbsp;<code>4096</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Depth-first Search", "Math"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string crackSafe(int n, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String crackSafe(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def crackSafe(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * crackSafe(int n, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string CrackSafe(int n, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar crackSafe = function(n, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef crack_safe(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func crackSafe(_ n: Int, _ k: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func crackSafe(n int, k int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def crackSafe(n: Int, k: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun crackSafe(n: Int, k: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn crack_safe(n: i32, k: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function crackSafe($n, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function crackSafe(n: number, k: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0755", "frontend_question_id": "0754", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reach-a-number", "url_en": "https://leetcode.com/problems/reach-a-number", "relative_path_cn": "/leetcode/0700-0799/0754.Reach%20a%20Number/README.md", "relative_path_en": "/leetcode/0700-0799/0754.Reach%20a%20Number/README_EN.md", "title_cn": "\u5230\u8fbe\u7ec8\u70b9\u6570\u5b57", "title_en": "Reach a Number", "question_title_slug": "reach-a-number", "content_en": "<p>\r\nYou are standing at position <code>0</code> on an infinite number line.  There is a goal at position <code>target</code>.\r\n</p><p>\r\nOn each move, you can either go left or right.  During the <i>n</i>-th move (starting from 1), you take <i>n</i> steps.\r\n</p><p>\r\nReturn the minimum number of steps required to reach the destination.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 3\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second step we step from 1 to 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 2\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second move we step  from 1 to -1.\r\nOn the third move we step from -1 to 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<li><code>target</code> will be a non-zero integer in the range <code>[-10^9, 10^9]</code>.</li>\r\n</p>", "content_cn": "<p>\u5728\u4e00\u6839\u65e0\u9650\u957f\u7684\u6570\u8f74\u4e0a\uff0c\u4f60\u7ad9\u5728<code>0</code>\u7684\u4f4d\u7f6e\u3002\u7ec8\u70b9\u5728<code>target</code>\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u9009\u62e9\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u3002\u7b2c n \u6b21\u79fb\u52a8\uff08\u4ece 1 \u5f00\u59cb\uff09\uff0c\u53ef\u4ee5\u8d70 n \u6b65\u3002</p>\n\n<p>\u8fd4\u56de\u5230\u8fbe\u7ec8\u70b9\u9700\u8981\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> target = 3\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u6b21\u79fb\u52a8\uff0c\u4ece 0 \u5230 1 \u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\uff0c\u4ece 1 \u5230 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> target = 2\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u6b21\u79fb\u52a8\uff0c\u4ece 0 \u5230 1 \u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\uff0c\u4ece 1 \u5230 -1 \u3002\n\u7b2c\u4e09\u6b21\u79fb\u52a8\uff0c\u4ece -1 \u5230 2 \u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>target</code>\u662f\u5728<code>[-10^9, 10^9]</code>\u8303\u56f4\u4e2d\u7684\u975e\u96f6\u6574\u6570\u3002</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int reachNumber(int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int reachNumber(int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reachNumber(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint reachNumber(int target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ReachNumber(int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} target\n * @return {number}\n */\nvar reachNumber = function(target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} target\n# @return {Integer}\ndef reach_number(target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reachNumber(_ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reachNumber(target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reachNumber(target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reachNumber(target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reach_number(target: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function reachNumber($target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reachNumber(target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0756", "frontend_question_id": "0755", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/pour-water", "url_en": "https://leetcode.com/problems/pour-water", "relative_path_cn": "/leetcode/0700-0799/0755.Pour%20Water/README.md", "relative_path_en": "/leetcode/0700-0799/0755.Pour%20Water/README_EN.md", "title_cn": "\u5012\u6c34", "title_en": "Pour Water", "question_title_slug": "pour-water", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0757", "frontend_question_id": "0756", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/pyramid-transition-matrix", "url_en": "https://leetcode.com/problems/pyramid-transition-matrix", "relative_path_cn": "/leetcode/0700-0799/0756.Pyramid%20Transition%20Matrix/README.md", "relative_path_en": "/leetcode/0700-0799/0756.Pyramid%20Transition%20Matrix/README_EN.md", "title_cn": "\u91d1\u5b57\u5854\u8f6c\u6362\u77e9\u9635", "title_en": "Pyramid Transition Matrix", "question_title_slug": "pyramid-transition-matrix", "content_en": "<p>We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.</p>\n\n<p>We are allowed to place any color block <code>C</code> on top of two adjacent blocks of colors <code>A</code> and <code>B</code>, if and only if <code>ABC</code> is an allowed triple.</p>\n\n<p>We start with a bottom row of <code>bottom</code>, represented as a single string. We also start with a list of allowed triples <code>allowed</code>. Each allowed triple is represented as a string of length 3.</p>\n\n<p>Return true if we can build the pyramid all the way to the top, otherwise false.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> bottom = &quot;BCD&quot;, allowed = [&quot;BCG&quot;, &quot;CDE&quot;, &quot;GEA&quot;, &quot;FFF&quot;]\n<b>Output:</b> true\n<b>Explanation:</b>\nWe can stack the pyramid like this:\n    A\n   / \\\n  G   E\n / \\ / \\\nB   C   D\n\nWe are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> bottom = &quot;AABA&quot;, allowed = [&quot;AAA&quot;, &quot;AAB&quot;, &quot;ABA&quot;, &quot;ABB&quot;, &quot;BAC&quot;]\n<b>Output:</b> false\n<b>Explanation:</b>\nWe can&#39;t stack the pyramid to the top.\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>bottom</code> will be a string with length in range <code>[2, 8]</code>.</li>\n\t<li><code>allowed</code> will have length in range <code>[0, 200]</code>.</li>\n\t<li>Letters in all strings will be chosen from the set <code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>.</li>\n</ul>\n", "content_cn": "<p>\u73b0\u5728\uff0c\u6211\u4eec\u7528\u4e00\u4e9b\u65b9\u5757\u6765\u5806\u780c\u4e00\u4e2a\u91d1\u5b57\u5854\u3002 \u6bcf\u4e2a\u65b9\u5757\u7528\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>\u4f7f\u7528\u4e09\u5143\u7ec4\u8868\u793a\u91d1\u5b57\u5854\u7684\u5806\u780c\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<p>\u5bf9\u4e8e\u4e09\u5143\u7ec4(A, B, C) \uff0c&ldquo;C&rdquo;\u4e3a\u9876\u5c42\u65b9\u5757\uff0c\u65b9\u5757&ldquo;A&rdquo;\u3001&ldquo;B&rdquo;\u5206\u522b\u4f5c\u4e3a\u65b9\u5757&ldquo;C&rdquo;\u4e0b\u4e00\u5c42\u7684\u7684\u5de6\u3001\u53f3\u5b50\u5757\u3002\u5f53\u4e14\u4ec5\u5f53(A, B, C)\u662f\u88ab\u5141\u8bb8\u7684\u4e09\u5143\u7ec4\uff0c\u6211\u4eec\u624d\u53ef\u4ee5\u5c06\u5176\u5806\u780c\u4e0a\u3002</p>\n\n<p>\u521d\u59cb\u65f6\uff0c\u7ed9\u5b9a\u91d1\u5b57\u5854\u7684\u57fa\u5c42&nbsp;<code>bottom</code>\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u3002\u4e00\u4e2a\u5141\u8bb8\u7684\u4e09\u5143\u7ec4\u5217\u8868&nbsp;<code>allowed</code>\uff0c\u6bcf\u4e2a\u4e09\u5143\u7ec4\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u7531\u57fa\u5c42\u4e00\u76f4\u5806\u5230\u5854\u5c16\u5c31\u8fd4\u56de <code>true</code> \uff0c\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>bottom = &quot;BCD&quot;, allowed = [&quot;BCG&quot;, &quot;CDE&quot;, &quot;GEA&quot;, &quot;FFF&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u6790\uff1a</strong>\n\u53ef\u4ee5\u5806\u780c\u6210\u8fd9\u6837\u7684\u91d1\u5b57\u5854:\n    A\n   / \\\n  G   E\n / \\ / \\\nB   C   D\n\n\u56e0\u4e3a\u7b26\u5408(&#39;B&#39;, &#39;C&#39;, &#39;G&#39;), (&#39;C&#39;, &#39;D&#39;, &#39;E&#39;) \u548c (&#39;G&#39;, &#39;E&#39;, &#39;A&#39;) \u4e09\u79cd\u89c4\u5219\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>bottom = &quot;AABA&quot;, allowed = [&quot;AAA&quot;, &quot;AAB&quot;, &quot;ABA&quot;, &quot;ABB&quot;, &quot;BAC&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u6790\uff1a</strong>\n\u65e0\u6cd5\u4e00\u76f4\u5806\u5230\u5854\u5c16\u3002\n\u6ce8\u610f, \u5141\u8bb8\u5b58\u5728\u50cf (A, B, C) \u548c (A, B, D) \u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d C != D\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>bottom</code> \u7684\u957f\u5ea6\u8303\u56f4\u5728&nbsp;<code>[2, 8]</code>\u3002</li>\n\t<li><code>allowed</code> \u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[0, 200]</code>\u3002</li>\n\t<li>\u65b9\u5757\u7684\u6807\u8bb0\u5b57\u6bcd\u8303\u56f4\u4e3a<code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>\u3002</li>\n</ol>\n", "tags_en": ["Bit Manipulation", "Depth-first Search"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool pyramidTransition(string bottom, vector<string>& allowed) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean pyramidTransition(String bottom, List<String> allowed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        \"\"\"\n        :type bottom: str\n        :type allowed: List[str]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool pyramidTransition(char * bottom, char ** allowed, int allowedSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool PyramidTransition(string bottom, IList<string> allowed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} bottom\n# @param {String[]} allowed\n# @return {Boolean}\ndef pyramid_transition(bottom, allowed)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func pyramidTransition(_ bottom: String, _ allowed: [String]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func pyramidTransition(bottom string, allowed []string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def pyramidTransition(bottom: String, allowed: List[String]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun pyramidTransition(bottom: String, allowed: List<String>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn pyramid_transition(bottom: String, allowed: Vec<String>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $bottom\n     * @param String[] $allowed\n     * @return Boolean\n     */\n    function pyramidTransition($bottom, $allowed) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function pyramidTransition(bottom: string, allowed: string[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0759", "frontend_question_id": "0757", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/set-intersection-size-at-least-two", "url_en": "https://leetcode.com/problems/set-intersection-size-at-least-two", "relative_path_cn": "/leetcode/0700-0799/0757.Set%20Intersection%20Size%20At%20Least%20Two/README.md", "relative_path_en": "/leetcode/0700-0799/0757.Set%20Intersection%20Size%20At%20Least%20Two/README_EN.md", "title_cn": "\u8bbe\u7f6e\u4ea4\u96c6\u5927\u5c0f\u81f3\u5c11\u4e3a2", "title_en": "Set Intersection Size At Least Two", "question_title_slug": "set-intersection-size-at-least-two", "content_en": "<p>An integer interval <code>[a, b]</code> (for integers <code>a &lt; b</code>) is a set of all consecutive integers from <code>a</code> to <code>b</code>, including <code>a</code> and <code>b</code>.</p>\n\n<p>Find the minimum size of a set S such that for every integer interval A in <code>intervals</code>, the intersection of S with A has a size of at least two.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[1,4],[2,5],[3,5]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\nAlso, there isn&#39;t a smaller size set that fulfills the above condition.\nThus, we output the size of this set, which is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[2,4],[4,5]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> An example of a minimum sized set is {1, 2, 3, 4, 5}.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 3000</code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub> &lt;&nbsp;b<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n</ul>\n", "content_cn": "<p>\u4e00\u4e2a\u6574\u6570\u533a\u95f4&nbsp;<code>[a, b]</code>&nbsp;&nbsp;(&nbsp;<code>a &lt; b</code>&nbsp;) \u4ee3\u8868\u7740\u4ece&nbsp;<code>a</code>&nbsp;\u5230&nbsp;<code>b</code>&nbsp;\u7684\u6240\u6709\u8fde\u7eed\u6574\u6570\uff0c\u5305\u62ec&nbsp;<code>a</code>&nbsp;\u548c&nbsp;<code>b</code>\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u7ec4\u6574\u6570\u533a\u95f4<code>intervals</code>\uff0c\u8bf7\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u96c6\u5408 S\uff0c\u4f7f\u5f97 S \u91cc\u7684\u5143\u7d20\u4e0e\u533a\u95f4<code>intervals</code>\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6574\u6570\u533a\u95f4\u90fd\u81f3\u5c11\u67092\u4e2a\u5143\u7d20\u76f8\u4ea4\u3002</p>\n\n<p>\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u96c6\u5408S\u7684\u5927\u5c0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u8003\u8651\u96c6\u5408 S = {2, 3, 4}. S\u4e0eintervals\u4e2d\u7684\u56db\u4e2a\u533a\u95f4\u90fd\u6709\u81f3\u5c112\u4e2a\u76f8\u4ea4\u7684\u5143\u7d20\u3002\n\u4e14\u8fd9\u662fS\u6700\u5c0f\u7684\u60c5\u51b5\uff0c\u6545\u6211\u4eec\u8f93\u51fa3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n\u6700\u5c0f\u7684\u96c6\u5408S = {1, 2, 3, 4, 5}.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>intervals</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1, 3000]</code>\u3002</li>\n\t<li><code>intervals[i]</code>&nbsp;\u957f\u5ea6\u4e3a&nbsp;<code>2</code>\uff0c\u5206\u522b\u4ee3\u8868\u5de6\u3001\u53f3\u8fb9\u754c\u3002</li>\n\t<li><code>intervals[i][j]</code> \u7684\u503c\u662f&nbsp;<code>[0, 10^8]</code>\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int intersectionSizeTwo(vector<vector<int>>& intervals) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int intersectionSizeTwo(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint intersectionSizeTwo(int** intervals, int intervalsSize, int* intervalsColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IntersectionSizeTwo(int[][] intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar intersectionSizeTwo = function(intervals) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef intersection_size_two(intervals)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func intersectionSizeTwo(_ intervals: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func intersectionSizeTwo(intervals [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def intersectionSizeTwo(intervals: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun intersectionSizeTwo(intervals: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn intersection_size_two(intervals: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function intersectionSizeTwo($intervals) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function intersectionSizeTwo(intervals: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0760", "frontend_question_id": "0758", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/bold-words-in-string", "url_en": "https://leetcode.com/problems/bold-words-in-string", "relative_path_cn": "/leetcode/0700-0799/0758.Bold%20Words%20in%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0758.Bold%20Words%20in%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u4e2d\u7684\u52a0\u7c97\u5355\u8bcd", "title_en": "Bold Words in String", "question_title_slug": "bold-words-in-string", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0761", "frontend_question_id": "0759", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/employee-free-time", "url_en": "https://leetcode.com/problems/employee-free-time", "relative_path_cn": "/leetcode/0700-0799/0759.Employee%20Free%20Time/README.md", "relative_path_en": "/leetcode/0700-0799/0759.Employee%20Free%20Time/README_EN.md", "title_cn": "\u5458\u5de5\u7a7a\u95f2\u65f6\u95f4", "title_en": "Employee Free Time", "question_title_slug": "employee-free-time", "content_en": null, "content_cn": null, "tags_en": ["Heap", "Greedy"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0762", "frontend_question_id": "0760", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-anagram-mappings", "url_en": "https://leetcode.com/problems/find-anagram-mappings", "relative_path_cn": "/leetcode/0700-0799/0760.Find%20Anagram%20Mappings/README.md", "relative_path_en": "/leetcode/0700-0799/0760.Find%20Anagram%20Mappings/README_EN.md", "title_cn": "\u627e\u51fa\u53d8\u4f4d\u6620\u5c04", "title_en": "Find Anagram Mappings", "question_title_slug": "find-anagram-mappings", "content_en": null, "content_cn": null, "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0763", "frontend_question_id": "0761", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/special-binary-string", "url_en": "https://leetcode.com/problems/special-binary-string", "relative_path_cn": "/leetcode/0700-0799/0761.Special%20Binary%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0761.Special%20Binary%20String/README_EN.md", "title_cn": "\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217", "title_en": "Special Binary String", "question_title_slug": "special-binary-string", "content_en": "<p>\r\n<i>Special</i> binary strings are binary strings with the following two properties:\r\n</p><p>\r\n<li>The number of 0's is equal to the number of 1's.</li>\r\n<li>Every prefix of the binary string has at least as many 1's as 0's.</li>\r\n</p><p>\r\nGiven a special string <code>S</code>, a <i>move</i> consists of choosing two consecutive, non-empty, special substrings of <code>S</code>, and swapping them.  <i>(Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)</i>\r\n</p><p>\r\nAt the end of any number of moves, what is the lexicographically largest resulting string possible?\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"11011000\"\r\n<b>Output:</b> \"11100100\"\r\n<b>Explanation:</b>\r\nThe strings \"10\" [occuring at S[1]] and \"1100\" [at S[3]] are swapped.\r\nThis is the lexicographically largest string possible after some number of swaps.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><ol>\r\n<li><code>S</code> has length at most <code>50</code>.</li>\r\n<li><code>S</code> is guaranteed to be a <i>special</i> binary string as defined above.</li>\r\n</ol></p>", "content_cn": "<p>\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u662f\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6027\u8d28\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\uff1a</p>\n\n<ul>\n\t<li>0 \u7684\u6570\u91cf\u4e0e 1 \u7684\u6570\u91cf\u76f8\u7b49\u3002</li>\n\t<li>\u4e8c\u8fdb\u5236\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u7801\u4e2d 1 \u7684\u6570\u91cf\u8981\u5927\u4e8e\u7b49\u4e8e 0 \u7684\u6570\u91cf\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217&nbsp;<code>S</code>\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u3002\u5b9a\u4e49\u4e00\u4e2a<em>\u64cd\u4f5c </em>\u4e3a\u9996\u5148\u9009\u62e9&nbsp;<code>S</code>&nbsp;\u7684\u4e24\u4e2a\u8fde\u7eed\u4e14\u975e\u7a7a\u7684\u7279\u6b8a\u7684\u5b50\u4e32\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ea4\u6362\u3002\uff08\u4e24\u4e2a\u5b50\u4e32\u4e3a\u8fde\u7eed\u7684\u5f53\u4e14\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6070\u597d\u4e3a\u7b2c\u4e8c\u4e2a\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u3002)</p>\n\n<p>\u5728\u4efb\u610f\u6b21\u6570\u7684\u64cd\u4f5c\u4e4b\u540e\uff0c\u4ea4\u6362\u540e\u7684\u5b57\u7b26\u4e32\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u6700\u5927\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;11011000&quot;\n<strong>\u8f93\u51fa:</strong> &quot;11100100&quot;\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u5b50\u4e32 &quot;10&quot; \uff08\u5728S[1]\u51fa\u73b0\uff09 \u548c &quot;1100&quot; \uff08\u5728S[3]\u51fa\u73b0\uff09\u8fdb\u884c\u4ea4\u6362\u3002\n\u8fd9\u662f\u5728\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u540e\u6309\u5b57\u5178\u5e8f\u6392\u5217\u6700\u5927\u7684\u7ed3\u679c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>50</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u4fdd\u8bc1\u4e3a\u4e00\u4e2a\u6ee1\u8db3\u4e0a\u8ff0\u5b9a\u4e49\u7684<em>\u7279\u6b8a </em>\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002</li>\n</ol>\n", "tags_en": ["Recursion", "String"], "tags_cn": ["\u9012\u5f52", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string makeLargestSpecial(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String makeLargestSpecial(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def makeLargestSpecial(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def makeLargestSpecial(self, S: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * makeLargestSpecial(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string MakeLargestSpecial(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar makeLargestSpecial = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef make_largest_special(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func makeLargestSpecial(_ S: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func makeLargestSpecial(S string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def makeLargestSpecial(S: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun makeLargestSpecial(S: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn make_largest_special(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String\n     */\n    function makeLargestSpecial($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function makeLargestSpecial(S: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0767", "frontend_question_id": "0762", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation", "url_en": "https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation", "relative_path_cn": "/leetcode/0700-0799/0762.Prime%20Number%20of%20Set%20Bits%20in%20Binary%20Representation/README.md", "relative_path_en": "/leetcode/0700-0799/0762.Prime%20Number%20of%20Set%20Bits%20in%20Binary%20Representation/README_EN.md", "title_cn": "\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d", "title_en": "Prime Number of Set Bits in Binary Representation", "question_title_slug": "prime-number-of-set-bits-in-binary-representation", "content_en": "<p>\r\nGiven two integers <code>L</code> and <code>R</code>, find the count of numbers in the range <code>[L, R]</code> (inclusive) having a prime number of set bits in their binary representation.\r\n</p><p>\r\n(Recall that the number of set bits an integer has is the number of <code>1</code>s present when written in binary.  For example, <code>21</code> written in binary is <code>10101</code> which has 3 set bits.  Also, 1 is not a prime.)\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> L = 6, R = 10\r\n<b>Output:</b> 4\r\n<b>Explanation:</b>\r\n6 -> 110 (2 set bits, 2 is prime)\r\n7 -> 111 (3 set bits, 3 is prime)\r\n9 -> 1001 (2 set bits , 2 is prime)\r\n10->1010 (2 set bits , 2 is prime)\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> L = 10, R = 15\r\n<b>Output:</b> 5\r\n<b>Explanation:</b>\r\n10 -> 1010 (2 set bits, 2 is prime)\r\n11 -> 1011 (3 set bits, 3 is prime)\r\n12 -> 1100 (2 set bits, 2 is prime)\r\n13 -> 1101 (3 set bits, 3 is prime)\r\n14 -> 1110 (3 set bits, 3 is prime)\r\n15 -> 1111 (4 set bits, 4 is not prime)\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>L, R</code> will be integers <code>L <= R</code> in the range <code>[1, 10^6]</code>.</li>\r\n<li><code>R - L</code> will be at most 10000.</li>\r\n</ol></p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>L</code>&nbsp;\u548c&nbsp;<code>R</code>&nbsp;\uff0c\u627e\u5230\u95ed\u533a\u95f4&nbsp;<code>[L, R]</code>&nbsp;\u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002</p>\n\n<p>\uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982&nbsp;<code>21</code>&nbsp;\u7684\u4e8c\u8fdb\u5236\u8868\u793a&nbsp;<code>10101</code>&nbsp;\u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> L = 6, R = 10\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n6 -&gt; 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n7 -&gt; 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570)\n9 -&gt; 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n10-&gt; 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> L = 10, R = 15\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n10 -&gt; 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n11 -&gt; 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n12 -&gt; 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n13 -&gt; 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n14 -&gt; 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n15 -&gt; 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570)\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>L, R</code>&nbsp;\u662f&nbsp;<code>L &lt;= R</code>&nbsp;\u4e14\u5728&nbsp;<code>[1, 10^6]</code>&nbsp;\u4e2d\u7684\u6574\u6570\u3002</li>\n\t<li><code>R - L</code>&nbsp;\u7684\u6700\u5927\u503c\u4e3a 10000\u3002</li>\n</ol>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPrimeSetBits(int L, int R) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPrimeSetBits(int L, int R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPrimeSetBits(self, L, R):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPrimeSetBits(self, L: int, R: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countPrimeSetBits(int L, int R){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPrimeSetBits(int L, int R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} L\n * @param {number} R\n * @return {number}\n */\nvar countPrimeSetBits = function(L, R) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef count_prime_set_bits(l, r)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPrimeSetBits(_ L: Int, _ R: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countPrimeSetBits(L int, R int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPrimeSetBits(L: Int, R: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPrimeSetBits(L: Int, R: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_prime_set_bits(l: i32, r: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $L\n     * @param Integer $R\n     * @return Integer\n     */\n    function countPrimeSetBits($L, $R) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPrimeSetBits(L: number, R: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0768", "frontend_question_id": "0763", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/partition-labels", "url_en": "https://leetcode.com/problems/partition-labels", "relative_path_cn": "/leetcode/0700-0799/0763.Partition%20Labels/README.md", "relative_path_en": "/leetcode/0700-0799/0763.Partition%20Labels/README_EN.md", "title_cn": "\u5212\u5206\u5b57\u6bcd\u533a\u95f4", "title_en": "Partition Labels", "question_title_slug": "partition-labels", "content_en": "<p>A string <code>S</code> of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> S = &quot;ababcbacadefegdehijhklij&quot;\n<b>Output:</b> [9,7,8]\n<b>Explanation:</b>\nThe partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits S into less parts.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ul>\n\t<li><code>S</code> will have length in range <code>[1, 500]</code>.</li>\n\t<li><code>S</code> will consist of lowercase English&nbsp;letters (<code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>) only.</li>\n</ul>\n\n<p>&nbsp;</p>\n", "content_cn": "<p>\u5b57\u7b26\u4e32 <code>S</code> \u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5212\u5206\u4e3a\u5c3d\u53ef\u80fd\u591a\u7684\u7247\u6bb5\uff0c\u540c\u4e00\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\u3002\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7247\u6bb5\u7684\u957f\u5ea6\u7684\u5217\u8868\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>S = \"ababcbacadefegdehijhklij\"\n<strong>\u8f93\u51fa\uff1a</strong>[9,7,8]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5212\u5206\u7ed3\u679c\u4e3a \"ababcbaca\", \"defegde\", \"hijhklij\"\u3002\n\u6bcf\u4e2a\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\u3002\n\u50cf \"ababcbacadefegde\", \"hijhklij\" \u7684\u5212\u5206\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5212\u5206\u7684\u7247\u6bb5\u6570\u8f83\u5c11\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>S</code>\u7684\u957f\u5ea6\u5728<code>[1, 500]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>S</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd <code>'a'</code> \u5230 <code>'z'</code> \u3002</li>\n</ul>\n", "tags_en": ["Greedy", "Two Pointers"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> partitionLabels(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> partitionLabels(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def partitionLabels(self, S: str) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* partitionLabels(char * S, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> PartitionLabels(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {number[]}\n */\nvar partitionLabels = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer[]}\ndef partition_labels(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func partitionLabels(_ S: String) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func partitionLabels(S string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def partitionLabels(S: String): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun partitionLabels(S: String): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn partition_labels(s: String) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return Integer[]\n     */\n    function partitionLabels($S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function partitionLabels(S: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0769", "frontend_question_id": "0764", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-plus-sign", "url_en": "https://leetcode.com/problems/largest-plus-sign", "relative_path_cn": "/leetcode/0700-0799/0764.Largest%20Plus%20Sign/README.md", "relative_path_en": "/leetcode/0700-0799/0764.Largest%20Plus%20Sign/README_EN.md", "title_cn": "\u6700\u5927\u52a0\u53f7\u6807\u5fd7", "title_en": "Largest Plus Sign", "question_title_slug": "largest-plus-sign", "content_en": "<p>\r\nIn a 2D <code>grid</code> from (0, 0) to (N-1, N-1), every cell contains a <code>1</code>, except those cells in the given list <code>mines</code> which are <code>0</code>.  What is the largest axis-aligned plus sign of <code>1</code>s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.\r\n</p><p>\r\nAn \"<i>axis-aligned plus sign of <code>1</code>s</i> of order <b>k</b>\" has some center <code>grid[x][y] = 1</code> along with 4 arms of length <code>k-1</code> going up, down, left, and right, and made of <code>1</code>s.  This is demonstrated in the diagrams below.  Note that there could be <code>0</code>s or <code>1</code>s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.\r\n</p><p>\r\n\r\n<p><b>Examples of Axis-Aligned Plus Signs of Order k:</b><br /><pre>\r\nOrder 1:\r\n000\r\n0<b>1</b>0\r\n000\r\n\r\nOrder 2:\r\n00000\r\n00<b>1</b>00\r\n0<b>111</b>0\r\n00<b>1</b>00\r\n00000\r\n\r\nOrder 3:\r\n0000000\r\n000<b>1</b>000\r\n000<b>1</b>000\r\n0<b>11111</b>0\r\n000<b>1</b>000\r\n000<b>1</b>000\r\n0000000\r\n</pre></p>\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> N = 5, mines = [[4, 2]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>\r\n11111\r\n11111\r\n1<b>1</b>111\r\n<b>111</b>11\r\n1<b>1</b>011\r\nIn the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> N = 2, mines = []\r\n<b>Output:</b> 1\r\n<b>Explanation:</b>\r\nThere is no plus sign of order 2, but there is of order 1.\r\n</pre></p>\r\n\r\n<p><b>Example 3:</b><br /><pre>\r\n<b>Input:</b> N = 1, mines = [[0, 0]]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b>\r\nThere is no plus sign, so return 0.\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>N</code> will be an integer in the range <code>[1, 500]</code>.</li>\r\n<li><code>mines</code> will have length at most <code>5000</code>.</li>\r\n<li><code>mines[i]</code> will be length 2 and consist of integers in the range <code>[0, N-1]</code>.</li>\r\n<li><i>(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)</i></li>\r\n</ol></p>", "content_cn": "<p>\u5728\u4e00\u4e2a\u5927\u5c0f\u5728 (0, 0) \u5230 (N-1, N-1) \u76842D\u7f51\u683c&nbsp;<code>grid</code>&nbsp;\u4e2d\uff0c\u9664\u4e86\u5728&nbsp;<code>mines</code>&nbsp;\u4e2d\u7ed9\u51fa\u7684\u5355\u5143\u4e3a&nbsp;<code>0</code>\uff0c\u5176\u4ed6\u6bcf\u4e2a\u5355\u5143\u90fd\u662f&nbsp;<code>1</code>\u3002\u7f51\u683c\u4e2d\u5305\u542b&nbsp;<code>1</code>&nbsp;\u7684\u6700\u5927\u7684\u8f74\u5bf9\u9f50\u52a0\u53f7\u6807\u5fd7\u662f\u591a\u5c11\u9636\uff1f\u8fd4\u56de\u52a0\u53f7\u6807\u5fd7\u7684\u9636\u6570\u3002\u5982\u679c\u672a\u627e\u5230\u52a0\u53f7\u6807\u5fd7\uff0c\u5219\u8fd4\u56de 0\u3002</p>\n\n<p>\u4e00\u4e2a&nbsp;<strong>k</strong>&quot; \u9636\u7531&nbsp;<em><code>1</code></em>&nbsp;\u7ec4\u6210\u7684&ldquo;\u8f74\u5bf9\u79f0&rdquo;\u52a0\u53f7\u6807\u5fd7\u5177\u6709\u4e2d\u5fc3\u7f51\u683c&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;\uff0c\u4ee5\u53ca4\u4e2a\u4ece\u4e2d\u5fc3\u5411\u4e0a\u3001\u5411\u4e0b\u3001\u5411\u5de6\u3001\u5411\u53f3\u5ef6\u4f38\uff0c\u957f\u5ea6\u4e3a&nbsp;<code>k-1</code>\uff0c\u7531&nbsp;<code>1</code>&nbsp;\u7ec4\u6210\u7684\u81c2\u3002\u4e0b\u9762\u7ed9\u51fa&nbsp;<strong>k</strong>&quot; \u9636&ldquo;\u8f74\u5bf9\u79f0&rdquo;\u52a0\u53f7\u6807\u5fd7\u7684\u793a\u4f8b\u3002\u6ce8\u610f\uff0c\u53ea\u6709\u52a0\u53f7\u6807\u5fd7\u7684\u6240\u6709\u7f51\u683c\u8981\u6c42\u4e3a 1\uff0c\u522b\u7684\u7f51\u683c\u53ef\u80fd\u4e3a 0 \u4e5f\u53ef\u80fd\u4e3a 1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>k \u9636\u8f74\u5bf9\u79f0\u52a0\u53f7\u6807\u5fd7\u793a\u4f8b:</strong></p>\n\n<pre>\n\u9636 1:\n000\n0<strong>1</strong>0\n000\n\n\u9636 2:\n00000\n00<strong>1</strong>00\n0<strong>111</strong>0\n00<strong>1</strong>00\n00000\n\n\u9636 3:\n0000000\n000<strong>1</strong>000\n000<strong>1</strong>000\n0<strong>11111</strong>0\n000<strong>1</strong>000\n000<strong>1</strong>000\n0000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 5, mines = [[4, 2]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:\n</strong>\n11111\n11111\n1<em><strong>1</strong></em>111\n<em><strong>111</strong></em>11\n1<em><strong>1</strong></em>011\n\n\u5728\u4e0a\u9762\u7684\u7f51\u683c\u4e2d\uff0c\u6700\u5927\u52a0\u53f7\u6807\u5fd7\u7684\u9636\u53ea\u80fd\u662f2\u3002\u4e00\u4e2a\u6807\u5fd7\u5df2\u5728\u56fe\u4e2d\u6807\u51fa\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 2, mines = []\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:\n\n11\n11\n</strong>\n\u6ca1\u6709 2 \u9636\u52a0\u53f7\u6807\u5fd7\uff0c\u6709 1 \u9636\u52a0\u53f7\u6807\u5fd7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 1, mines = [[0, 0]]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:\n\n0\n</strong>\n\u6ca1\u6709\u52a0\u53f7\u6807\u5fd7\uff0c\u8fd4\u56de 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6574\u6570<code>N</code> \u7684\u8303\u56f4\uff1a&nbsp;<code>[1, 500]</code>.</li>\n\t<li><code>mines</code> \u7684\u6700\u5927\u957f\u5ea6\u4e3a&nbsp;<code>5000</code>.</li>\n\t<li><code>mines[i]</code> \u662f\u957f\u5ea6\u4e3a2\u7684\u75312\u4e2a&nbsp;<code>[0, N-1]</code>&nbsp;\u4e2d\u7684\u6570\u7ec4\u6210.</li>\n\t<li><em>(\u53e6\u5916,\u4f7f\u7528 C, C++, \u6216\u8005&nbsp;C# \u7f16\u7a0b\u5c06\u4ee5\u7a0d\u5c0f\u7684\u65f6\u95f4\u9650\u5236\u8fdb\u884c\u200b\u200b\u5224\u65ad.)</em></li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int orderOfLargestPlusSign(int N, vector<vector<int>>& mines) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int orderOfLargestPlusSign(int N, int[][] mines) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def orderOfLargestPlusSign(self, N, mines):\n        \"\"\"\n        :type N: int\n        :type mines: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def orderOfLargestPlusSign(self, N: int, mines: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint orderOfLargestPlusSign(int N, int** mines, int minesSize, int* minesColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int OrderOfLargestPlusSign(int N, int[][] mines) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number[][]} mines\n * @return {number}\n */\nvar orderOfLargestPlusSign = function(N, mines) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} mines\n# @return {Integer}\ndef order_of_largest_plus_sign(n, mines)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func orderOfLargestPlusSign(_ N: Int, _ mines: [[Int]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func orderOfLargestPlusSign(N int, mines [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def orderOfLargestPlusSign(N: Int, mines: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun orderOfLargestPlusSign(N: Int, mines: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn order_of_largest_plus_sign(n: i32, mines: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer[][] $mines\n     * @return Integer\n     */\n    function orderOfLargestPlusSign($N, $mines) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function orderOfLargestPlusSign(N: number, mines: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0770", "frontend_question_id": "0765", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/couples-holding-hands", "url_en": "https://leetcode.com/problems/couples-holding-hands", "relative_path_cn": "/leetcode/0700-0799/0765.Couples%20Holding%20Hands/README.md", "relative_path_en": "/leetcode/0700-0799/0765.Couples%20Holding%20Hands/README_EN.md", "title_cn": "\u60c5\u4fa3\u7275\u624b", "title_en": "Couples Holding Hands", "question_title_slug": "couples-holding-hands", "content_en": "<p>\r\nN couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A <i>swap</i> consists of choosing <b>any</b> two people, then they stand up and switch seats. \r\n</p><p>\r\nThe people and seats are represented by an integer from <code>0</code> to <code>2N-1</code>, the couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2N-2, 2N-1)</code>.\r\n</p><p>\r\nThe couples' initial seating is given by <code>row[i]</code> being the value of the person who is initially sitting in the i-th seat.\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> row = [0, 2, 1, 3]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> We only need to swap the second (row[1]) and third (row[2]) person.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> row = [3, 2, 0, 1]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> All couples are already seated side by side.\r\n</pre></p>\r\n\r\n<p>\r\n<b>Note:</b>\r\n<ol> \r\n<li> <code>len(row)</code> is even and in the range of <code>[4, 60]</code>.</li>\r\n<li> <code>row</code> is guaranteed to be a permutation of <code>0...len(row)-1</code>.</li>\r\n</ol>", "content_cn": "<p>N \u5bf9\u60c5\u4fa3\u5750\u5728\u8fde\u7eed\u6392\u5217\u7684 2N \u4e2a\u5ea7\u4f4d\u4e0a\uff0c\u60f3\u8981\u7275\u5230\u5bf9\u65b9\u7684\u624b\u3002 \u8ba1\u7b97\u6700\u5c11\u4ea4\u6362\u5ea7\u4f4d\u7684\u6b21\u6570\uff0c\u4ee5\u4fbf\u6bcf\u5bf9\u60c5\u4fa3\u53ef\u4ee5\u5e76\u80a9\u5750\u5728\u4e00\u8d77\u3002 <em>\u4e00</em>\u6b21\u4ea4\u6362\u53ef\u9009\u62e9\u4efb\u610f\u4e24\u4eba\uff0c\u8ba9\u4ed6\u4eec\u7ad9\u8d77\u6765\u4ea4\u6362\u5ea7\u4f4d\u3002</p>\n\n<p>\u4eba\u548c\u5ea7\u4f4d\u7528&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>2N-1</code>&nbsp;\u7684\u6574\u6570\u8868\u793a\uff0c\u60c5\u4fa3\u4eec\u6309\u987a\u5e8f\u7f16\u53f7\uff0c\u7b2c\u4e00\u5bf9\u662f&nbsp;<code>(0, 1)</code>\uff0c\u7b2c\u4e8c\u5bf9\u662f&nbsp;<code>(2, 3)</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u4e00\u5bf9\u662f&nbsp;<code>(2N-2, 2N-1)</code>\u3002</p>\n\n<p>\u8fd9\u4e9b\u60c5\u4fa3\u7684\u521d\u59cb\u5ea7\u4f4d&nbsp;&nbsp;<code>row[i]</code>&nbsp;\u662f\u7531\u6700\u521d\u59cb\u5750\u5728\u7b2c i \u4e2a\u5ea7\u4f4d\u4e0a\u7684\u4eba\u51b3\u5b9a\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> row = [0, 2, 1, 3]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ea\u9700\u8981\u4ea4\u6362row[1]\u548crow[2]\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> row = [3, 2, 0, 1]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u65e0\u9700\u4ea4\u6362\u5ea7\u4f4d\uff0c\u6240\u6709\u7684\u60c5\u4fa3\u90fd\u5df2\u7ecf\u53ef\u4ee5\u624b\u7275\u624b\u4e86\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>len(row)</code> \u662f\u5076\u6570\u4e14\u6570\u503c\u5728&nbsp;<code>[4, 60]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1<code>row</code> \u662f\u5e8f\u5217&nbsp;<code>0...len(row)-1</code>&nbsp;\u7684\u4e00\u4e2a\u5168\u6392\u5217\u3002</li>\n</ol>\n", "tags_en": ["Greedy", "Union Find", "Graph"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSwapsCouples(vector<int>& row) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSwapsCouples(int[] row) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minSwapsCouples(int* row, int rowSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSwapsCouples(int[] row) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSwapsCouples(_ row: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minSwapsCouples(row []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSwapsCouples(row: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSwapsCouples(row: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_swaps_couples(row: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $row\n     * @return Integer\n     */\n    function minSwapsCouples($row) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSwapsCouples(row: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0777", "frontend_question_id": "0766", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/toeplitz-matrix", "url_en": "https://leetcode.com/problems/toeplitz-matrix", "relative_path_cn": "/leetcode/0700-0799/0766.Toeplitz%20Matrix/README.md", "relative_path_en": "/leetcode/0700-0799/0766.Toeplitz%20Matrix/README_EN.md", "title_cn": "\u6258\u666e\u5229\u8328\u77e9\u9635", "title_en": "Toeplitz Matrix", "question_title_slug": "toeplitz-matrix", "content_en": "<p>Given an <code>m x n</code> <code>matrix</code>, return&nbsp;<em><code>true</code>&nbsp;if the matrix is Toeplitz. Otherwise, return <code>false</code>.</em></p>\n\n<p>A matrix is <strong>Toeplitz</strong> if every diagonal from top-left to bottom-right has the same elements.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nIn the above grid, the&nbsp;diagonals are:\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;.\nIn each diagonal all elements are the same, so the answer is True.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[2,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe diagonal &quot;[1, 2]&quot; has different elements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 99</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the <code>matrix</code> is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?</li>\n\t<li>What if the <code>matrix</code> is so large that you can only load up a partial row into the memory at once?</li>\n</ul>\n", "content_cn": "<p>\u5982\u679c\u77e9\u9635\u4e0a\u6bcf\u4e00\u6761\u7531\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u662f<em> </em><strong>\u6258\u666e\u5229\u8328\u77e9\u9635</strong> \u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>M x N</code>&nbsp;\u7684\u77e9\u9635\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u662f<em>\u6258\u666e\u5229\u8328\u77e9\u9635</em>\u65f6\u8fd4\u56de&nbsp;<code>True</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nmatrix = [\n&nbsp; [1,2,3,4],\n&nbsp; [5,1,2,3],\n&nbsp; [9,5,1,2]\n]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u5728\u4e0a\u8ff0\u77e9\u9635\u4e2d, \u5176\u5bf9\u89d2\u7ebf\u4e3a:\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;\u3002\n\u5404\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5747\u76f8\u540c, \u56e0\u6b64\u7b54\u6848\u662fTrue\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nmatrix = [\n&nbsp; [1,2],\n&nbsp; [2,2]\n]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca: \n</strong>\u5bf9\u89d2\u7ebf&quot;[1, 2]&quot;\u4e0a\u7684\u5143\u7d20\u4e0d\u540c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>matrix</code>&nbsp;\u662f\u4e00\u4e2a\u5305\u542b\u6574\u6570\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002</li>\n\t<li><code>matrix</code>&nbsp;\u7684\u884c\u6570\u548c\u5217\u6570\u5747\u5728&nbsp;<code>[1, 20]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li><code>matrix[i][j]</code>&nbsp;\u5305\u542b\u7684\u6574\u6570\u5728&nbsp;<code>[0, 99]</code>\u8303\u56f4\u5185\u3002</li>\n</ol>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u77e9\u9635\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5e76\u4e14\u78c1\u76d8\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u56e0\u6b64\u4e00\u6b21\u6700\u591a\u53ea\u80fd\u5c06\u4e00\u884c\u77e9\u9635\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\uff1f</li>\n\t<li>\u5982\u679c\u77e9\u9635\u592a\u5927\u4ee5\u81f3\u4e8e\u53ea\u80fd\u4e00\u6b21\u5c06\u90e8\u5206\u884c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\uff1f</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isToeplitzMatrix(vector<vector<int>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isToeplitzMatrix(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isToeplitzMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isToeplitzMatrix(int** matrix, int matrixSize, int* matrixColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsToeplitzMatrix(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {boolean}\n */\nvar isToeplitzMatrix = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Boolean}\ndef is_toeplitz_matrix(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isToeplitzMatrix(_ matrix: [[Int]]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isToeplitzMatrix(matrix [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isToeplitzMatrix(matrix: Array[Array[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isToeplitzMatrix(matrix: Array<IntArray>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_toeplitz_matrix(matrix: Vec<Vec<i32>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Boolean\n     */\n    function isToeplitzMatrix($matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isToeplitzMatrix(matrix: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0778", "frontend_question_id": "0767", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reorganize-string", "url_en": "https://leetcode.com/problems/reorganize-string", "relative_path_cn": "/leetcode/0700-0799/0767.Reorganize%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0767.Reorganize%20String/README_EN.md", "title_cn": "\u91cd\u6784\u5b57\u7b26\u4e32", "title_en": "Reorganize String", "question_title_slug": "reorganize-string", "content_en": "<p>Given a string <code>S</code>, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.</p>\r\n\r\n<p>If possible, output any possible result.&nbsp; If not possible, return the empty string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aab&quot;\r\n<strong>Output:</strong> &quot;aba&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aaab&quot;\r\n<strong>Output:</strong> &quot;&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> will consist of lowercase letters and have length in range <code>[1, 500]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002</p>\n\n<p>\u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aaab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728<code>[1, 500]</code>\u533a\u95f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Heap", "Greedy", "Sort", "String"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5", "\u6392\u5e8f", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reorganizeString(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reorganizeString(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reorganizeString(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reorganizeString(self, S: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * reorganizeString(char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReorganizeString(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string}\n */\nvar reorganizeString = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reorganize_string(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reorganizeString(_ S: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reorganizeString(S string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reorganizeString(S: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reorganizeString(S: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reorganize_string(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String\n     */\n    function reorganizeString($S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reorganizeString(S: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0779", "frontend_question_id": "0768", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii", "url_en": "https://leetcode.com/problems/max-chunks-to-make-sorted-ii", "relative_path_cn": "/leetcode/0700-0799/0768.Max%20Chunks%20To%20Make%20Sorted%20II/README.md", "relative_path_en": "/leetcode/0700-0799/0768.Max%20Chunks%20To%20Make%20Sorted%20II/README_EN.md", "title_cn": "\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II", "title_en": "Max Chunks To Make Sorted II", "question_title_slug": "max-chunks-to-make-sorted-ii", "content_en": "<p><em>This question is the same as &quot;Max Chunks to Make Sorted&quot; except the integers of the given array are not necessarily distinct, the input array could be up to length <code>2000</code>, and the elements could be up to <code>10**8</code>.</em></p>\r\n\r\n<hr />\r\n\r\n<p>Given an array <code>arr</code> of integers (<strong>not necessarily distinct</strong>), we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.&nbsp; After concatenating them,&nbsp;the result equals the sorted array.</p>\r\n\r\n<p>What is the most number of chunks we could have made?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [5,4,3,2,1]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn&#39;t sorted.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [2,1,3,4,4]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\r\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>arr</code> will have length in range <code>[1, 2000]</code>.</li>\r\n\t<li><code>arr[i]</code> will be an integer in range <code>[0, 10**8]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p><em>\u8fd9\u4e2a\u95ee\u9898\u548c&ldquo;\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757&rdquo;\u76f8\u4f3c\uff0c\u4f46\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u8f93\u5165\u6570\u7ec4\u6700\u5927\u957f\u5ea6\u4e3a<code>2000</code>\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6700\u5927\u4e3a<code>10**8</code>\u3002</em></p>\n\n<p><code>arr</code>\u662f\u4e00\u4e2a\u53ef\u80fd\u5305\u542b<strong>\u91cd\u590d\u5143\u7d20</strong>\u7684\u6574\u6570\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a&ldquo;\u5757&rdquo;\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p>\n\n<p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> arr = [5,4,3,2,1]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u5206\u6210 [5, 4], [3, 2, 1] \u7684\u7ed3\u679c\u662f [4, 5, 1, 2, 3]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> arr = [2,1,3,4,4]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [2, 1], [3, 4, 4]\u3002\n\u7136\u800c\uff0c\u5206\u6210 [2, 1], [3], [4], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>arr</code>\u7684\u957f\u5ea6\u5728<code>[1, 2000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>arr[i]</code>\u7684\u5927\u5c0f\u5728<code>[0, 10**8]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxChunksToSorted(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxChunksToSorted(int* arr, int arrSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxChunksToSorted(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef max_chunks_to_sorted(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxChunksToSorted(_ arr: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxChunksToSorted(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxChunksToSorted(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxChunksToSorted(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maxChunksToSorted($arr) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxChunksToSorted(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0780", "frontend_question_id": "0769", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-chunks-to-make-sorted", "url_en": "https://leetcode.com/problems/max-chunks-to-make-sorted", "relative_path_cn": "/leetcode/0700-0799/0769.Max%20Chunks%20To%20Make%20Sorted/README.md", "relative_path_en": "/leetcode/0700-0799/0769.Max%20Chunks%20To%20Make%20Sorted/README_EN.md", "title_cn": "\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757", "title_en": "Max Chunks To Make Sorted", "question_title_slug": "max-chunks-to-make-sorted", "content_en": "<p>Given an array <code>arr</code> that is a permutation of <code>[0, 1, ..., arr.length - 1]</code>, we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.&nbsp; After concatenating them,&nbsp;the result equals the sorted array.</p>\r\n\r\n<p>What is the most number of chunks we could have made?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [4,3,2,1,0]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn&#39;t sorted.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [1,0,2,3,4]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\r\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>arr</code> will have length in range <code>[1, 10]</code>.</li>\r\n\t<li><code>arr[i]</code> will be a permutation of <code>[0, 1, ..., arr.length - 1]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u6570\u7ec4<code>arr</code>\u662f<code>[0, 1, ..., arr.length - 1]</code>\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a&ldquo;\u5757&rdquo;\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p>\n\n<p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> arr = [4,3,2,1,0]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> arr = [1,0,2,3,4]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [1, 0], [2, 3, 4]\u3002\n\u7136\u800c\uff0c\u5206\u6210 [1, 0], [2], [3], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>arr</code> \u7684\u957f\u5ea6\u5728 <code>[1, 10]</code> \u4e4b\u95f4\u3002</li>\n\t<li><code>arr[i]</code>\u662f <code>[0, 1, ..., arr.length - 1]</code>\u7684\u4e00\u79cd\u6392\u5217\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxChunksToSorted(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxChunksToSorted(int* arr, int arrSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxChunksToSorted(int[] arr) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef max_chunks_to_sorted(arr)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxChunksToSorted(_ arr: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxChunksToSorted(arr []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxChunksToSorted(arr: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxChunksToSorted(arr: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_chunks_to_sorted(arr: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maxChunksToSorted($arr) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxChunksToSorted(arr: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0781", "frontend_question_id": "0770", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/basic-calculator-iv", "url_en": "https://leetcode.com/problems/basic-calculator-iv", "relative_path_cn": "/leetcode/0700-0799/0770.Basic%20Calculator%20IV/README.md", "relative_path_en": "/leetcode/0700-0799/0770.Basic%20Calculator%20IV/README_EN.md", "title_cn": "\u57fa\u672c\u8ba1\u7b97\u5668 IV", "title_en": "Basic Calculator IV", "question_title_slug": "basic-calculator-iv", "content_en": "<p>Given an <code>expression</code>&nbsp;such as <code>expression = &quot;e + 8 - a + 5&quot;</code> and an evaluation map such as <code>{&quot;e&quot;: 1}</code> (given in terms of <code>evalvars = [&quot;e&quot;]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\r\n\r\n<ul>\r\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\r\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\r\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>&quot;2x&quot;</code> or <code>&quot;-x&quot;</code>.</li>\r\n</ul>\r\n\r\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, <code>expression = &quot;1 + 2 * 3&quot;</code> has an answer of <code>[&quot;7&quot;]</code>.</p>\r\n\r\n<p>The format of the output is as follows:</p>\r\n\r\n<ul>\r\n\t<li>For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like <code>&quot;b*a*c&quot;</code>, only <code>&quot;a*b*c&quot;</code>.</li>\r\n\t<li>Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, <code>&quot;a*a*b*c&quot;</code> has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.</li>\r\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)&nbsp; A leading coefficient of 1 is still printed.</li>\r\n\t<li>An example of a well formatted answer is <code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;</li>\r\n\t<li>Terms (including constant terms) with coefficient 0 are not included.&nbsp; For example, an expression of &quot;0&quot; has an output of [].</li>\r\n</ul>\r\n\r\n<p><strong>Examples:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\r\n<strong>Output:</strong> [&quot;-1*a&quot;,&quot;14&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;e - 8 + temperature - pressure&quot;,\r\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\r\n<strong>Output:</strong> [&quot;-1*pressure&quot;,&quot;5&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;1*e*e&quot;,&quot;-64&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> []\r\n\r\n<strong>Input:</strong> expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;5*a*b*c&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\r\nevalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>expression</code> will have length in range <code>[1, 250]</code>.</li>\r\n\t<li><code>evalvars, evalints</code> will have equal lengths in range <code>[0, 100]</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f&nbsp;<code>expression</code>&nbsp;\u5982&nbsp;<code>expression = &quot;e + 8 - a + 5&quot;</code>&nbsp;\u548c\u4e00\u4e2a\u6c42\u503c\u6620\u5c04\uff0c\u5982&nbsp;<code>{&quot;e&quot;: 1}</code>\uff08\u7ed9\u5b9a\u7684\u5f62\u5f0f\u4e3a&nbsp;<code>evalvars = [&quot;e&quot;]</code> \u548c&nbsp;<code>evalints = [1]</code>\uff09\uff0c\u8fd4\u56de\u8868\u793a\u7b80\u5316\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0\u5217\u8868\uff0c\u4f8b\u5982 <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u4ea4\u66ff\u4f7f\u7528\u5757\u548c\u7b26\u53f7\uff0c\u6bcf\u4e2a\u5757\u548c\u7b26\u53f7\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li>\u5757\u8981\u4e48\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u8981\u4e48\u662f\u53d8\u91cf\uff0c\u8981\u4e48\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u5757\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u53d8\u91cf\u6216\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u53d8\u91cf\u662f\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4e0d\u5305\u62ec\u6570\u5b57\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u53ef\u4ee5\u662f\u591a\u4e2a\u5b57\u6bcd\uff0c\u5e76\u6ce8\u610f\u53d8\u91cf\u4ece\u4e0d\u5177\u6709\u50cf&nbsp;<code>&quot;2x&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;-x&quot;</code>&nbsp;\u8fd9\u6837\u7684\u524d\u5bfc\u7cfb\u6570\u6216\u4e00\u5143\u8fd0\u7b97\u7b26&nbsp;\u3002</li>\n</ul>\n\n<p>\u8868\u8fbe\u5f0f\u6309\u901a\u5e38\u987a\u5e8f\u8fdb\u884c\u6c42\u503c\uff1a\u5148\u662f\u62ec\u53f7\uff0c\u7136\u540e\u6c42\u4e58\u6cd5\uff0c\u518d\u8ba1\u7b97\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u4f8b\u5982\uff0c<code>expression = &quot;1 + 2 * 3&quot;</code>&nbsp;\u7684\u7b54\u6848\u662f <code>[&quot;7&quot;]</code>\u3002</p>\n\n<p>\u8f93\u51fa\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5bf9\u4e8e\u7cfb\u6570\u975e\u96f6\u7684\u6bcf\u4e2a\u81ea\u53d8\u91cf\u9879\uff0c\u6211\u4eec\u6309\u5b57\u5178\u6392\u5e8f\u7684\u987a\u5e8f\u5c06\u81ea\u53d8\u91cf\u5199\u5728\u4e00\u4e2a\u9879\u4e2d\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5199\u50cf <code>&ldquo;b*a*c&rdquo;</code> \u8fd9\u6837\u7684\u9879\uff0c\u53ea\u5199 <code>&ldquo;a*b*c&rdquo;</code>\u3002</li>\n\t<li>\u9879\u7684\u6b21\u6570\u7b49\u4e8e\u88ab\u4e58\u7684\u81ea\u53d8\u91cf\u7684\u6570\u76ee\uff0c\u5e76\u8ba1\u7b97\u91cd\u590d\u9879\u3002(\u4f8b\u5982\uff0c<code>&quot;a*a*b*c&quot;</code> \u7684\u6b21\u6570\u4e3a 4\u3002)\u3002\u6211\u4eec\u5148\u5199\u51fa\u7b54\u6848\u7684\u6700\u5927\u6b21\u6570\u9879\uff0c\u7528\u5b57\u5178\u987a\u5e8f\u6253\u7834\u5173\u7cfb\uff0c\u6b64\u65f6\u5ffd\u7565\u8bcd\u7684\u524d\u5bfc\u7cfb\u6570\u3002</li>\n\t<li>\u9879\u7684\u524d\u5bfc\u7cfb\u6570\u76f4\u63a5\u653e\u5728\u5de6\u8fb9\uff0c\u7528\u661f\u53f7\u5c06\u5b83\u4e0e\u53d8\u91cf\u5206\u9694\u5f00(\u5982\u679c\u5b58\u5728\u7684\u8bdd)\u3002\u524d\u5bfc\u7cfb\u6570 1 \u4ecd\u7136\u8981\u6253\u5370\u51fa\u6765\u3002</li>\n\t<li>\u683c\u5f0f\u826f\u597d\u7684\u4e00\u4e2a\u793a\u4f8b\u7b54\u6848\u662f&nbsp;<code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;\u3002</li>\n\t<li>\u7cfb\u6570\u4e3a 0 \u7684\u9879\uff08\u5305\u62ec\u5e38\u6570\u9879\uff09\u4e0d\u5305\u62ec\u5728\u5185\u3002\u4f8b\u5982\uff0c&ldquo;0&rdquo; \u7684\u8868\u8fbe\u5f0f\u8f93\u51fa\u4e3a []\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a&quot;,&quot;14&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;e - 8 + temperature - pressure&quot;,\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;5*a*b*c&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\nevalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>expression</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 250]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li><code>evalvars, evalints</code> \u5728\u8303\u56f4&nbsp;<code>[0, 100]</code>&nbsp;\u5185\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002</li>\n</ol>\n", "tags_en": ["Stack", "Hash Table", "String"], "tags_cn": ["\u6808", "\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> basicCalculatorIV(string expression, vector<string>& evalvars, vector<int>& evalints) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def basicCalculatorIV(self, expression, evalvars, evalints):\n        \"\"\"\n        :type expression: str\n        :type evalvars: List[str]\n        :type evalints: List[int]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** basicCalculatorIV(char * expression, char ** evalvars, int evalvarsSize, int* evalints, int evalintsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> BasicCalculatorIV(string expression, string[] evalvars, int[] evalints) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} expression\n * @param {string[]} evalvars\n * @param {number[]} evalints\n * @return {string[]}\n */\nvar basicCalculatorIV = function(expression, evalvars, evalints) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} expression\n# @param {String[]} evalvars\n# @param {Integer[]} evalints\n# @return {String[]}\ndef basic_calculator_iv(expression, evalvars, evalints)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func basicCalculatorIV(_ expression: String, _ evalvars: [String], _ evalints: [Int]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func basicCalculatorIV(expression string, evalvars []string, evalints []int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def basicCalculatorIV(expression: String, evalvars: Array[String], evalints: Array[Int]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun basicCalculatorIV(expression: String, evalvars: Array<String>, evalints: IntArray): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn basic_calculator_iv(expression: String, evalvars: Vec<String>, evalints: Vec<i32>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @param String[] $evalvars\n     * @param Integer[] $evalints\n     * @return String[]\n     */\n    function basicCalculatorIV($expression, $evalvars, $evalints) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function basicCalculatorIV(expression: string, evalvars: string[], evalints: number[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0782", "frontend_question_id": "0771", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/jewels-and-stones", "url_en": "https://leetcode.com/problems/jewels-and-stones", "relative_path_cn": "/leetcode/0700-0799/0771.Jewels%20and%20Stones/README.md", "relative_path_en": "/leetcode/0700-0799/0771.Jewels%20and%20Stones/README_EN.md", "title_cn": "\u5b9d\u77f3\u4e0e\u77f3\u5934", "title_en": "Jewels and Stones", "question_title_slug": "jewels-and-stones", "content_en": "<p>You&#39;re given strings <code>J</code> representing the types of stones that are jewels, and <code>S</code> representing the stones you have.&nbsp; Each character in <code>S</code> is a type of stone you have.&nbsp; You want to know how many of the stones you have are also jewels.</p>\r\n\r\n<p>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\r\n\t<li>The characters in <code>J</code> are distinct.</li>\r\n</ul>\r\n", "content_cn": "<p>&nbsp;\u7ed9\u5b9a\u5b57\u7b26\u4e32<code>J</code>&nbsp;\u4ee3\u8868\u77f3\u5934\u4e2d\u5b9d\u77f3\u7684\u7c7b\u578b\uff0c\u548c\u5b57\u7b26\u4e32&nbsp;<code>S</code>\u4ee3\u8868\u4f60\u62e5\u6709\u7684\u77f3\u5934\u3002&nbsp;<code>S</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e86\u4e00\u79cd\u4f60\u62e5\u6709\u7684\u77f3\u5934\u7684\u7c7b\u578b\uff0c\u4f60\u60f3\u77e5\u9053\u4f60\u62e5\u6709\u7684\u77f3\u5934\u4e2d\u6709\u591a\u5c11\u662f\u5b9d\u77f3\u3002</p>\n\n<p><code>J</code>&nbsp;\u4e2d\u7684\u5b57\u6bcd\u4e0d\u91cd\u590d\uff0c<code>J</code>&nbsp;\u548c&nbsp;<code>S</code>\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u3002\u5b57\u6bcd\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64<code>&quot;a&quot;</code>\u548c<code>&quot;A&quot;</code>\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u77f3\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u548c&nbsp;<code>J</code>&nbsp;\u6700\u591a\u542b\u670950\u4e2a\u5b57\u6bcd\u3002</li>\n\t<li>&nbsp;<code>J</code>&nbsp;\u4e2d\u7684\u5b57\u7b26\u4e0d\u91cd\u590d\u3002</li>\n</ul>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numJewelsInStones(string J, string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numJewelsInStones(String J, String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numJewelsInStones(self, J: str, S: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numJewelsInStones(char * J, char * S){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumJewelsInStones(string J, string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} J\n * @param {string} S\n * @return {number}\n */\nvar numJewelsInStones = function(J, S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} j\n# @param {String} s\n# @return {Integer}\ndef num_jewels_in_stones(j, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numJewelsInStones(_ J: String, _ S: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numJewelsInStones(J string, S string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numJewelsInStones(J: String, S: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numJewelsInStones(J: String, S: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_jewels_in_stones(j: String, s: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $J\n     * @param String $S\n     * @return Integer\n     */\n    function numJewelsInStones($J, $S) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numJewelsInStones(J: string, S: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0785", "frontend_question_id": "0772", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/basic-calculator-iii", "url_en": "https://leetcode.com/problems/basic-calculator-iii", "relative_path_cn": "/leetcode/0700-0799/0772.Basic%20Calculator%20III/README.md", "relative_path_en": "/leetcode/0700-0799/0772.Basic%20Calculator%20III/README_EN.md", "title_cn": "\u57fa\u672c\u8ba1\u7b97\u5668 III", "title_en": "Basic Calculator III", "question_title_slug": "basic-calculator-iii", "content_en": null, "content_cn": null, "tags_en": ["Stack", "String"], "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0787", "frontend_question_id": "0773", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sliding-puzzle", "url_en": "https://leetcode.com/problems/sliding-puzzle", "relative_path_cn": "/leetcode/0700-0799/0773.Sliding%20Puzzle/README.md", "relative_path_en": "/leetcode/0700-0799/0773.Sliding%20Puzzle/README_EN.md", "title_cn": "\u6ed1\u52a8\u8c1c\u9898", "title_en": "Sliding Puzzle", "question_title_slug": "sliding-puzzle", "content_en": "<p>On a 2x3 <code>board</code>, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.</p>\r\n\r\n<p>A move consists of choosing <code>0</code>&nbsp;and a 4-directionally adjacent number and swapping it.</p>\r\n\r\n<p>The state of the board is <em>solved</em> if and only if the <code>board</code> is <code>[[1,2,3],[4,5,0]].</code></p>\r\n\r\n<p>Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.</p>\r\n\r\n<p><strong>Examples:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[1,2,3],[4,0,5]]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> Swap the 0 and the 5 in one move.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[1,2,3],[5,4,0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> No number of moves will make the board solved.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[4,1,2],[5,0,3]]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> 5 is the smallest number of moves that solves the board.\r\nAn example path:\r\nAfter move 0: [[4,1,2],[5,0,3]]\r\nAfter move 1: [[4,1,2],[0,5,3]]\r\nAfter move 2: [[0,1,2],[4,5,3]]\r\nAfter move 3: [[1,0,2],[4,5,3]]\r\nAfter move 4: [[1,2,0],[4,5,3]]\r\nAfter move 5: [[1,2,3],[4,5,0]]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[3,2,4],[1,5,0]]\r\n<strong>Output:</strong> 14\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> will be a 2 x 3 array as described above.</li>\r\n\t<li><code>board[i][j]</code> will be a permutation of <code>[0, 1, 2, 3, 4, 5]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a 2 x 3 \u7684\u677f\u4e0a\uff08<code>board</code>\uff09\u6709 5 \u5757\u7816\u74e6\uff0c\u7528\u6570\u5b57 <code>1~5</code> \u6765\u8868\u793a, \u4ee5\u53ca\u4e00\u5757\u7a7a\u7f3a\u7528&nbsp;<code>0</code>&nbsp;\u6765\u8868\u793a.</p>\n\n<p>\u4e00\u6b21\u79fb\u52a8\u5b9a\u4e49\u4e3a\u9009\u62e9&nbsp;<code>0</code>&nbsp;\u4e0e\u4e00\u4e2a\u76f8\u90bb\u7684\u6570\u5b57\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u8fdb\u884c\u4ea4\u6362.</p>\n\n<p>\u6700\u7ec8\u5f53\u677f&nbsp;<code>board</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[[1,2,3],[4,5,0]]</code>&nbsp;\u8c1c\u677f\u88ab\u89e3\u5f00\u3002</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u8c1c\u677f\u7684\u521d\u59cb\u72b6\u6001\uff0c\u8fd4\u56de\u6700\u5c11\u53ef\u4ee5\u901a\u8fc7\u591a\u5c11\u6b21\u79fb\u52a8\u89e3\u5f00\u8c1c\u677f\uff0c\u5982\u679c\u4e0d\u80fd\u89e3\u5f00\u8c1c\u677f\uff0c\u5219\u8fd4\u56de -1 \u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[1,2,3],[4,0,5]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u4ea4\u6362 0 \u548c 5 \uff0c1 \u6b65\u5b8c\u6210\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[1,2,3],[5,4,0]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u8c1c\u677f\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[4,1,2],[5,0,3]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5c11\u5b8c\u6210\u8c1c\u677f\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u662f 5 \uff0c\n\u4e00\u79cd\u79fb\u52a8\u8def\u5f84:\n\u5c1a\u672a\u79fb\u52a8: [[4,1,2],[5,0,3]]\n\u79fb\u52a8 1 \u6b21: [[4,1,2],[0,5,3]]\n\u79fb\u52a8 2 \u6b21: [[0,1,2],[4,5,3]]\n\u79fb\u52a8 3 \u6b21: [[1,0,2],[4,5,3]]\n\u79fb\u52a8 4 \u6b21: [[1,2,0],[4,5,3]]\n\u79fb\u52a8 5 \u6b21: [[1,2,3],[4,5,0]]\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[3,2,4],[1,5,0]]\n<strong>\u8f93\u51fa\uff1a</strong>14\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;\u662f\u4e00\u4e2a\u5982\u4e0a\u6240\u8ff0\u7684 2 x 3 \u7684\u6570\u7ec4.</li>\n\t<li><code>board[i][j]</code>&nbsp;\u662f\u4e00\u4e2a&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;\u7684\u6392\u5217.</li>\n</ul>\n", "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int slidingPuzzle(vector<vector<int>>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int slidingPuzzle(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint slidingPuzzle(int** board, int boardSize, int* boardColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SlidingPuzzle(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar slidingPuzzle = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @return {Integer}\ndef sliding_puzzle(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func slidingPuzzle(_ board: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func slidingPuzzle(board [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def slidingPuzzle(board: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun slidingPuzzle(board: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn sliding_puzzle(board: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function slidingPuzzle($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function slidingPuzzle(board: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0788", "frontend_question_id": "0774", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/minimize-max-distance-to-gas-station", "url_en": "https://leetcode.com/problems/minimize-max-distance-to-gas-station", "relative_path_cn": "/leetcode/0700-0799/0774.Minimize%20Max%20Distance%20to%20Gas%20Station/README.md", "relative_path_en": "/leetcode/0700-0799/0774.Minimize%20Max%20Distance%20to%20Gas%20Station/README_EN.md", "title_cn": "\u6700\u5c0f\u5316\u53bb\u52a0\u6cb9\u7ad9\u7684\u6700\u5927\u8ddd\u79bb", "title_en": "Minimize Max Distance to Gas Station", "question_title_slug": "minimize-max-distance-to-gas-station", "content_en": null, "content_cn": null, "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0790", "frontend_question_id": "0775", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/global-and-local-inversions", "url_en": "https://leetcode.com/problems/global-and-local-inversions", "relative_path_cn": "/leetcode/0700-0799/0775.Global%20and%20Local%20Inversions/README.md", "relative_path_en": "/leetcode/0700-0799/0775.Global%20and%20Local%20Inversions/README_EN.md", "title_cn": "\u5168\u5c40\u5012\u7f6e\u4e0e\u5c40\u90e8\u5012\u7f6e", "title_en": "Global and Local Inversions", "question_title_slug": "global-and-local-inversions", "content_en": "<p>We have some permutation <code>A</code> of <code>[0, 1, ..., N - 1]</code>, where <code>N</code> is the length of <code>A</code>.</p>\r\n\r\n<p>The number of (global) inversions is the number of <code>i &lt; j</code> with <code>0 &lt;= i &lt; j &lt; N</code> and <code>A[i] &gt; A[j]</code>.</p>\r\n\r\n<p>The number of local inversions is the number of <code>i</code> with <code>0 &lt;= i &lt; N</code> and <code>A[i] &gt; A[i+1]</code>.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if the number of global inversions is equal to the number of local inversions.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,0,2]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> There is 1 global inversion, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,2,0]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> There are 2 global inversions, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> will be a permutation of <code>[0, 1, ..., A.length - 1]</code>.</li>\r\n\t<li><code>A</code> will have length in range <code>[1, 5000]</code>.</li>\r\n\t<li>The time limit for this problem has been reduced.</li>\r\n</ul>\r\n", "content_cn": "<p>\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u662f&nbsp;<code>[0, 1, ..., N - 1]</code>&nbsp;\u7684\u4e00\u79cd\u6392\u5217\uff0c<code>N</code> \u662f\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u7684\u957f\u5ea6\u3002\u5168\u5c40\u5012\u7f6e\u6307\u7684\u662f <code>i,j</code>&nbsp;\u6ee1\u8db3&nbsp;<code>0 &lt;= i &lt; j &lt; N</code> \u5e76\u4e14&nbsp;<code>A[i] &gt; A[j]</code>&nbsp;\uff0c\u5c40\u90e8\u5012\u7f6e\u6307\u7684\u662f <code>i</code> \u6ee1\u8db3&nbsp;<code>0 &lt;= i &lt; N</code>&nbsp;\u5e76\u4e14&nbsp;<code>A[i] &gt; A[i+1]</code>&nbsp;\u3002</p>\n\n<p>\u5f53\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\u5168\u5c40\u5012\u7f6e\u7684\u6570\u91cf\u7b49\u4e8e\u5c40\u90e8\u5012\u7f6e\u7684\u6570\u91cf\u65f6\uff0c\u8fd4\u56de <code>true</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> A = [1,0,2]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u6709 1 \u4e2a\u5168\u5c40\u5012\u7f6e\uff0c\u548c 1 \u4e2a\u5c40\u90e8\u5012\u7f6e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> A = [1,2,0]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u6709 2 \u4e2a\u5168\u5c40\u5012\u7f6e\uff0c\u548c 1 \u4e2a\u5c40\u90e8\u5012\u7f6e\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u662f&nbsp;<code>[0, 1, ..., A.length - 1]</code>&nbsp;\u7684\u4e00\u79cd\u6392\u5217</li>\n\t<li><code>A</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 5000]</code>\u4e4b\u95f4</li>\n\t<li>\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u95f4\u9650\u5236\u5df2\u7ecf\u51cf\u5c11\u4e86\u3002</li>\n</ul>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isIdealPermutation(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isIdealPermutation(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isIdealPermutation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isIdealPermutation(self, A: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isIdealPermutation(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsIdealPermutation(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar isIdealPermutation = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Boolean}\ndef is_ideal_permutation(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isIdealPermutation(_ A: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isIdealPermutation(A []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isIdealPermutation(A: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isIdealPermutation(A: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_ideal_permutation(a: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Boolean\n     */\n    function isIdealPermutation($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isIdealPermutation(A: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0791", "frontend_question_id": "0776", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/split-bst", "url_en": "https://leetcode.com/problems/split-bst", "relative_path_cn": "/leetcode/0700-0799/0776.Split%20BST/README.md", "relative_path_en": "/leetcode/0700-0799/0776.Split%20BST/README_EN.md", "title_cn": "\u62c6\u5206\u4e8c\u53c9\u641c\u7d22\u6811", "title_en": "Split BST", "question_title_slug": "split-bst", "content_en": null, "content_cn": null, "tags_en": ["Tree", "Recursion"], "tags_cn": ["\u6811", "\u9012\u5f52"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0793", "frontend_question_id": "0777", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/swap-adjacent-in-lr-string", "url_en": "https://leetcode.com/problems/swap-adjacent-in-lr-string", "relative_path_cn": "/leetcode/0700-0799/0777.Swap%20Adjacent%20in%20LR%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0777.Swap%20Adjacent%20in%20LR%20String/README_EN.md", "title_cn": "\u5728LR\u5b57\u7b26\u4e32\u4e2d\u4ea4\u6362\u76f8\u90bb\u5b57\u7b26", "title_en": "Swap Adjacent in LR String", "question_title_slug": "swap-adjacent-in-lr-string", "content_en": "<p>In a string composed of <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;X&#39;</code> characters, like <code>&quot;RXXLRXRXL&quot;</code>, a move consists of either replacing one occurrence of <code>&quot;XL&quot;</code> with <code>&quot;LX&quot;</code>, or replacing one occurrence of <code>&quot;RX&quot;</code> with <code>&quot;XR&quot;</code>. Given the starting string <code>start</code> and the ending string <code>end</code>, return <code>True</code> if and only if there exists a sequence of moves to transform one string to the other.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can transform start to end following these steps:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;X&quot;, end = &quot;L&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;LLR&quot;, end = &quot;RRL&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;XL&quot;, end = &quot;LX&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;XLLR&quot;, end = &quot;LXLX&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= start.length&nbsp;&lt;= 10<sup>4</sup></code></li>\n\t<li><code>start.length == end.length</code></li>\n\t<li>Both <code>start</code> and <code>end</code> will only consist of characters in <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and&nbsp;<code>&#39;X&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u7531 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> \u548c <code>&#39;X&#39;</code> \u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4f8b\u5982<code>&quot;RXXLRXRXL&quot;</code>\uff09\u4e2d\u8fdb\u884c\u79fb\u52a8\u64cd\u4f5c\u3002\u4e00\u6b21\u79fb\u52a8\u64cd\u4f5c\u6307\u7528\u4e00\u4e2a<code>&quot;LX&quot;</code>\u66ff\u6362\u4e00\u4e2a<code>&quot;XL&quot;</code>\uff0c\u6216\u8005\u7528\u4e00\u4e2a<code>&quot;XR&quot;</code>\u66ff\u6362\u4e00\u4e2a<code>&quot;RX&quot;</code>\u3002\u73b0\u7ed9\u5b9a\u8d77\u59cb\u5b57\u7b26\u4e32<code>start</code>\u548c\u7ed3\u675f\u5b57\u7b26\u4e32<code>end</code>\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u7cfb\u5217\u79fb\u52a8\u64cd\u4f5c\u4f7f\u5f97<code>start</code>\u53ef\u4ee5\u8f6c\u6362\u6210<code>end</code>\u65f6\uff0c \u8fd4\u56de<code>True</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u6b65\u5c06start\u8f6c\u6362\u6210end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>\u3002</li>\n\t<li><code>start</code>\u548c<code>end</code>\u4e2d\u7684\u5b57\u7b26\u4e32\u4ec5\u9650\u4e8e<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>\u548c<code>&#39;X&#39;</code>\u3002</li>\n</ul>\n", "tags_en": ["Brainteaser"], "tags_cn": ["\u8111\u7b4b\u6025\u8f6c\u5f2f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canTransform(string start, string end) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canTransform(String start, String end) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canTransform(self, start, end):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canTransform(self, start: str, end: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canTransform(char * start, char * end){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanTransform(string start, string end) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */\nvar canTransform = function(start, end) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} start\n# @param {String} end\n# @return {Boolean}\ndef can_transform(start, end)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canTransform(_ start: String, _ end: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canTransform(start string, end string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canTransform(start: String, end: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canTransform(start: String, end: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_transform(start: String, end: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $start\n     * @param String $end\n     * @return Boolean\n     */\n    function canTransform($start, $end) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canTransform(start: string, end: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0794", "frontend_question_id": "0778", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/swim-in-rising-water", "url_en": "https://leetcode.com/problems/swim-in-rising-water", "relative_path_cn": "/leetcode/0700-0799/0778.Swim%20in%20Rising%20Water/README.md", "relative_path_en": "/leetcode/0700-0799/0778.Swim%20in%20Rising%20Water/README_EN.md", "title_cn": "\u6c34\u4f4d\u4e0a\u5347\u7684\u6cf3\u6c60\u4e2d\u6e38\u6cf3", "title_en": "Swim in Rising Water", "question_title_slug": "swim-in-rising-water", "content_en": "<p>On an N x N <code>grid</code>, each square <code>grid[i][j]</code> represents the elevation at that point <code>(i,j)</code>.</p>\r\n\r\n<p>Now rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are&nbsp;at most&nbsp;<code>t</code>. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p>\r\n\r\n<p>You start at the top left square <code>(0, 0)</code>. What is the least time until you can reach the bottom right square <code>(N-1, N-1)</code>?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[0,2],[1,3]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\nAt time <code>0</code>, you are in grid location <code>(0, 0)</code>.\r\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\r\n\r\nYou cannot reach point <code>(1, 1)</code> until time <code>3</code>.\r\nWhen the depth of water is <code>3</code>, we can swim anywhere inside the grid.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\r\n<strong>Output:</strong> 16\r\n<strong>Explanation:</strong>\r\n<strong> 0  1  2  3  4</strong>\r\n24 23 22 21  <strong>5</strong>\r\n<strong>12 13 14 15 16</strong>\r\n<strong>11</strong> 17 18 19 20\r\n<strong>10  9  8  7  6</strong>\r\n\r\nThe final route is marked in bold.\r\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\r\n\t<li>grid[i][j] is a permutation of [0, ..., N*N - 1].</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a N x N \u7684\u5750\u6807\u65b9\u683c&nbsp;<code>grid</code> \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u65b9\u683c\u7684\u503c <code>grid[i][j]</code> \u8868\u793a\u5728\u4f4d\u7f6e <code>(i,j)</code> \u7684\u5e73\u53f0\u9ad8\u5ea6\u3002</p>\n\n<p>\u73b0\u5728\u5f00\u59cb\u4e0b\u96e8\u4e86\u3002\u5f53\u65f6\u95f4\u4e3a&nbsp;<code>t</code>&nbsp;\u65f6\uff0c\u6b64\u65f6\u96e8\u6c34\u5bfc\u81f4\u6c34\u6c60\u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u6c34\u4f4d\u4e3a&nbsp;<code>t</code>&nbsp;\u3002\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5e73\u53f0\u6e38\u5411\u56db\u5468\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u5e73\u53f0\uff0c\u4f46\u662f\u524d\u63d0\u662f\u6b64\u65f6\u6c34\u4f4d\u5fc5\u987b\u540c\u65f6\u6df9\u6ca1\u8fd9\u4e24\u4e2a\u5e73\u53f0\u3002\u5047\u5b9a\u4f60\u53ef\u4ee5\u77ac\u95f4\u79fb\u52a8\u65e0\u9650\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u9ed8\u8ba4\u5728\u65b9\u683c\u5185\u90e8\u6e38\u52a8\u662f\u4e0d\u8017\u65f6\u7684\u3002\u5f53\u7136\uff0c\u5728\u4f60\u6e38\u6cf3\u7684\u65f6\u5019\u4f60\u5fc5\u987b\u5f85\u5728\u5750\u6807\u65b9\u683c\u91cc\u9762\u3002</p>\n\n<p>\u4f60\u4ece\u5750\u6807\u65b9\u683c\u7684\u5de6\u4e0a\u5e73\u53f0 (0\uff0c0) \u51fa\u53d1\u3002\u6700\u5c11\u8017\u65f6\u591a\u4e45\u4f60\u624d\u80fd\u5230\u8fbe\u5750\u6807\u65b9\u683c\u7684\u53f3\u4e0b\u5e73\u53f0&nbsp;<code>(N-1, N-1)</code>\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[0,2],[1,3]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u65f6\u95f4\u4e3a0\u65f6\uff0c\u4f60\u4f4d\u4e8e\u5750\u6807\u65b9\u683c\u7684\u4f4d\u7f6e\u4e3a <code>(0, 0)\u3002</code>\n\u6b64\u65f6\u4f60\u4e0d\u80fd\u6e38\u5411\u4efb\u610f\u65b9\u5411\uff0c\u56e0\u4e3a\u56db\u4e2a\u76f8\u90bb\u65b9\u5411\u5e73\u53f0\u7684\u9ad8\u5ea6\u90fd\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\u4e3a 0 \u65f6\u7684\u6c34\u4f4d\u3002\n\n\u7b49\u65f6\u95f4\u5230\u8fbe 3 \u65f6\uff0c\u4f60\u624d\u53ef\u4ee5\u6e38\u5411\u5e73\u53f0 (1, 1). \u56e0\u4e3a\u6b64\u65f6\u7684\u6c34\u4f4d\u662f 3\uff0c\u5750\u6807\u65b9\u683c\u4e2d\u7684\u5e73\u53f0\u6ca1\u6709\u6bd4\u6c34\u4f4d 3 \u66f4\u9ad8\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u6e38\u5411\u5750\u6807\u65b9\u683c\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\n</pre>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>\u8f93\u51fa:</strong> 16\n<strong>\u89e3\u91ca:</strong>\n<strong> 0  1  2  3  4</strong>\n24 23 22 21  <strong>5</strong>\n<strong>12 13 14 15 16</strong>\n<strong>11</strong> 17 18 19 20\n<strong>10  9  8  7  6</strong>\n\n\u6700\u7ec8\u7684\u8def\u7ebf\u7528\u52a0\u7c97\u8fdb\u884c\u4e86\u6807\u8bb0\u3002\n\u6211\u4eec\u5fc5\u987b\u7b49\u5230\u65f6\u95f4\u4e3a 16\uff0c\u6b64\u65f6\u624d\u80fd\u4fdd\u8bc1\u5e73\u53f0 (0, 0) \u548c (4, 4) \u662f\u8fde\u901a\u7684\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\n\t<li>grid[i][j] \u4f4d\u4e8e\u533a\u95f4 [0, ..., N*N - 1] \u5185\u3002</li>\n</ol>\n", "tags_en": ["Heap", "Depth-first Search", "Union Find", "Binary Search"], "tags_cn": ["\u5806", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int swimInWater(vector<vector<int>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int swimInWater(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint swimInWater(int** grid, int gridSize, int* gridColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SwimInWater(int[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar swimInWater = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef swim_in_water(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func swimInWater(_ grid: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func swimInWater(grid [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def swimInWater(grid: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun swimInWater(grid: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn swim_in_water(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function swimInWater($grid) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function swimInWater(grid: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0795", "frontend_question_id": "0779", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-th-symbol-in-grammar", "url_en": "https://leetcode.com/problems/k-th-symbol-in-grammar", "relative_path_cn": "/leetcode/0700-0799/0779.K-th%20Symbol%20in%20Grammar/README.md", "relative_path_en": "/leetcode/0700-0799/0779.K-th%20Symbol%20in%20Grammar/README_EN.md", "title_cn": "\u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7", "title_en": "K-th Symbol in Grammar", "question_title_slug": "k-th-symbol-in-grammar", "content_en": "<p>On the first row, we write a <code>0</code>. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p>\r\n\r\n<p>Given row <code>N</code> and index <code>K</code>, return the <code>K</code>-th indexed symbol in row <code>N</code>. (The values of <code>K</code> are 1-indexed.) (1 indexed).</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> N = 1, K = 1\r\n<strong>Output:</strong> 0\r\n\r\n<strong>Input:</strong> N = 2, K = 1\r\n<strong>Output:</strong> 0\r\n\r\n<strong>Input:</strong> N = 2, K = 2\r\n<strong>Output:</strong> 1\r\n\r\n<strong>Input:</strong> N = 4, K = 5\r\n<strong>Output:</strong> 1\r\n\r\n<strong>Explanation:</strong>\r\nrow 1: 0\r\nrow 2: 01\r\nrow 3: 0110\r\nrow 4: 01101001\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>N</code> will be an integer in the range <code>[1, 30]</code>.</li>\r\n\t<li><code>K</code> will be an integer in the range <code>[1, 2^(N-1)]</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a <code>0</code>\u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684<code>0</code>\u66ff\u6362\u4e3a<code>01</code>\uff0c<code>1</code>\u66ff\u6362\u4e3a<code>10</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u884c\u6570&nbsp;<code>N</code>&nbsp;\u548c\u5e8f\u6570 <code>K</code>\uff0c\u8fd4\u56de\u7b2c <code>N</code> \u884c\u4e2d\u7b2c <code>K</code>\u4e2a\u5b57\u7b26\u3002\uff08<code>K</code>\u4ece1\u5f00\u59cb\uff09</p>\n\n<p><br>\n<strong>\u4f8b\u5b50:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 1, K = 1\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u8f93\u5165:</strong> N = 2, K = 1\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u8f93\u5165:</strong> N = 2, K = 2\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u8f93\u5165:</strong> N = 4, K = 5\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u884c: 0\n\u7b2c\u4e8c\u884c: 01\n\u7b2c\u4e09\u884c: 0110\n\u7b2c\u56db\u884c: 01101001\n</pre>\n\n<p><br>\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[1, 30]</code>.</li>\n\t<li><code>K</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[1, 2^(N-1)]</code>.</li>\n</ol>\n", "tags_en": ["Recursion"], "tags_cn": ["\u9012\u5f52"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int kthGrammar(int N, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int kthGrammar(int N, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kthGrammar(self, N, K):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kthGrammar(self, N: int, K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint kthGrammar(int N, int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KthGrammar(int N, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nvar kthGrammar = function(N, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef kth_grammar(n, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kthGrammar(_ N: Int, _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kthGrammar(N int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kthGrammar(N: Int, K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kthGrammar(N: Int, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kth_grammar(n: i32, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @param Integer $K\n     * @return Integer\n     */\n    function kthGrammar($N, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kthGrammar(N: number, K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0796", "frontend_question_id": "0780", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reaching-points", "url_en": "https://leetcode.com/problems/reaching-points", "relative_path_cn": "/leetcode/0700-0799/0780.Reaching%20Points/README.md", "relative_path_en": "/leetcode/0700-0799/0780.Reaching%20Points/README_EN.md", "title_cn": "\u5230\u8fbe\u7ec8\u70b9", "title_en": "Reaching Points", "question_title_slug": "reaching-points", "content_en": "<p>A move consists of taking a point <code>(x, y)</code> and transforming it to either <code>(x, x+y)</code> or <code>(x+y, y)</code>.</p>\r\n\r\n<p>Given a starting point <code>(sx, sy)</code> and a target point <code>(tx, ty)</code>, return <code>True</code> if and only if a sequence of moves exists to transform the point <code>(sx, sy)</code> to <code>(tx, ty)</code>. Otherwise, return <code>False</code>.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 3, ty = 5\r\n<strong>Output:</strong> True\r\n<strong>Explanation:</strong>\r\nOne series of moves that transforms the starting point to the target is:\r\n(1, 1) -&gt; (1, 2)\r\n(1, 2) -&gt; (3, 2)\r\n(3, 2) -&gt; (3, 5)\r\n\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 2, ty = 2\r\n<strong>Output:</strong> False\r\n\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 1, ty = 1\r\n<strong>Output:</strong> True\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>sx, sy, tx, ty</code> will all be integers in the range <code>[1, 10^9]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4ece\u70b9&nbsp;<code>(x, y)</code>&nbsp;\u53ef\u4ee5<strong>\u8f6c\u6362</strong>\u5230&nbsp;<code>(x, x+y)</code>&nbsp; \u6216\u8005&nbsp;<code>(x+y, y)</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8d77\u70b9&nbsp;<code>(sx, sy)</code>&nbsp;\u548c\u4e00\u4e2a\u7ec8\u70b9&nbsp;<code>(tx, ty)</code>\uff0c\u5982\u679c\u901a\u8fc7\u4e00\u7cfb\u5217\u7684<strong>\u8f6c\u6362</strong>\u53ef\u4ee5\u4ece\u8d77\u70b9\u5230\u8fbe\u7ec8\u70b9\uff0c\u5219\u8fd4\u56de <code>True&nbsp;</code>\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>False</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:\n</strong>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e00\u7cfb\u5217<strong>\u8f6c\u6362</strong>\u4ece\u8d77\u70b9\u8f6c\u6362\u5230\u7ec8\u70b9\uff1a\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>\u8f93\u51fa:</strong> True\n\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>sx, sy, tx, ty</code>&nbsp;\u662f\u8303\u56f4\u5728&nbsp;<code>[1, 10^9]</code>&nbsp;\u7684\u6574\u6570\u3002</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool reachingPoints(int sx, int sy, int tx, int ty) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool reachingPoints(int sx, int sy, int tx, int ty){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ReachingPoints(int sx, int sy, int tx, int ty) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} sx\n * @param {number} sy\n * @param {number} tx\n * @param {number} ty\n * @return {boolean}\n */\nvar reachingPoints = function(sx, sy, tx, ty) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reachingPoints(_ sx: Int, _ sy: Int, _ tx: Int, _ ty: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reachingPoints(sx int, sy int, tx int, ty int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reaching_points(sx: i32, sy: i32, tx: i32, ty: i32) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $sx\n     * @param Integer $sy\n     * @param Integer $tx\n     * @param Integer $ty\n     * @return Boolean\n     */\n    function reachingPoints($sx, $sy, $tx, $ty) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reachingPoints(sx: number, sy: number, tx: number, ty: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0797", "frontend_question_id": "0781", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rabbits-in-forest", "url_en": "https://leetcode.com/problems/rabbits-in-forest", "relative_path_cn": "/leetcode/0700-0799/0781.Rabbits%20in%20Forest/README.md", "relative_path_en": "/leetcode/0700-0799/0781.Rabbits%20in%20Forest/README_EN.md", "title_cn": "\u68ee\u6797\u4e2d\u7684\u5154\u5b50", "title_en": "Rabbits in Forest", "question_title_slug": "rabbits-in-forest", "content_en": "<p>In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those <code>answers</code> are placed in an array.</p>\r\n\r\n<p>Return the minimum number of rabbits that could be in the forest.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> answers = [1, 1, 2]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong>\r\nThe two rabbits that answered &quot;1&quot; could both be the same color, say red.\r\nThe rabbit than answered &quot;2&quot; can&#39;t be red or the answers would be inconsistent.\r\nSay the rabbit that answered &quot;2&quot; was blue.\r\nThen there should be 2 other blue rabbits in the forest that didn&#39;t answer into the array.\r\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn&#39;t.\r\n\r\n<strong>Input:</strong> answers = [10, 10, 10]\r\n<strong>Output:</strong> 11\r\n\r\n<strong>Input:</strong> answers = []\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>answers</code> will have length at most <code>1000</code>.</li>\r\n\t<li>Each <code>answers[i]</code> will be an integer in the range <code>[0, 999]</code>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u68ee\u6797\u4e2d\uff0c\u6bcf\u4e2a\u5154\u5b50\u90fd\u6709\u989c\u8272\u3002\u5176\u4e2d\u4e00\u4e9b\u5154\u5b50\uff08\u53ef\u80fd\u662f\u5168\u90e8\uff09\u544a\u8bc9\u4f60\u8fd8\u6709\u591a\u5c11\u5176\u4ed6\u7684\u5154\u5b50\u548c\u81ea\u5df1\u6709\u76f8\u540c\u7684\u989c\u8272\u3002\u6211\u4eec\u5c06\u8fd9\u4e9b\u56de\u7b54\u653e\u5728&nbsp;<code>answers</code>&nbsp;\u6570\u7ec4\u91cc\u3002</p>\n\n<p>\u8fd4\u56de\u68ee\u6797\u4e2d\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> answers = [1, 1, 2]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n\u4e24\u53ea\u56de\u7b54\u4e86 &quot;1&quot; \u7684\u5154\u5b50\u53ef\u80fd\u6709\u76f8\u540c\u7684\u989c\u8272\uff0c\u8bbe\u4e3a\u7ea2\u8272\u3002\n\u4e4b\u540e\u56de\u7b54\u4e86 &quot;2&quot; \u7684\u5154\u5b50\u4e0d\u4f1a\u662f\u7ea2\u8272\uff0c\u5426\u5219\u4ed6\u4eec\u7684\u56de\u7b54\u4f1a\u76f8\u4e92\u77db\u76fe\u3002\n\u8bbe\u56de\u7b54\u4e86 &quot;2&quot; \u7684\u5154\u5b50\u4e3a\u84dd\u8272\u3002\n\u6b64\u5916\uff0c\u68ee\u6797\u4e2d\u8fd8\u5e94\u6709\u53e6\u5916 2 \u53ea\u84dd\u8272\u5154\u5b50\u7684\u56de\u7b54\u6ca1\u6709\u5305\u542b\u5728\u6570\u7ec4\u4e2d\u3002\n\u56e0\u6b64\u68ee\u6797\u4e2d\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\u662f 5: 3 \u53ea\u56de\u7b54\u7684\u548c 2 \u53ea\u6ca1\u6709\u56de\u7b54\u7684\u3002\n\n<strong>\u8f93\u5165:</strong> answers = [10, 10, 10]\n<strong>\u8f93\u51fa:</strong> 11\n\n<strong>\u8f93\u5165:</strong> answers = []\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>answers</code>&nbsp;\u7684\u957f\u5ea6\u6700\u5927\u4e3a<code>1000</code>\u3002</li>\n\t<li><code>answers[i]</code>&nbsp;\u662f\u5728&nbsp;<code>[0, 999]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numRabbits(vector<int>& answers) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numRabbits(int[] answers) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numRabbits(self, answers):\n        \"\"\"\n        :type answers: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numRabbits(int* answers, int answersSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumRabbits(int[] answers) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} answers\n * @return {number}\n */\nvar numRabbits = function(answers) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} answers\n# @return {Integer}\ndef num_rabbits(answers)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numRabbits(_ answers: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numRabbits(answers []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numRabbits(answers: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numRabbits(answers: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_rabbits(answers: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $answers\n     * @return Integer\n     */\n    function numRabbits($answers) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numRabbits(answers: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0798", "frontend_question_id": "0782", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/transform-to-chessboard", "url_en": "https://leetcode.com/problems/transform-to-chessboard", "relative_path_cn": "/leetcode/0700-0799/0782.Transform%20to%20Chessboard/README.md", "relative_path_en": "/leetcode/0700-0799/0782.Transform%20to%20Chessboard/README_EN.md", "title_cn": "\u53d8\u4e3a\u68cb\u76d8", "title_en": "Transform to Chessboard", "question_title_slug": "transform-to-chessboard", "content_en": "<p>An N x N <code>board</code> contains only <code>0</code>s and <code>1</code>s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.</p>\r\n\r\n<p>What is the minimum number of moves to transform the board into a &quot;chessboard&quot; - a board where no <code>0</code>s and no <code>1</code>s are 4-directionally adjacent? If the task is impossible, return -1.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong>\r\nOne potential sequence of moves is shown below, from left to right:\r\n\r\n0110     1010     1010\r\n0110 --&gt; 1010 --&gt; 0101\r\n1001     0101     1010\r\n1001     0101     0101\r\n\r\nThe first move swaps the first and second column.\r\nThe second move swaps the second and third row.\r\n\r\n\r\n<strong>Input:</strong> board = [[0, 1], [1, 0]]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong>\r\nAlso note that the board with 0 in the top left corner,\r\n01\r\n10\r\n\r\nis also a valid chessboard.\r\n\r\n<strong>Input:</strong> board = [[1, 0], [1, 0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong>\r\nNo matter what sequence of moves you make, you cannot end with a valid chessboard.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> will have the same number of rows and columns, a number in the range <code>[2, 30]</code>.</li>\r\n\t<li><code>board[i][j]</code> will be only <code>0</code>s or <code>1</code>s.</li>\r\n</ul>\r\n", "content_cn": "<p>\u4e00\u4e2a N&nbsp;x N\u7684 <code>board</code>&nbsp;\u4ec5\u7531&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u7ec4\u6210&nbsp;\u3002\u6bcf\u6b21\u79fb\u52a8\uff0c\u4f60\u80fd\u4efb\u610f\u4ea4\u6362\u4e24\u5217\u6216\u662f\u4e24\u884c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u8f93\u51fa\u5c06\u8fd9\u4e2a\u77e9\u9635\u53d8\u4e3a &ldquo;\u68cb\u76d8&rdquo; \u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002&ldquo;\u68cb\u76d8&rdquo; \u662f\u6307\u4efb\u610f\u4e00\u683c\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u7684\u503c\u5747\u4e0e\u672c\u8eab\u4e0d\u540c\u7684\u77e9\u9635\u3002\u5982\u679c\u4e0d\u5b58\u5728\u53ef\u884c\u7684\u53d8\u6362\uff0c\u8f93\u51fa -1\u3002</p>\n\n<pre><strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>\n\u4e00\u79cd\u53ef\u884c\u7684\u53d8\u6362\u65b9\u5f0f\u5982\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\uff1a\n\n0110     1010     1010\n0110 --&gt; 1010 --&gt; 0101\n1001     0101     1010\n1001     0101     0101\n\n\u7b2c\u4e00\u6b21\u79fb\u52a8\u4ea4\u6362\u4e86\u7b2c\u4e00\u5217\u548c\u7b2c\u4e8c\u5217\u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\u4ea4\u6362\u4e86\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u3002\n\n\n<strong>\u8f93\u5165:</strong> board = [[0, 1], [1, 0]]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong>\n\u6ce8\u610f\u5de6\u4e0a\u89d2\u7684\u683c\u503c\u4e3a0\u65f6\u4e5f\u662f\u5408\u6cd5\u7684\u68cb\u76d8\uff0c\u5982\uff1a\n\n01\n10\n\n\u4e5f\u662f\u5408\u6cd5\u7684\u68cb\u76d8.\n\n<strong>\u8f93\u5165:</strong> board = [[1, 0], [1, 0]]\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong>\n\u4efb\u610f\u7684\u53d8\u6362\u90fd\u4e0d\u80fd\u4f7f\u8fd9\u4e2a\u8f93\u5165\u53d8\u4e3a\u5408\u6cd5\u7684\u68cb\u76d8\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;\u662f\u65b9\u9635\uff0c\u4e14\u884c\u5217\u6570\u7684\u8303\u56f4\u662f<code>[2, 30]</code>\u3002</li>\n\t<li><code>board[i][j]</code>&nbsp;\u5c06\u53ea\u5305\u542b&nbsp;<code>0</code>\u6216&nbsp;<code>1</code>\u3002</li>\n</ul>\n", "tags_en": ["Array", "Math"], "tags_cn": ["\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int movesToChessboard(vector<vector<int>>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int movesToChessboard(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def movesToChessboard(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def movesToChessboard(self, board: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint movesToChessboard(int** board, int boardSize, int* boardColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MovesToChessboard(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar movesToChessboard = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @return {Integer}\ndef moves_to_chessboard(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func movesToChessboard(_ board: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func movesToChessboard(board [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def movesToChessboard(board: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun movesToChessboard(board: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn moves_to_chessboard(board: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return Integer\n     */\n    function movesToChessboard($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function movesToChessboard(board: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0799", "frontend_question_id": "0783", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes", "url_en": "https://leetcode.com/problems/minimum-distance-between-bst-nodes", "relative_path_cn": "/leetcode/0700-0799/0783.Minimum%20Distance%20Between%20BST%20Nodes/README.md", "relative_path_en": "/leetcode/0700-0799/0783.Minimum%20Distance%20Between%20BST%20Nodes/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u8282\u70b9\u6700\u5c0f\u8ddd\u79bb", "title_en": "Minimum Distance Between BST Nodes", "question_title_slug": "minimum-distance-between-bst-nodes", "content_en": "<p>Given a Binary Search Tree (BST) with the root node <code>root</code>, return&nbsp;the minimum difference between the values of any two different nodes in the tree.</p>\n\n<p><strong>Example :</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [4,2,6,1,3,null,null]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nNote that root is a TreeNode object, not an array.\n\nThe given tree [4,2,6,1,3,null,null] is represented by the following diagram:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\nwhile the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li>The size of the BST will be between 2 and&nbsp;<code>100</code>.</li>\n\t<li>The BST is always valid, each node&#39;s value is an integer, and each node&#39;s value is different.</li>\n\t<li>This question is the same as 530:&nbsp;<a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst/\">https://leetcode.com/problems/minimum-absolute-difference-in-bst/</a></li>\n</ol>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9&nbsp;<code>root</code>\uff0c\u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [4,2,6,1,3,null,null]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u6ce8\u610f\uff0croot\u662f\u6811\u8282\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\n\u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n\u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 <code>2</code> \u5230&nbsp;<code>100</code>\u3002</li>\n\t<li>\u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002</li>\n\t<li>\u672c\u9898\u4e0e 530\uff1a<a href=\"https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/\">https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/</a> \u76f8\u540c</li>\n</ol>\n", "tags_en": ["Tree", "Recursion"], "tags_cn": ["\u6811", "\u9012\u5f52"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int minDiffInBST(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int minDiffInBST(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def minDiffInBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minDiffInBST(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint minDiffInBST(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int MinDiffInBST(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef min_diff_in_bst(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func minDiffInBST(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc minDiffInBST(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def minDiffInBST(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun minDiffInBST(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn min_diff_in_bst(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function minDiffInBST($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction minDiffInBST(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0800", "frontend_question_id": "0784", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/letter-case-permutation", "url_en": "https://leetcode.com/problems/letter-case-permutation", "relative_path_cn": "/leetcode/0700-0799/0784.Letter%20Case%20Permutation/README.md", "relative_path_en": "/leetcode/0700-0799/0784.Letter%20Case%20Permutation/README_EN.md", "title_cn": "\u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217", "title_en": "Letter Case Permutation", "question_title_slug": "letter-case-permutation", "content_en": "<p>Given a string S, we can transform every letter individually&nbsp;to be lowercase or uppercase to create another string.</p>\n\n<p>Return <em>a list of all possible strings we could create</em>. You can return the output&nbsp;in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;a1b2&quot;\n<strong>Output:</strong> [&quot;a1b2&quot;,&quot;a1B2&quot;,&quot;A1b2&quot;,&quot;A1B2&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;3z4&quot;\n<strong>Output:</strong> [&quot;3z4&quot;,&quot;3Z4&quot;]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;12345&quot;\n<strong>Output:</strong> [&quot;12345&quot;]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> S = &quot;0&quot;\n<strong>Output:</strong> [&quot;0&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>S</code> will be a string with length between <code>1</code> and <code>12</code>.</li>\n\t<li><code>S</code> will consist only of letters or digits.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32<code>S</code>\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002</p>\n\n<p>&nbsp;</p>\n\n<pre><strong>\u793a\u4f8b\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>S = &quot;a1b2&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>S = &quot;3z4&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;3z4&quot;, &quot;3Z4&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>S = &quot;12345&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;12345&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>12</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Backtracking"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> letterCasePermutation(string S) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> letterCasePermutation(String S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def letterCasePermutation(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def letterCasePermutation(self, S: str) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCasePermutation(char * S, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> LetterCasePermutation(string S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @return {string[]}\n */\nvar letterCasePermutation = function(S) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef letter_case_permutation(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func letterCasePermutation(_ S: String) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func letterCasePermutation(S string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def letterCasePermutation(S: String): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun letterCasePermutation(S: String): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn letter_case_permutation(s: String) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @return String[]\n     */\n    function letterCasePermutation($S) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function letterCasePermutation(S: string): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0801", "frontend_question_id": "0785", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/is-graph-bipartite", "url_en": "https://leetcode.com/problems/is-graph-bipartite", "relative_path_cn": "/leetcode/0700-0799/0785.Is%20Graph%20Bipartite%3F/README.md", "relative_path_en": "/leetcode/0700-0799/0785.Is%20Graph%20Bipartite%3F/README_EN.md", "title_cn": "\u5224\u65ad\u4e8c\u5206\u56fe", "title_en": "Is Graph Bipartite?", "question_title_slug": "is-graph-bipartite", "content_en": "<p>Given an undirected <code>graph</code>, return <code>true</code> if and only if it is bipartite.</p>\n\n<p>Recall that a graph is <em>bipartite</em> if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.</p>\n\n<p>The graph is given in the following form: <code>graph[i]</code> is a list of indexes <code>j</code> for which the edge between nodes <code>i</code> and <code>j</code> exists.&nbsp; Each node is an integer between <code>0</code> and <code>graph.length - 1</code>.&nbsp; There are no self edges or parallel edges: <code>graph[i]</code> does not contain <code>i</code>, and it doesn&#39;t contain any element twice.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can divide the vertices into two groups: {0, 2} and {1, 3}.\n\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We cannot find a way to divide the set of nodes into two independent subsets.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= graph.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt; 100</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt;= graph.length - 1</code></li>\n\t<li><code>graph[i][j] != i</code></li>\n\t<li>All the values of <code>graph[i]</code> are <strong>unique</strong>.</li>\n\t<li>The graph is <strong>guaranteed</strong> to be <strong>undirected</strong>.&nbsp;</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe<code>graph</code>\uff0c\u5f53\u8fd9\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\u8fd4\u56de<code>true</code>\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u80fd\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u96c6\u5408\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6A\u548cB\uff0c\u5e76\u4f7f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u4e2a\u6765\u81eaA\u96c6\u5408\uff0c\u4e00\u4e2a\u6765\u81eaB\u96c6\u5408\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u56fe\u79f0\u4e3a\u4e8c\u5206\u56fe\u3002</p>\n\n<p><code>graph</code>\u5c06\u4f1a\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u7ed9\u51fa\uff0c<code>graph[i]</code>\u8868\u793a\u56fe\u4e2d\u4e0e\u8282\u70b9<code>i</code>\u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5728<code>0</code>\u5230<code>graph.length-1</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002\u8fd9\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u5e73\u884c\u8fb9\uff1a&nbsp;<code>graph[i]</code>&nbsp;\u4e2d\u4e0d\u5b58\u5728<code>i</code>\uff0c\u5e76\u4e14<code>graph[i]</code>\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u503c\u3002</p>\n\n<pre>\n<code>\n<strong>\u793a\u4f8b 1:</strong>\n\u8f93\u5165<strong>:</strong> [[1,3], [0,2], [1,3], [0,2]]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \n\u65e0\u5411\u56fe\u5982\u4e0b:\n0----1\n|    |\n|    |\n3----2\n\u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u5206\u6210\u4e24\u7ec4: {0, 2} \u548c {1, 3}\u3002\n</code></pre>\n\n<pre>\n<code>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \n\u65e0\u5411\u56fe\u5982\u4e0b:\n0----1\n| \\  |\n|  \\ |\n3----2\n\u6211\u4eec\u4e0d\u80fd\u5c06\u8282\u70b9\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6\u3002\n</code></pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>graph</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 100]</code>\u3002</li>\n\t<li><code>graph[i]</code> \u4e2d\u7684\u5143\u7d20\u7684\u8303\u56f4\u4e3a <code>[0, graph.length - 1]</code>\u3002</li>\n\t<li><code>graph[i]</code> \u4e0d\u4f1a\u5305\u542b <code>i</code> \u6216\u8005\u6709\u91cd\u590d\u7684\u503c\u3002</li>\n\t<li>\u56fe\u662f\u65e0\u5411\u7684: \u5982\u679c<code>j</code> \u5728 <code>graph[i]</code>\u91cc\u8fb9, \u90a3\u4e48 <code>i</code> \u4e5f\u4f1a\u5728 <code>graph[j]</code>\u91cc\u8fb9\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Breadth-first Search", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isBipartite(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isBipartite(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isBipartite(int** graph, int graphSize, int* graphColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsBipartite(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {boolean}\n */\nvar isBipartite = function(graph) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Boolean}\ndef is_bipartite(graph)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isBipartite(_ graph: [[Int]]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isBipartite(graph [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isBipartite(graph: Array[Array[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isBipartite(graph: Array<IntArray>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_bipartite(graph: Vec<Vec<i32>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Boolean\n     */\n    function isBipartite($graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isBipartite(graph: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0802", "frontend_question_id": "0786", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-th-smallest-prime-fraction", "url_en": "https://leetcode.com/problems/k-th-smallest-prime-fraction", "relative_path_cn": "/leetcode/0700-0799/0786.K-th%20Smallest%20Prime%20Fraction/README.md", "relative_path_en": "/leetcode/0700-0799/0786.K-th%20Smallest%20Prime%20Fraction/README_EN.md", "title_cn": "\u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570", "title_en": "K-th Smallest Prime Fraction", "question_title_slug": "k-th-smallest-prime-fraction", "content_en": "<p>A sorted list <code>A</code> contains 1, plus some number of primes.&nbsp; Then, for every p &lt; q in the list, we consider the fraction p/q.</p>\r\n\r\n<p>What is the <code>K</code>-th smallest fraction considered?&nbsp; Return your answer as an array of ints, where <code>answer[0] = p</code> and <code>answer[1] = q</code>.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> A = [1, 2, 3, 5], K = 3\r\n<strong>Output:</strong> [2, 5]\r\n<strong>Explanation:</strong>\r\nThe fractions to be considered in sorted order are:\r\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\r\nThe third fraction is 2/5.\r\n\r\n<strong>Input:</strong> A = [1, 7], K = 1\r\n<strong>Output:</strong> [1, 7]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> will have length between <code>2</code> and <code>2000</code>.</li>\r\n\t<li>Each <code>A[i]</code> will be between <code>1</code> and <code>30000</code>.</li>\r\n\t<li><code>K</code> will be between <code>1</code> and <code>A.length * (A.length - 1) / 2</code>.</li>\r\n</ul>", "content_cn": "<p>\u4e00\u4e2a\u5df2\u6392\u5e8f\u597d\u7684\u8868&nbsp;<code>A</code>\uff0c\u5176\u5305\u542b 1 \u548c\u5176\u4ed6\u4e00\u4e9b\u7d20\u6570.&nbsp; \u5f53\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a p&lt;q \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u5206\u6570 p/q \u3002</p>\n\n<p>\u90a3\u4e48\u7b2c&nbsp;<code>k</code>&nbsp;\u4e2a\u6700\u5c0f\u7684\u5206\u6570\u662f\u591a\u5c11\u5462?&nbsp; \u4ee5\u6574\u6570\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u4f60\u7684\u7b54\u6848, \u8fd9\u91cc&nbsp;<code>answer[0] = p</code>&nbsp;\u4e14&nbsp;<code>answer[1] = q</code>.</p>\n\n<pre><strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> A = [1, 2, 3, 5], K = 3\n<strong>\u8f93\u51fa:</strong> [2, 5]\n<strong>\u89e3\u91ca:</strong>\n\u5df2\u6784\u9020\u597d\u7684\u5206\u6570,\u6392\u5e8f\u540e\u5982\u4e0b\u6240\u793a:\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\n\u5f88\u660e\u663e\u7b2c\u4e09\u4e2a\u6700\u5c0f\u7684\u5206\u6570\u662f 2/5.\n\n<strong>\u8f93\u5165:</strong> A = [1, 7], K = 1\n<strong>\u8f93\u51fa:</strong> [1, 7]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u957f\u5ea6\u7684\u53d6\u503c\u8303\u56f4\u5728 <code>2</code> &mdash; <code>2000</code>.</li>\n\t<li>\u6bcf\u4e2a&nbsp;<code>A[i]</code> \u7684\u503c\u5728 <code>1</code> &mdash;<code>30000</code>.</li>\n\t<li><code>K</code> \u53d6\u503c\u8303\u56f4\u4e3a <code>1</code> &mdash;<code>A.length * (A.length - 1) / 2</code></li>\n</ul>\n", "tags_en": ["Heap", "Binary Search"], "tags_cn": ["\u5806", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> kthSmallestPrimeFraction(vector<int>& A, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] kthSmallestPrimeFraction(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kthSmallestPrimeFraction(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kthSmallestPrimeFraction(self, A: List[int], K: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* kthSmallestPrimeFraction(int* A, int ASize, int K, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] KthSmallestPrimeFraction(int[] A, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number[]}\n */\nvar kthSmallestPrimeFraction = function(A, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} k\n# @return {Integer[]}\ndef kth_smallest_prime_fraction(a, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kthSmallestPrimeFraction(_ A: [Int], _ K: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kthSmallestPrimeFraction(A []int, K int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kthSmallestPrimeFraction(A: Array[Int], K: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kthSmallestPrimeFraction(A: IntArray, K: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kth_smallest_prime_fraction(a: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $K\n     * @return Integer[]\n     */\n    function kthSmallestPrimeFraction($A, $K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kthSmallestPrimeFraction(A: number[], K: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0803", "frontend_question_id": "0787", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/cheapest-flights-within-k-stops", "url_en": "https://leetcode.com/problems/cheapest-flights-within-k-stops", "relative_path_cn": "/leetcode/0700-0799/0787.Cheapest%20Flights%20Within%20K%20Stops/README.md", "relative_path_en": "/leetcode/0700-0799/0787.Cheapest%20Flights%20Within%20K%20Stops/README_EN.md", "title_cn": "K \u7ad9\u4e2d\u8f6c\u5185\u6700\u4fbf\u5b9c\u7684\u822a\u73ed", "title_en": "Cheapest Flights Within K Stops", "question_title_slug": "cheapest-flights-within-k-stops", "content_en": "<p>There are <code>n</code> cities connected by&nbsp;<code>m</code> flights. Each flight starts from city&nbsp;<code>u</code> and arrives at&nbsp;<code>v</code> with a price <code>w</code>.</p>\n\n<p>Now given all the cities and flights, together with starting city <code>src</code> and the destination&nbsp;<code>dst</code>, your task is to find the cheapest price from <code>src</code> to <code>dst</code> with up to <code>k</code> stops. If there is no such route, output <code>-1</code>.</p>\n\n<pre>\n<strong>Example 1:</strong>\n<strong>Input:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>Output:</strong> 200\n<strong>Explanation:</strong> \nThe graph looks like this:\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\n\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 1 stop costs 200, as marked red in the picture.</pre>\n\n<pre>\n<strong>Example 2:</strong>\n<strong>Input:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>Output:</strong> 500\n<strong>Explanation:</strong> \nThe graph looks like this:\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\n\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 0 stop costs 500, as marked blue in the picture.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of&nbsp;nodes&nbsp;<code>n</code> will be&nbsp;in range <code>[1, 100]</code>, with nodes labeled from <code>0</code> to <code>n</code><code> - 1</code>.</li>\n\t<li>The&nbsp;size of <code>flights</code> will be&nbsp;in range <code>[0, n * (n - 1) / 2]</code>.</li>\n\t<li>The format of each flight will be <code>(src, </code><code>dst</code><code>, price)</code>.</li>\n\t<li>The price of each flight will be in the range <code>[1, 10000]</code>.</li>\n\t<li><code>k</code> is in the range of <code>[0, n - 1]</code>.</li>\n\t<li>There&nbsp;will&nbsp;not&nbsp;be&nbsp;any&nbsp;duplicated&nbsp;flights or&nbsp;self&nbsp;cycles.</li>\n</ul>\n", "content_cn": "<p>\u6709 <code>n</code> \u4e2a\u57ce\u5e02\u901a\u8fc7 <code>m</code> \u4e2a\u822a\u73ed\u8fde\u63a5\u3002\u6bcf\u4e2a\u822a\u73ed\u90fd\u4ece\u57ce\u5e02 <code>u</code> \u5f00\u59cb\uff0c\u4ee5\u4ef7\u683c <code>w</code> \u62b5\u8fbe <code>v</code>\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u6240\u6709\u7684\u57ce\u5e02\u548c\u822a\u73ed\uff0c\u4ee5\u53ca\u51fa\u53d1\u57ce\u5e02 <code>src</code> \u548c\u76ee\u7684\u5730 <code>dst</code>\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u4ece <code>src</code> \u5230 <code>dst</code> \u6700\u591a\u7ecf\u8fc7 <code>k</code>\u00a0\u7ad9\u4e2d\u8f6c\u7684\u6700\u4fbf\u5b9c\u7684\u4ef7\u683c\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u8def\u7ebf\uff0c\u5219\u8f93\u51fa <code>-1</code>\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>\u8f93\u51fa:</strong> 200\n<strong>\u89e3\u91ca:</strong> \n\u57ce\u5e02\u822a\u73ed\u56fe\u5982\u4e0b\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\" />\n\n\u4ece\u57ce\u5e02 0 \u5230\u57ce\u5e02 2 \u5728 1 \u7ad9\u4e2d\u8f6c\u4ee5\u5185\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u662f 200\uff0c\u5982\u56fe\u4e2d\u7ea2\u8272\u6240\u793a\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>\u8f93\u51fa:</strong> 500\n<strong>\u89e3\u91ca:</strong> \n\u57ce\u5e02\u822a\u73ed\u56fe\u5982\u4e0b\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\" />\n\n\u4ece\u57ce\u5e02 0 \u5230\u57ce\u5e02 2 \u5728 0 \u7ad9\u4e2d\u8f6c\u4ee5\u5185\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u662f 500\uff0c\u5982\u56fe\u4e2d\u84dd\u8272\u6240\u793a\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n</code> \u8303\u56f4\u662f <code>[1, 100]</code>\uff0c\u57ce\u5e02\u6807\u7b7e\u4ece <code>0</code> \u5230 <code>n</code><code> - 1</code></li>\n\t<li>\u822a\u73ed\u6570\u91cf\u8303\u56f4\u662f <code>[0, n * (n - 1) / 2]</code></li>\n\t<li>\u6bcf\u4e2a\u822a\u73ed\u7684\u683c\u5f0f <code>(src, </code><code>dst</code><code>, price)</code></li>\n\t<li>\u6bcf\u4e2a\u822a\u73ed\u7684\u4ef7\u683c\u8303\u56f4\u662f <code>[1, 10000]</code></li>\n\t<li><code>k</code> \u8303\u56f4\u662f <code>[0, n - 1]</code></li>\n\t<li>\u822a\u73ed\u6ca1\u6709\u91cd\u590d\uff0c\u4e14\u4e0d\u5b58\u5728\u81ea\u73af</li>\n</ul>\n", "tags_en": ["Heap", "Breadth-first Search", "Dynamic Programming"], "tags_cn": ["\u5806", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findCheapestPrice(self, n, flights, src, dst, K):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type K: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findCheapestPrice(int n, int** flights, int flightsSize, int* flightsColSize, int src, int dst, int K){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} K\n * @return {number}\n */\nvar findCheapestPrice = function(n, flights, src, dst, K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findCheapestPrice(_ n: Int, _ flights: [[Int]], _ src: Int, _ dst: Int, _ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findCheapestPrice(n int, flights [][]int, src int, dst int, K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findCheapestPrice(n: Int, flights: Array[Array[Int]], src: Int, dst: Int, K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findCheapestPrice(n: Int, flights: Array<IntArray>, src: Int, dst: Int, K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_cheapest_price(n: i32, flights: Vec<Vec<i32>>, src: i32, dst: i32, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $flights\n     * @param Integer $src\n     * @param Integer $dst\n     * @param Integer $K\n     * @return Integer\n     */\n    function findCheapestPrice($n, $flights, $src, $dst, $K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findCheapestPrice(n: number, flights: number[][], src: number, dst: number, K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0804", "frontend_question_id": "0788", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rotated-digits", "url_en": "https://leetcode.com/problems/rotated-digits", "relative_path_cn": "/leetcode/0700-0799/0788.Rotated%20Digits/README.md", "relative_path_en": "/leetcode/0700-0799/0788.Rotated%20Digits/README_EN.md", "title_cn": "\u65cb\u8f6c\u6570\u5b57", "title_en": "Rotated Digits", "question_title_slug": "rotated-digits", "content_en": "<p>X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.&nbsp; Each digit must be rotated - we cannot choose to leave it alone.</p>\n\n<p>A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.</p>\n\n<p>Now&nbsp;given a positive number <code>N</code>, how many numbers X from <code>1</code> to <code>N</code> are good?</p>\n\n<pre>\n<strong>Example:</strong>\n<strong>Input:</strong> 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nThere are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>N&nbsp; will be in range <code>[1, 10000]</code>.</li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u79f0\u4e00\u4e2a\u6570 X \u4e3a\u597d\u6570, \u5982\u679c\u5b83\u7684\u6bcf\u4f4d\u6570\u5b57\u9010\u4e2a\u5730\u88ab\u65cb\u8f6c 180 \u5ea6\u540e\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6709\u6548\u7684\uff0c\u4e14\u548c X \u4e0d\u540c\u7684\u6570\u3002\u8981\u6c42\u6bcf\u4f4d\u6570\u5b57\u90fd\u8981\u88ab\u65cb\u8f6c\u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u6570\u7684\u6bcf\u4f4d\u6570\u5b57\u88ab\u65cb\u8f6c\u4ee5\u540e\u4ecd\u7136\u8fd8\u662f\u4e00\u4e2a\u6570\u5b57\uff0c&nbsp;\u5219\u8fd9\u4e2a\u6570\u662f\u6709\u6548\u7684\u30020, 1, \u548c 8 \u88ab\u65cb\u8f6c\u540e\u4ecd\u7136\u662f\u5b83\u4eec\u81ea\u5df1\uff1b2 \u548c 5 \u53ef\u4ee5\u4e92\u76f8\u65cb\u8f6c\u6210\u5bf9\u65b9\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u4ee5\u4e0d\u540c\u7684\u65b9\u5411\u65cb\u8f6c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c2 \u548c 5 \u4e92\u4e3a\u955c\u50cf\uff09\uff1b6 \u548c 9 \u540c\u7406\uff0c\u9664\u4e86\u8fd9\u4e9b\u4ee5\u5916\u5176\u4ed6\u7684\u6570\u5b57\u65cb\u8f6c\u4ee5\u540e\u90fd\u4e0d\u518d\u662f\u6709\u6548\u7684\u6570\u5b57\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<code>N</code>, \u8ba1\u7b97\u4ece&nbsp;<code>1</code> \u5230&nbsp;<code>N</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u6570&nbsp;X \u662f\u597d\u6570\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \n\u5728[1, 10]\u4e2d\u6709\u56db\u4e2a\u597d\u6570\uff1a 2, 5, 6, 9\u3002\n\u6ce8\u610f 1 \u548c 10 \u4e0d\u662f\u597d\u6570, \u56e0\u4e3a\u4ed6\u4eec\u5728\u65cb\u8f6c\u4e4b\u540e\u4e0d\u53d8\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>N&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;<code>[1, 10000]</code>\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int rotatedDigits(int N) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int rotatedDigits(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rotatedDigits(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rotatedDigits(self, N: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint rotatedDigits(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RotatedDigits(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar rotatedDigits = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef rotated_digits(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rotatedDigits(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rotatedDigits(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rotatedDigits(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rotatedDigits(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rotated_digits(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function rotatedDigits($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rotatedDigits(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0805", "frontend_question_id": "0789", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/escape-the-ghosts", "url_en": "https://leetcode.com/problems/escape-the-ghosts", "relative_path_cn": "/leetcode/0700-0799/0789.Escape%20The%20Ghosts/README.md", "relative_path_en": "/leetcode/0700-0799/0789.Escape%20The%20Ghosts/README_EN.md", "title_cn": "\u9003\u8131\u963b\u788d\u8005", "title_en": "Escape The Ghosts", "question_title_slug": "escape-the-ghosts", "content_en": "<p>You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point <code>[0, 0]</code>, and you are given a destination point <code>target = [x<sub>target</sub>, y<sub>target</sub>]</code>, which you are trying to get to. There are several ghosts on the map with their starting positions given as an array <code>ghosts</code>, where <code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the starting position of the <code>i<sup>th</sup></code> ghost. All inputs are <strong>integral coordinates</strong>.</p>\n\n<p>Each turn, you and all the ghosts may independently choose to either <strong>move 1 unit</strong> in any of the four cardinal directions: north, east, south, or west or <strong>stay still</strong>. All actions happen <strong>simultaneously</strong>.</p>\n\n<p>You escape if and only if you can reach the target <strong>before</strong> any ghost reaches you. If you reach any square (including the target) at the <strong>same time</strong> as a ghost, it <strong>does not</strong> count as an escape.</p>\n\n<p>Return <code>true</code><em> if it is possible to escape, otherwise return </em><code>false</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[1,0],[0,3]], target = [0,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[1,0]], target = [2,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[2,0]], target = [1,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The ghost can reach the target at the same time as you.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ghosts.length &lt;= 100</code></li>\n\t<li><code>ghosts[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>There can be <strong>multiple ghosts</strong> in the same location.</li>\n\t<li><code>target.length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u5728\u8fdb\u884c\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u5403\u8c46\u4eba\u6e38\u620f\u3002\u4f60\u4ece <code>[0, 0]</code> \u70b9\u5f00\u59cb\u51fa\u53d1\uff0c\u4f60\u7684\u76ee\u7684\u5730\u662f\u00a0<code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> \u3002\u5730\u56fe\u4e0a\u6709\u4e00\u4e9b\u963b\u788d\u8005\uff0c\u4ee5\u6570\u7ec4 <code>ghosts</code> \u7ed9\u51fa\uff0c\u7b2c <code>i</code> \u4e2a\u963b\u788d\u8005\u4ece\u00a0<code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>\u00a0\u51fa\u53d1\u3002\u6240\u6709\u8f93\u5165\u5747\u4e3a <strong>\u6574\u6570\u5750\u6807</strong> \u3002</p>\n\n<p>\u6bcf\u4e00\u56de\u5408\uff0c\u4f60\u548c\u963b\u788d\u8005\u4eec\u53ef\u4ee5\u540c\u65f6\u5411\u4e1c\uff0c\u897f\uff0c\u5357\uff0c\u5317\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u52a8\u5230\u8ddd\u79bb\u539f\u4f4d\u7f6e <strong>1 \u4e2a\u5355\u4f4d</strong> \u7684\u65b0\u4f4d\u7f6e\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9 <strong>\u4e0d\u52a8</strong> \u3002\u6240\u6709\u52a8\u4f5c <strong>\u540c\u65f6</strong> \u53d1\u751f\u3002</p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u963b\u788d\u8005\u6293\u4f4f\u4f60 <strong>\u4e4b\u524d</strong> \u5230\u8fbe\u76ee\u7684\u5730\uff08\u963b\u788d\u8005\u53ef\u4ee5\u91c7\u53d6\u4efb\u610f\u884c\u52a8\u65b9\u5f0f\uff09\uff0c\u5219\u88ab\u89c6\u4e3a\u9003\u8131\u6210\u529f\u3002\u5982\u679c\u4f60\u548c\u963b\u788d\u8005\u540c\u65f6\u5230\u8fbe\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff08\u5305\u62ec\u76ee\u7684\u5730\uff09\u90fd\u4e0d\u7b97\u662f\u9003\u8131\u6210\u529f\u3002</p>\n\n<p>\u53ea\u6709\u5728\u4f60\u6709\u53ef\u80fd\u6210\u529f\u9003\u8131\u65f6\uff0c\u8f93\u51fa <code>true</code> \uff1b\u5426\u5219\uff0c\u8f93\u51fa <code>false</code> \u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ghosts = [[1,0],[0,3]], target = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e00\u6b65\u5230\u8fbe\u76ee\u7684\u5730 (0,1) \uff0c\u5728 (1, 0) \u6216\u8005 (0, 3) \u4f4d\u7f6e\u7684\u963b\u788d\u8005\u90fd\u4e0d\u53ef\u80fd\u6293\u4f4f\u4f60\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ghosts = [[1,0]], target = [2,0]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u4f60\u9700\u8981\u8d70\u5230\u4f4d\u4e8e (2, 0) \u7684\u76ee\u7684\u5730\uff0c\u4f46\u662f\u5728 (1, 0) \u7684\u963b\u788d\u8005\u4f4d\u4e8e\u4f60\u548c\u76ee\u7684\u5730\u4e4b\u95f4\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ghosts = [[2,0]], target = [1,0]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u963b\u788d\u8005\u53ef\u4ee5\u548c\u4f60\u540c\u65f6\u8fbe\u5230\u76ee\u7684\u5730\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= ghosts.length <= 100</code></li>\n\t<li><code>ghosts[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>4</sup></code></li>\n\t<li>\u540c\u4e00\u4f4d\u7f6e\u53ef\u80fd\u6709 <strong>\u591a\u4e2a\u963b\u788d\u8005</strong> \u3002</li>\n\t<li><code>target.length == 2</code></li>\n\t<li><code>-10<sup>4</sup> <= x<sub>target</sub>, y<sub>target</sub> <= 10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool escapeGhosts(vector<vector<int>>& ghosts, vector<int>& target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean escapeGhosts(int[][] ghosts, int[] target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def escapeGhosts(self, ghosts, target):\n        \"\"\"\n        :type ghosts: List[List[int]]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool escapeGhosts(int** ghosts, int ghostsSize, int* ghostsColSize, int* target, int targetSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool EscapeGhosts(int[][] ghosts, int[] target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} ghosts\n * @param {number[]} target\n * @return {boolean}\n */\nvar escapeGhosts = function(ghosts, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} ghosts\n# @param {Integer[]} target\n# @return {Boolean}\ndef escape_ghosts(ghosts, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func escapeGhosts(_ ghosts: [[Int]], _ target: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func escapeGhosts(ghosts [][]int, target []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def escapeGhosts(ghosts: Array[Array[Int]], target: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun escapeGhosts(ghosts: Array<IntArray>, target: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn escape_ghosts(ghosts: Vec<Vec<i32>>, target: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $ghosts\n     * @param Integer[] $target\n     * @return Boolean\n     */\n    function escapeGhosts($ghosts, $target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function escapeGhosts(ghosts: number[][], target: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0806", "frontend_question_id": "0790", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/domino-and-tromino-tiling", "url_en": "https://leetcode.com/problems/domino-and-tromino-tiling", "relative_path_cn": "/leetcode/0700-0799/0790.Domino%20and%20Tromino%20Tiling/README.md", "relative_path_en": "/leetcode/0700-0799/0790.Domino%20and%20Tromino%20Tiling/README_EN.md", "title_cn": "\u591a\u7c73\u8bfa\u548c\u6258\u7c73\u8bfa\u5e73\u94fa", "title_en": "Domino and Tromino Tiling", "question_title_slug": "domino-and-tromino-tiling", "content_en": "<p>We have two types of tiles: a 2x1 domino shape, and an &quot;L&quot; tromino shape. These shapes may be rotated.</p>\r\n\r\n<pre>\r\nXX  &lt;- domino\r\n\r\nXX  &lt;- &quot;L&quot; tromino\r\nX\r\n</pre>\r\n\r\n<p>Given N, how many ways are there to tile a 2 x N board? <strong>Return your answer modulo 10^9 + 7</strong>.</p>\r\n\r\n<p>(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)</p>\r\n\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe five different ways are listed below, different letters indicates different tiles:\r\nXYZ XXZ XYY XXY XYY\r\nXYZ YYZ XZZ XYY XXY</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>N&nbsp; will be in range <code>[1, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u6709\u4e24\u79cd\u5f62\u72b6\u7684\u74f7\u7816\uff1a\u4e00\u79cd\u662f&nbsp;2x1 \u7684\u591a\u7c73\u8bfa\u5f62\uff0c\u53e6\u4e00\u79cd\u662f\u5f62\u5982&nbsp;&quot;L&quot; \u7684\u6258\u7c73\u8bfa\u5f62\u3002\u4e24\u79cd\u5f62\u72b6\u90fd\u53ef\u4ee5\u65cb\u8f6c\u3002</p>\n\n<pre>\nXX  &lt;- \u591a\u7c73\u8bfa\n\nXX  &lt;- &quot;L&quot; \u6258\u7c73\u8bfa\nX\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;N \u7684\u503c\uff0c\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5e73\u94fa&nbsp;2 x N \u7684\u9762\u677f\uff1f<strong>\u8fd4\u56de\u503c mod 10^9 + 7</strong>\u3002</p>\n\n<p>\uff08\u5e73\u94fa\u6307\u7684\u662f\u6bcf\u4e2a\u6b63\u65b9\u5f62\u90fd\u5fc5\u987b\u6709\u74f7\u7816\u8986\u76d6\u3002\u4e24\u4e2a\u5e73\u94fa\u4e0d\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u9762\u677f\u4e0a\u6709\u56db\u4e2a\u65b9\u5411\u4e0a\u7684\u76f8\u90bb\u5355\u5143\u4e2d\u7684\u4e24\u4e2a\uff0c\u4f7f\u5f97\u6070\u597d\u6709\u4e00\u4e2a\u5e73\u94fa\u6709\u4e00\u4e2a\u74f7\u7816\u5360\u636e\u4e24\u4e2a\u6b63\u65b9\u5f62\u3002\uff09</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u4e0b\u9762\u5217\u51fa\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4e0d\u540c\u5b57\u6bcd\u4ee3\u8868\u4e0d\u540c\u74f7\u7816\uff1a\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>N&nbsp; \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 1000]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numTilings(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numTilings(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numTilings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numTilings(self, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numTilings(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumTilings(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar numTilings = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numTilings(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numTilings(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numTilings(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numTilings(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_tilings(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function numTilings($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numTilings(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0807", "frontend_question_id": "0791", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/custom-sort-string", "url_en": "https://leetcode.com/problems/custom-sort-string", "relative_path_cn": "/leetcode/0700-0799/0791.Custom%20Sort%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0791.Custom%20Sort%20String/README_EN.md", "title_cn": "\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u6392\u5e8f", "title_en": "Custom Sort String", "question_title_slug": "custom-sort-string", "content_en": "<p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.</p>\r\n\r\n<p><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.</p>\r\n\r\n<p>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nS = &quot;cba&quot;\r\nT = &quot;abcd&quot;\r\n<strong>Output:</strong> &quot;cbad&quot;\r\n<strong>Explanation:</strong> \r\n&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. \r\nSince &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> has length at most <code>26</code>, and no character is repeated in <code>S</code>.</li>\r\n\t<li><code>T</code> has length at most <code>200</code>.</li>\r\n\t<li><code>S</code> and <code>T</code> consist of lowercase letters only.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5b57\u7b26\u4e32<code>S</code>\u548c <code>T</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26\u3002\u5728<code>S</code>\u4e2d\uff0c\u6240\u6709\u5b57\u7b26\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p><code>S</code> \u5df2\u7ecf\u6839\u636e\u67d0\u79cd\u89c4\u5219\u8fdb\u884c\u4e86\u6392\u5e8f\u3002\u6211\u4eec\u8981\u6839\u636e<code>S</code>\u4e2d\u7684\u5b57\u7b26\u987a\u5e8f\u5bf9<code>T</code>\u8fdb\u884c\u6392\u5e8f\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679c<code>S</code>\u4e2d<code>x</code>\u5728<code>y</code>\u4e4b\u524d\u51fa\u73b0\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d<code>x</code>\u4e5f\u5e94\u51fa\u73b0\u5728<code>y</code>\u4e4b\u524d\u3002</p>\n\n<p>\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32<code>T</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong>\nS = &quot;cba&quot;\nT = &quot;abcd&quot;\n<strong>\u8f93\u51fa:</strong> &quot;cbad&quot;\n<strong>\u89e3\u91ca:</strong> \nS\u4e2d\u51fa\u73b0\u4e86\u5b57\u7b26 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, \u6240\u4ee5 &quot;a&quot;, &quot;b&quot;, &quot;c&quot; \u7684\u987a\u5e8f\u5e94\u8be5\u662f &quot;c&quot;, &quot;b&quot;, &quot;a&quot;. \n\u7531\u4e8e &quot;d&quot; \u6ca1\u6709\u5728S\u4e2d\u51fa\u73b0, \u5b83\u53ef\u4ee5\u653e\u5728T\u7684\u4efb\u610f\u4f4d\u7f6e. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; \u90fd\u662f\u5408\u6cd5\u7684\u8f93\u51fa\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code>\u7684\u6700\u5927\u957f\u5ea6\u4e3a<code>26</code>\uff0c\u5176\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>T</code>\u7684\u6700\u5927\u957f\u5ea6\u4e3a<code>200</code>\u3002</li>\n\t<li><code>S</code>\u548c<code>T</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string customSortString(string S, string T) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String customSortString(String S, String T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def customSortString(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def customSortString(self, S: str, T: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * customSortString(char * S, char * T){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string CustomSortString(string S, string T) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {string} T\n * @return {string}\n */\nvar customSortString = function(S, T) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef custom_sort_string(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func customSortString(_ S: String, _ T: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func customSortString(S string, T string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def customSortString(S: String, T: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun customSortString(S: String, T: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn custom_sort_string(s: String, t: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String $T\n     * @return String\n     */\n    function customSortString($S, $T) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function customSortString(S: string, T: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0808", "frontend_question_id": "0792", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-matching-subsequences", "url_en": "https://leetcode.com/problems/number-of-matching-subsequences", "relative_path_cn": "/leetcode/0700-0799/0792.Number%20of%20Matching%20Subsequences/README.md", "relative_path_en": "/leetcode/0700-0799/0792.Number%20of%20Matching%20Subsequences/README_EN.md", "title_cn": "\u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570", "title_en": "Number of Matching Subsequences", "question_title_slug": "number-of-matching-subsequences", "content_en": "<p>Given string <code>S</code> and a&nbsp;dictionary of words <code>words</code>, find the number of <code>words[i]</code> that is a subsequence of <code>S</code>.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nS = &quot;abcde&quot;\r\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three words in <code>words</code> that are a subsequence of <code>S</code>: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All words in <code>words</code> and <code>S</code> will only consists of lowercase letters.</li>\r\n\t<li>The length of <code>S</code> will be in the range of <code>[1, 50000]</code>.</li>\r\n\t<li>The length of <code>words</code> will be in the range of&nbsp;<code>[1, 5000]</code>.</li>\r\n\t<li>The length of <code>words[i]</code> will be in the range of <code>[1, 50]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 <code>S</code> \u548c\u5355\u8bcd\u5b57\u5178 <code>words</code>, \u6c42&nbsp;<code>words[i]</code>&nbsp;\u4e2d\u662f&nbsp;<code>S</code>&nbsp;\u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \nS = &quot;abcde&quot;\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6709\u4e09\u4e2a\u662f&nbsp;S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u5728<code>words</code>\u548c&nbsp;<code>S</code>&nbsp;\u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li><code>S</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 50000]</code>\u3002</li>\n\t<li><code>words</code>&nbsp;\u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 5000]</code>\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u5728<code>[1, 50]</code>\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numMatchingSubseq(string S, vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numMatchingSubseq(String S, String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numMatchingSubseq(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numMatchingSubseq(self, S: str, words: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numMatchingSubseq(char * S, char ** words, int wordsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumMatchingSubseq(string S, string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar numMatchingSubseq = function(S, words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef num_matching_subseq(s, words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numMatchingSubseq(_ S: String, _ words: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numMatchingSubseq(S string, words []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numMatchingSubseq(S: String, words: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numMatchingSubseq(S: String, words: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_matching_subseq(s: String, words: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $S\n     * @param String[] $words\n     * @return Integer\n     */\n    function numMatchingSubseq($S, $words) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numMatchingSubseq(S: string, words: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0809", "frontend_question_id": "0793", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/preimage-size-of-factorial-zeroes-function", "url_en": "https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function", "relative_path_cn": "/leetcode/0700-0799/0793.Preimage%20Size%20of%20Factorial%20Zeroes%20Function/README.md", "relative_path_en": "/leetcode/0700-0799/0793.Preimage%20Size%20of%20Factorial%20Zeroes%20Function/README_EN.md", "title_cn": "\u9636\u4e58\u51fd\u6570\u540eK\u4e2a\u96f6", "title_en": "Preimage Size of Factorial Zeroes Function", "question_title_slug": "preimage-size-of-factorial-zeroes-function", "content_en": "<p>Let <code>f(x)</code> be the number of zeroes at the end of <code>x!</code>. (Recall that <code>x! = 1 * 2 * 3 * ... * x</code>, and by convention, <code>0! = 1</code>.)</p>\r\n\r\n<p>For example, <code>f(3) = 0</code> because 3! = 6 has no zeroes at the end, while <code>f(11) = 2</code> because 11! = 39916800 has 2 zeroes at the end. Given <code>K</code>, find how many non-negative integers <code>x</code> have the property that <code>f(x) = K</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> K = 0\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> K = 5\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> There is no x such that x! ends in K = 5 zeroes.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>K</code> will be an integer in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>&nbsp;<code>f(x)</code>&nbsp;\u662f&nbsp;<code>x!</code>&nbsp;\u672b\u5c3e\u662f0\u7684\u6570\u91cf\u3002\uff08\u56de\u60f3\u4e00\u4e0b&nbsp;<code>x! = 1 * 2 * 3 * ... * x</code>\uff0c\u4e14<code>0! = 1</code>\uff09</p>\n\n<p>\u4f8b\u5982\uff0c&nbsp;<code>f(3) = 0</code>&nbsp;\uff0c\u56e0\u4e3a3! = 6\u7684\u672b\u5c3e\u6ca1\u67090\uff1b\u800c&nbsp;<code>f(11) = 2</code>&nbsp;\uff0c\u56e0\u4e3a11!= 39916800\u672b\u7aef\u67092\u4e2a0\u3002\u7ed9\u5b9a&nbsp;<code>K</code>\uff0c\u627e\u51fa\u591a\u5c11\u4e2a\u975e\u8d1f\u6574\u6570<code>x</code>&nbsp;\uff0c\u6709&nbsp;<code>f(x) = K</code>&nbsp;\u7684\u6027\u8d28\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:\n\u8f93\u5165:</strong>K = 0<strong>\n\u8f93\u51fa:</strong>5<strong>\n\u89e3\u91ca:</strong>&nbsp;0!, 1!, 2!, 3!, and 4!&nbsp;\u5747\u7b26\u5408 K = 0 \u7684\u6761\u4ef6\u3002<strong>\n\n\u793a\u4f8b 2:\n\u8f93\u5165:</strong>K = 5<strong>\n\u8f93\u51fa:</strong>0<strong>\n\u89e3\u91ca:</strong>\u6ca1\u6709\u5339\u914d\u5230\u8fd9\u6837\u7684 x!\uff0c\u7b26\u5408K = 5 \u7684\u6761\u4ef6<strong>\u3002</strong>\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\n\t<p><code>K</code>\u662f\u8303\u56f4\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u7684\u6574\u6570<strong>\u3002</strong></p>\n\t</li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int preimageSizeFZF(int K) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int preimageSizeFZF(int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def preimageSizeFZF(self, K):\n        \"\"\"\n        :type K: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def preimageSizeFZF(self, K: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint preimageSizeFZF(int K){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int PreimageSizeFZF(int K) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} K\n * @return {number}\n */\nvar preimageSizeFZF = function(K) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @return {Integer}\ndef preimage_size_fzf(k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func preimageSizeFZF(_ K: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func preimageSizeFZF(K int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def preimageSizeFZF(K: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun preimageSizeFZF(K: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn preimage_size_fzf(k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $K\n     * @return Integer\n     */\n    function preimageSizeFZF($K) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function preimageSizeFZF(K: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0810", "frontend_question_id": "0794", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-tic-tac-toe-state", "url_en": "https://leetcode.com/problems/valid-tic-tac-toe-state", "relative_path_cn": "/leetcode/0700-0799/0794.Valid%20Tic-Tac-Toe%20State/README.md", "relative_path_en": "/leetcode/0700-0799/0794.Valid%20Tic-Tac-Toe%20State/README_EN.md", "title_cn": "\u6709\u6548\u7684\u4e95\u5b57\u6e38\u620f", "title_en": "Valid Tic-Tac-Toe State", "question_title_slug": "valid-tic-tac-toe-state", "content_en": "<p>A Tic-Tac-Toe board is given as a string array <code>board</code>. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p>\r\n\r\n<p>The <code>board</code> is a 3 x 3 array, and consists of characters <code>&quot; &quot;</code>, <code>&quot;X&quot;</code>, and <code>&quot;O&quot;</code>.&nbsp; The &quot; &quot; character represents an empty square.</p>\r\n\r\n<p>Here are the rules of Tic-Tac-Toe:</p>\r\n\r\n<ul>\r\n\t<li>Players take turns placing characters into empty squares (&quot; &quot;).</li>\r\n\t<li>The first player always places &quot;X&quot; characters, while the second player always places &quot;O&quot; characters.</li>\r\n\t<li>&quot;X&quot; and &quot;O&quot; characters are always placed into empty squares, never filled ones.</li>\r\n\t<li>The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.</li>\r\n\t<li>The game also ends if all squares are non-empty.</li>\r\n\t<li>No more moves can be played if the game is over.</li>\r\n</ul>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> board = [&quot;O&nbsp; &quot;, &quot;&nbsp; &nbsp;&quot;, &quot;&nbsp; &nbsp;&quot;]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> The first player always plays &quot;X&quot;.\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> board = [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Players take turns making moves.\r\n\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> board = [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]\r\n<strong>Output:</strong> false\r\n\r\n<strong>Example 4:</strong>\r\n<strong>Input:</strong> board = [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> is a length-3 array of strings, where each string <code>board[i]</code> has length 3.</li>\r\n\t<li>Each <code>board[i][j]</code> is a character in the set <code>{&quot; &quot;, &quot;X&quot;, &quot;O&quot;}</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7528\u5b57\u7b26\u4e32\u6570\u7ec4\u4f5c\u4e3a\u4e95\u5b57\u6e38\u620f\u7684\u6e38\u620f\u677f&nbsp;<code>board</code>\u3002\u5f53\u4e14\u4ec5\u5f53\u5728\u4e95\u5b57\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u73a9\u5bb6\u6709\u53ef\u80fd\u5c06\u5b57\u7b26\u653e\u7f6e\u6210\u6e38\u620f\u677f\u6240\u663e\u793a\u7684\u72b6\u6001\u65f6\uff0c\u624d\u8fd4\u56de true\u3002</p>\n\n<p>\u8be5\u6e38\u620f\u677f\u662f\u4e00\u4e2a 3 x 3 \u6570\u7ec4\uff0c\u7531\u5b57\u7b26&nbsp;<code>&quot; &quot;</code>\uff0c<code>&quot;X&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;O&quot;</code>&nbsp;\u7ec4\u6210\u3002\u5b57\u7b26&nbsp;<code>&quot; &quot;</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u7a7a\u4f4d\u3002</p>\n\n<p>\u4ee5\u4e0b\u662f\u4e95\u5b57\u6e38\u620f\u7684\u89c4\u5219\uff1a</p>\n\n<ul>\n\t<li>\u73a9\u5bb6\u8f6e\u6d41\u5c06\u5b57\u7b26\u653e\u5165\u7a7a\u4f4d\uff08&quot; &quot;\uff09\u4e2d\u3002</li>\n\t<li>\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u5b57\u7b26 &ldquo;X&rdquo;\uff0c\u4e14\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u5b57\u7b26 &ldquo;O&rdquo;\u3002</li>\n\t<li>&ldquo;X&rdquo; \u548c &ldquo;O&rdquo; \u53ea\u5141\u8bb8\u653e\u7f6e\u5728\u7a7a\u4f4d\u4e2d\uff0c\u4e0d\u5141\u8bb8\u5bf9\u5df2\u653e\u6709\u5b57\u7b26\u7684\u4f4d\u7f6e\u8fdb\u884c\u586b\u5145\u3002</li>\n\t<li>\u5f53\u6709 3 \u4e2a\u76f8\u540c\uff08\u4e14\u975e\u7a7a\uff09\u7684\u5b57\u7b26\u586b\u5145\u4efb\u4f55\u884c\u3001\u5217\u6216\u5bf9\u89d2\u7ebf\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\u3002</li>\n\t<li>\u5f53\u6240\u6709\u4f4d\u7f6e\u975e\u7a7a\u65f6\uff0c\u4e5f\u7b97\u4e3a\u6e38\u620f\u7ed3\u675f\u3002</li>\n\t<li>\u5982\u679c\u6e38\u620f\u7ed3\u675f\uff0c\u73a9\u5bb6\u4e0d\u5141\u8bb8\u518d\u653e\u7f6e\u5b57\u7b26\u3002</li>\n</ul>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;O&nbsp; &quot;, &quot;&nbsp; &nbsp;&quot;, &quot;&nbsp; &nbsp;&quot;]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u7f6e&ldquo;X&rdquo;\u3002\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u73a9\u5bb6\u5e94\u8be5\u662f\u8f6e\u6d41\u653e\u7f6e\u7684\u3002\n\n<strong>\u793a\u4f8b 3:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]\n<strong>\u8f93\u51fa:</strong> false\n\n<strong>\u793a\u4f8b 4:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6e38\u620f\u677f&nbsp;<code>board</code>&nbsp;\u662f\u957f\u5ea6\u4e3a 3 \u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>board[i]</code>&nbsp;\u7684\u957f\u5ea6\u4e3a&nbsp;3\u3002</li>\n\t<li>&nbsp;<code>board[i][j]</code>&nbsp;\u662f\u96c6\u5408&nbsp;<code>{&quot; &quot;, &quot;X&quot;, &quot;O&quot;}</code>&nbsp;\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</li>\n</ul>\n", "tags_en": ["Recursion", "Math"], "tags_cn": ["\u9012\u5f52", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validTicTacToe(vector<string>& board) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validTicTacToe(String[] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validTicTacToe(self, board):\n        \"\"\"\n        :type board: List[str]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validTicTacToe(self, board: List[str]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validTicTacToe(char ** board, int boardSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidTicTacToe(string[] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} board\n * @return {boolean}\n */\nvar validTicTacToe = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} board\n# @return {Boolean}\ndef valid_tic_tac_toe(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validTicTacToe(_ board: [String]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validTicTacToe(board []string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validTicTacToe(board: Array[String]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validTicTacToe(board: Array<String>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_tic_tac_toe(board: Vec<String>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $board\n     * @return Boolean\n     */\n    function validTicTacToe($board) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validTicTacToe(board: string[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0811", "frontend_question_id": "0795", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-subarrays-with-bounded-maximum", "url_en": "https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum", "relative_path_cn": "/leetcode/0700-0799/0795.Number%20of%20Subarrays%20with%20Bounded%20Maximum/README.md", "relative_path_en": "/leetcode/0700-0799/0795.Number%20of%20Subarrays%20with%20Bounded%20Maximum/README_EN.md", "title_cn": "\u533a\u95f4\u5b50\u6570\u7ec4\u4e2a\u6570", "title_en": "Number of Subarrays with Bounded Maximum", "question_title_slug": "number-of-subarrays-with-bounded-maximum", "content_en": "<p>We are given an array <code>A</code> of positive integers, and two positive integers <code>L</code> and <code>R</code> (<code>L &lt;= R</code>).</p>\r\n\r\n<p>Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least <code>L</code> and at most <code>R</code>.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nA = [2, 1, 4, 3]\r\nL = 2\r\nR = 3\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three subarrays that meet the requirements: [2], [2, 1], [3].\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>L, R&nbsp; and <code>A[i]</code> will be an integer in the range <code>[0, 10^9]</code>.</li>\r\n\t<li>The length of <code>A</code> will be in the range of <code>[1, 50000]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u6b63\u6574\u6570\u7684\u6570\u7ec4<code>A</code>&nbsp;\uff0c\u6b63\u6574\u6570 <code>L</code>&nbsp;\u4ee5\u53ca&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)\u3002</p>\n\n<p>\u6c42\u8fde\u7eed\u3001\u975e\u7a7a\u4e14\u5176\u4e2d\u6700\u5927\u5143\u7d20\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e<code>L</code>&nbsp;\u5c0f\u4e8e\u7b49\u4e8e<code>R</code>\u7684\u5b50\u6570\u7ec4\u4e2a\u6570\u3002</p>\n\n<pre><strong>\u4f8b\u5982 :</strong>\n<strong>\u8f93\u5165:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4: [2], [2, 1], [3].\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>L, R&nbsp; \u548c&nbsp;<code>A[i]</code> \u90fd\u662f\u6574\u6570\uff0c\u8303\u56f4\u5728&nbsp;<code>[0, 10^9]</code>\u3002</li>\n\t<li>\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[1, 50000]</code>\u3002</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSubarrayBoundedMax(int[] A, int L, int R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSubarrayBoundedMax(self, A, L, R):\n        \"\"\"\n        :type A: List[int]\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSubarrayBoundedMax(self, A: List[int], L: int, R: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSubarrayBoundedMax(int* A, int ASize, int L, int R){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSubarrayBoundedMax(int[] A, int L, int R) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @param {number} L\n * @param {number} R\n * @return {number}\n */\nvar numSubarrayBoundedMax = function(A, L, R) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef num_subarray_bounded_max(a, l, r)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSubarrayBoundedMax(_ A: [Int], _ L: Int, _ R: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSubarrayBoundedMax(A []int, L int, R int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSubarrayBoundedMax(A: Array[Int], L: Int, R: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSubarrayBoundedMax(A: IntArray, L: Int, R: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_subarray_bounded_max(a: Vec<i32>, l: i32, r: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $L\n     * @param Integer $R\n     * @return Integer\n     */\n    function numSubarrayBoundedMax($A, $L, $R) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSubarrayBoundedMax(A: number[], L: number, R: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0812", "frontend_question_id": "0796", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rotate-string", "url_en": "https://leetcode.com/problems/rotate-string", "relative_path_cn": "/leetcode/0700-0799/0796.Rotate%20String/README.md", "relative_path_en": "/leetcode/0700-0799/0796.Rotate%20String/README_EN.md", "title_cn": "\u65cb\u8f6c\u5b57\u7b26\u4e32", "title_en": "Rotate String", "question_title_slug": "rotate-string", "content_en": "<p>We are given two strings, <code>A</code> and <code>B</code>.</p>\r\n\r\n<p>A <em>shift on <code>A</code></em> consists of taking string <code>A</code> and moving the leftmost character to the rightmost position. For example, if <code>A = &#39;abcde&#39;</code>, then it will be <code>&#39;bcdea&#39;</code> after one shift on <code>A</code>. Return <code>True</code> if and only if <code>A</code> can become <code>B</code> after some number of shifts on <code>A</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> A = &#39;abcde&#39;, B = &#39;cdeab&#39;\r\n<strong>Output:</strong> true\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> A = &#39;abcde&#39;, B = &#39;abced&#39;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> and <code>B</code> will have length at most <code>100</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32, <code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\u3002</p>\n\n<p><code>A</code>&nbsp;\u7684\u65cb\u8f6c\u64cd\u4f5c\u5c31\u662f\u5c06&nbsp;<code>A</code> \u6700\u5de6\u8fb9\u7684\u5b57\u7b26\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002&nbsp;\u4f8b\u5982, \u82e5&nbsp;<code>A = &#39;abcde&#39;</code>\uff0c\u5728\u79fb\u52a8\u4e00\u6b21\u4e4b\u540e\u7ed3\u679c\u5c31\u662f<code>&#39;bcdea&#39;</code>&nbsp;\u3002\u5982\u679c\u5728\u82e5\u5e72\u6b21\u65cb\u8f6c\u64cd\u4f5c\u4e4b\u540e\uff0c<code>A</code>&nbsp;\u80fd\u53d8\u6210<code>B</code>\uff0c\u90a3\u4e48\u8fd4\u56de<code>True</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> A = &#39;abcde&#39;, B = &#39;cdeab&#39;\n<strong>\u8f93\u51fa:</strong> true\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> A = &#39;abcde&#39;, B = &#39;abced&#39;\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>100</code>\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool rotateString(string A, string B) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean rotateString(String A, String B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rotateString(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rotateString(self, A: str, B: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool rotateString(char * A, char * B){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool RotateString(string A, string B) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} A\n * @param {string} B\n * @return {boolean}\n */\nvar rotateString = function(A, B) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Boolean}\ndef rotate_string(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rotateString(_ A: String, _ B: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rotateString(A string, B string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rotateString(A: String, B: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rotateString(A: String, B: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rotate_string(a: String, b: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $A\n     * @param String $B\n     * @return Boolean\n     */\n    function rotateString($A, $B) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rotateString(A: string, B: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0813", "frontend_question_id": "0797", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/all-paths-from-source-to-target", "url_en": "https://leetcode.com/problems/all-paths-from-source-to-target", "relative_path_cn": "/leetcode/0700-0799/0797.All%20Paths%20From%20Source%20to%20Target/README.md", "relative_path_en": "/leetcode/0700-0799/0797.All%20Paths%20From%20Source%20to%20Target/README_EN.md", "title_cn": "\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84", "title_en": "All Paths From Source to Target", "question_title_slug": "all-paths-from-source-to-target", "content_en": "<p>Given a directed&nbsp;acyclic graph (<strong>DAG</strong>) of <code>n</code> nodes labeled from 0 to n - 1,&nbsp;find all possible paths from node <code>0</code> to node <code>n - 1</code>, and return them in any order.</p>\n\n<p>The graph is given as follows:&nbsp;<code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code>&nbsp;(i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[3],[3],[]]\n<strong>Output:</strong> [[0,1,3],[0,2,3]]\n<strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" style=\"width: 423px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1],[]]\n<strong>Output:</strong> [[0,1]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1,2,3],[2],[3],[]]\n<strong>Output:</strong> [[0,1,2,3],[0,2,3],[0,3]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1,3],[2],[3],[]]\n<strong>Output:</strong> [[0,1,2,3],[0,3]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; n</code></li>\n\t<li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>\n\t<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4e00\u4e2a\u6709&nbsp;<code>n</code>&nbsp;\u4e2a\u7ed3\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u627e\u5230\u6240\u6709\u4ece&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n-1</code>&nbsp;\u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u987a\u5e8f\uff09</p>\n\n<p>\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c <code>i</code> \u4e2a\u6570\u7ec4\u4e2d\u7684\u5355\u5143\u90fd\u8868\u793a\u6709\u5411\u56fe\u4e2d <code>i</code> \u53f7\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e9b\u7ed3\u70b9\uff08\u8bd1\u8005\u6ce8\uff1a\u6709\u5411\u56fe\u662f\u6709\u65b9\u5411\u7684\uff0c\u5373\u89c4\u5b9a\u4e86 a&rarr;b \u4f60\u5c31\u4e0d\u80fd\u4ece b&rarr;a \uff09\u7a7a\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" style=\"height: 242px; width: 242px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,2],[3],[3],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1,3],[0,2,3]]\n<strong>\u89e3\u91ca\uff1a</strong>\u6709\u4e24\u6761\u8def\u5f84 0 -&gt; 1 -&gt; 3 \u548c 0 -&gt; 2 -&gt; 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" style=\"height: 301px; width: 423px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,2,3],[2],[3],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1,2,3],[0,2,3],[0,3]]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,3],[2],[3],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1,2,3],[0,3]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed3\u70b9\u7684\u6570\u91cf\u4f1a\u5728\u8303\u56f4&nbsp;<code>[2, 15]</code>&nbsp;\u5185\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u5728\u8def\u5f84\u5185\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Graph", "Backtracking"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def allPathsSourceTarget(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** allPathsSourceTarget(int** graph, int graphSize, int* graphColSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> AllPathsSourceTarget(int[][] graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} graph\n * @return {number[][]}\n */\nvar allPathsSourceTarget = function(graph) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} graph\n# @return {Integer[][]}\ndef all_paths_source_target(graph)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func allPathsSourceTarget(_ graph: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func allPathsSourceTarget(graph [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def allPathsSourceTarget(graph: Array[Array[Int]]): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun allPathsSourceTarget(graph: Array<IntArray>): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn all_paths_source_target(graph: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer[][]\n     */\n    function allPathsSourceTarget($graph) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function allPathsSourceTarget(graph: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0814", "frontend_question_id": "0798", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/smallest-rotation-with-highest-score", "url_en": "https://leetcode.com/problems/smallest-rotation-with-highest-score", "relative_path_cn": "/leetcode/0700-0799/0798.Smallest%20Rotation%20with%20Highest%20Score/README.md", "relative_path_en": "/leetcode/0700-0799/0798.Smallest%20Rotation%20with%20Highest%20Score/README_EN.md", "title_cn": "\u5f97\u5206\u6700\u9ad8\u7684\u6700\u5c0f\u8f6e\u8c03", "title_en": "Smallest Rotation with Highest Score", "question_title_slug": "smallest-rotation-with-highest-score", "content_en": "<p>&nbsp;Given an array <code>A</code>, we may rotate it by a non-negative integer <code>K</code> so that the array becomes <code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>.&nbsp; Afterward, any entries that are less than or equal to their index are worth 1 point.&nbsp;</p>\r\n\r\n<p>For example, if we have <code>[2, 4, 1, 3, 0]</code>, and we rotate by <code>K = 2</code>, it becomes <code>[1, 3, 0, 2, 4]</code>.&nbsp; This is worth 3 points because 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point].</p>\r\n\r\n<p>Over all possible rotations, return the rotation index K that corresponds to the highest score we could receive.&nbsp; If there are multiple answers, return the smallest such index K.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [2, 3, 1, 4, 0]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong> \r\nScores for each K are listed below: \r\nK = 0,  A = [2,3,1,4,0],    score 2\r\nK = 1,  A = [3,1,4,0,2],    score 3\r\nK = 2,  A = [1,4,0,2,3],    score 3\r\nK = 3,  A = [4,0,2,3,1],    score 4\r\nK = 4,  A = [0,2,3,1,4],    score 3\r\n</pre>\r\n\r\n<p>So we should choose K = 3, which has the highest score.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [1, 3, 0, 2, 4]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation: </strong> A will always have 3 points no matter how it shifts.\r\nSo we will choose the smallest K, which is 0.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code>&nbsp;will have&nbsp;length at most <code>20000</code>.</li>\r\n\t<li><code>A[i]</code> will be in the range <code>[0, A.length]</code>.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u6309\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <code>K</code>&nbsp;\u8fdb\u884c\u8f6e\u8c03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6570\u7ec4\u53d8\u4e3a&nbsp;<code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>&nbsp;\u7684\u5f62\u5f0f\u3002\u6b64\u540e\uff0c\u4efb\u4f55\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u7d22\u5f15\u7684\u9879\u90fd\u53ef\u4ee5\u8bb0\u4f5c\u4e00\u5206\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u6570\u7ec4\u4e3a&nbsp;<code>[2, 4, 1, 3, 0]</code>\uff0c\u6211\u4eec\u6309&nbsp;<code>K = 2</code>&nbsp;\u8fdb\u884c\u8f6e\u8c03\u540e\uff0c\u5b83\u5c06\u53d8\u6210&nbsp;<code>[1, 3, 0, 2, 4]</code>\u3002\u8fd9\u5c06\u8bb0\u4f5c 3 \u5206\uff0c\u56e0\u4e3a 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point]\u3002</p>\n\n<p>\u5728\u6240\u6709\u53ef\u80fd\u7684\u8f6e\u8c03\u4e2d\uff0c\u8fd4\u56de\u6211\u4eec\u6240\u80fd\u5f97\u5230\u7684\u6700\u9ad8\u5206\u6570\u5bf9\u5e94\u7684\u8f6e\u8c03\u7d22\u5f15 K\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7684\u7d22\u5f15 K\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2, 3, 1, 4, 0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4e0b\u9762\u5217\u51fa\u4e86\u6bcf\u4e2a K \u7684\u5f97\u5206\uff1a\nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\n\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u9009\u62e9&nbsp;K = 3\uff0c\u5f97\u5206\u6700\u9ad8\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1, 3, 0, 2, 4]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\nA \u65e0\u8bba\u600e\u4e48\u53d8\u5316\u603b\u662f\u6709 3 \u5206\u3002\n\u6240\u4ee5\u6211\u4eec\u5c06\u9009\u62e9\u6700\u5c0f\u7684 K\uff0c\u5373 0\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>A</code>&nbsp;\u7684\u957f\u5ea6\u6700\u5927\u4e3a&nbsp;<code>20000</code>\u3002</li>\n\t<li><code>A[i]</code> \u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;<code>[0, A.length]</code>\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int bestRotation(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int bestRotation(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def bestRotation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def bestRotation(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint bestRotation(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BestRotation(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar bestRotation = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef best_rotation(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func bestRotation(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func bestRotation(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def bestRotation(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun bestRotation(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn best_rotation(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function bestRotation($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function bestRotation(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0815", "frontend_question_id": "0799", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/champagne-tower", "url_en": "https://leetcode.com/problems/champagne-tower", "relative_path_cn": "/leetcode/0700-0799/0799.Champagne%20Tower/README.md", "relative_path_en": "/leetcode/0700-0799/0799.Champagne%20Tower/README_EN.md", "title_cn": "\u9999\u69df\u5854", "title_en": "Champagne Tower", "question_title_slug": "champagne-tower", "content_en": "<p>We stack glasses in a pyramid, where the <strong>first</strong> row has <code>1</code> glass, the <strong>second</strong> row has <code>2</code> glasses, and so on until the 100<sup>th</sup> row.&nbsp; Each glass holds one cup&nbsp;of champagne.</p>\r\n\r\n<p>Then, some champagne is poured into the first glass at the top.&nbsp; When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.&nbsp; When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.&nbsp; (A glass at the bottom row has its excess champagne fall on the floor.)</p>\r\n\r\n<p>For example, after one cup of champagne is poured, the top most glass is full.&nbsp; After two cups of champagne are poured, the two glasses on the second row are half full.&nbsp; After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.&nbsp; After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height: 241px; width: 350px;\" /></p>\r\n\r\n<p>Now after pouring some non-negative integer cups of champagne, return how full the <code>j<sup>th</sup></code> glass in the <code>i<sup>th</sup></code> row is (both <code>i</code> and <code>j</code> are 0-indexed.)</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 1, query_row = 1, query_glass = 1\r\n<strong>Output:</strong> 0.00000\r\n<strong>Explanation:</strong> We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 2, query_row = 1, query_glass = 1\r\n<strong>Output:</strong> 0.50000\r\n<strong>Explanation:</strong> We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 100000009, query_row = 33, query_glass = 17\r\n<strong>Output:</strong> 1.00000\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;=&nbsp;poured &lt;= 10<sup>9</sup></code></li>\r\n\t<li><code>0 &lt;= query_glass &lt;= query_row&nbsp;&lt; 100</code></li>\r\n</ul>", "content_cn": "<p>\u6211\u4eec\u628a\u73bb\u7483\u676f\u6446\u6210\u91d1\u5b57\u5854\u7684\u5f62\u72b6\uff0c\u5176\u4e2d\u7b2c\u4e00\u5c42\u67091\u4e2a\u73bb\u7483\u676f\uff0c\u7b2c\u4e8c\u5c42\u67092\u4e2a\uff0c\u4f9d\u6b21\u7c7b\u63a8\u5230\u7b2c100\u5c42\uff0c\u6bcf\u4e2a\u73bb\u7483\u676f(250ml)\u5c06\u76db\u6709\u9999\u69df\u3002</p>\n\n<p>\u4ece\u9876\u5c42\u7684\u7b2c\u4e00\u4e2a\u73bb\u7483\u676f\u5f00\u59cb\u503e\u5012\u4e00\u4e9b\u9999\u69df\uff0c\u5f53\u9876\u5c42\u7684\u676f\u5b50\u6ee1\u4e86\uff0c\u4efb\u4f55\u6ea2\u51fa\u7684\u9999\u69df\u90fd\u4f1a\u7acb\u523b\u7b49\u6d41\u91cf\u7684\u6d41\u5411\u5de6\u53f3\u4e24\u4fa7\u7684\u73bb\u7483\u676f\u3002\u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u676f\u5b50\u4e5f\u6ee1\u4e86\uff0c\u5c31\u4f1a\u7b49\u6d41\u91cf\u7684\u6d41\u5411\u5b83\u4eec\u5de6\u53f3\u4e24\u8fb9\u7684\u676f\u5b50\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\uff08\u5f53\u6700\u5e95\u5c42\u7684\u73bb\u7483\u676f\u6ee1\u4e86\uff0c\u9999\u69df\u4f1a\u6d41\u5230\u5730\u677f\u4e0a\uff09</p>\n\n<p>\u4f8b\u5982\uff0c\u5728\u503e\u5012\u4e00\u676f\u9999\u69df\u540e\uff0c\u6700\u9876\u5c42\u7684\u73bb\u7483\u676f\u6ee1\u4e86\u3002\u503e\u5012\u4e86\u4e24\u676f\u9999\u69df\u540e\uff0c\u7b2c\u4e8c\u5c42\u7684\u4e24\u4e2a\u73bb\u7483\u676f\u5404\u81ea\u76db\u653e\u4e00\u534a\u7684\u9999\u69df\u3002\u5728\u5012\u4e09\u676f\u9999\u69df\u540e\uff0c\u7b2c\u4e8c\u5c42\u7684\u9999\u69df\u6ee1\u4e86 - \u6b64\u65f6\u603b\u5171\u6709\u4e09\u4e2a\u6ee1\u7684\u73bb\u7483\u676f\u3002\u5728\u5012\u7b2c\u56db\u676f\u540e\uff0c\u7b2c\u4e09\u5c42\u4e2d\u95f4\u7684\u73bb\u7483\u676f\u76db\u653e\u4e86\u4e00\u534a\u7684\u9999\u69df\uff0c\u4ed6\u4e24\u8fb9\u7684\u73bb\u7483\u676f\u5404\u81ea\u76db\u653e\u4e86\u56db\u5206\u4e4b\u4e00\u7684\u9999\u69df\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height:200px; width:290px\" /></p>\n\n<p>\u73b0\u5728\u5f53\u503e\u5012\u4e86\u975e\u8d1f\u6574\u6570\u676f\u9999\u69df\u540e\uff0c\u8fd4\u56de\u7b2c i \u884c j \u4e2a\u73bb\u7483\u676f\u6240\u76db\u653e\u7684\u9999\u69df\u5360\u73bb\u7483\u676f\u5bb9\u79ef\u7684\u6bd4\u4f8b\uff08i \u548c j\u90fd\u4ece0\u5f00\u59cb\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> poured(\u503e\u5012\u9999\u69df\u603b\u676f\u6570) = 1, query_glass(\u676f\u5b50\u7684\u4f4d\u7f6e\u6570) = 1, query_row(\u884c\u6570) = 1\n<strong>\u8f93\u51fa:</strong> 0.0\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5728\u9876\u5c42\uff08\u4e0b\u6807\u662f\uff080\uff0c0\uff09\uff09\u5012\u4e86\u4e00\u676f\u9999\u69df\u540e\uff0c\u6ca1\u6709\u6ea2\u51fa\uff0c\u56e0\u6b64\u6240\u6709\u5728\u9876\u5c42\u4ee5\u4e0b\u7684\u73bb\u7483\u676f\u90fd\u662f\u7a7a\u7684\u3002\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> poured(\u503e\u5012\u9999\u69df\u603b\u676f\u6570) = 2, query_glass(\u676f\u5b50\u7684\u4f4d\u7f6e\u6570) = 1, query_row(\u884c\u6570) = 1\n<strong>\u8f93\u51fa:</strong> 0.5\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5728\u9876\u5c42\uff08\u4e0b\u6807\u662f\uff080\uff0c0\uff09\u5012\u4e86\u4e24\u676f\u9999\u69df\u540e\uff0c\u6709\u4e00\u676f\u91cf\u7684\u9999\u69df\u5c06\u4ece\u9876\u5c42\u6ea2\u51fa\uff0c\u4f4d\u4e8e\uff081\uff0c0\uff09\u7684\u73bb\u7483\u676f\u548c\uff081\uff0c1\uff09\u7684\u73bb\u7483\u676f\u5e73\u5206\u4e86\u8fd9\u4e00\u676f\u9999\u69df\uff0c\u6240\u4ee5\u6bcf\u4e2a\u73bb\u7483\u676f\u6709\u4e00\u534a\u7684\u9999\u69df\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>poured</code>&nbsp;\u7684\u8303\u56f4<code>[0, 10 ^ 9]</code>\u3002</li>\n\t<li><code>query_glass</code>&nbsp;\u548c<code>query_row</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[0, 99]</code>\u3002</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    double champagneTower(int poured, int query_row, int query_glass) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double champagneTower(int poured, int query_row, int query_glass) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def champagneTower(self, poured, query_row, query_glass):\n        \"\"\"\n        :type poured: int\n        :type query_row: int\n        :type query_glass: int\n        :rtype: float\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\ndouble champagneTower(int poured, int query_row, int query_glass){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double ChampagneTower(int poured, int query_row, int query_glass) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function(poured, query_row, query_glass) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} poured\n# @param {Integer} query_row\n# @param {Integer} query_glass\n# @return {Float}\ndef champagne_tower(poured, query_row, query_glass)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func champagneTower(_ poured: Int, _ query_row: Int, _ query_glass: Int) -> Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func champagneTower(poured int, query_row int, query_glass int) float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def champagneTower(poured: Int, query_row: Int, query_glass: Int): Double = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun champagneTower(poured: Int, query_row: Int, query_glass: Int): Double {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn champagne_tower(poured: i32, query_row: i32, query_glass: i32) -> f64 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $poured\n     * @param Integer $query_row\n     * @param Integer $query_glass\n     * @return Float\n     */\n    function champagneTower($poured, $query_row, $query_glass) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function champagneTower(poured: number, query_row: number, query_glass: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}]}