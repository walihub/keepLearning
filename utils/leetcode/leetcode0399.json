{"leetcode": [{"question_id": "0300", "frontend_question_id": "0300", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-increasing-subsequence", "url_en": "https://leetcode.com/problems/longest-increasing-subsequence", "relative_path_cn": "/leetcode/0300-0399/0300.Longest%20Increasing%20Subsequence/README.md", "relative_path_en": "/leetcode/0300-0399/0300.Longest%20Increasing%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217", "title_en": "Longest Increasing Subsequence", "question_title_slug": "longest-increasing-subsequence", "content_en": "<p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b></p>\n\n<ul>\n\t<li>Could you come up with the <code>O(n<sup>2</sup>)</code> solution?</li>\n\t<li>Could you improve it to <code>O(n log(n))</code> time complexity?</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c<code>[3,6,2,7]</code> \u662f\u6570\u7ec4 <code>[0,3,1,6,2,2,7]</code> \u7684\u5b50\u5e8f\u5217\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [10,9,2,5,3,7,101,18]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0,1,0,3,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [7,7,7,7,7,7,7]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 2500</code></li>\n\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><b>\u8fdb\u9636\uff1a</b></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u8bbe\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n<sup>2</sup>)</code> \u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li>\n\t<li>\u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u00a0<code>O(n log(n))</code> \u5417?</li>\n</ul>\n", "tags_en": ["Binary Search", "Dynamic Programming"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint lengthOfLIS(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthOfLIS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef length_of_lis(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthOfLIS(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthOfLIS(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthOfLIS(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_of_lis(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function lengthOfLIS($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthOfLIS(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0301", "frontend_question_id": "0301", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-invalid-parentheses", "url_en": "https://leetcode.com/problems/remove-invalid-parentheses", "relative_path_cn": "/leetcode/0300-0399/0301.Remove%20Invalid%20Parentheses/README.md", "relative_path_en": "/leetcode/0300-0399/0301.Remove%20Invalid%20Parentheses/README_EN.md", "title_cn": "\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7", "title_en": "Remove Invalid Parentheses", "question_title_slug": "remove-invalid-parentheses", "content_en": "<p>Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;The input string may contain letters other than the parentheses <code>(</code> and <code>)</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;()())()&quot;\r\n<b>Output:</b> [&quot;()()()&quot;, &quot;(())()&quot;]\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;(a)())()&quot;\r\n<b>Output:</b> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;)(&quot;\r\n<b>Output: </b>[&quot;&quot;]\r\n</pre>", "content_cn": "<p>\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong> \u8f93\u5165\u53ef\u80fd\u5305\u542b\u4e86\u9664&nbsp;<code>(</code>&nbsp;\u548c&nbsp;<code>)</code>&nbsp;\u4ee5\u5916\u7684\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;()()()&quot;, &quot;(())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(a)())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;)(&quot;\n<strong>\u8f93\u51fa: </strong>[&quot;&quot;]</pre>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> removeInvalidParentheses(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> removeInvalidParentheses(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** removeInvalidParentheses(char * s, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> RemoveInvalidParentheses(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar removeInvalidParentheses = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String[]}\ndef remove_invalid_parentheses(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeInvalidParentheses(_ s: String) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeInvalidParentheses(s string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeInvalidParentheses(s: String): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeInvalidParentheses(s: String): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_invalid_parentheses(s: String) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function removeInvalidParentheses($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeInvalidParentheses(s: string): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0302", "frontend_question_id": "0302", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/smallest-rectangle-enclosing-black-pixels", "url_en": "https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels", "relative_path_cn": "/leetcode/0300-0399/0302.Smallest%20Rectangle%20Enclosing%20Black%20Pixels/README.md", "relative_path_en": "/leetcode/0300-0399/0302.Smallest%20Rectangle%20Enclosing%20Black%20Pixels/README_EN.md", "title_cn": "\u5305\u542b\u5168\u90e8\u9ed1\u8272\u50cf\u7d20\u7684\u6700\u5c0f\u77e9\u5f62", "title_en": "Smallest Rectangle Enclosing Black Pixels", "question_title_slug": "smallest-rectangle-enclosing-black-pixels", "content_en": null, "content_cn": null, "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0303", "frontend_question_id": "0303", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-sum-query-immutable", "url_en": "https://leetcode.com/problems/range-sum-query-immutable", "relative_path_cn": "/leetcode/0300-0399/0303.Range%20Sum%20Query%20-%20Immutable/README.md", "relative_path_en": "/leetcode/0300-0399/0303.Range%20Sum%20Query%20-%20Immutable/README_EN.md", "title_cn": "\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8", "title_en": "Range Sum Query - Immutable", "question_title_slug": "range-sum-query-immutable", "content_en": "<p>Given an integer array <code>nums</code>, find the sum of the elements between indices <code>i</code> and <code>j</code> <code>(i &le; j)</code>, inclusive.</p>\n\n<p>Implement the&nbsp;<code>NumArray</code> class:</p>\n\n<ul>\n\t<li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>int sumRange(int i, int j)</code> Return the sum of the elements of the <code>nums</code> array in the range <code>[i, j]</code> inclusive (i.e., <code>sum(nums[i], nums[i + 1], ... , nums[j])</code>)</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n<strong>Output</strong>\n[null, 1, -1, -3]\n\n<strong>Explanation</strong>\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)\nnumArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) \nnumArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= nums[i] &lt;=&nbsp;10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= i &lt;= j &lt; nums.length</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRange</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 \u00a0<code>nums</code>\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15\u00a0<code>i</code><em>\u00a0</em>\u5230\u00a0<code>j</code><em>\uff08</em><code>i\u00a0\u2264\u00a0j</code>\uff09\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b\u00a0<code>i</code>\u3001<code>j\u00a0</code>\u4e24\u70b9\u3002</p>\n\n<div class=\"original__bRMd\">\n<div>\n<p>\u5b9e\u73b0 <code>NumArray</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>NumArray(int[] nums)</code> \u4f7f\u7528\u6570\u7ec4 <code>nums</code> \u521d\u59cb\u5316\u5bf9\u8c61</li>\n\t<li><code>int sumRange(int i, int j)</code> \u8fd4\u56de\u6570\u7ec4 <code>nums</code> \u4ece\u7d22\u5f15\u00a0<code>i</code><em>\u00a0</em>\u5230\u00a0<code>j</code><em>\uff08</em><code>i\u00a0\u2264\u00a0j</code>\uff09\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b\u00a0<code>i</code>\u3001<code>j\u00a0</code>\u4e24\u70b9\uff08\u4e5f\u5c31\u662f <code>sum(nums[i], nums[i + 1], ... , nums[j])</code>\uff09</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n<strong>\u8f93\u51fa\uff1a\n</strong>[null, 1, -1, -3]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)\nnumArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) \nnumArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup>\u00a0<= nums[i] <=\u00a010<sup>5</sup></code></li>\n\t<li><code>0 <= i <= j < nums.length</code></li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>10<sup>4</sup></code> \u6b21 <code>sumRange</code><strong> </strong>\u65b9\u6cd5</li>\n</ul>\n</div>\n</div>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n\n    }\n    \n    int sumRange(int i, int j) {\n\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * int param_1 = obj->sumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class NumArray {\n\n    public NumArray(int[] nums) {\n\n    }\n    \n    public int sumRange(int i, int j) {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n\n\n    def sumRange(self, i: int, j: int) -> int:\n\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n\n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n\n}\n\nvoid numArrayFree(NumArray* obj) {\n\n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, i, j);\n \n * numArrayFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class NumArray {\n\n    public NumArray(int[] nums) {\n\n    }\n    \n    public int SumRange(int i, int j) {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.SumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n\n};\n\n/** \n * @param {number} i \n * @param {number} j\n * @return {number}\n */\nNumArray.prototype.sumRange = function(i, j) {\n\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class NumArray\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n\n    end\n\n\n=begin\n    :type i: Integer\n    :type j: Integer\n    :rtype: Integer\n=end\n    def sum_range(i, j)\n\n    end\n\n\nend\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray.new(nums)\n# param_1 = obj.sum_range(i, j)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func sumRange(_ i: Int, _ j: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * let ret_1: Int = obj.sumRange(i, j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type NumArray struct {\n\n}\n\n\nfunc Constructor(nums []int) NumArray {\n\n}\n\n\nfunc (this *NumArray) SumRange(i int, j int) int {\n\n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.SumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class NumArray(_nums: Array[Int]) {\n\n    def sumRange(i: Int, j: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class NumArray(nums: IntArray) {\n\n    fun sumRange(i: Int, j: Int): Int {\n\n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct NumArray {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumArray {\n\n    fn new(nums: Vec<i32>) -> Self {\n\n    }\n    \n    fn sum_range(&self, i: i32, j: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray::new(nums);\n * let ret_1: i32 = obj.sum_range(i, j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n\n    }\n\n    /**\n     * @param Integer $i\n     * @param Integer $j\n     * @return Integer\n     */\n    function sumRange($i, $j) {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * $obj = NumArray($nums);\n * $ret_1 = $obj->sumRange($i, $j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class NumArray {\n    constructor(nums: number[]) {\n\n    }\n\n    sumRange(i: number, j: number): number {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0304", "frontend_question_id": "0304", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-sum-query-2d-immutable", "url_en": "https://leetcode.com/problems/range-sum-query-2d-immutable", "relative_path_cn": "/leetcode/0300-0399/0304.Range%20Sum%20Query%202D%20-%20Immutable/README.md", "relative_path_en": "/leetcode/0300-0399/0304.Range%20Sum%20Query%202D%20-%20Immutable/README_EN.md", "title_cn": "\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8", "title_en": "Range Sum Query 2D - Immutable", "question_title_slug": "range-sum-query-2d-immutable", "content_en": "<p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p>\r\n\r\n<p>\r\n<img src=\"/static/images/courses/range_sum_query_2d.png\" border=\"0\" alt=\"Range Sum Query 2D\" /><br />\r\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\r\n</p>\r\n\r\n<p><b>Example:</b><br>\r\n<pre>\r\nGiven matrix = [\r\n  [3, 0, 1, 4, 2],\r\n  [5, 6, 3, 2, 1],\r\n  [1, 2, 0, 1, 5],\r\n  [4, 1, 0, 1, 7],\r\n  [1, 0, 3, 0, 5]\r\n]\r\n\r\nsumRegion(2, 1, 4, 3) -> 8\r\nsumRegion(1, 1, 2, 2) -> 11\r\nsumRegion(1, 2, 2, 4) -> 12\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that the matrix does not change.</li>\r\n<li>There are many calls to <i>sumRegion</i> function.</li>\r\n<li>You may assume that <i>row</i>1 &le; <i>row</i>2 and <i>col</i>1 &le; <i>col</i>2.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u4e3a (<em>row</em>1,&nbsp;<em>col</em>1) \uff0c\u53f3\u4e0b\u89d2\u4e3a (<em>row</em>2,&nbsp;<em>col</em>2)\u3002</p>\n\n<p><img alt=\"Range Sum Query 2D\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/images/304.png\" style=\"width: 130px;\"><br>\n<small>\u4e0a\u56fe\u5b50\u77e9\u9635\u5de6\u4e0a\u89d2&nbsp;(row1, col1) = <strong>(2, 1)</strong>&nbsp;\uff0c\u53f3\u4e0b\u89d2(row2, col2) = <strong>(4, 3)\uff0c</strong>\u8be5\u5b50\u77e9\u5f62\u5185\u5143\u7d20\u7684\u603b\u548c\u4e3a 8\u3002</small></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u4e0d\u53ef\u53d8\u3002</li>\n\t<li>\u4f1a\u591a\u6b21\u8c03\u7528&nbsp;<em>sumRegion&nbsp;</em>\u65b9\u6cd5<em>\u3002</em></li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em>row</em>1 &le; <em>row</em>2 \u4e14&nbsp;<em>col</em>1 &le; <em>col</em>2\u3002</li>\n</ol>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class NumMatrix {\npublic:\n    NumMatrix(vector<vector<int>>& matrix) {\n\n    }\n    \n    int sumRegion(int row1, int col1, int row2, int col2) {\n\n    }\n};\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix* obj = new NumMatrix(matrix);\n * int param_1 = obj->sumRegion(row1,col1,row2,col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class NumMatrix {\n\n    public NumMatrix(int[][] matrix) {\n\n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class NumMatrix(object):\n\n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n\n\n    def sumRegion(self, row1, col1, row2, col2):\n        \"\"\"\n        :type row1: int\n        :type col1: int\n        :type row2: int\n        :type col2: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your NumMatrix object will be instantiated and called as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n\n\n\n# Your NumMatrix object will be instantiated and called as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} NumMatrix;\n\n\nNumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {\n\n}\n\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\n\n}\n\nvoid numMatrixFree(NumMatrix* obj) {\n\n}\n\n/**\n * Your NumMatrix struct will be instantiated and called as such:\n * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);\n * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);\n \n * numMatrixFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class NumMatrix {\n\n    public NumMatrix(int[][] matrix) {\n\n    }\n    \n    public int SumRegion(int row1, int col1, int row2, int col2) {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.SumRegion(row1,col1,row2,col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n */\nvar NumMatrix = function(matrix) {\n\n};\n\n/** \n * @param {number} row1 \n * @param {number} col1 \n * @param {number} row2 \n * @param {number} col2\n * @return {number}\n */\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\n\n};\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class NumMatrix\n\n=begin\n    :type matrix: Integer[][]\n=end\n    def initialize(matrix)\n\n    end\n\n\n=begin\n    :type row1: Integer\n    :type col1: Integer\n    :type row2: Integer\n    :type col2: Integer\n    :rtype: Integer\n=end\n    def sum_region(row1, col1, row2, col2)\n\n    end\n\n\nend\n\n# Your NumMatrix object will be instantiated and called as such:\n# obj = NumMatrix.new(matrix)\n# param_1 = obj.sum_region(row1, col1, row2, col2)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass NumMatrix {\n\n    init(_ matrix: [[Int]]) {\n        \n    }\n    \n    func sumRegion(_ row1: Int, _ col1: Int, _ row2: Int, _ col2: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * let obj = NumMatrix(matrix)\n * let ret_1: Int = obj.sumRegion(row1, col1, row2, col2)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type NumMatrix struct {\n\n}\n\n\nfunc Constructor(matrix [][]int) NumMatrix {\n\n}\n\n\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\n\n}\n\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * obj := Constructor(matrix);\n * param_1 := obj.SumRegion(row1,col1,row2,col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class NumMatrix(_matrix: Array[Array[Int]]) {\n\n    def sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class NumMatrix(matrix: Array<IntArray>) {\n\n    fun sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int {\n\n    }\n\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct NumMatrix {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumMatrix {\n\n    fn new(matrix: Vec<Vec<i32>>) -> Self {\n\n    }\n    \n    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * let obj = NumMatrix::new(matrix);\n * let ret_1: i32 = obj.sum_region(row1, col1, row2, col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class NumMatrix {\n    /**\n     * @param Integer[][] $matrix\n     */\n    function __construct($matrix) {\n        \n    }\n  \n    /**\n     * @param Integer $row1\n     * @param Integer $col1\n     * @param Integer $row2\n     * @param Integer $col2\n     * @return Integer\n     */\n    function sumRegion($row1, $col1, $row2, $col2) {\n        \n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * $obj = NumMatrix($matrix);\n * $ret_1 = $obj->sumRegion($row1, $col1, $row2, $col2);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class NumMatrix {\n    constructor(matrix: number[][]) {\n\n    }\n\n    sumRegion(row1: number, col1: number, row2: number, col2: number): number {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0305", "frontend_question_id": "0305", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/number-of-islands-ii", "url_en": "https://leetcode.com/problems/number-of-islands-ii", "relative_path_cn": "/leetcode/0300-0399/0305.Number%20of%20Islands%20II/README.md", "relative_path_en": "/leetcode/0300-0399/0305.Number%20of%20Islands%20II/README_EN.md", "title_cn": "\u5c9b\u5c7f\u6570\u91cf II", "title_en": "Number of Islands II", "question_title_slug": "number-of-islands-ii", "content_en": null, "content_cn": null, "tags_en": ["Union Find"], "tags_cn": ["\u5e76\u67e5\u96c6"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0306", "frontend_question_id": "0306", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/additive-number", "url_en": "https://leetcode.com/problems/additive-number", "relative_path_cn": "/leetcode/0300-0399/0306.Additive%20Number/README.md", "relative_path_en": "/leetcode/0300-0399/0306.Additive%20Number/README_EN.md", "title_cn": "\u7d2f\u52a0\u6570", "title_en": "Additive Number", "question_title_slug": "additive-number", "content_en": "<p>Additive number is a string whose digits can form additive sequence.</p>\n\n<p>A valid additive sequence should contain <b>at least</b> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\n\n<p>Given a string containing only digits <code>&#39;0&#39;-&#39;9&#39;</code>, write a function to determine if it&#39;s an additive number.</p>\n\n<p><b>Note:</b> Numbers in the additive sequence <b>cannot</b> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;112358&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n&nbsp;            1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;199100199&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The additive sequence is: 1, 99, 100, 199.&nbsp;\n&nbsp;            1 + 99 = 100, 99 + 100 = 199\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><font face=\"monospace\"><code>num</code>&nbsp;</font>consists only of digits <code>&#39;0&#39;-&#39;9&#39;</code>.</li>\n\t<li><code>1 &lt;= num.length &lt;= 35</code></li>\n</ul>\n\n<p><b>Follow up:</b><br />\nHow would you handle overflow for very large input integers?</p>\n", "content_cn": "<p>\u7d2f\u52a0\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ec4\u6210\u5b83\u7684\u6570\u5b57\u53ef\u4ee5\u5f62\u6210\u7d2f\u52a0\u5e8f\u5217\u3002</p>\n\n<p>\u4e00\u4e2a\u6709\u6548\u7684\u7d2f\u52a0\u5e8f\u5217\u5fc5\u987b<strong>\u81f3\u5c11</strong>\u5305\u542b 3 \u4e2a\u6570\u3002\u9664\u4e86\u6700\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u6570\u90fd\u7b49\u4e8e\u5b83\u4e4b\u524d\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>&#39;0&#39;-&#39;9&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u7ed9\u5b9a\u8f93\u5165\u662f\u5426\u662f\u7d2f\u52a0\u6570\u3002</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u7d2f\u52a0\u5e8f\u5217\u91cc\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0&nbsp;<code>1, 2, 03</code> \u6216\u8005&nbsp;<code>1, 02, 3</code>&nbsp;\u7684\u60c5\u51b5\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;112358&quot;</code>\n<strong>\u8f93\u51fa:</strong> true \n<strong>\u89e3\u91ca: </strong>\u7d2f\u52a0\u5e8f\u5217\u4e3a: <code>1, 1, 2, 3, 5, 8 </code>\u30021 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;199100199&quot;</code>\n<strong>\u8f93\u51fa:</strong> true \n<strong>\u89e3\u91ca: </strong>\u7d2f\u52a0\u5e8f\u5217\u4e3a: <code>1, 99, 100, 199\u3002</code>1 + 99 = 100, 99 + 100 = 199</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u6ea2\u51fa\u7684\u8fc7\u5927\u7684\u6574\u6570\u8f93\u5165?</p>\n", "tags_en": ["Backtracking"], "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isAdditiveNumber(string num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isAdditiveNumber(String num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isAdditiveNumber(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isAdditiveNumber(char * num){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsAdditiveNumber(string num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @return {boolean}\n */\nvar isAdditiveNumber = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @return {Boolean}\ndef is_additive_number(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isAdditiveNumber(_ num: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isAdditiveNumber(num string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isAdditiveNumber(num: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isAdditiveNumber(num: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_additive_number(num: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Boolean\n     */\n    function isAdditiveNumber($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isAdditiveNumber(num: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0307", "frontend_question_id": "0307", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-sum-query-mutable", "url_en": "https://leetcode.com/problems/range-sum-query-mutable", "relative_path_cn": "/leetcode/0300-0399/0307.Range%20Sum%20Query%20-%20Mutable/README.md", "relative_path_en": "/leetcode/0300-0399/0307.Range%20Sum%20Query%20-%20Mutable/README_EN.md", "title_cn": "\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539", "title_en": "Range Sum Query - Mutable", "question_title_slug": "range-sum-query-mutable", "content_en": "<p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> &le; <i>j</i>), inclusive.</p>\n\n<p>The <i>update(i, val)</i> function modifies <i>nums</i> by updating the element at index <i>i</i> to <i>val</i>.</p>\n\n<p><b>Example:</b></p>\n\n<pre>\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The array is only modifiable by the <i>update</i> function.</li>\n\t<li>You may assume the number of calls to <i>update</i> and <i>sumRange</i> function is distributed evenly.</li>\n\t<li><code>0 &lt;= i &lt;= j &lt;= nums.length - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 &nbsp;<em>nums</em>\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15&nbsp;<em>i&nbsp;</em>\u5230&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b&nbsp;<em>i,&nbsp; j&nbsp;</em>\u4e24\u70b9\u3002</p>\n\n<p><em>update(i, val)</em> \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a&nbsp;<em>i&nbsp;</em>\u7684\u6570\u503c\u66f4\u65b0\u4e3a&nbsp;<em>val</em>\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728&nbsp;<em>update&nbsp;</em>\u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <em>update</em> \u51fd\u6570\u4e0e <em>sumRange</em> \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u662f\u5747\u5300\u5206\u5e03\u7684\u3002</li>\n</ol>\n", "tags_en": ["Binary Indexed Tree", "Segment Tree"], "tags_cn": ["\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n\n    }\n    \n    void update(int i, int val) {\n\n    }\n    \n    int sumRange(int i, int j) {\n\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(i,val);\n * int param_2 = obj->sumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class NumArray {\n\n    public NumArray(int[] nums) {\n\n    }\n    \n    public void update(int i, int val) {\n\n    }\n    \n    public int sumRange(int i, int j) {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(i,val);\n * int param_2 = obj.sumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n\n\n    def update(self, i, val):\n        \"\"\"\n        :type i: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(i,val)\n# param_2 = obj.sumRange(i,j)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n\n\n    def update(self, i: int, val: int) -> None:\n\n\n    def sumRange(self, i: int, j: int) -> int:\n\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(i,val)\n# param_2 = obj.sumRange(i,j)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} NumArray;\n\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n\n}\n\nvoid numArrayUpdate(NumArray* obj, int i, int val) {\n\n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n\n}\n\nvoid numArrayFree(NumArray* obj) {\n\n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * NumArray* obj = numArrayCreate(nums, numsSize);\n * numArrayUpdate(obj, i, val);\n \n * int param_2 = numArraySumRange(obj, i, j);\n \n * numArrayFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class NumArray {\n\n    public NumArray(int[] nums) {\n\n    }\n    \n    public void Update(int i, int val) {\n\n    }\n    \n    public int SumRange(int i, int j) {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.Update(i,val);\n * int param_2 = obj.SumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n\n};\n\n/** \n * @param {number} i \n * @param {number} val\n * @return {void}\n */\nNumArray.prototype.update = function(i, val) {\n\n};\n\n/** \n * @param {number} i \n * @param {number} j\n * @return {number}\n */\nNumArray.prototype.sumRange = function(i, j) {\n\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(i,val)\n * var param_2 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class NumArray\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n\n    end\n\n\n=begin\n    :type i: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def update(i, val)\n\n    end\n\n\n=begin\n    :type i: Integer\n    :type j: Integer\n    :rtype: Integer\n=end\n    def sum_range(i, j)\n\n    end\n\n\nend\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray.new(nums)\n# obj.update(i, val)\n# param_2 = obj.sum_range(i, j)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func update(_ i: Int, _ val: Int) {\n        \n    }\n    \n    func sumRange(_ i: Int, _ j: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * obj.update(i, val)\n * let ret_2: Int = obj.sumRange(i, j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type NumArray struct {\n\n}\n\n\nfunc Constructor(nums []int) NumArray {\n\n}\n\n\nfunc (this *NumArray) Update(i int, val int)  {\n\n}\n\n\nfunc (this *NumArray) SumRange(i int, j int) int {\n\n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * obj.Update(i,val);\n * param_2 := obj.SumRange(i,j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class NumArray(_nums: Array[Int]) {\n\n    def update(i: Int, `val`: Int) {\n\n    }\n\n    def sumRange(i: Int, j: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(i,`val`)\n * var param_2 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class NumArray(nums: IntArray) {\n\n    fun update(i: Int, `val`: Int) {\n\n    }\n\n    fun sumRange(i: Int, j: Int): Int {\n\n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * obj.update(i,`val`)\n * var param_2 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct NumArray {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NumArray {\n\n    fn new(nums: Vec<i32>) -> Self {\n\n    }\n    \n    fn update(&self, i: i32, val: i32) {\n\n    }\n    \n    fn sum_range(&self, i: i32, j: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray::new(nums);\n * obj.update(i, val);\n * let ret_2: i32 = obj.sum_range(i, j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class NumArray {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $i\n     * @param Integer $val\n     * @return NULL\n     */\n    function update($i, $val) {\n        \n    }\n  \n    /**\n     * @param Integer $i\n     * @param Integer $j\n     * @return Integer\n     */\n    function sumRange($i, $j) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * $obj = NumArray($nums);\n * $obj->update($i, $val);\n * $ret_2 = $obj->sumRange($i, $j);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class NumArray {\n    constructor(nums: number[]) {\n\n    }\n\n    update(i: number, val: number): void {\n\n    }\n\n    sumRange(i: number, j: number): number {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * obj.update(i,val)\n * var param_2 = obj.sumRange(i,j)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0308", "frontend_question_id": "0308", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/range-sum-query-2d-mutable", "url_en": "https://leetcode.com/problems/range-sum-query-2d-mutable", "relative_path_cn": "/leetcode/0300-0399/0308.Range%20Sum%20Query%202D%20-%20Mutable/README.md", "relative_path_en": "/leetcode/0300-0399/0308.Range%20Sum%20Query%202D%20-%20Mutable/README_EN.md", "title_cn": "\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u53ef\u53d8", "title_en": "Range Sum Query 2D - Mutable", "question_title_slug": "range-sum-query-2d-mutable", "content_en": null, "content_cn": null, "tags_en": ["Binary Indexed Tree", "Segment Tree"], "tags_cn": ["\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0309", "frontend_question_id": "0309", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown", "url_en": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown", "relative_path_cn": "/leetcode/0300-0399/0309.Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Cooldown/README.md", "relative_path_en": "/leetcode/0300-0399/0309.Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Cooldown/README_EN.md", "title_cn": "\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f", "title_en": "Best Time to Buy and Sell Stock with Cooldown", "question_title_slug": "best-time-to-buy-and-sell-stock-with-cooldown", "content_en": "<p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\r\n\r\n<ul>\r\n\t<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\r\n\t<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,0,2]\r\n<strong>Output: </strong>3 \r\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\r\n</pre>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c<em>&nbsp;i</em>&nbsp;\u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c&nbsp;<em>i</em>&nbsp;\u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002\u200b</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p>\n\n<ul>\n\t<li>\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</li>\n\t<li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,0,2]\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca:</strong> \u5bf9\u5e94\u7684\u4ea4\u6613\u72b6\u6001\u4e3a: [\u4e70\u5165, \u5356\u51fa, \u51b7\u51bb\u671f, \u4e70\u5165, \u5356\u51fa]</pre>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxProfit(int[] prices) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxProfit(int* prices, int pricesSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxProfit(int[] prices) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxProfit(prices []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxProfit(prices: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxProfit(prices: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0310", "frontend_question_id": "0310", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-height-trees", "url_en": "https://leetcode.com/problems/minimum-height-trees", "relative_path_cn": "/leetcode/0300-0399/0310.Minimum%20Height%20Trees/README.md", "relative_path_en": "/leetcode/0300-0399/0310.Minimum%20Height%20Trees/README_EN.md", "title_cn": "\u6700\u5c0f\u9ad8\u5ea6\u6811", "title_en": "Minimum Height Trees", "question_title_slug": "minimum-height-trees", "content_en": "<p>A tree is an undirected graph in which any two vertices are connected by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected graph without simple cycles is a tree.</p>\n\n<p>Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code> to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;<code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between the two nodes&nbsp;<code>a<sub>i</sub></code> and&nbsp;<code>b<sub>i</sub></code> in the tree,&nbsp;you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>)&nbsp; are called <strong>minimum height trees</strong> (MHTs).</p>\n\n<p>Return <em>a list of all <strong>MHTs&#39;</strong> root labels</em>.&nbsp;You can return the answer in <strong>any order</strong>.</p>\n\n<p>The <strong>height</strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" style=\"width: 800px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>Output:</strong> [3,4]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, edges = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, edges = [[0,1]]\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li>\n\t<li>The given input is <strong>guaranteed</strong> to be a tree and there will be <strong>no repeated</strong> edges.</li>\n</ul>\n", "content_cn": "<p>\u6811\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u53ea\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u4efb\u4f55\u6ca1\u6709\u7b80\u5355\u73af\u8def\u7684\u8fde\u901a\u56fe\u90fd\u662f\u4e00\u68f5\u6811\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u68f5\u5305\u542b\u00a0<code>n</code>\u00a0\u4e2a\u8282\u70b9\u7684\u6570\uff0c\u6807\u8bb0\u4e3a\u00a0<code>0</code>\u00a0\u5230\u00a0<code>n - 1</code> \u3002\u7ed9\u5b9a\u6570\u5b57\u00a0<code>n</code>\u00a0\u548c\u4e00\u4e2a\u6709 <code>n - 1</code> \u6761\u65e0\u5411\u8fb9\u7684 <code>edges</code>\u00a0\u5217\u8868\uff08\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u662f\u4e00\u5bf9\u6807\u7b7e\uff09\uff0c\u5176\u4e2d <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> \u8868\u793a\u6811\u4e2d\u8282\u70b9 <code>a<sub>i</sub></code> \u548c <code>b<sub>i</sub></code> \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u65e0\u5411\u8fb9\u3002</p>\n\n<p>\u53ef\u9009\u62e9\u6811\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u3002\u5f53\u9009\u62e9\u8282\u70b9 <code>x</code> \u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\uff0c\u8bbe\u7ed3\u679c\u6811\u7684\u9ad8\u5ea6\u4e3a <code>h</code> \u3002\u5728\u6240\u6709\u53ef\u80fd\u7684\u6811\u4e2d\uff0c\u5177\u6709\u6700\u5c0f\u9ad8\u5ea6\u7684\u6811\uff08\u5373\uff0c<code>min(h)</code>\uff09\u88ab\u79f0\u4e3a <strong>\u6700\u5c0f\u9ad8\u5ea6\u6811</strong> \u3002</p>\n\n<p>\u8bf7\u4f60\u627e\u5230\u6240\u6709\u7684 <strong>\u6700\u5c0f\u9ad8\u5ea6\u6811</strong> \u5e76\u6309 <strong>\u4efb\u610f\u987a\u5e8f</strong> \u8fd4\u56de\u5b83\u4eec\u7684\u6839\u8282\u70b9\u6807\u7b7e\u5217\u8868\u3002</p>\n\u6811\u7684 <strong>\u9ad8\u5ea6</strong> \u662f\u6307\u6839\u8282\u70b9\u548c\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u6700\u957f\u5411\u4e0b\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u3002\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" style=\"width: 800px; height: 213px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\uff0c\u5f53\u6839\u662f\u6807\u7b7e\u4e3a 1 \u7684\u8282\u70b9\u65f6\uff0c\u6811\u7684\u9ad8\u5ea6\u662f 1 \uff0c\u8fd9\u662f\u552f\u4e00\u7684\u6700\u5c0f\u9ad8\u5ea6\u6811\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>\u8f93\u51fa\uff1a</strong>[3,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1, edges = []\n<strong>\u8f93\u51fa\uff1a</strong>[0]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 2, edges = [[0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[0,1]\n</pre>\n\n<p>\u00a0</p>\n\n<ul>\n</ul>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 <= a<sub>i</sub>, b<sub>i</sub> < n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>\u6240\u6709 <code>(a<sub>i</sub>, b<sub>i</sub>)</code> \u4e92\u4e0d\u76f8\u540c</li>\n\t<li>\u7ed9\u5b9a\u7684\u8f93\u5165 <strong>\u4fdd\u8bc1</strong> \u662f\u4e00\u68f5\u6811\uff0c\u5e76\u4e14 <strong>\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u8fb9</strong></li>\n</ul>\n", "tags_en": ["Breadth-first Search", "Graph"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMinHeightTrees(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindMinHeightTrees(int n, int[][] edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findMinHeightTrees = function(n, edges) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_min_height_trees(n, edges)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMinHeightTrees(_ n: Int, _ edges: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMinHeightTrees(n int, edges [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMinHeightTrees(n: Int, edges: Array<IntArray>): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_min_height_trees(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findMinHeightTrees($n, $edges) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMinHeightTrees(n: number, edges: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0311", "frontend_question_id": "0311", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sparse-matrix-multiplication", "url_en": "https://leetcode.com/problems/sparse-matrix-multiplication", "relative_path_cn": "/leetcode/0300-0399/0311.Sparse%20Matrix%20Multiplication/README.md", "relative_path_en": "/leetcode/0300-0399/0311.Sparse%20Matrix%20Multiplication/README_EN.md", "title_cn": "\u7a00\u758f\u77e9\u9635\u7684\u4e58\u6cd5", "title_en": "Sparse Matrix Multiplication", "question_title_slug": "sparse-matrix-multiplication", "content_en": null, "content_cn": null, "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0312", "frontend_question_id": "0312", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/burst-balloons", "url_en": "https://leetcode.com/problems/burst-balloons", "relative_path_cn": "/leetcode/0300-0399/0312.Burst%20Balloons/README.md", "relative_path_en": "/leetcode/0300-0399/0312.Burst%20Balloons/README_EN.md", "title_cn": "\u6233\u6c14\u7403", "title_en": "Burst Balloons", "question_title_slug": "burst-balloons", "content_en": "<p>Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a number on it represented by array <code>nums</code>. You are asked to burst all the balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p>\r\n\r\n<p>Find the maximum coins you can collect by bursting the balloons wisely.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.</li>\r\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[3,1,5,8]</code>\r\n<b>Output:</b> <code>167 \r\n<strong>Explanation: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\r\n&nbsp;            coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\r\n</pre>", "content_cn": "<p>\u6709 <code>n</code> \u4e2a\u6c14\u7403\uff0c\u7f16\u53f7\u4e3a<code>0</code> \u5230 <code>n-1</code>\uff0c\u6bcf\u4e2a\u6c14\u7403\u4e0a\u90fd\u6807\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u5b58\u5728\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\u8981\u6c42\u4f60\u6233\u7834\u6240\u6709\u7684\u6c14\u7403\u3002\u5982\u679c\u4f60\u6233\u7834\u6c14\u7403 <code>i</code> \uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97&nbsp;<code>nums[left] * nums[i] * nums[right]</code>&nbsp;\u4e2a\u786c\u5e01\u3002&nbsp;\u8fd9\u91cc\u7684&nbsp;<code>left</code>&nbsp;\u548c&nbsp;<code>right</code>&nbsp;\u4ee3\u8868\u548c&nbsp;<code>i</code>&nbsp;\u76f8\u90bb\u7684\u4e24\u4e2a\u6c14\u7403\u7684\u5e8f\u53f7\u3002\u6ce8\u610f\u5f53\u4f60\u6233\u7834\u4e86\u6c14\u7403 <code>i</code> \u540e\uff0c\u6c14\u7403&nbsp;<code>left</code>&nbsp;\u548c\u6c14\u7403&nbsp;<code>right</code>&nbsp;\u5c31\u53d8\u6210\u4e86\u76f8\u90bb\u7684\u6c14\u7403\u3002</p>\n\n<p>\u6c42\u6240\u80fd\u83b7\u5f97\u786c\u5e01\u7684\u6700\u5927\u6570\u91cf\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>nums[-1] = nums[n] = 1</code>\uff0c\u4f46\u6ce8\u610f\u5b83\u4eec\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684\u6240\u4ee5\u5e76\u4e0d\u80fd\u88ab\u6233\u7834\u3002</li>\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,1,5,8]</code>\n<strong>\u8f93\u51fa:</strong> <code>167 \n<strong>\u89e3\u91ca: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n&nbsp;    coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre>\n", "tags_en": ["Divide and Conquer", "Dynamic Programming"], "tags_cn": ["\u5206\u6cbb\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxCoins(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxCoins(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxCoins(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxCoins(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxCoins = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_coins(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func maxCoins(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxCoins(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxCoins(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxCoins(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_coins(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxCoins($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxCoins(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0313", "frontend_question_id": "0313", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/super-ugly-number", "url_en": "https://leetcode.com/problems/super-ugly-number", "relative_path_cn": "/leetcode/0300-0399/0313.Super%20Ugly%20Number/README.md", "relative_path_en": "/leetcode/0300-0399/0313.Super%20Ugly%20Number/README_EN.md", "title_cn": "\u8d85\u7ea7\u4e11\u6570", "title_en": "Super Ugly Number", "question_title_slug": "super-ugly-number", "content_en": "<p>Write a program to find the <code>n<sup>th</sup></code> super ugly number.</p>\r\n\r\n<p>Super ugly numbers are positive numbers whose all prime factors are in the given prime list <code>primes</code> of size <code>k</code>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\r\n<b>Output:</b> 32 \r\n<strong>Explanation: </strong><code>[1,2,4,7,8,13,14,16,19,26,28,32] </code>is the sequence of the first 12 \r\n             super ugly numbers given <code>primes</code> = <code>[2,7,13,19]</code> of size 4.</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1</code> is a super ugly number for any given <code>primes</code>.</li>\r\n\t<li>The given numbers in <code>primes</code> are in ascending order.</li>\r\n\t<li>0 &lt; <code>k</code> &le; 100, 0 &lt; <code>n</code> &le; 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000.</li>\r\n\t<li>The n<sup>th</sup> super ugly number is guaranteed to fit in a 32-bit signed integer.</li>\r\n</ul>\r\n", "content_cn": "<p>\u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c <code><em>n</em></code> \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002</p>\n\n<p>\u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u662f\u957f\u5ea6\u4e3a&nbsp;<code>k</code>&nbsp;\u7684\u8d28\u6570\u5217\u8868&nbsp;<code>primes</code>&nbsp;\u4e2d\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\n<strong>\u8f93\u51fa:</strong> 32 \n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684\u8d28\u6570\u5217\u8868 primes = [2,7,13,19]\uff0c\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u5e8f\u5217\u4e3a\uff1a[1,2,4,7,8,13,14,16,19,26,28,32] \u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1</code>&nbsp;\u662f\u4efb\u4f55\u7ed9\u5b9a&nbsp;<code>primes</code>&nbsp;\u7684\u8d85\u7ea7\u4e11\u6570\u3002</li>\n\t<li>&nbsp;\u7ed9\u5b9a&nbsp;<code>primes</code>&nbsp;\u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>0 &lt; <code>k</code> &le; 100, 0 &lt; <code>n</code> &le; 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000 \u3002</li>\n\t<li>\u7b2c&nbsp;<code>n</code>&nbsp;\u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Heap", "Math"], "tags_cn": ["\u5806", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int nthSuperUglyNumber(int n, vector<int>& primes) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nthSuperUglyNumber(self, n, primes):\n        \"\"\"\n        :type n: int\n        :type primes: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint nthSuperUglyNumber(int n, int* primes, int primesSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NthSuperUglyNumber(int n, int[] primes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @param {number[]} primes\n * @return {number}\n */\nvar nthSuperUglyNumber = function(n, primes) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @param {Integer[]} primes\n# @return {Integer}\ndef nth_super_ugly_number(n, primes)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nthSuperUglyNumber(_ n: Int, _ primes: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nthSuperUglyNumber(n int, primes []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nthSuperUglyNumber(n: Int, primes: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nthSuperUglyNumber(n: Int, primes: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn nth_super_ugly_number(n: i32, primes: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $primes\n     * @return Integer\n     */\n    function nthSuperUglyNumber($n, $primes) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nthSuperUglyNumber(n: number, primes: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0314", "frontend_question_id": "0314", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/binary-tree-vertical-order-traversal", "url_en": "https://leetcode.com/problems/binary-tree-vertical-order-traversal", "relative_path_cn": "/leetcode/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/README.md", "relative_path_en": "/leetcode/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5782\u76f4\u904d\u5386", "title_en": "Binary Tree Vertical Order Traversal", "question_title_slug": "binary-tree-vertical-order-traversal", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0315", "frontend_question_id": "0315", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self", "url_en": "https://leetcode.com/problems/count-of-smaller-numbers-after-self", "relative_path_cn": "/leetcode/0300-0399/0315.Count%20of%20Smaller%20Numbers%20After%20Self/README.md", "relative_path_en": "/leetcode/0300-0399/0315.Count%20of%20Smaller%20Numbers%20After%20Self/README_EN.md", "title_cn": "\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570", "title_en": "Count of Smaller Numbers After Self", "question_title_slug": "count-of-smaller-numbers-after-self", "content_en": "<p>You are given an integer array <i>nums</i> and you have to return a new <i>counts</i> array. The <i>counts</i> array has the property where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,1]\n<strong>Output:</strong> [2,1,1,0]\n<strong>Explanation:</strong>\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10^5</code></li>\n\t<li><code>-10^4&nbsp;&lt;= nums[i] &lt;= 10^4</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <em>nums</em>\uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4&nbsp;<em>counts</em>\u3002\u6570\u7ec4 <em>counts</em> \u6709\u8be5\u6027\u8d28\uff1a <code>counts[i]</code> \u7684\u503c\u662f&nbsp; <code>nums[i]</code> \u53f3\u4fa7\u5c0f\u4e8e&nbsp;<code>nums[i]</code> \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [5,2,6,1]\n<strong>\u8f93\u51fa\uff1a</strong><code>[2,1,1,0] \n<strong>\u89e3\u91ca\uff1a</strong></code>\n5 \u7684\u53f3\u4fa7\u6709 <strong>2 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1)\n2 \u7684\u53f3\u4fa7\u4ec5\u6709 <strong>1 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1)\n6 \u7684\u53f3\u4fa7\u6709 <strong>1 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1)\n1 \u7684\u53f3\u4fa7\u6709 <strong>0 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10^5</code></li>\n\t<li><code>-10^4&nbsp;&lt;= nums[i] &lt;= 10^4</code></li>\n</ul>\n", "tags_en": ["Sort", "Binary Indexed Tree", "Segment Tree", "Binary Search", "Divide and Conquer"], "tags_cn": ["\u6392\u5e8f", "\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811", "\u4e8c\u5206\u67e5\u627e", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countSmaller(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> CountSmaller(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar countSmaller = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef count_smaller(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countSmaller(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countSmaller(nums: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countSmaller(nums: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_smaller(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function countSmaller($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countSmaller(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0316", "frontend_question_id": "0316", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-duplicate-letters", "url_en": "https://leetcode.com/problems/remove-duplicate-letters", "relative_path_cn": "/leetcode/0300-0399/0316.Remove%20Duplicate%20Letters/README.md", "relative_path_en": "/leetcode/0300-0399/0316.Remove%20Duplicate%20Letters/README_EN.md", "title_cn": "\u53bb\u9664\u91cd\u590d\u5b57\u6bcd", "title_en": "Remove Duplicate Letters", "question_title_slug": "remove-duplicate-letters", "content_en": "<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <strong>the smallest in lexicographical order</strong> among all possible results.</p>\n\n<p><strong>Note:</strong> This question is the same as 1081:&nbsp;<a href=\"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\" target=\"_blank\">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcabc&quot;\n<strong>Output:</strong> &quot;abc&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbacdcbc&quot;\n<strong>Output:</strong> &quot;acdb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u8bf7\u4f60\u53bb\u9664\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b57\u6bcd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u9700\u4fdd\u8bc1 <strong>\u8fd4\u56de\u7ed3\u679c\u7684\u5b57\u5178\u5e8f\u6700\u5c0f</strong>\uff08\u8981\u6c42\u4e0d\u80fd\u6253\u4e71\u5176\u4ed6\u5b57\u7b26\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff09\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u8be5\u9898\u4e0e 1081 <a href=\"https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters\">https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters</a> \u76f8\u540c</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong><code>s = \"bcabc\"</code>\n<strong>\u8f93\u51fa<code>\uff1a</code></strong><code>\"abc\"</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong><code>s = \"cbacdcbc\"</code>\n<strong>\u8f93\u51fa\uff1a</strong><code>\"acdb\"</code></pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 10<sup>4</sup></code></li>\n\t<li><code>s</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n", "tags_en": ["Stack", "Greedy", "String"], "tags_cn": ["\u6808", "\u8d2a\u5fc3\u7b97\u6cd5", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string removeDuplicateLetters(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String removeDuplicateLetters(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * removeDuplicateLetters(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string RemoveDuplicateLetters(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicateLetters = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef remove_duplicate_letters(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeDuplicateLetters(_ s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeDuplicateLetters(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeDuplicateLetters(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeDuplicateLetters(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_duplicate_letters(s: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeDuplicateLetters($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeDuplicateLetters(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0317", "frontend_question_id": "0317", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-distance-from-all-buildings", "url_en": "https://leetcode.com/problems/shortest-distance-from-all-buildings", "relative_path_cn": "/leetcode/0300-0399/0317.Shortest%20Distance%20from%20All%20Buildings/README.md", "relative_path_en": "/leetcode/0300-0399/0317.Shortest%20Distance%20from%20All%20Buildings/README_EN.md", "title_cn": "\u79bb\u5efa\u7b51\u7269\u6700\u8fd1\u7684\u8ddd\u79bb", "title_en": "Shortest Distance from All Buildings", "question_title_slug": "shortest-distance-from-all-buildings", "content_en": null, "content_cn": null, "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0318", "frontend_question_id": "0318", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-product-of-word-lengths", "url_en": "https://leetcode.com/problems/maximum-product-of-word-lengths", "relative_path_cn": "/leetcode/0300-0399/0318.Maximum%20Product%20of%20Word%20Lengths/README.md", "relative_path_en": "/leetcode/0300-0399/0318.Maximum%20Product%20of%20Word%20Lengths/README_EN.md", "title_cn": "\u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef", "title_en": "Maximum Product of Word Lengths", "question_title_slug": "maximum-product-of-word-lengths", "content_en": "<p>Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\r\n<b>Output: </b><code>16 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;abcw&quot;, &quot;xtfn&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\r\n<b>Output: </b><code>4 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;ab&quot;, &quot;cd&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\r\n<b>Output: </b><code>0 \r\n<strong>Explanation: </strong></code>No such pair of words.\r\n</pre>\r\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= words.length &lt;= 10^3</code></li>\n\t<li><code>0 &lt;= words[i].length &lt;= 10^3</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4&nbsp;<code>words</code>\uff0c\u627e\u5230&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;\u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>16 \n<strong>\u89e3\u91ca:</strong> \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a<strong> </strong></code><code>&quot;abcw&quot;, &quot;xtfn&quot;</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>4 \n<strong>\u89e3\u91ca: </strong></code>\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a <code>&quot;ab&quot;, &quot;cd&quot;</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>0 \n<strong>\u89e3\u91ca: </strong>\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\u3002</code></pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxProduct(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxProduct(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxProduct(char ** words, int wordsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxProduct(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer}\ndef max_product(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxProduct(_ words: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxProduct(words []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxProduct(words: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxProduct(words: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_product(words: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxProduct($words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxProduct(words: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0319", "frontend_question_id": "0319", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bulb-switcher", "url_en": "https://leetcode.com/problems/bulb-switcher", "relative_path_cn": "/leetcode/0300-0399/0319.Bulb%20Switcher/README.md", "relative_path_en": "/leetcode/0300-0399/0319.Bulb%20Switcher/README_EN.md", "title_cn": "\u706f\u6ce1\u5f00\u5173", "title_en": "Bulb Switcher", "question_title_slug": "bulb-switcher", "content_en": "<p>There are <code>n</code> bulbs that are initially off. You first turn on all the bulbs, then&nbsp;you turn off every second bulb.</p>\n\n<p>On the third round, you toggle every third bulb (turning on if it&#39;s off or turning off if it&#39;s on). For the <code>i<sup>th</sup></code> round, you toggle every <code>i</code> bulb. For the <code>n<sup>th</sup></code> round, you only toggle the last bulb.</p>\n\n<p>Return <em>the number of bulbs that are on after <code>n</code> rounds</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg\" style=\"width: 421px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u521d\u59cb\u65f6\u6709\u00a0<em>n\u00a0</em>\u4e2a\u706f\u6ce1\u5173\u95ed\u3002</p>\n\n<p>\u7b2c 1 \u8f6e\uff0c\u4f60\u6253\u5f00\u6240\u6709\u7684\u706f\u6ce1\u3002 \u7b2c 2 \u8f6e\uff0c\u6bcf\u4e24\u4e2a\u706f\u6ce1\u4f60\u5173\u95ed\u4e00\u6b21\u3002 \u7b2c 3 \u8f6e\uff0c\u6bcf\u4e09\u4e2a\u706f\u6ce1\u5207\u6362\u4e00\u6b21\u5f00\u5173\uff08\u5982\u679c\u5173\u95ed\u5219\u5f00\u542f\uff0c\u5982\u679c\u5f00\u542f\u5219\u5173\u95ed\uff09\u3002</p>\n\n<p>\u7b2c\u00a0<em>i</em> \u8f6e\uff0c\u6bcf\u00a0<em>i\u00a0</em>\u4e2a\u706f\u6ce1\u5207\u6362\u4e00\u6b21\u5f00\u5173\u3002 \u5bf9\u4e8e\u7b2c\u00a0<em>n\u00a0</em>\u8f6e\uff0c\u4f60\u53ea\u5207\u6362\u6700\u540e\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\u3002</p>\n\n<p>\u627e\u51fa\u00a0<em>n\u00a0</em>\u8f6e\u540e\u6709\u591a\u5c11\u4e2a\u4eae\u7740\u7684\u706f\u6ce1\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg\" style=\"width: 421px; height: 321px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n =<strong> </strong>3\n<strong>\u8f93\u51fa\uff1a</strong>1 \n<strong>\u89e3\u91ca\uff1a</strong>\n\u521d\u59cb\u65f6, \u706f\u6ce1\u72b6\u6001 <strong>[\u5173\u95ed, \u5173\u95ed, \u5173\u95ed]</strong>.\n\u7b2c\u4e00\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5f00\u542f, \u5f00\u542f]</strong>.\n\u7b2c\u4e8c\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5173\u95ed, \u5f00\u542f]</strong>.\n\u7b2c\u4e09\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5173\u95ed, \u5173\u95ed]</strong>. \n\n\u4f60\u5e94\u8be5\u8fd4\u56de 1\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u706f\u6ce1\u8fd8\u4eae\u7740\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= n <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Brainteaser", "Math"], "tags_cn": ["\u8111\u7b4b\u6025\u8f6c\u5f2f", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int bulbSwitch(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int bulbSwitch(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def bulbSwitch(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def bulbSwitch(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint bulbSwitch(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int BulbSwitch(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar bulbSwitch = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef bulb_switch(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func bulbSwitch(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func bulbSwitch(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def bulbSwitch(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun bulbSwitch(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn bulb_switch(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function bulbSwitch($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function bulbSwitch(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0320", "frontend_question_id": "0320", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/generalized-abbreviation", "url_en": "https://leetcode.com/problems/generalized-abbreviation", "relative_path_cn": "/leetcode/0300-0399/0320.Generalized%20Abbreviation/README.md", "relative_path_en": "/leetcode/0300-0399/0320.Generalized%20Abbreviation/README_EN.md", "title_cn": "\u5217\u4e3e\u5355\u8bcd\u7684\u5168\u90e8\u7f29\u5199", "title_en": "Generalized Abbreviation", "question_title_slug": "generalized-abbreviation", "content_en": null, "content_cn": null, "tags_en": ["Bit Manipulation", "Backtracking"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0321", "frontend_question_id": "0321", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/create-maximum-number", "url_en": "https://leetcode.com/problems/create-maximum-number", "relative_path_cn": "/leetcode/0300-0399/0321.Create%20Maximum%20Number/README.md", "relative_path_en": "/leetcode/0300-0399/0321.Create%20Maximum%20Number/README_EN.md", "title_cn": "\u62fc\u63a5\u6700\u5927\u6570", "title_en": "Create Maximum Number", "question_title_slug": "create-maximum-number", "content_en": "<p>Given two arrays of length <code>m</code> and <code>n</code> with digits <code>0-9</code> representing two numbers. Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the <code>k</code> digits.</p>\r\n\r\n<p><strong>Note: </strong>You should try to optimize your time and space complexity.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[3, 4, 6, 5]</code>\r\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\r\nk = <code>5</code>\r\n<strong>Output:</strong>\r\n<code>[9, 8, 6, 5, 3]</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[6, 7]</code>\r\nnums2 = <code>[6, 0, 4]</code>\r\nk = <code>5</code>\r\n<strong>Output:</strong>\r\n<code>[6, 7, 6, 0, 4]</code></pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[3, 9]</code>\r\nnums2 = <code>[8, 9]</code>\r\nk = <code>3</code>\r\n<strong>Output:</strong>\r\n<code>[9, 8, 9]</code>\r\n</pre>", "content_cn": "<p>\u7ed9\u5b9a\u957f\u5ea6\u5206\u522b\u4e3a&nbsp;<code>m</code>&nbsp;\u548c&nbsp;<code>n</code>&nbsp;\u7684\u4e24\u4e2a\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u7531&nbsp;<code>0-9</code>&nbsp;\u6784\u6210\uff0c\u8868\u793a\u4e24\u4e2a\u81ea\u7136\u6570\u5404\u4f4d\u4e0a\u7684\u6570\u5b57\u3002\u73b0\u5728\u4ece\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e2d\u9009\u51fa <code>k (k &lt;= m + n)</code>&nbsp;\u4e2a\u6570\u5b57\u62fc\u63a5\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u8981\u6c42\u4ece\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u53d6\u51fa\u7684\u6570\u5b57\u4fdd\u6301\u5176\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>\n\n<p>\u6c42\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u6700\u5927\u6570\u3002\u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u6700\u5927\u6570\u7684\u957f\u5ea6\u4e3a&nbsp;<code>k</code>&nbsp;\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u8bf4\u660e: </strong>\u8bf7\u5c3d\u53ef\u80fd\u5730\u4f18\u5316\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[9, 8, 9]</code></pre>\n", "tags_en": ["Greedy", "Dynamic Programming"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[]}\n */\nvar maxNumber = function(nums1, nums2, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[]}\ndef max_number(nums1, nums2, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxNumber(nums1 []int, nums2 []int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxNumber(nums1: IntArray, nums2: IntArray, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_number(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxNumber($nums1, $nums2, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxNumber(nums1: number[], nums2: number[], k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0322", "frontend_question_id": "0322", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/coin-change", "url_en": "https://leetcode.com/problems/coin-change", "relative_path_cn": "/leetcode/0300-0399/0322.Coin%20Change/README.md", "relative_path_en": "/leetcode/0300-0399/0322.Coin%20Change/README_EN.md", "title_cn": "\u96f6\u94b1\u5151\u6362", "title_en": "Coin Change", "question_title_slug": "coin-change", "content_en": "<p>You are given coins of different denominations and a total amount of money <i>amount</i>. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>\n\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1,2,5], amount = 11\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 11 = 5 + 5 + 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [2], amount = 3\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 2\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 <code>coins</code> \u548c\u4e00\u4e2a\u603b\u91d1\u989d <code>amount</code>\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de\u00a0<code>-1</code>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\n<strong>\u8f93\u51fa\uff1a</strong><code>3</code> \n<strong>\u89e3\u91ca\uff1a</strong>11 = 5 + 5 + 1</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>coins = <code>[2]</code>, amount = <code>3</code>\n<strong>\u8f93\u51fa\uff1a</strong>-1</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>coins = [1], amount = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>coins = [1], amount = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>coins = [1], amount = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= coins.length <= 12</code></li>\n\t<li><code>1 <= coins[i] <= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 <= amount <= 10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def coinChange(self, coins, amount):\n        \"\"\"\n        :type coins: List[int]\n        :type amount: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint coinChange(int* coins, int coinsSize, int amount){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CoinChange(int[] coins, int amount) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function(coins, amount) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} coins\n# @param {Integer} amount\n# @return {Integer}\ndef coin_change(coins, amount)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func coinChange(_ coins: [Int], _ amount: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func coinChange(coins []int, amount int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def coinChange(coins: Array[Int], amount: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun coinChange(coins: IntArray, amount: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn coin_change(coins: Vec<i32>, amount: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $amount\n     * @return Integer\n     */\n    function coinChange($coins, $amount) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function coinChange(coins: number[], amount: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0323", "frontend_question_id": "0323", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/number-of-connected-components-in-an-undirected-graph", "url_en": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph", "relative_path_cn": "/leetcode/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/README.md", "relative_path_en": "/leetcode/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/README_EN.md", "title_cn": "\u65e0\u5411\u56fe\u4e2d\u8fde\u901a\u5206\u91cf\u7684\u6570\u76ee", "title_en": "Number of Connected Components in an Undirected Graph", "question_title_slug": "number-of-connected-components-in-an-undirected-graph", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0324", "frontend_question_id": "0324", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/wiggle-sort-ii", "url_en": "https://leetcode.com/problems/wiggle-sort-ii", "relative_path_cn": "/leetcode/0300-0399/0324.Wiggle%20Sort%20II/README.md", "relative_path_en": "/leetcode/0300-0399/0324.Wiggle%20Sort%20II/README_EN.md", "title_cn": "\u6446\u52a8\u6392\u5e8f II", "title_en": "Wiggle Sort II", "question_title_slug": "wiggle-sort-ii", "content_en": "<p>Given an unsorted array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\r\n<strong>Output: </strong>One possible answer is <code>[1, 4, 1, 5, 1, 6]</code>.</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\r\n<strong>Output:</strong> One possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume all input has valid answer.</p>\r\n\r\n<p><b>Follow Up:</b><br />\r\nCan you do it in O(n) time and/or in-place with O(1) extra space?</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5c06\u5b83\u91cd\u65b0\u6392\u5217\u6210&nbsp;<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>&nbsp;\u7684\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\n<strong>\u8f93\u51fa: </strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f <code>[1, 4, 1, 5, 1, 6]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\n<strong>\u8f93\u51fa:</strong> \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f <code>[2, 3, 1, 3, 1, 2]</code></pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u4f1a\u5f97\u5230\u6709\u6548\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u80fd\u7528&nbsp;O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c / \u6216\u539f\u5730 O(1) \u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f</p>\n", "tags_en": ["Sort"], "tags_cn": ["\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public void wiggleSort(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wiggleSort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nvoid wiggleSort(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public void WiggleSort(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar wiggleSort = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef wiggle_sort(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wiggleSort(_ nums: inout [Int]) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func wiggleSort(nums []int)  {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wiggleSort(nums: IntArray): Unit {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function wiggleSort(&$nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction wiggleSort(nums: number[]): void {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0325", "frontend_question_id": "0325", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/maximum-size-subarray-sum-equals-k", "url_en": "https://leetcode.com/problems/maximum-size-subarray-sum-equals-k", "relative_path_cn": "/leetcode/0300-0399/0325.Maximum%20Size%20Subarray%20Sum%20Equals%20k/README.md", "relative_path_en": "/leetcode/0300-0399/0325.Maximum%20Size%20Subarray%20Sum%20Equals%20k/README_EN.md", "title_cn": "\u548c\u7b49\u4e8e k \u7684\u6700\u957f\u5b50\u6570\u7ec4\u957f\u5ea6", "title_en": "Maximum Size Subarray Sum Equals k", "question_title_slug": "maximum-size-subarray-sum-equals-k", "content_en": null, "content_cn": null, "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0326", "frontend_question_id": "0326", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/power-of-three", "url_en": "https://leetcode.com/problems/power-of-three", "relative_path_cn": "/leetcode/0300-0399/0326.Power%20of%20Three/README.md", "relative_path_en": "/leetcode/0300-0399/0326.Power%20of%20Three/README_EN.md", "title_cn": "3\u7684\u5e42", "title_en": "Power of Three", "question_title_slug": "power-of-three", "content_en": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of three. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 27\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 0\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 9\n<strong>Output:</strong> true\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> n = 45\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<b>Follow up:&nbsp;</b>Could you do it without using any loop / recursion?", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3\u00a0\u7684\u5e42\u6b21\u65b9\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u6574\u6570 <code>n</code> \u662f 3 \u7684\u5e42\u6b21\u65b9\u9700\u6ee1\u8db3\uff1a\u5b58\u5728\u6574\u6570 <code>x</code> \u4f7f\u5f97 <code>n == 3<sup>x</sup></code></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 27\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 0\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 9\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 45\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> <= n <= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPowerOfThree(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPowerOfThree(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isPowerOfThree(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPowerOfThree(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfThree = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_power_of_three(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPowerOfThree(_ n: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isPowerOfThree(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPowerOfThree(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPowerOfThree(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_power_of_three(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isPowerOfThree($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPowerOfThree(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0327", "frontend_question_id": "0327", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-of-range-sum", "url_en": "https://leetcode.com/problems/count-of-range-sum", "relative_path_cn": "/leetcode/0300-0399/0327.Count%20of%20Range%20Sum/README.md", "relative_path_en": "/leetcode/0300-0399/0327.Count%20of%20Range%20Sum/README_EN.md", "title_cn": "\u533a\u95f4\u548c\u7684\u4e2a\u6570", "title_en": "Count of Range Sum", "question_title_slug": "count-of-range-sum", "content_en": "<p>Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br />\r\nRange sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> (<code>i</code> &le; <code>j</code>), inclusive.</p>\r\n\r\n<p><b>Note:</b><br />\r\nA naive algorithm of <i>O</i>(<i>n</i><sup>2</sup>) is trivial. You MUST do better than that.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[-2,5,-1]</code>, <i>lower</i> = <code>-2</code>, <i>upper</i> = <code>2</code>,\r\n<strong>Output: </strong>3 \r\n<strong>Explanation: </strong>The three ranges are : <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]</code> and their respective sums are: <code>-2, -1, 2</code>.\r\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10^4</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u8fd4\u56de\u533a\u95f4\u548c\u5728&nbsp;<code>[lower, upper]</code>&nbsp;\u4e4b\u95f4\u7684\u4e2a\u6570\uff0c\u5305\u542b&nbsp;<code>lower</code>&nbsp;\u548c&nbsp;<code>upper</code>\u3002<br>\n\u533a\u95f4\u548c&nbsp;<code>S(i, j)</code>&nbsp;\u8868\u793a\u5728&nbsp;<code>nums</code>&nbsp;\u4e2d\uff0c\u4f4d\u7f6e\u4ece&nbsp;<code>i</code>&nbsp;\u5230&nbsp;<code>j</code>&nbsp;\u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5305\u542b&nbsp;<code>i</code>&nbsp;\u548c&nbsp;<code>j</code>&nbsp;(<code>i</code> &le; <code>j</code>)\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u6700\u76f4\u89c2\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) \uff0c\u8bf7\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca: </strong>3\u4e2a\u533a\u95f4\u5206\u522b\u662f: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]\uff0c</code>\u5b83\u4eec\u8868\u793a\u7684\u548c\u5206\u522b\u4e3a: <code>-2, -1, 2\u3002</code>\n</pre>\n", "tags_en": ["Sort", "Binary Indexed Tree", "Segment Tree", "Binary Search", "Divide and Conquer"], "tags_cn": ["\u6392\u5e8f", "\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811", "\u4e8c\u5206\u67e5\u627e", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countRangeSum(vector<int>& nums, int lower, int upper) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countRangeSum(int[] nums, int lower, int upper) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countRangeSum(int* nums, int numsSize, int lower, int upper){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountRangeSum(int[] nums, int lower, int upper) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar countRangeSum = function(nums, lower, upper) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} lower\n# @param {Integer} upper\n# @return {Integer}\ndef count_range_sum(nums, lower, upper)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countRangeSum(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countRangeSum(nums []int, lower int, upper int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countRangeSum(nums: Array[Int], lower: Int, upper: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countRangeSum(nums: IntArray, lower: Int, upper: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_range_sum(nums: Vec<i32>, lower: i32, upper: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $lower\n     * @param Integer $upper\n     * @return Integer\n     */\n    function countRangeSum($nums, $lower, $upper) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countRangeSum(nums: number[], lower: number, upper: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0328", "frontend_question_id": "0328", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/odd-even-linked-list", "url_en": "https://leetcode.com/problems/odd-even-linked-list", "relative_path_cn": "/leetcode/0300-0399/0328.Odd%20Even%20Linked%20List/README.md", "relative_path_en": "/leetcode/0300-0399/0328.Odd%20Even%20Linked%20List/README_EN.md", "title_cn": "\u5947\u5076\u94fe\u8868", "title_en": "Odd Even Linked List", "question_title_slug": "odd-even-linked-list", "content_en": "<p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>\n\n<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<strong>Input: </strong><code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>\n<strong>Output: </strong><code>1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code>\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<strong>Input: </strong>2<code>-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</code>\n<strong>Output: </strong><code>2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</code>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The relative order inside both the even and odd groups should remain as it was in the input.</li>\n\t<li>The first node is considered odd, the second node even and so on ...</li>\n\t<li>The length of the linked list is between <code>[0, 10^4]</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002</p>\n\n<p>\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>\u8f93\u51fa:</strong> 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL \n<strong>\u8f93\u51fa:</strong> 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</li>\n\t<li>\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</li>\n</ul>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def oddEvenList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: ListNode) -> ListNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* oddEvenList(struct ListNode* head){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode OddEvenList(ListNode head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef odd_even_list(head)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func oddEvenList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc oddEvenList(head *ListNode) *ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def oddEvenList(head: ListNode): ListNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun oddEvenList(head: ListNode?): ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn odd_even_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function oddEvenList($head) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction oddEvenList(head: ListNode | null): ListNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0329", "frontend_question_id": "0329", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix", "url_en": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix", "relative_path_cn": "/leetcode/0300-0399/0329.Longest%20Increasing%20Path%20in%20a%20Matrix/README.md", "relative_path_en": "/leetcode/0300-0399/0329.Longest%20Increasing%20Path%20in%20a%20Matrix/README_EN.md", "title_cn": "\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84", "title_en": "Longest Increasing Path in a Matrix", "question_title_slug": "longest-increasing-path-in-a-matrix", "content_en": "<p>Given an integer matrix, find the length of the longest increasing path.</p>\r\n\r\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = \r\n[\r\n  [<font color=\"red\">9</font>,9,4],\r\n  [<font color=\"red\">6</font>,6,8],\r\n  [<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\r\n] \r\n<strong>Output:</strong> 4 \r\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = \r\n[\r\n  [<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\r\n  [3,2,<font color=\"red\">6</font>],\r\n  [2,2,1]\r\n] \r\n<strong>Output: </strong>4 \r\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u77e9\u9635\uff0c\u627e\u51fa\u6700\u957f\u9012\u589e\u8def\u5f84\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u5143\u683c\uff0c\u4f60\u53ef\u4ee5\u5f80\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u3002 \u4f60\u4e0d\u80fd\u5728\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0a\u79fb\u52a8\u6216\u79fb\u52a8\u5230\u8fb9\u754c\u5916\uff08\u5373\u4e0d\u5141\u8bb8\u73af\u7ed5\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = \n[\n  [<strong>9</strong>,9,4],\n  [<strong>6</strong>,6,8],\n  [<strong>2</strong>,<strong>1</strong>,1]\n] \n<strong>\u8f93\u51fa:</strong> 4 \n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u9012\u589e\u8def\u5f84\u4e3a&nbsp;<code>[1, 2, 6, 9]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = \n[\n  [<strong>3</strong>,<strong>4</strong>,<strong>5</strong>],\n  [3,2,<strong>6</strong>],\n  [2,2,1]\n] \n<strong>\u8f93\u51fa: </strong>4 \n<strong>\u89e3\u91ca: </strong>\u6700\u957f\u9012\u589e\u8def\u5f84\u662f&nbsp;<code>[3, 4, 5, 6]</code>\u3002\u6ce8\u610f\u4e0d\u5141\u8bb8\u5728\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0a\u79fb\u52a8\u3002\n</pre>\n", "tags_en": ["Depth-first Search", "Topological Sort", "Memoization"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u62d3\u6251\u6392\u5e8f", "\u8bb0\u5fc6\u5316"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestIncreasingPath(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef longest_increasing_path(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestIncreasingPath(matrix [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\r\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function longestIncreasingPath($matrix) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestIncreasingPath(matrix: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0330", "frontend_question_id": "0330", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/patching-array", "url_en": "https://leetcode.com/problems/patching-array", "relative_path_cn": "/leetcode/0300-0399/0330.Patching%20Array/README.md", "relative_path_en": "/leetcode/0300-0399/0330.Patching%20Array/README_EN.md", "title_cn": "\u6309\u8981\u6c42\u8865\u9f50\u6570\u7ec4", "title_en": "Patching Array", "question_title_slug": "patching-array", "content_en": "<p>Given a sorted positive integer array <i>nums</i> and an integer <i>n</i>, add/patch elements to the array such that any number in range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,3]</code>, <i>n</i> = <code>6</code>\r\n<strong>Output: </strong>1 \r\n<strong>Explanation:</strong>\r\nCombinations of <i>nums</i> are <code>[1], [3], [1,3]</code>, which form possible sums of: <code>1, 3, 4</code>.\r\nNow if we add/patch <code>2</code> to <i>nums</i>, the combinations are: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>.\r\nPossible sums are <code>1, 2, 3, 4, 5, 6</code>, which now covers the range <code>[1, 6]</code>.\r\nSo we only need <code>1</code> patch.</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,5,10]</code>, <i>n</i> = <code>20</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>The two patches can be <code>[2, 4]</code>.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,2,2]</code>, <i>n</i> = <code>5</code>\r\n<strong>Output:</strong> 0\r\n</pre>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u6b63\u6574\u6570\u6570\u7ec4 <em>nums\uff0c</em>\u548c\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n \u3002</em>\u4ece&nbsp;<code>[1, n]</code>&nbsp;\u533a\u95f4\u5185\u9009\u53d6\u4efb\u610f\u4e2a\u6570\u5b57\u8865\u5145\u5230&nbsp;<em>nums&nbsp;</em>\u4e2d\uff0c\u4f7f\u5f97&nbsp;<code>[1, n]</code>&nbsp;\u533a\u95f4\u5185\u7684\u4efb\u4f55\u6570\u5b57\u90fd\u53ef\u4ee5\u7528&nbsp;<em>nums&nbsp;</em>\u4e2d\u67d0\u51e0\u4e2a\u6570\u5b57\u7684\u548c\u6765\u8868\u793a\u3002\u8bf7\u8f93\u51fa\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u6700\u5c11\u9700\u8981\u8865\u5145\u7684\u6570\u5b57\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,3]</code>, <em>n</em> = <code>6</code>\n<strong>\u8f93\u51fa: </strong>1 \n<strong>\u89e3\u91ca:</strong>\n\u6839\u636e<em> nums&nbsp;</em>\u91cc\u73b0\u6709\u7684\u7ec4\u5408&nbsp;<code>[1], [3], [1,3]</code>\uff0c\u53ef\u4ee5\u5f97\u51fa&nbsp;<code>1, 3, 4</code>\u3002\n\u73b0\u5728\u5982\u679c\u6211\u4eec\u5c06&nbsp;<code>2</code>&nbsp;\u6dfb\u52a0\u5230&nbsp;<em>nums \u4e2d\uff0c</em>&nbsp;\u7ec4\u5408\u53d8\u4e3a: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>\u3002\n\u5176\u548c\u53ef\u4ee5\u8868\u793a\u6570\u5b57&nbsp;<code>1, 2, 3, 4, 5, 6</code>\uff0c\u80fd\u591f\u8986\u76d6&nbsp;<code>[1, 6]</code>&nbsp;\u533a\u95f4\u91cc\u6240\u6709\u7684\u6570\u3002\n\u6240\u4ee5\u6211\u4eec\u6700\u5c11\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u6570\u5b57\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,5,10]</code>, <em>n</em> = <code>20</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u6211\u4eec\u9700\u8981\u6dfb\u52a0&nbsp;<code>[2, 4]</code>\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,2,2]</code>, <em>n</em> = <code>5</code>\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n", "tags_en": ["Greedy"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minPatches(vector<int>& nums, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minPatches(int[] nums, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minPatches(int* nums, int numsSize, int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinPatches(int[] nums, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number}\n */\nvar minPatches = function(nums, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} n\n# @return {Integer}\ndef min_patches(nums, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minPatches(_ nums: [Int], _ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minPatches(nums []int, n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minPatches(nums: Array[Int], n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minPatches(nums: IntArray, n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_patches(nums: Vec<i32>, n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @return Integer\n     */\n    function minPatches($nums, $n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minPatches(nums: number[], n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0331", "frontend_question_id": "0331", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree", "url_en": "https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree", "relative_path_cn": "/leetcode/0300-0399/0331.Verify%20Preorder%20Serialization%20of%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0300-0399/0331.Verify%20Preorder%20Serialization%20of%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316", "title_en": "Verify Preorder Serialization of a Binary Tree", "question_title_slug": "verify-preorder-serialization-of-a-binary-tree", "content_en": "<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p>\r\n\r\n<pre>\r\n     _9_\r\n    /   \\\r\n   3     2\r\n  / \\   / \\\r\n 4   1  #  6\r\n/ \\ / \\   / \\\r\n# # # #   # #\r\n</pre>\r\n\r\n<p>For example, the above binary tree can be serialized to the string <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>, where <code>#</code> represents a null node.</p>\r\n\r\n<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>\r\n\r\n<p>Each comma separated value in the string must be either an integer or a character <code>&#39;#&#39;</code> representing <code>null</code> pointer.</p>\r\n\r\n<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>&quot;1,,3&quot;</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\r\n<strong>Output: </strong><code>true</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;1,#&quot;</code>\r\n<strong>Output: </strong><code>false</code>\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;9,#,#,1&quot;</code>\r\n<strong>Output: </strong><code>false</code></pre>", "content_cn": "<p>\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u524d\u5e8f\u904d\u5386\u3002\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6807\u8bb0\u503c\u8bb0\u5f55\uff0c\u4f8b\u5982 <code>#</code>\u3002</p>\n\n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre>\n\n<p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\uff0c\u5176\u4e2d <code>#</code> \u4ee3\u8868\u4e00\u4e2a\u7a7a\u8282\u70b9\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e32\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5e8f\u5217\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u6b63\u786e\u7684\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316\u3002\u7f16\u5199\u4e00\u4e2a\u5728\u4e0d\u91cd\u6784\u6811\u7684\u6761\u4ef6\u4e0b\u7684\u53ef\u884c\u7b97\u6cd5\u3002</p>\n\n<p>\u6bcf\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u6216\u4e3a\u4e00\u4e2a\u6574\u6570\u6216\u4e3a\u4e00\u4e2a\u8868\u793a <code>null</code> \u6307\u9488\u7684 <code>&#39;#&#39;</code> \u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u683c\u5f0f\u603b\u662f\u6709\u6548\u7684\uff0c\u4f8b\u5982\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5305\u542b\u4e24\u4e2a\u8fde\u7eed\u7684\u9017\u53f7\uff0c\u6bd4\u5982&nbsp;<code>&quot;1,,3&quot;</code> \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>true</code></pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;1,#&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>false</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;9,#,#,1&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>false</code></pre>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isValidSerialization(string preorder) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isValidSerialization(String preorder) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isValidSerialization(self, preorder):\n        \"\"\"\n        :type preorder: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isValidSerialization(char * preorder){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsValidSerialization(string preorder) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} preorder\n * @return {boolean}\n */\nvar isValidSerialization = function(preorder) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} preorder\n# @return {Boolean}\ndef is_valid_serialization(preorder)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isValidSerialization(_ preorder: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isValidSerialization(preorder string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isValidSerialization(preorder: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isValidSerialization(preorder: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_valid_serialization(preorder: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $preorder\n     * @return Boolean\n     */\n    function isValidSerialization($preorder) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isValidSerialization(preorder: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0332", "frontend_question_id": "0332", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reconstruct-itinerary", "url_en": "https://leetcode.com/problems/reconstruct-itinerary", "relative_path_cn": "/leetcode/0300-0399/0332.Reconstruct%20Itinerary/README.md", "relative_path_en": "/leetcode/0300-0399/0332.Reconstruct%20Itinerary/README_EN.md", "title_cn": "\u91cd\u65b0\u5b89\u6392\u884c\u7a0b", "title_en": "Reconstruct Itinerary", "question_title_slug": "reconstruct-itinerary", "content_en": "<p>Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.</p>\n\n<p><b>Note:</b></p>\n\n<ol>\n\t<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li>\n\t<li>All airports are represented by three capital letters (IATA code).</li>\n\t<li>You may assume all tickets form at least one valid itinerary.</li>\n\t<li>One must use all the tickets once and only once.</li>\n</ol>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<code><strong>Input: </strong></code><code>[[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</code>\n<strong>Output: </strong><code>[&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code>\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<code><strong>Input: </strong></code><code>[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</code>\n<strong>Output: </strong><code>[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\n<strong>Explanation: </strong>Another possible reconstruction is <code>[&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>.\n&nbsp;            But it is larger in lexical order.\n</pre>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u673a\u7968\u7684\u5b57\u7b26\u4e32\u4e8c\u7ef4\u6570\u7ec4 <code>[from, to]</code>\uff0c\u5b50\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8868\u793a\u98de\u673a\u51fa\u53d1\u548c\u964d\u843d\u7684\u673a\u573a\u5730\u70b9\uff0c\u5bf9\u8be5\u884c\u7a0b\u8fdb\u884c\u91cd\u65b0\u89c4\u5212\u6392\u5e8f\u3002\u6240\u6709\u8fd9\u4e9b\u673a\u7968\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u4ece JFK\uff08\u80af\u5c3c\u8fea\u56fd\u9645\u673a\u573a\uff09\u51fa\u53d1\u7684\u5148\u751f\uff0c\u6240\u4ee5\u8be5\u884c\u7a0b\u5fc5\u987b\u4ece JFK \u5f00\u59cb\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u884c\u7a0b\uff0c\u8bf7\u4f60\u6309\u5b57\u7b26\u81ea\u7136\u6392\u5e8f\u8fd4\u56de\u6700\u5c0f\u7684\u884c\u7a0b\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u884c\u7a0b [&quot;JFK&quot;, &quot;LGA&quot;] \u4e0e [&quot;JFK&quot;, &quot;LGB&quot;] \u76f8\u6bd4\u5c31\u66f4\u5c0f\uff0c\u6392\u5e8f\u66f4\u9760\u524d</li>\n\t<li>\u6240\u6709\u7684\u673a\u573a\u90fd\u7528\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff08\u673a\u573a\u4ee3\u7801\uff09\u3002</li>\n\t<li>\u5047\u5b9a\u6240\u6709\u673a\u7968\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5408\u7406\u7684\u884c\u7a0b\u3002</li>\n\t<li>\u6240\u6709\u7684\u673a\u7968\u5fc5\u987b\u90fd\u7528\u4e00\u6b21 \u4e14 \u53ea\u80fd\u7528\u4e00\u6b21\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><code><strong>\u8f93\u5165\uff1a</strong></code><code>[[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</code>\n<strong>\u8f93\u51fa\uff1a</strong><code>[&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><code><strong>\u8f93\u5165\uff1a</strong></code><code>[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</code>\n<strong>\u8f93\u51fa\uff1a</strong><code>[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\n<strong>\u89e3\u91ca\uff1a</strong>\u53e6\u4e00\u79cd\u6709\u6548\u7684\u884c\u7a0b\u662f&nbsp;<code>[&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\u3002\u4f46\u662f\u5b83\u81ea\u7136\u6392\u5e8f\u66f4\u5927\u66f4\u9760\u540e\u3002</pre>\n", "tags_en": ["Depth-first Search", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findItinerary(vector<vector<string>>& tickets) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findItinerary(char *** tickets, int ticketsSize, int* ticketsColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindItinerary(IList<IList<string>> tickets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[][]} tickets\n# @return {String[]}\ndef find_itinerary(tickets)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findItinerary(_ tickets: [[String]]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findItinerary(tickets [][]string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findItinerary(tickets: List[List[String]]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findItinerary(tickets: List<List<String>>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_itinerary(tickets: Vec<Vec<String>>) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $tickets\n     * @return String[]\n     */\n    function findItinerary($tickets) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findItinerary(tickets: string[][]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0333", "frontend_question_id": "0333", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/largest-bst-subtree", "url_en": "https://leetcode.com/problems/largest-bst-subtree", "relative_path_cn": "/leetcode/0300-0399/0333.Largest%20BST%20Subtree/README.md", "relative_path_en": "/leetcode/0300-0399/0333.Largest%20BST%20Subtree/README_EN.md", "title_cn": "\u6700\u5927 BST \u5b50\u6811", "title_en": "Largest BST Subtree", "question_title_slug": "largest-bst-subtree", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0334", "frontend_question_id": "0334", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/increasing-triplet-subsequence", "url_en": "https://leetcode.com/problems/increasing-triplet-subsequence", "relative_path_cn": "/leetcode/0300-0399/0334.Increasing%20Triplet%20Subsequence/README.md", "relative_path_en": "/leetcode/0300-0399/0334.Increasing%20Triplet%20Subsequence/README_EN.md", "title_cn": "\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217", "title_en": "Increasing Triplet Subsequence", "question_title_slug": "increasing-triplet-subsequence", "content_en": "<p>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.</p>\r\n\r\n<p>Formally the function should:</p>\r\n\r\n<blockquote>Return true if there exists <i>i, j, k </i><br />\r\nsuch that <i>arr[i]</i> &lt; <i>arr[j]</i> &lt; <i>arr[k]</i> given 0 &le; <i>i</i> &lt; <i>j</i> &lt; <i>k</i> &le; <i>n</i>-1 else return false.</blockquote>\r\n\r\n<p><strong>Note: </strong>Your algorithm should run in O(<i>n</i>) time complexity and O(<i>1</i>) space complexity.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,4,3,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u6570\u5b66\u8868\u8fbe\u5f0f\u5982\u4e0b:</p>\n\n<blockquote>\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684&nbsp;<em>i, j, k,&nbsp;</em>&nbsp;\u4e14\u6ee1\u8db3&nbsp;0 &le; <em>i</em> &lt; <em>j</em> &lt; <em>k</em> &le; <em>n</em>-1\uff0c<br>\n\u4f7f\u5f97&nbsp;<em>arr[i]</em> &lt; <em>arr[j]</em> &lt; <em>arr[k] </em>\uff0c\u8fd4\u56de true ;&nbsp;\u5426\u5219\u8fd4\u56de false \u3002</blockquote>\n\n<p><strong>\u8bf4\u660e:</strong> \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(<em>n</em>)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(<em>1</em>) \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5]\n<strong>\u8f93\u51fa: </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[5,4,3,2,1]\n<strong>\u8f93\u51fa: </strong>false</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean increasingTriplet(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool increasingTriplet(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IncreasingTriplet(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef increasing_triplet(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func increasingTriplet(_ nums: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func increasingTriplet(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def increasingTriplet(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun increasingTriplet(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn increasing_triplet(nums: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function increasingTriplet($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function increasingTriplet(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0335", "frontend_question_id": "0335", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/self-crossing", "url_en": "https://leetcode.com/problems/self-crossing", "relative_path_cn": "/leetcode/0300-0399/0335.Self%20Crossing/README.md", "relative_path_en": "/leetcode/0300-0399/0335.Self%20Crossing/README_EN.md", "title_cn": "\u8def\u5f84\u4ea4\u53c9", "title_en": "Self Crossing", "question_title_slug": "self-crossing", "content_en": "<p>You are given an array <i>x</i> of <code>n</code> positive numbers. You start at point <code>(0,0)</code> and moves <code>x[0]</code> metres to the north, then <code>x[1]</code> metres to the west, <code>x[2]</code> metres to the south, <code>x[3]</code> metres to the east and so on. In other words, after each move your direction changes counter-clockwise.</p>\r\n\r\n<p>Write a one-pass algorithm with <code>O(1)</code> extra space to determine, if your path crosses itself, or not.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; \u2502\r\n\u2514\u2500\u2500\u2500\u253c\u2500\u2500&gt;\r\n&nbsp; &nbsp; \u2502\r\n\r\nInput: </strong><code>[2,1,1,2]</code>\r\n<strong>Output: </strong>true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; &nbsp; &nbsp;\u2502\r\n\u2502\r\n\u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\r\n\r\nInput:</strong> <code>[1,2,3,4]</code>\r\n<strong>Output: </strong>false \r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; \u2502\r\n\u2514\u2500\u2500\u2500\u253c&gt;\r\n\r\nInput:</strong> <code>[1,1,1,1]</code>\r\n<strong>Output:</strong> true \r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709&nbsp;<code>n</code>&nbsp;\u4e2a\u6b63\u6570\u7684\u6570\u7ec4&nbsp;<em>x</em>\u3002\u4ece\u70b9&nbsp;<code>(0,0)</code>&nbsp;\u5f00\u59cb\uff0c\u5148\u5411\u5317\u79fb\u52a8&nbsp;<code>x[0]</code>&nbsp;\u7c73\uff0c\u7136\u540e\u5411\u897f\u79fb\u52a8&nbsp;<code>x[1]</code>&nbsp;\u7c73\uff0c\u5411\u5357\u79fb\u52a8&nbsp;<code>x[2]</code>&nbsp;\u7c73\uff0c\u5411\u4e1c\u79fb\u52a8&nbsp;<code>x[3]</code>&nbsp;\u7c73\uff0c\u6301\u7eed\u79fb\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u79fb\u52a8\u540e\u4f60\u7684\u65b9\u4f4d\u4f1a\u53d1\u751f\u9006\u65f6\u9488\u53d8\u5316\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a&nbsp;<code>O(1)</code>&nbsp;\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\uff0c\u5224\u65ad\u4f60\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u662f\u5426\u76f8\u4ea4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2510\n\u2502 &nbsp; \u2502\n\u2514\u2500\u2500\u2500\u253c\u2500\u2500&gt;\n&nbsp; &nbsp; \u2502\n\n\u8f93\u5165: </strong><code>[2,1,1,2]</code>\n<strong>\u8f93\u51fa:</strong> true \n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 &nbsp; &nbsp; &nbsp;\u2502\n\u2502\n\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\n\n\u8f93\u5165: </strong><code>[1,2,3,4]</code>\n<strong>\u8f93\u51fa: </strong>false \n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2510\n\u2502 &nbsp; \u2502\n\u2514\u2500\u2500\u2500\u253c&gt;\n\n\u8f93\u5165:</strong> <code>[1,1,1,1]</code>\n<strong>\u8f93\u51fa:</strong> true \n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isSelfCrossing(vector<int>& x) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isSelfCrossing(int[] x) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isSelfCrossing(self, x):\n        \"\"\"\n        :type x: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isSelfCrossing(self, x: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isSelfCrossing(int* x, int xSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsSelfCrossing(int[] x) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} x\n * @return {boolean}\n */\nvar isSelfCrossing = function(x) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} x\n# @return {Boolean}\ndef is_self_crossing(x)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isSelfCrossing(_ x: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isSelfCrossing(x []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isSelfCrossing(x: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isSelfCrossing(x: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_self_crossing(x: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $x\n     * @return Boolean\n     */\n    function isSelfCrossing($x) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isSelfCrossing(x: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0336", "frontend_question_id": "0336", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/palindrome-pairs", "url_en": "https://leetcode.com/problems/palindrome-pairs", "relative_path_cn": "/leetcode/0300-0399/0336.Palindrome%20Pairs/README.md", "relative_path_en": "/leetcode/0300-0399/0336.Palindrome%20Pairs/README_EN.md", "title_cn": "\u56de\u6587\u5bf9", "title_en": "Palindrome Pairs", "question_title_slug": "palindrome-pairs", "content_en": "<p>Given a list of <b>unique</b> words, return all the pairs of the&nbsp;<b><i>distinct</i></b> indices <code>(i, j)</code> in the given list, so that the concatenation of the two words&nbsp;<code>words[i] + words[j]</code> is a palindrome.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>Output:</strong> [[0,1],[1,0],[3,2],[2,4]]\n<strong>Explanation:</strong> The palindromes are [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= words[i].length &lt;= 300</code></li>\n\t<li><code>words[i]</code> consists of lower-case English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong> \u4e92\u4e0d\u76f8\u540c</strong> \u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709<strong>\u4e0d\u540c<em>&nbsp;</em></strong>\u7684\u7d22\u5f15\u5bf9<code>(i, j)</code>\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c&nbsp;<code>words[i] + words[j]</code>&nbsp;\uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1],[1,0],[3,2],[2,4]] \n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a <code>[&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,1],[1,0]] \n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a <code>[&quot;battab&quot;,&quot;tabbat&quot;]</code></pre>\n", "tags_en": ["Trie", "Hash Table", "String"], "tags_cn": ["\u5b57\u5178\u6811", "\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> palindromePairs(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** palindromePairs(char ** words, int wordsSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> PalindromePairs(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {number[][]}\n */\nvar palindromePairs = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {Integer[][]}\ndef palindrome_pairs(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func palindromePairs(_ words: [String]) -> [[Int]] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func palindromePairs(words []string) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def palindromePairs(words: Array[String]): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun palindromePairs(words: Array<String>): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn palindrome_pairs(words: Vec<String>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer[][]\n     */\n    function palindromePairs($words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function palindromePairs(words: string[]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0337", "frontend_question_id": "0337", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/house-robber-iii", "url_en": "https://leetcode.com/problems/house-robber-iii", "relative_path_cn": "/leetcode/0300-0399/0337.House%20Robber%20III/README.md", "relative_path_en": "/leetcode/0300-0399/0337.House%20Robber%20III/README_EN.md", "title_cn": "\u6253\u5bb6\u52ab\u820d III", "title_en": "House Robber III", "question_title_slug": "house-robber-iii", "content_en": "<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the &quot;root.&quot; Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that &quot;all houses in this place forms a binary tree&quot;. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>\r\n\r\n<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,2,3,null,3,null,1]\r\n\r\n     <font color=\"red\">3</font>\r\n    / \\\r\n   2   3\r\n    \\   \\ \r\n     <font color=\"red\">3   1\r\n</font>\r\n<strong>Output:</strong> 7 \r\n<strong>Explanation:</strong>&nbsp;Maximum amount of money the thief can rob = <font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">3</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> + </span><font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">3</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> + </span><font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">1</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> = </span><b style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">7</b><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,4,5,1,3,null,1]\r\n\r\n&nbsp;    3\r\n    / \\\r\n   <font color=\"red\">4</font>   <font color=\"red\">5</font>\r\n  / \\   \\ \r\n 1   3   1\r\n\r\n<strong>Output:</strong> 9\r\n<strong>Explanation:</strong>&nbsp;Maximum amount of money the thief can rob = <font color=\"red\">4</font> + <font color=\"red\">5</font> = <b>9</b>.\r\n</pre>", "content_cn": "<p>\u5728\u4e0a\u6b21\u6253\u52ab\u5b8c\u4e00\u6761\u8857\u9053\u4e4b\u540e\u548c\u4e00\u5708\u623f\u5c4b\u540e\uff0c\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a&ldquo;\u6839&rdquo;\u3002 \u9664\u4e86&ldquo;\u6839&rdquo;\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a&ldquo;\u7236&ldquo;\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230&ldquo;\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811&rdquo;\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002</p>\n\n<p>\u8ba1\u7b97\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[3,2,3,null,3,null,1]\n\n     <strong>3</strong>\n    / \\\n   2   3\n    \\   \\ \n     <strong>3</strong>   <strong>1</strong>\n\n<strong>\u8f93\u51fa:</strong> 7 \n<strong>\u89e3\u91ca:</strong>&nbsp;\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = <strong>7</strong>.</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[3,4,5,1,3,null,1]\n\n&nbsp;    3\n    / \\\n   <strong>4</strong>   <strong>5</strong>\n  / \\   \\ \n 1   3   1\n\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong>&nbsp;\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d&nbsp;= <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.\n</pre>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def rob(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def rob(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint rob(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int Rob(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar rob = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef rob(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func rob(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rob(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def rob(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun rob(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn rob(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function rob($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction rob(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0338", "frontend_question_id": "0338", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/counting-bits", "url_en": "https://leetcode.com/problems/counting-bits", "relative_path_cn": "/leetcode/0300-0399/0338.Counting%20Bits/README.md", "relative_path_en": "/leetcode/0300-0399/0338.Counting%20Bits/README_EN.md", "title_cn": "\u6bd4\u7279\u4f4d\u8ba1\u6570", "title_en": "Counting Bits", "question_title_slug": "counting-bits", "content_en": "<p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 &le; i &le; num</b> calculate the number of 1&#39;s in their binary representation and return them as an array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,1]</span></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><code>[0,1,1,2,1,2]</code>\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\r\n\t<li>Space complexity should be <b>O(n)</b>.</li>\r\n\t<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b> in c++ or in any other language.</li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<strong>num</strong>\u3002\u5bf9\u4e8e&nbsp;<strong>0 &le; i &le; num </strong>\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57&nbsp;<strong>i&nbsp;</strong>\uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 1 \u7684\u6570\u76ee\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u6570\u7ec4\u8fd4\u56de\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>[0,1,1]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong><code>[0,1,1,2,1,2]</code></pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n*sizeof(integer))</strong>\u7684\u89e3\u7b54\u975e\u5e38\u5bb9\u6613\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4<strong>O(n)</strong>\u5185\u7528\u4e00\u8d9f\u626b\u63cf\u505a\u5230\u5417\uff1f</li>\n\t<li>\u8981\u6c42\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n)</strong>\u3002</li>\n\t<li>\u4f60\u80fd\u8fdb\u4e00\u6b65\u5b8c\u5584\u89e3\u6cd5\u5417\uff1f\u8981\u6c42\u5728C++\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\uff08\u5982 C++ \u4e2d\u7684&nbsp;<strong>__builtin_popcount</strong>\uff09\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002</li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Dynamic Programming"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> countBits(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] countBits(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countBits(self, num: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countBits(int num, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] CountBits(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number[]}\n */\nvar countBits = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer[]}\ndef count_bits(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countBits(_ num: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countBits(num int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countBits(num: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countBits(num: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_bits(num: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer[]\n     */\n    function countBits($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countBits(num: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0339", "frontend_question_id": "0339", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/nested-list-weight-sum", "url_en": "https://leetcode.com/problems/nested-list-weight-sum", "relative_path_cn": "/leetcode/0300-0399/0339.Nested%20List%20Weight%20Sum/README.md", "relative_path_en": "/leetcode/0300-0399/0339.Nested%20List%20Weight%20Sum/README_EN.md", "title_cn": "\u5d4c\u5957\u5217\u8868\u6743\u91cd\u548c", "title_en": "Nested List Weight Sum", "question_title_slug": "nested-list-weight-sum", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0340", "frontend_question_id": "0340", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/longest-substring-with-at-most-k-distinct-characters", "url_en": "https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters", "relative_path_cn": "/leetcode/0300-0399/0340.Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/README.md", "relative_path_en": "/leetcode/0300-0399/0340.Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/README_EN.md", "title_cn": "\u81f3\u591a\u5305\u542b K \u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32", "title_en": "Longest Substring with At Most K Distinct Characters", "question_title_slug": "longest-substring-with-at-most-k-distinct-characters", "content_en": null, "content_cn": null, "tags_en": ["Hash Table", "String", "Sliding Window"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0341", "frontend_question_id": "0341", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/flatten-nested-list-iterator", "url_en": "https://leetcode.com/problems/flatten-nested-list-iterator", "relative_path_cn": "/leetcode/0300-0399/0341.Flatten%20Nested%20List%20Iterator/README.md", "relative_path_en": "/leetcode/0300-0399/0341.Flatten%20Nested%20List%20Iterator/README_EN.md", "title_cn": "\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668", "title_en": "Flatten Nested List Iterator", "question_title_slug": "flatten-nested-list-iterator", "content_en": "<p>Given a nested list of integers, implement an iterator to flatten it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],2,[1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,1,2,1,1]\r\n</span><strong>Explanation: </strong>By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \r\n&nbsp;            the order of elements returned by <i>next</i> should be: <code>[1,1,2,1,1]</code>.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,[4,[6]]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,4,6]\r\n</span><strong>Explanation: </strong>By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \r\n&nbsp;            the order of elements returned by <i>next</i> should be: <code>[1,4,6]</code>.\r\n</pre>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002\u5176\u4e2d\u5217\u8868\u7684\u5143\u7d20\u4e5f\u53ef\u80fd\u662f\u6574\u6570\u6216\u662f\u5176\u4ed6\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[1,1],2,[1,1]]\n<strong>\u8f93\u51fa: </strong>[1,1,2,1,1]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next </em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56de false\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,1,2,1,1]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,[4,[6]]]\n<strong>\u8f93\u51fa: </strong>[1,4,6]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next&nbsp;</em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56de false\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,4,6]</code>\u3002\n</pre>\n", "tags_en": ["Stack", "Design"], "tags_cn": ["\u6808", "\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    NestedIterator(vector<NestedInteger> &nestedList) {\n        \n    }\n    \n    int next() {\n        \n    }\n    \n    bool hasNext() {\n        \n    }\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\npublic class NestedIterator implements Iterator<Integer> {\n\n    public NestedIterator(List<NestedInteger> nestedList) {\n        \n    }\n\n    @Override\n    public Integer next() {\n        \n    }\n\n    @Override\n    public boolean hasNext() {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i = new NestedIterator(nestedList);\n * while (i.hasNext()) v[f()] = i.next();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass NestedIterator(object):\n\n    def __init__(self, nestedList):\n        \"\"\"\n        Initialize your data structure here.\n        :type nestedList: List[NestedInteger]\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        \n    \n    def next(self) -> int:\n        \n    \n    def hasNext(self) -> bool:\n         \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger *);\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger *);\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\n *\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * int NestedIntegerGetListSize(struct NestedInteger *);\n * };\n */\nstruct NestedIterator {\n    \n};\n\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\n    \n}\n\nbool nestedIterHasNext(struct NestedIterator *iter) {\n    \n}\n\nint nestedIterNext(struct NestedIterator *iter) {\n    \n}\n\n/** Deallocates memory previously allocated for the iterator */\nvoid nestedIterFree(struct NestedIterator *iter) {\n    \n}\n\n/**\n * Your NestedIterator will be called like this:\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\n * while (nestedIterHasNext(i)) printf(\"%d\\n\", nestedIterNext(i));\n * nestedIterFree(i);\n */", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     int GetInteger();\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class NestedIterator {\n\n    public NestedIterator(IList<NestedInteger> nestedList) {\n        \n    }\n\n    public bool HasNext() {\n        \n    }\n\n    public int Next() {\n        \n    }\n}\n\n/**\n * Your NestedIterator will be called like this:\n * NestedIterator i = new NestedIterator(nestedList);\n * while (i.HasNext()) v[f()] = i.Next();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @constructor\n * @param {NestedInteger[]} nestedList\n */\nvar NestedIterator = function(nestedList) {\n    \n};\n\n\n/**\n * @this NestedIterator\n * @returns {boolean}\n */\nNestedIterator.prototype.hasNext = function() {\n    \n};\n\n/**\n * @this NestedIterator\n * @returns {integer}\n */\nNestedIterator.prototype.next = function() {\n    \n};\n\n/**\n * Your NestedIterator will be called like this:\n * var i = new NestedIterator(nestedList), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a nested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return nil if this NestedInteger holds a single integer\n#        @return {NestedInteger[]}\n#        \"\"\"\n\nclass NestedIterator\n    # @param {NestedInteger[]} nested_list\n    def initialize(nested_list)\n        \n    end\n\n    # @return {Boolean}\n    def has_next\n        \n    end\n\n    # @return {Integer}\n    def next\n        \n    end\nend\n\n# Your NestedIterator will be called like this:\n# i, v = NestedIterator.new(nested_list), []\n# while i.has_next()\n#    v << i.next\n# end", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     public func getList() -> [NestedInteger]\n * }\n */\n\nclass NestedIterator {\n\n    init(_ nestedList: [NestedInteger]) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * let obj = NestedIterator(nestedList)\n * let ret_1: Int = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * type NestedInteger struct {\n * }\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * func (this NestedInteger) IsInteger() bool {}\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * // So before calling this method, you should have a check\n * func (this NestedInteger) GetInteger() int {}\n *\n * // Set this NestedInteger to hold a single integer.\n * func (n *NestedInteger) SetInteger(value int) {}\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n * func (this *NestedInteger) Add(elem NestedInteger) {}\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The list length is zero if this NestedInteger holds a single integer\n * // You can access NestedInteger's List element directly if you want to modify it\n * func (this NestedInteger) GetList() []*NestedInteger {}\n */\n\ntype NestedIterator struct {\n    \n}\n\nfunc Constructor(nestedList []*NestedInteger) *NestedIterator {\n    \n}\n\nfunc (this *NestedIterator) Next() int {\n    \n}\n\nfunc (this *NestedIterator) HasNext() bool {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *   def isInteger: Boolean = {}\n *\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer\n *   def getInteger: Int = {}\n *\n *   // Set this NestedInteger to hold a single integer.\n *   def setInteger(i: Int) = {}\n *\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list\n *   def getList = {}\n *\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *   def add(ni: NestedInteger) = {}\n * }\n */\n\nclass NestedIterator(_nestedList: List[NestedInteger]) {\n    def next(): Int = {\n        \n    }\n    \n    def hasNext(): Boolean = {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * var obj = new NestedIterator(nestedList)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     constructor()\n *\n *     // Constructor initializes a single integer.\n *     constructor(value: Int)\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     fun isInteger(): Boolean\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     fun getInteger(): Int?\n *\n *     // Set this NestedInteger to hold a single integer.\n *     fun setInteger(value: Int): Unit\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     fun add(ni: NestedInteger): Unit\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     fun getList(): List<NestedInteger>?\n * }\n */\n\nclass NestedIterator(nestedList: List<NestedInteger>) {\n    fun next(): Int {\n        \n    }\n    \n    fun hasNext(): Boolean {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * var obj = NestedIterator(nestedList)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// #[derive(Debug, PartialEq, Eq)]\n// pub enum NestedInteger {\n//   Int(i32),\n//   List(Vec<NestedInteger>)\n// }\nstruct NestedIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NestedIterator {\n\n    fn new(nestedList: Vec<NestedInteger>) -> Self {\n        \n    }\n    \n    fn next(&self) -> i32 {\n        \n    }\n    \n    fn has_next(&self) -> bool {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * let obj = NestedIterator::new(nestedList);\n * let ret_1: i32 = obj.next();\n * let ret_2: bool = obj.has_next();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *\n *     // if value is not specified, initializes an empty list.\n *     // Otherwise initializes a single integer equal to value.\n *     function __construct($value = null)\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single integer.\n *     function setInteger($i) : void\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     function add($ni) : void\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     function getList() : array\n * }\n */\n\nclass NestedIterator {\n    /**\n     * @param NestedInteger[] $nestedList\n     */\n    function __construct($nestedList) {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n    \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * $obj = NestedIterator($nestedList);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->hasNext();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     If value is provided, then it holds a single integer\n *     Otherwise it holds an empty nested list\n *     constructor(value?: number) {\n *         ...\n *     };\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     isInteger(): boolean {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     getInteger(): number | null {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     setInteger(value: number) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     add(elem: NestedInteger) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds,\n *     or an empty list if this NestedInteger holds a single integer\n *     getList(): NestedInteger[] {\n *         ...\n *     };\n * };\n */\n\nclass NestedIterator {\n    constructor(nestedList: NestedInteger[]) {\n\t\t\n    }\n\n    hasNext(): boolean {\n\t\t\n    }\n\n\tnext(): number {\n\t\t\n    }\n}\n\n/**\n * Your ParkingSystem object will be instantiated and called as such:\n * var obj = new NestedIterator(nestedList)\n * var a: number[] = []\n * while (obj.hasNext()) a.push(obj.next());\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0342", "frontend_question_id": "0342", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/power-of-four", "url_en": "https://leetcode.com/problems/power-of-four", "relative_path_cn": "/leetcode/0300-0399/0342.Power%20of%20Four/README.md", "relative_path_en": "/leetcode/0300-0399/0342.Power%20of%20Four/README_EN.md", "title_cn": "4\u7684\u5e42", "title_en": "Power of Four", "question_title_slug": "power-of-four", "content_en": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of four. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 4 \u7684\u5e42\u6b21\u65b9\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u6574\u6570 <code>n</code> \u662f 4 \u7684\u5e42\u6b21\u65b9\u9700\u6ee1\u8db3\uff1a\u5b58\u5728\u6574\u6570 <code>x</code> \u4f7f\u5f97 <code>n == 4<sup>x</sup></code></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 16\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 5\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> <= n <= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f</li>\n</ul>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPowerOfFour(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPowerOfFour(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isPowerOfFour(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPowerOfFour(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfFour = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_power_of_four(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPowerOfFour(_ n: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isPowerOfFour(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPowerOfFour(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPowerOfFour(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_power_of_four(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isPowerOfFour($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPowerOfFour(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0343", "frontend_question_id": "0343", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/integer-break", "url_en": "https://leetcode.com/problems/integer-break", "relative_path_cn": "/leetcode/0300-0399/0343.Integer%20Break/README.md", "relative_path_en": "/leetcode/0300-0399/0343.Integer%20Break/README_EN.md", "title_cn": "\u6574\u6570\u62c6\u5206", "title_en": "Integer Break", "question_title_slug": "integer-break", "content_en": "<p>Given a positive integer <i>n</i>, break it into the sum of <b>at least</b> two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>2 = 1 + 1, 1 &times; 1 = 1.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">36</span>\r\n<strong>Explanation: </strong>10 = 3 + 3 + 4, 3 &times;&nbsp;3 &times;&nbsp;4 = 36.</pre>\r\n\r\n<p><b>Note</b>: You may assume that <i>n</i> is not less than 2 and not larger than 58.</p>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u5c06\u5176\u62c6\u5206\u4e3a<strong>\u81f3\u5c11</strong>\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>2 = 1 + 1, 1 &times; 1 = 1\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>10\n<strong>\u8f93\u51fa: </strong>36\n<strong>\u89e3\u91ca: </strong>10 = 3 + 3 + 4, 3 &times;&nbsp;3 &times;&nbsp;4 = 36\u3002</pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em>n&nbsp;</em>\u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002</p>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int integerBreak(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int integerBreak(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def integerBreak(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint integerBreak(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IntegerBreak(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef integer_break(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func integerBreak(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func integerBreak(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def integerBreak(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun integerBreak(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn integer_break(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function integerBreak($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function integerBreak(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0344", "frontend_question_id": "0344", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-string", "url_en": "https://leetcode.com/problems/reverse-string", "relative_path_cn": "/leetcode/0300-0399/0344.Reverse%20String/README.md", "relative_path_en": "/leetcode/0300-0399/0344.Reverse%20String/README_EN.md", "title_cn": "\u53cd\u8f6c\u5b57\u7b26\u4e32", "title_en": "Reverse String", "question_title_slug": "reverse-string", "content_en": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>char[]</code>.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array&nbsp;<a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p>You may assume all the characters consist of <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">printable ascii characters</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 <code>char[]</code> \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002</p>\n\n<p>\u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b<strong><a href=\"https://baike.baidu.com/item/\u539f\u5730\u7b97\u6cd5\" target=\"_blank\">\u539f\u5730</a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f <a href=\"https://baike.baidu.com/item/ASCII\" target=\"_blank\">ASCII</a> \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</pre>\n", "tags_en": ["Two Pointers", "String"], "tags_cn": ["\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public void reverseString(char[] s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nvoid reverseString(char* s, int sSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public void ReverseString(char[] s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[]} s\n# @return {Void} Do not return anything, modify s in-place instead.\ndef reverse_string(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseString(_ s: inout [Character]) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseString(s []byte)  {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseString(s: Array[Char]): Unit = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseString(s: CharArray): Unit {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_string(s: &mut Vec<char>) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $s\n     * @return NULL\n     */\n    function reverseString(&$s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n Do not return anything, modify s in-place instead.\n */\nfunction reverseString(s: string[]): void {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0345", "frontend_question_id": "0345", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-vowels-of-a-string", "url_en": "https://leetcode.com/problems/reverse-vowels-of-a-string", "relative_path_cn": "/leetcode/0300-0399/0345.Reverse%20Vowels%20of%20a%20String/README.md", "relative_path_en": "/leetcode/0300-0399/0345.Reverse%20Vowels%20of%20a%20String/README_EN.md", "title_cn": "\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd", "title_en": "Reverse Vowels of a String", "question_title_slug": "reverse-vowels-of-a-string", "content_en": "<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;hello&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;holle&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;leetcode&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;leotcede&quot;</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b><br />\r\nThe vowels does not include the letter &quot;y&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;hello&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;holle&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;leetcode&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;leotcede&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u542b\u5b57\u6bcd &quot;y&quot; \u3002</li>\n</ul>\n", "tags_en": ["Two Pointers", "String"], "tags_cn": ["\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseVowels(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reverseVowels(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * reverseVowels(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReverseVowels(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseVowels = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reverse_vowels(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseVowels(_ s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseVowels(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseVowels(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseVowels(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_vowels(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseVowels($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverseVowels(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0346", "frontend_question_id": "0346", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/moving-average-from-data-stream", "url_en": "https://leetcode.com/problems/moving-average-from-data-stream", "relative_path_cn": "/leetcode/0300-0399/0346.Moving%20Average%20from%20Data%20Stream/README.md", "relative_path_en": "/leetcode/0300-0399/0346.Moving%20Average%20from%20Data%20Stream/README_EN.md", "title_cn": "\u6570\u636e\u6d41\u4e2d\u7684\u79fb\u52a8\u5e73\u5747\u503c", "title_en": "Moving Average from Data Stream", "question_title_slug": "moving-average-from-data-stream", "content_en": null, "content_cn": null, "tags_en": ["Design", "Queue"], "tags_cn": ["\u8bbe\u8ba1", "\u961f\u5217"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0347", "frontend_question_id": "0347", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/top-k-frequent-elements", "url_en": "https://leetcode.com/problems/top-k-frequent-elements", "relative_path_cn": "/leetcode/0300-0399/0347.Top%20K%20Frequent%20Elements/README.md", "relative_path_en": "/leetcode/0300-0399/0347.Top%20K%20Frequent%20Elements/README_EN.md", "title_cn": "\u524d K \u4e2a\u9ad8\u9891\u5143\u7d20", "title_en": "Top K Frequent Elements", "question_title_slug": "top-k-frequent-elements", "content_en": "<p>Given a non-empty array of integers, return the <b><i>k</i></b> most frequent elements.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,1,1,2,2,3]</span>, k = <span id=\"example-input-1-2\">2</span>\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1]</span>, k = <span id=\"example-input-2-2\">1</span>\n<strong>Output: </strong><span id=\"example-output-2\">[1]</span></pre>\n</div>\n\n<p><b>Note: </b></p>\n\n<ul>\n\t<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\n\t<li>Your algorithm&#39;s time complexity <b>must be</b> better than O(<i>n</i> log <i>n</i>), where <i>n</i> is the array&#39;s size.</li>\n\t<li>It&#39;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.</li>\n\t<li>You can return the answer in any order.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d&nbsp;<strong><em>k&nbsp;</em></strong>\u9ad8\u7684\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>\u8f93\u51fa: </strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1], k = 1\n<strong>\u8f93\u51fa: </strong>[1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684&nbsp;<em>k&nbsp;</em>\u603b\u662f\u5408\u7406\u7684\uff0c\u4e14 1 &le; k &le; \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002</li>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6<strong>\u5fc5\u987b</strong>\u4f18\u4e8e O(<em>n</em> log <em>n</em>) ,&nbsp;<em>n&nbsp;</em>\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n\t<li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u552f\u4e00\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6570\u7ec4\u4e2d\u524d k \u4e2a\u9ad8\u9891\u5143\u7d20\u7684\u96c6\u5408\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</li>\n</ul>\n", "tags_en": ["Heap", "Hash Table"], "tags_cn": ["\u5806", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] TopKFrequent(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef top_k_frequent(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func topKFrequent(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func topKFrequent(nums []int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun topKFrequent(nums: IntArray, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topKFrequent($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function topKFrequent(nums: number[], k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0348", "frontend_question_id": "0348", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-tic-tac-toe", "url_en": "https://leetcode.com/problems/design-tic-tac-toe", "relative_path_cn": "/leetcode/0300-0399/0348.Design%20Tic-Tac-Toe/README.md", "relative_path_en": "/leetcode/0300-0399/0348.Design%20Tic-Tac-Toe/README_EN.md", "title_cn": "\u5224\u5b9a\u4e95\u5b57\u68cb\u80dc\u8d1f", "title_en": "Design Tic-Tac-Toe", "question_title_slug": "design-tic-tac-toe", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0349", "frontend_question_id": "0349", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/intersection-of-two-arrays", "url_en": "https://leetcode.com/problems/intersection-of-two-arrays", "relative_path_cn": "/leetcode/0300-0399/0349.Intersection%20of%20Two%20Arrays/README.md", "relative_path_en": "/leetcode/0300-0399/0349.Intersection%20of%20Two%20Arrays/README_EN.md", "title_cn": "\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6", "title_en": "Intersection of Two Arrays", "question_title_slug": "intersection-of-two-arrays", "content_en": "<p>Given two arrays, write a function to compute their intersection.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,2,2,1]</span>, nums2 = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-2-1\">[4,9,5]</span>, nums2 = <span id=\"example-input-2-2\">[9,4,9,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[9,4]</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Each element in the result must be unique.</li>\r\n\t<li>The result can be in any order.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>\u8f93\u51fa\uff1a</strong>[2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>\u8f93\u51fa\uff1a</strong>[9,4]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002</li>\n</ul>\n", "tags_en": ["Sort", "Hash Table", "Two Pointers", "Binary Search"], "tags_cn": ["\u6392\u5e8f", "\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] Intersection(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersection(nums1, nums2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func intersection(nums1 []int, nums2 []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersection($nums1, $nums2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function intersection(nums1: number[], nums2: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0350", "frontend_question_id": "0350", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/intersection-of-two-arrays-ii", "url_en": "https://leetcode.com/problems/intersection-of-two-arrays-ii", "relative_path_cn": "/leetcode/0300-0399/0350.Intersection%20of%20Two%20Arrays%20II/README.md", "relative_path_en": "/leetcode/0300-0399/0350.Intersection%20of%20Two%20Arrays%20II/README_EN.md", "title_cn": "\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II", "title_en": "Intersection of Two Arrays II", "question_title_slug": "intersection-of-two-arrays-ii", "content_en": "<p>Given two arrays, write a function to compute their intersection.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,2,2,1]</span>, nums2 = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-2-1\">[4,9,5]</span>, nums2 = <span id=\"example-input-2-2\">[9,4,9,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,9]</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Each element in the result should appear as many times as it shows in both arrays.</li>\r\n\t<li>The result can be in any order.</li>\r\n</ul>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\r\n\t<li>What if <i>nums1</i>&#39;s size is small compared to <i>nums2</i>&#39;s size? Which algorithm is better?</li>\r\n\t<li>What if elements of <i>nums2</i> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>\u8f93\u51fa\uff1a</strong>[2,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>\u8f93\u51fa\uff1a</strong>[4,9]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e00\u81f4\u3002</li>\n\t<li>\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002</li>\n</ul>\n\n<p><strong><strong>\u8fdb\u9636</strong>\uff1a</strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n\t<li>\u5982\u679c&nbsp;<em>nums1&nbsp;</em>\u7684\u5927\u5c0f\u6bd4&nbsp;<em>nums2&nbsp;</em>\u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f</li>\n\t<li>\u5982\u679c&nbsp;<em>nums2&nbsp;</em>\u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f</li>\n</ul>\n", "tags_en": ["Sort", "Hash Table", "Two Pointers", "Binary Search"], "tags_cn": ["\u6392\u5e8f", "\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] Intersect(int[] nums1, int[] nums2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersect = function(nums1, nums2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef intersect(nums1, nums2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func intersect(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func intersect(nums1 []int, nums2 []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun intersect(nums1: IntArray, nums2: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn intersect(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer[]\n     */\n    function intersect($nums1, $nums2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function intersect(nums1: number[], nums2: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0351", "frontend_question_id": "0351", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/android-unlock-patterns", "url_en": "https://leetcode.com/problems/android-unlock-patterns", "relative_path_cn": "/leetcode/0300-0399/0351.Android%20Unlock%20Patterns/README.md", "relative_path_en": "/leetcode/0300-0399/0351.Android%20Unlock%20Patterns/README_EN.md", "title_cn": "\u5b89\u5353\u7cfb\u7edf\u624b\u52bf\u89e3\u9501", "title_en": "Android Unlock Patterns", "question_title_slug": "android-unlock-patterns", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming", "Backtracking"], "tags_cn": ["\u52a8\u6001\u89c4\u5212", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0352", "frontend_question_id": "0352", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals", "url_en": "https://leetcode.com/problems/data-stream-as-disjoint-intervals", "relative_path_cn": "/leetcode/0300-0399/0352.Data%20Stream%20as%20Disjoint%20Intervals/README.md", "relative_path_en": "/leetcode/0300-0399/0352.Data%20Stream%20as%20Disjoint%20Intervals/README_EN.md", "title_cn": "\u5c06\u6570\u636e\u6d41\u53d8\u4e3a\u591a\u4e2a\u4e0d\u76f8\u4ea4\u533a\u95f4", "title_en": "Data Stream as Disjoint Intervals", "question_title_slug": "data-stream-as-disjoint-intervals", "content_en": "<p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p>\n\n<pre>\n[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Follow up:</b></p>\n\n<p>What if there are lots of merges and the number of disjoint intervals are small compared to the data stream&#39;s size?</p>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u7684\u6570\u636e\u6d41\u8f93\u5165 a<sub>1</sub>\uff0ca<sub>2</sub>\uff0c&hellip;\uff0ca<sub>n\uff0c</sub>&hellip;\uff0c\u5c06\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u6570\u5b57\u603b\u7ed3\u4e3a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u5217\u8868\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6570\u636e\u6d41\u4e2d\u7684\u6574\u6570\u4e3a 1\uff0c3\uff0c7\uff0c2\uff0c6\uff0c&hellip;\uff0c\u6bcf\u6b21\u7684\u603b\u7ed3\u4e3a\uff1a</p>\n\n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u5982\u679c\u6709\u5f88\u591a\u5408\u5e76\uff0c\u5e76\u4e14\u4e0e\u6570\u636e\u6d41\u7684\u5927\u5c0f\u76f8\u6bd4\uff0c\u4e0d\u76f8\u4ea4\u533a\u95f4\u7684\u6570\u91cf\u5f88\u5c0f\uff0c\u8be5\u600e\u4e48\u529e?</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><br>\n\u7279\u522b\u611f\u8c22 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> \u63d0\u4f9b\u4e86\u672c\u95ee\u9898\u548c\u5176\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n", "tags_en": ["Binary Search", "Ordered Map"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class SummaryRanges {\npublic:\n    /** Initialize your data structure here. */\n    SummaryRanges() {\n\n    }\n    \n    void addNum(int val) {\n\n    }\n    \n    vector<vector<int>> getIntervals() {\n\n    }\n};\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges* obj = new SummaryRanges();\n * obj->addNum(val);\n * vector<vector<int>> param_2 = obj->getIntervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class SummaryRanges {\n\n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n\n    }\n    \n    public void addNum(int val) {\n\n    }\n    \n    public int[][] getIntervals() {\n\n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.addNum(val);\n * int[][] param_2 = obj.getIntervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class SummaryRanges(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getIntervals(self):\n        \"\"\"\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges()\n# obj.addNum(val)\n# param_2 = obj.getIntervals()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class SummaryRanges:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, val: int) -> None:\n        \n\n    def getIntervals(self) -> List[List[int]]:\n        \n\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges()\n# obj.addNum(val)\n# param_2 = obj.getIntervals()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} SummaryRanges;\n\n/** Initialize your data structure here. */\n\nSummaryRanges* summaryRangesCreate() {\n    \n}\n\nvoid summaryRangesAddNum(SummaryRanges* obj, int val) {\n  \n}\n\nint** summaryRangesGetIntervals(SummaryRanges* obj, int* retSize, int** retColSize) {\n  \n}\n\nvoid summaryRangesFree(SummaryRanges* obj) {\n    \n}\n\n/**\n * Your SummaryRanges struct will be instantiated and called as such:\n * SummaryRanges* obj = summaryRangesCreate();\n * summaryRangesAddNum(obj, val);\n \n * int** param_2 = summaryRangesGetIntervals(obj, retSize, retColSize);\n \n * summaryRangesFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class SummaryRanges {\n\n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n\n    }\n    \n    public void AddNum(int val) {\n\n    }\n    \n    public int[][] GetIntervals() {\n\n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.AddNum(val);\n * int[][] param_2 = obj.GetIntervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar SummaryRanges = function() {\n\n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nSummaryRanges.prototype.addNum = function(val) {\n\n};\n\n/**\n * @return {number[][]}\n */\nSummaryRanges.prototype.getIntervals = function() {\n\n};\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges()\n * obj.addNum(val)\n * var param_2 = obj.getIntervals()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class SummaryRanges\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_num(val)\n\n    end\n\n\n=begin\n    :rtype: Integer[][]\n=end\n    def get_intervals()\n\n    end\n\n\nend\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges.new()\n# obj.add_num(val)\n# param_2 = obj.get_intervals()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\r\nclass SummaryRanges {\r\n\r\n    /** Initialize your data structure here. */\r\n    init() {\r\n        \r\n    }\r\n    \r\n    func addNum(_ val: Int) {\r\n        \r\n    }\r\n    \r\n    func getIntervals() -> [[Int]] {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * let obj = SummaryRanges()\r\n * obj.addNum(val)\r\n * let ret_2: [[Int]] = obj.getIntervals()\r\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type SummaryRanges struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() SummaryRanges {\n\n}\n\n\nfunc (this *SummaryRanges) AddNum(val int)  {\n\n}\n\n\nfunc (this *SummaryRanges) GetIntervals() [][]int {\n\n}\n\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(val);\n * param_2 := obj.GetIntervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class SummaryRanges() {\n\n    /** Initialize your data structure here. */\n\n\n    def addNum(`val`: Int) {\n\n    }\n\n    def getIntervals(): Array[Array[Int]] = {\n\n    }\n\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges()\n * obj.addNum(`val`)\n * var param_2 = obj.getIntervals()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class SummaryRanges() {\n\n    /** Initialize your data structure here. */\n\n\n    fun addNum(`val`: Int) {\n\n    }\n\n    fun getIntervals(): Array<IntArray> {\n\n    }\n\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = SummaryRanges()\n * obj.addNum(`val`)\n * var param_2 = obj.getIntervals()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct SummaryRanges {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SummaryRanges {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, val: i32) {\n        \n    }\n    \n    fn get_intervals(&self) -> Vec<Vec<i32>> {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * let obj = SummaryRanges::new();\n * obj.add_num(val);\n * let ret_2: Vec<Vec<i32>> = obj.get_intervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class SummaryRanges {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addNum($val) {\n        \n    }\n  \n    /**\n     * @return Integer[][]\n     */\n    function getIntervals() {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * $obj = SummaryRanges();\n * $obj->addNum($val);\n * $ret_2 = $obj->getIntervals();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class SummaryRanges {\n    constructor() {\n\n    }\n\n    addNum(val: number): void {\n\n    }\n\n    getIntervals(): number[][] {\n\n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges()\n * obj.addNum(val)\n * var param_2 = obj.getIntervals()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0353", "frontend_question_id": "0353", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-snake-game", "url_en": "https://leetcode.com/problems/design-snake-game", "relative_path_cn": "/leetcode/0300-0399/0353.Design%20Snake%20Game/README.md", "relative_path_en": "/leetcode/0300-0399/0353.Design%20Snake%20Game/README_EN.md", "title_cn": "\u8d2a\u5403\u86c7", "title_en": "Design Snake Game", "question_title_slug": "design-snake-game", "content_en": null, "content_cn": null, "tags_en": ["Design", "Queue"], "tags_cn": ["\u8bbe\u8ba1", "\u961f\u5217"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0354", "frontend_question_id": "0354", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/russian-doll-envelopes", "url_en": "https://leetcode.com/problems/russian-doll-envelopes", "relative_path_cn": "/leetcode/0300-0399/0354.Russian%20Doll%20Envelopes/README.md", "relative_path_en": "/leetcode/0300-0399/0354.Russian%20Doll%20Envelopes/README_EN.md", "title_cn": "\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898", "title_en": "Russian Doll Envelopes", "question_title_slug": "russian-doll-envelopes", "content_en": "<p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\r\n\r\n<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>\r\n\r\n<p><b>Note:</b><br />\r\nRotation is not allowed.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[5,4],[6,4],[6,7],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation: T</strong></span>he maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\r\n</pre>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e9b\u6807\u8bb0\u4e86\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u4fe1\u5c01\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4ee5\u6574\u6570\u5bf9\u5f62\u5f0f&nbsp;<code>(w, h)</code>&nbsp;\u51fa\u73b0\u3002\u5f53\u53e6\u4e00\u4e2a\u4fe1\u5c01\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u6bd4\u8fd9\u4e2a\u4fe1\u5c01\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4fe1\u5c01\u5c31\u53ef\u4ee5\u653e\u8fdb\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\uff0c\u5982\u540c\u4fc4\u7f57\u65af\u5957\u5a03\u4e00\u6837\u3002</p>\n\n<p>\u8bf7\u8ba1\u7b97\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u4fe1\u5c01\u80fd\u7ec4\u6210\u4e00\u7ec4&ldquo;\u4fc4\u7f57\u65af\u5957\u5a03&rdquo;\u4fe1\u5c01\uff08\u5373\u53ef\u4ee5\u628a\u4e00\u4e2a\u4fe1\u5c01\u653e\u5230\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\u9762\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4e0d\u5141\u8bb8\u65cb\u8f6c\u4fe1\u5c01\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca:</strong> \u6700\u591a\u4fe1\u5c01\u7684\u4e2a\u6570\u4e3a <code>3, \u7ec4\u5408\u4e3a: </code>[2,3] =&gt; [5,4] =&gt; [6,7]\u3002\n</pre>\n", "tags_en": ["Binary Search", "Dynamic Programming"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxEnvelopes(int[][] envelopes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} envelopes\n * @return {number}\n */\nvar maxEnvelopes = function(envelopes) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} envelopes\n# @return {Integer}\ndef max_envelopes(envelopes)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxEnvelopes(envelopes [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxEnvelopes(envelopes: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_envelopes(envelopes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $envelopes\n     * @return Integer\n     */\n    function maxEnvelopes($envelopes) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxEnvelopes(envelopes: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0355", "frontend_question_id": "0355", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-twitter", "url_en": "https://leetcode.com/problems/design-twitter", "relative_path_cn": "/leetcode/0300-0399/0355.Design%20Twitter/README.md", "relative_path_en": "/leetcode/0300-0399/0355.Design%20Twitter/README_EN.md", "title_cn": "\u8bbe\u8ba1\u63a8\u7279", "title_en": "Design Twitter", "question_title_slug": "design-twitter", "content_en": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>postTweet(userId, tweetId)</b>: Compose a new tweet.</li>\r\n<li><b>getNewsFeed(userId)</b>: Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>\r\n<li><b>follow(followerId, followeeId)</b>: Follower follows a followee.</li>\r\n<li><b>unfollow(followerId, followeeId)</b>: Follower unfollows a followee.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nTwitter twitter = new Twitter();\r\n\r\n// User 1 posts a new tweet (id = 5).\r\ntwitter.postTweet(1, 5);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5].\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 follows user 2.\r\ntwitter.follow(1, 2);\r\n\r\n// User 2 posts a new tweet (id = 6).\r\ntwitter.postTweet(2, 6);\r\n\r\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\r\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 unfollows user 2.\r\ntwitter.unfollow(1, 2);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5],\r\n// since user 1 is no longer following user 2.\r\ntwitter.getNewsFeed(1);\r\n</pre>\r\n</p>", "content_cn": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u63a8\u7279(Twitter)\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u5b9e\u73b0\u53d1\u9001\u63a8\u6587\uff0c\u5173\u6ce8/\u53d6\u6d88\u5173\u6ce8\u5176\u4ed6\u7528\u6237\uff0c\u80fd\u591f\u770b\u89c1\u5173\u6ce8\u4eba\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7684\u6700\u8fd1\u5341\u6761\u63a8\u6587\u3002\u4f60\u7684\u8bbe\u8ba1\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u7684\u51e0\u4e2a\u529f\u80fd\uff1a</p>\n\n<ol>\n\t<li><strong>postTweet(userId, tweetId)</strong>: \u521b\u5efa\u4e00\u6761\u65b0\u7684\u63a8\u6587</li>\n\t<li><strong>getNewsFeed(userId)</strong>: \u68c0\u7d22\u6700\u8fd1\u7684\u5341\u6761\u63a8\u6587\u3002\u6bcf\u4e2a\u63a8\u6587\u90fd\u5fc5\u987b\u662f\u7531\u6b64\u7528\u6237\u5173\u6ce8\u7684\u4eba\u6216\u8005\u662f\u7528\u6237\u81ea\u5df1\u53d1\u51fa\u7684\u3002\u63a8\u6587\u5fc5\u987b\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u7531\u6700\u8fd1\u7684\u5f00\u59cb\u6392\u5e8f\u3002</li>\n\t<li><strong>follow(followerId, followeeId)</strong>: \u5173\u6ce8\u4e00\u4e2a\u7528\u6237</li>\n\t<li><strong>unfollow(followerId, followeeId)</strong>: \u53d6\u6d88\u5173\u6ce8\u4e00\u4e2a\u7528\u6237</li>\n</ol>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nTwitter twitter = new Twitter();\n\n// \u7528\u62371\u53d1\u9001\u4e86\u4e00\u6761\u65b0\u63a8\u6587 (\u7528\u6237id = 1, \u63a8\u6587id = 5).\ntwitter.postTweet(1, 5);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2aid\u4e3a5\u7684\u63a8\u6587.\ntwitter.getNewsFeed(1);\n\n// \u7528\u62371\u5173\u6ce8\u4e86\u7528\u62372.\ntwitter.follow(1, 2);\n\n// \u7528\u62372\u53d1\u9001\u4e86\u4e00\u4e2a\u65b0\u63a8\u6587 (\u63a8\u6587id = 6).\ntwitter.postTweet(2, 6);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u63a8\u6587\uff0cid\u5206\u522b\u4e3a -&gt; [6, 5].\n// \u63a8\u6587id6\u5e94\u5f53\u5728\u63a8\u6587id5\u4e4b\u524d\uff0c\u56e0\u4e3a\u5b83\u662f\u57285\u4e4b\u540e\u53d1\u9001\u7684.\ntwitter.getNewsFeed(1);\n\n// \u7528\u62371\u53d6\u6d88\u5173\u6ce8\u4e86\u7528\u62372.\ntwitter.unfollow(1, 2);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2aid\u4e3a5\u7684\u63a8\u6587.\n// \u56e0\u4e3a\u7528\u62371\u5df2\u7ecf\u4e0d\u518d\u5173\u6ce8\u7528\u62372.\ntwitter.getNewsFeed(1);\n</pre>\n", "tags_en": ["Heap", "Design", "Hash Table"], "tags_cn": ["\u5806", "\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Twitter {\npublic:\n    /** Initialize your data structure here. */\n    Twitter() {\n\n    }\n    \n    /** Compose a new tweet. */\n    void postTweet(int userId, int tweetId) {\n\n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    vector<int> getNewsFeed(int userId) {\n\n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    void follow(int followerId, int followeeId) {\n\n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    void unfollow(int followerId, int followeeId) {\n\n    }\n};\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter* obj = new Twitter();\n * obj->postTweet(userId,tweetId);\n * vector<int> param_2 = obj->getNewsFeed(userId);\n * obj->follow(followerId,followeeId);\n * obj->unfollow(followerId,followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n\n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n\n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n\n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void follow(int followerId, int followeeId) {\n\n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void unfollow(int followerId, int followeeId) {\n\n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Twitter(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def postTweet(self, userId, tweetId):\n        \"\"\"\n        Compose a new tweet.\n        :type userId: int\n        :type tweetId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getNewsFeed(self, userId):\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        :type userId: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def follow(self, followerId, followeeId):\n        \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def unfollow(self, followerId, followeeId):\n        \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        :type followerId: int\n        :type followeeId: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Twitter:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        \n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Compose a new tweet.\n        \"\"\"\n        \n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        \"\"\"\n        \n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n        \n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n        \n\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Twitter;\n\n/** Initialize your data structure here. */\n\nTwitter* twitterCreate() {\n    \n}\n\n/** Compose a new tweet. */\nvoid twitterPostTweet(Twitter* obj, int userId, int tweetId) {\n  \n}\n\n/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\nint* twitterGetNewsFeed(Twitter* obj, int userId, int* retSize) {\n  \n}\n\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterFollow(Twitter* obj, int followerId, int followeeId) {\n  \n}\n\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterUnfollow(Twitter* obj, int followerId, int followeeId) {\n  \n}\n\nvoid twitterFree(Twitter* obj) {\n    \n}\n\n/**\n * Your Twitter struct will be instantiated and called as such:\n * Twitter* obj = twitterCreate();\n * twitterPostTweet(obj, userId, tweetId);\n \n * int* param_2 = twitterGetNewsFeed(obj, userId, retSize);\n \n * twitterFollow(obj, followerId, followeeId);\n \n * twitterUnfollow(obj, followerId, followeeId);\n \n * twitterFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n\n    }\n    \n    /** Compose a new tweet. */\n    public void PostTweet(int userId, int tweetId) {\n\n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public IList<int> GetNewsFeed(int userId) {\n\n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void Follow(int followerId, int followeeId) {\n\n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void Unfollow(int followerId, int followeeId) {\n\n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.PostTweet(userId,tweetId);\n * IList<int> param_2 = obj.GetNewsFeed(userId);\n * obj.Follow(followerId,followeeId);\n * obj.Unfollow(followerId,followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar Twitter = function() {\n\n};\n\n/**\n * Compose a new tweet. \n * @param {number} userId \n * @param {number} tweetId\n * @return {void}\n */\nTwitter.prototype.postTweet = function(userId, tweetId) {\n\n};\n\n/**\n * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. \n * @param {number} userId\n * @return {number[]}\n */\nTwitter.prototype.getNewsFeed = function(userId) {\n\n};\n\n/**\n * Follower follows a followee. If the operation is invalid, it should be a no-op. \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.follow = function(followerId, followeeId) {\n\n};\n\n/**\n * Follower unfollows a followee. If the operation is invalid, it should be a no-op. \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.unfollow = function(followerId, followeeId) {\n\n};\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Twitter\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Compose a new tweet.\n    :type user_id: Integer\n    :type tweet_id: Integer\n    :rtype: Void\n=end\n    def post_tweet(user_id, tweet_id)\n\n    end\n\n\n=begin\n    Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n    :type user_id: Integer\n    :rtype: Integer[]\n=end\n    def get_news_feed(user_id)\n\n    end\n\n\n=begin\n    Follower follows a followee. If the operation is invalid, it should be a no-op.\n    :type follower_id: Integer\n    :type followee_id: Integer\n    :rtype: Void\n=end\n    def follow(follower_id, followee_id)\n\n    end\n\n\n=begin\n    Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n    :type follower_id: Integer\n    :type followee_id: Integer\n    :rtype: Void\n=end\n    def unfollow(follower_id, followee_id)\n\n    end\n\n\nend\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter.new()\n# obj.post_tweet(user_id, tweet_id)\n# param_2 = obj.get_news_feed(user_id)\n# obj.follow(follower_id, followee_id)\n# obj.unfollow(follower_id, followee_id)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Twitter {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    func postTweet(_ userId: Int, _ tweetId: Int) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    func getNewsFeed(_ userId: Int) -> [Int] {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    func follow(_ followerId: Int, _ followeeId: Int) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    func unfollow(_ followerId: Int, _ followeeId: Int) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * let obj = Twitter()\n * obj.postTweet(userId, tweetId)\n * let ret_2: [Int] = obj.getNewsFeed(userId)\n * obj.follow(followerId, followeeId)\n * obj.unfollow(followerId, followeeId)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Twitter struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() Twitter {\n\n}\n\n\n/** Compose a new tweet. */\nfunc (this *Twitter) PostTweet(userId int, tweetId int)  {\n\n}\n\n\n/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\nfunc (this *Twitter) GetNewsFeed(userId int) []int {\n\n}\n\n\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\nfunc (this *Twitter) Follow(followerId int, followeeId int)  {\n\n}\n\n\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\nfunc (this *Twitter) Unfollow(followerId int, followeeId int)  {\n\n}\n\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * obj := Constructor();\n * obj.PostTweet(userId,tweetId);\n * param_2 := obj.GetNewsFeed(userId);\n * obj.Follow(followerId,followeeId);\n * obj.Unfollow(followerId,followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Twitter() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Compose a new tweet. */\n    def postTweet(userId: Int, tweetId: Int) {\n\n    }\n\n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    def getNewsFeed(userId: Int): List[Int] = {\n\n    }\n\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    def follow(followerId: Int, followeeId: Int) {\n\n    }\n\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    def unfollow(followerId: Int, followeeId: Int) {\n\n    }\n\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Twitter() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Compose a new tweet. */\n    fun postTweet(userId: Int, tweetId: Int) {\n\n    }\n\n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    fun getNewsFeed(userId: Int): List<Int> {\n\n    }\n\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    fun follow(followerId: Int, followeeId: Int) {\n\n    }\n\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    fun unfollow(followerId: Int, followeeId: Int) {\n\n    }\n\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Twitter {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Twitter {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    /** Compose a new tweet. */\n    fn post_tweet(&self, user_id: i32, tweet_id: i32) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    fn get_news_feed(&self, user_id: i32) -> Vec<i32> {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    fn follow(&self, follower_id: i32, followee_id: i32) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    fn unfollow(&self, follower_id: i32, followee_id: i32) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * let obj = Twitter::new();\n * obj.post_tweet(userId, tweetId);\n * let ret_2: Vec<i32> = obj.get_news_feed(userId);\n * obj.follow(followerId, followeeId);\n * obj.unfollow(followerId, followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Twitter {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * Compose a new tweet.\n     * @param Integer $userId\n     * @param Integer $tweetId\n     * @return NULL\n     */\n    function postTweet($userId, $tweetId) {\n        \n    }\n  \n    /**\n     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n     * @param Integer $userId\n     * @return Integer[]\n     */\n    function getNewsFeed($userId) {\n        \n    }\n  \n    /**\n     * Follower follows a followee. If the operation is invalid, it should be a no-op.\n     * @param Integer $followerId\n     * @param Integer $followeeId\n     * @return NULL\n     */\n    function follow($followerId, $followeeId) {\n        \n    }\n  \n    /**\n     * Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n     * @param Integer $followerId\n     * @param Integer $followeeId\n     * @return NULL\n     */\n    function unfollow($followerId, $followeeId) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * $obj = Twitter();\n * $obj->postTweet($userId, $tweetId);\n * $ret_2 = $obj->getNewsFeed($userId);\n * $obj->follow($followerId, $followeeId);\n * $obj->unfollow($followerId, $followeeId);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Twitter {\n    constructor() {\n\n    }\n\n    postTweet(userId: number, tweetId: number): void {\n\n    }\n\n    getNewsFeed(userId: number): number[] {\n\n    }\n\n    follow(followerId: number, followeeId: number): void {\n\n    }\n\n    unfollow(followerId: number, followeeId: number): void {\n\n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0356", "frontend_question_id": "0356", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/line-reflection", "url_en": "https://leetcode.com/problems/line-reflection", "relative_path_cn": "/leetcode/0300-0399/0356.Line%20Reflection/README.md", "relative_path_en": "/leetcode/0300-0399/0356.Line%20Reflection/README_EN.md", "title_cn": "\u76f4\u7ebf\u955c\u50cf", "title_en": "Line Reflection", "question_title_slug": "line-reflection", "content_en": null, "content_cn": null, "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0357", "frontend_question_id": "0357", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-numbers-with-unique-digits", "url_en": "https://leetcode.com/problems/count-numbers-with-unique-digits", "relative_path_cn": "/leetcode/0300-0399/0357.Count%20Numbers%20with%20Unique%20Digits/README.md", "relative_path_en": "/leetcode/0300-0399/0357.Count%20Numbers%20with%20Unique%20Digits/README_EN.md", "title_cn": "\u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570", "title_en": "Count Numbers with Unique Digits", "question_title_slug": "count-numbers-with-unique-digits", "content_en": "<p>Given a <b>non-negative</b> integer n, count all numbers with unique digits, x, where 0 &le; x &lt; 10<sup>n</sup>.</p>\r\n\r\n<div>\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">91 \r\n<strong>Explanation: </strong></span>The answer should be the total numbers in the range of 0 &le; x &lt; 100, \r\n&nbsp;            excluding <code>11,22,33,44,55,66,77,88,99</code>\r\n</pre>\r\n</div>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 8</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u8d1f</strong>\u6574\u6570 n\uff0c\u8ba1\u7b97\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57 x \u7684\u4e2a\u6570\uff0c\u5176\u4e2d 0 &le; x &lt; 10<sup>n&nbsp;</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>91 \n<strong>\u89e3\u91ca: </strong>\u7b54\u6848\u5e94\u4e3a\u9664\u53bb <code>11,22,33,44,55,66,77,88,99 </code>\u5916\uff0c\u5728 [0,100) \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5b57\u3002\n</pre>\n", "tags_en": ["Math", "Dynamic Programming", "Backtracking"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countNumbersWithUniqueDigits(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countNumbersWithUniqueDigits(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countNumbersWithUniqueDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countNumbersWithUniqueDigits(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountNumbersWithUniqueDigits(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countNumbersWithUniqueDigits = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_numbers_with_unique_digits(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countNumbersWithUniqueDigits(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countNumbersWithUniqueDigits(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countNumbersWithUniqueDigits(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countNumbersWithUniqueDigits(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_numbers_with_unique_digits(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countNumbersWithUniqueDigits($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countNumbersWithUniqueDigits(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0358", "frontend_question_id": "0358", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/rearrange-string-k-distance-apart", "url_en": "https://leetcode.com/problems/rearrange-string-k-distance-apart", "relative_path_cn": "/leetcode/0300-0399/0358.Rearrange%20String%20k%20Distance%20Apart/README.md", "relative_path_en": "/leetcode/0300-0399/0358.Rearrange%20String%20k%20Distance%20Apart/README_EN.md", "title_cn": "K \u8ddd\u79bb\u95f4\u9694\u91cd\u6392\u5b57\u7b26\u4e32", "title_en": "Rearrange String k Distance Apart", "question_title_slug": "rearrange-string-k-distance-apart", "content_en": null, "content_cn": null, "tags_en": ["Heap", "Greedy", "Hash Table"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5", "\u54c8\u5e0c\u8868"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0359", "frontend_question_id": "0359", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/logger-rate-limiter", "url_en": "https://leetcode.com/problems/logger-rate-limiter", "relative_path_cn": "/leetcode/0300-0399/0359.Logger%20Rate%20Limiter/README.md", "relative_path_en": "/leetcode/0300-0399/0359.Logger%20Rate%20Limiter/README_EN.md", "title_cn": "\u65e5\u5fd7\u901f\u7387\u9650\u5236\u5668", "title_en": "Logger Rate Limiter", "question_title_slug": "logger-rate-limiter", "content_en": null, "content_cn": null, "tags_en": ["Design", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0360", "frontend_question_id": "0360", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/sort-transformed-array", "url_en": "https://leetcode.com/problems/sort-transformed-array", "relative_path_cn": "/leetcode/0300-0399/0360.Sort%20Transformed%20Array/README.md", "relative_path_en": "/leetcode/0300-0399/0360.Sort%20Transformed%20Array/README_EN.md", "title_cn": "\u6709\u5e8f\u8f6c\u5316\u6570\u7ec4", "title_en": "Sort Transformed Array", "question_title_slug": "sort-transformed-array", "content_en": null, "content_cn": null, "tags_en": ["Math", "Two Pointers"], "tags_cn": ["\u6570\u5b66", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0361", "frontend_question_id": "0361", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/bomb-enemy", "url_en": "https://leetcode.com/problems/bomb-enemy", "relative_path_cn": "/leetcode/0300-0399/0361.Bomb%20Enemy/README.md", "relative_path_en": "/leetcode/0300-0399/0361.Bomb%20Enemy/README_EN.md", "title_cn": "\u8f70\u70b8\u654c\u4eba", "title_en": "Bomb Enemy", "question_title_slug": "bomb-enemy", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0362", "frontend_question_id": "0362", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-hit-counter", "url_en": "https://leetcode.com/problems/design-hit-counter", "relative_path_cn": "/leetcode/0300-0399/0362.Design%20Hit%20Counter/README.md", "relative_path_en": "/leetcode/0300-0399/0362.Design%20Hit%20Counter/README_EN.md", "title_cn": "\u6572\u51fb\u8ba1\u6570\u5668", "title_en": "Design Hit Counter", "question_title_slug": "design-hit-counter", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0363", "frontend_question_id": "0363", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k", "url_en": "https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k", "relative_path_cn": "/leetcode/0300-0399/0363.Max%20Sum%20of%20Rectangle%20No%20Larger%20Than%20K/README.md", "relative_path_en": "/leetcode/0300-0399/0363.Max%20Sum%20of%20Rectangle%20No%20Larger%20Than%20K/README_EN.md", "title_cn": "\u77e9\u5f62\u533a\u57df\u4e0d\u8d85\u8fc7 K \u7684\u6700\u5927\u6570\u503c\u548c", "title_en": "Max Sum of Rectangle No Larger Than K", "question_title_slug": "max-sum-of-rectangle-no-larger-than-k", "content_en": "<p>Given a non-empty 2D matrix <i>matrix</i> and an integer <i>k</i>, find the max sum of a rectangle in the <i>matrix</i> such that its sum is no larger than <i>k</i>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>matrix = <span id=\"example-input-1-1\">[[1,0,1],[0,-2,3]]</span>, k = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2 \r\n<strong>Explanation:</strong></span>&nbsp;Because the sum of rectangle <code>[[0, 1], [-2, 3]]</code> is 2,\r\n&nbsp;            and 2 is the max number no larger than k (k = 2).</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The rectangle inside the matrix must have an area &gt; 0.</li>\r\n\t<li>What if the number of rows is much larger than the number of columns?</li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u7ef4\u77e9\u9635&nbsp;<em>matrix&nbsp;</em>\u548c\u4e00\u4e2a\u6574\u6570<em> k</em>\uff0c\u627e\u5230\u8fd9\u4e2a\u77e9\u9635\u5185\u90e8\u4e0d\u5927\u4e8e <em>k</em> \u7684\u6700\u5927\u77e9\u5f62\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>\u8f93\u51fa: </strong>2 \n<strong>\u89e3\u91ca:</strong>&nbsp;\u77e9\u5f62\u533a\u57df&nbsp;<code>[[0, 1], [-2, 3]]</code>&nbsp;\u7684\u6570\u503c\u548c\u662f 2\uff0c\u4e14 2 \u662f\u4e0d\u8d85\u8fc7 k \u7684\u6700\u5927\u6570\u5b57\uff08k = 2\uff09\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li>\u77e9\u9635\u5185\u7684\u77e9\u5f62\u533a\u57df\u9762\u79ef\u5fc5\u987b\u5927\u4e8e 0\u3002</li>\n\t<li>\u5982\u679c\u884c\u6570\u8fdc\u5927\u4e8e\u5217\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u89e3\u7b54\u5462\uff1f</li>\n</ol>\n", "tags_en": ["Queue", "Binary Search", "Dynamic Programming"], "tags_cn": ["\u961f\u5217", "\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxSumSubmatrix(int** matrix, int matrixSize, int* matrixColSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxSumSubmatrix(int[][] matrix, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar maxSumSubmatrix = function(matrix, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef max_sum_submatrix(matrix, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSumSubmatrix(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSumSubmatrix(matrix [][]int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSumSubmatrix(matrix: Array[Array[Int]], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSumSubmatrix(matrix: Array<IntArray>, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sum_submatrix(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSumSubmatrix($matrix, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSumSubmatrix(matrix: number[][], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0364", "frontend_question_id": "0364", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/nested-list-weight-sum-ii", "url_en": "https://leetcode.com/problems/nested-list-weight-sum-ii", "relative_path_cn": "/leetcode/0300-0399/0364.Nested%20List%20Weight%20Sum%20II/README.md", "relative_path_en": "/leetcode/0300-0399/0364.Nested%20List%20Weight%20Sum%20II/README_EN.md", "title_cn": "\u52a0\u6743\u5d4c\u5957\u5e8f\u5217\u548c II", "title_en": "Nested List Weight Sum II", "question_title_slug": "nested-list-weight-sum-ii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0365", "frontend_question_id": "0365", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/water-and-jug-problem", "url_en": "https://leetcode.com/problems/water-and-jug-problem", "relative_path_cn": "/leetcode/0300-0399/0365.Water%20and%20Jug%20Problem/README.md", "relative_path_en": "/leetcode/0300-0399/0365.Water%20and%20Jug%20Problem/README_EN.md", "title_cn": "\u6c34\u58f6\u95ee\u9898", "title_en": "Water and Jug Problem", "question_title_slug": "water-and-jug-problem", "content_en": "<p>You are given two jugs with capacities <i>x</i> and <i>y</i> litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly <i>z</i> litres using these two jugs.</p>\r\n\r\n<p>If <i>z</i> liters of water is measurable, you must have <i>z</i> liters of water contained within <b>one or both buckets</b> by the end.</p>\r\n\r\n<p>Operations allowed:</p>\r\n\r\n<ul>\r\n\t<li>Fill any of the jugs completely with water.</li>\r\n\t<li>Empty any of the jugs.</li>\r\n\t<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example 1:</b> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\" target=\"_blank\"><i>&quot;Die Hard&quot;</i> example</a>)</p>\r\n\r\n<pre>\r\nInput: x = 3, y = 5, z = 4\r\nOutput: True\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nInput: x = 2, y = 6, z = 5\r\nOutput: False\r\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 10^6</code></li>\n\t<li><code>0 &lt;= y&nbsp;&lt;= 10^6</code></li>\n\t<li><code>0 &lt;= z&nbsp;&lt;= 10^6</code></li>\n</ul>\n", "content_cn": "<p>\u6709\u4e24\u4e2a\u5bb9\u91cf\u5206\u522b\u4e3a&nbsp;<em>x</em>\u5347 \u548c<em> y</em>\u5347 \u7684\u6c34\u58f6\u4ee5\u53ca\u65e0\u9650\u591a\u7684\u6c34\u3002\u8bf7\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6c34\u58f6\uff0c\u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u6070\u597d&nbsp;<em>z</em>\u5347 \u7684\u6c34\uff1f</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u540e\u8bf7\u7528\u4ee5\u4e0a\u6c34\u58f6\u4e2d\u7684\u4e00\u6216\u4e24\u4e2a\u6765\u76db\u653e\u53d6\u5f97\u7684&nbsp;<em>z\u5347&nbsp;</em>\u6c34\u3002</p>\n\n<p>\u4f60\u5141\u8bb8\uff1a</p>\n\n<ul>\n\t<li>\u88c5\u6ee1\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6</li>\n\t<li>\u6e05\u7a7a\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6</li>\n\t<li>\u4ece\u4e00\u4e2a\u6c34\u58f6\u5411\u53e6\u5916\u4e00\u4e2a\u6c34\u58f6\u5012\u6c34\uff0c\u76f4\u5230\u88c5\u6ee1\u6216\u8005\u5012\u7a7a</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\"><em>&quot;Die Hard&quot;</em> example</a>)</p>\n\n<pre>\u8f93\u5165: x = 3, y = 5, z = 4\n\u8f93\u51fa: True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u8f93\u5165: x = 2, y = 6, z = 5\n\u8f93\u51fa: False\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canMeasureWater(int x, int y, int z) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canMeasureWater(int x, int y, int z) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canMeasureWater(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canMeasureWater(int x, int y, int z){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanMeasureWater(int x, int y, int z) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return {boolean}\n */\nvar canMeasureWater = function(x, y, z) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer} z\n# @return {Boolean}\ndef can_measure_water(x, y, z)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canMeasureWater(_ x: Int, _ y: Int, _ z: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canMeasureWater(x int, y int, z int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canMeasureWater(x: Int, y: Int, z: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canMeasureWater(x: Int, y: Int, z: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_measure_water(x: i32, y: i32, z: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @param Integer $z\n     * @return Boolean\n     */\n    function canMeasureWater($x, $y, $z) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canMeasureWater(x: number, y: number, z: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0366", "frontend_question_id": "0366", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-leaves-of-binary-tree", "url_en": "https://leetcode.com/problems/find-leaves-of-binary-tree", "relative_path_cn": "/leetcode/0300-0399/0366.Find%20Leaves%20of%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0300-0399/0366.Find%20Leaves%20of%20Binary%20Tree/README_EN.md", "title_cn": "\u5bfb\u627e\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9", "title_en": "Find Leaves of Binary Tree", "question_title_slug": "find-leaves-of-binary-tree", "content_en": null, "content_cn": null, "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0367", "frontend_question_id": "0367", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-perfect-square", "url_en": "https://leetcode.com/problems/valid-perfect-square", "relative_path_cn": "/leetcode/0300-0399/0367.Valid%20Perfect%20Square/README.md", "relative_path_en": "/leetcode/0300-0399/0367.Valid%20Perfect%20Square/README_EN.md", "title_cn": "\u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570", "title_en": "Valid Perfect Square", "question_title_slug": "valid-perfect-square", "content_en": "<p>Given a <strong>positive</strong> integer <i>num</i>, write a function which returns True if <i>num</i> is a perfect square else False.</p>\n\n<p><b>Follow up:</b> <b>Do not</b> use any built-in library function such as <code>sqrt</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 16\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = 14\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 2^31 - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <em>num</em>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c <em>num</em> \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982&nbsp; <code>sqrt</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>16\n<strong>\u8f93\u51fa\uff1a</strong>True</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>14\n<strong>\u8f93\u51fa\uff1a</strong>False\n</pre>\n", "tags_en": ["Math", "Binary Search"], "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPerfectSquare(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPerfectSquare(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isPerfectSquare(int num){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPerfectSquare(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPerfectSquare = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef is_perfect_square(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPerfectSquare(_ num: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isPerfectSquare(num int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPerfectSquare(num: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPerfectSquare(num: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_perfect_square(num: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function isPerfectSquare($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPerfectSquare(num: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0368", "frontend_question_id": "0368", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/largest-divisible-subset", "url_en": "https://leetcode.com/problems/largest-divisible-subset", "relative_path_cn": "/leetcode/0300-0399/0368.Largest%20Divisible%20Subset/README.md", "relative_path_en": "/leetcode/0300-0399/0368.Largest%20Divisible%20Subset/README_EN.md", "title_cn": "\u6700\u5927\u6574\u9664\u5b50\u96c6", "title_en": "Largest Divisible Subset", "question_title_slug": "largest-divisible-subset", "content_en": "<p>Given a set of <b>distinct</b> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies:</p>\r\n\r\n<p>S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.</p>\r\n\r\n<p>If there are multiple solutions, return any subset is fine.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2] </span>(of course, [1,3] will also be ok)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,4,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2,4,8]</span>\r\n</pre>\r\n</div>\r\n</div>", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u7531<strong>\u65e0\u91cd\u590d\u7684</strong>\u6b63\u6574\u6570\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5927\u7684\u6574\u9664\u5b50\u96c6\uff0c\u5b50\u96c6\u4e2d\u4efb\u610f\u4e00\u5bf9 (S<sub>i\uff0c</sub>S<sub>j</sub>) \u90fd\u8981\u6ee1\u8db3\uff1aS<sub>i</sub> % S<sub>j</sub> = 0 \u6216 S<sub>j</sub> % S<sub>i</sub> = 0\u3002</p>\n\n<p>\u5982\u679c\u6709\u591a\u4e2a\u76ee\u6807\u5b50\u96c6\uff0c\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5747\u53ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong> [1,2] (\u5f53\u7136, [1,3] \u4e5f\u6b63\u786e)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,4,8]\n<strong>\u8f93\u51fa:</strong> [1,2,4,8]\n</pre>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def largestDivisibleSubset(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* largestDivisibleSubset(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> LargestDivisibleSubset(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar largestDivisibleSubset = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef largest_divisible_subset(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func largestDivisibleSubset(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func largestDivisibleSubset(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def largestDivisibleSubset(nums: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun largestDivisibleSubset(nums: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn largest_divisible_subset(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function largestDivisibleSubset($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function largestDivisibleSubset(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0369", "frontend_question_id": "0369", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/plus-one-linked-list", "url_en": "https://leetcode.com/problems/plus-one-linked-list", "relative_path_cn": "/leetcode/0300-0399/0369.Plus%20One%20Linked%20List/README.md", "relative_path_en": "/leetcode/0300-0399/0369.Plus%20One%20Linked%20List/README_EN.md", "title_cn": "\u7ed9\u5355\u94fe\u8868\u52a0\u4e00", "title_en": "Plus One Linked List", "question_title_slug": "plus-one-linked-list", "content_en": null, "content_cn": null, "tags_en": ["Recursion", "Linked List"], "tags_cn": ["\u9012\u5f52", "\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0370", "frontend_question_id": "0370", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/range-addition", "url_en": "https://leetcode.com/problems/range-addition", "relative_path_cn": "/leetcode/0300-0399/0370.Range%20Addition/README.md", "relative_path_en": "/leetcode/0300-0399/0370.Range%20Addition/README_EN.md", "title_cn": "\u533a\u95f4\u52a0\u6cd5", "title_en": "Range Addition", "question_title_slug": "range-addition", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0371", "frontend_question_id": "0371", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sum-of-two-integers", "url_en": "https://leetcode.com/problems/sum-of-two-integers", "relative_path_cn": "/leetcode/0300-0399/0371.Sum%20of%20Two%20Integers/README.md", "relative_path_en": "/leetcode/0300-0399/0371.Sum%20of%20Two%20Integers/README_EN.md", "title_cn": "\u4e24\u6574\u6570\u4e4b\u548c", "title_en": "Sum of Two Integers", "question_title_slug": "sum-of-two-integers", "content_en": "<p>Calculate the sum of two integers <i>a</i> and <i>b</i>, but you are <b>not allowed</b> to use the operator <code>+</code> and <code>-</code>.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-1-1\">1</span>, b = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = -<span id=\"example-input-2-1\">2</span>, b = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong>1\r\n</pre>\r\n</div>\r\n</div>\r\n", "content_cn": "<p><strong>\u4e0d\u4f7f\u7528</strong>\u8fd0\u7b97\u7b26&nbsp;<code>+</code> \u548c&nbsp;<code>-</code>&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\uff0c\u8ba1\u7b97\u4e24\u6574\u6570&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b<code>a</code>&nbsp;\u3001<code>b</code>&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = 1, b = 2\n<strong>\u8f93\u51fa: </strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = -2, b = 3\n<strong>\u8f93\u51fa: </strong>1</pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getSum(int a, int b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getSum(int a, int b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint getSum(int a, int b){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetSum(int a, int b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef get_sum(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getSum(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func getSum(a int, b int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getSum(a: Int, b: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getSum(a: Int, b: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_sum(a: i32, b: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function getSum($a, $b) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getSum(a: number, b: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0372", "frontend_question_id": "0372", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/super-pow", "url_en": "https://leetcode.com/problems/super-pow", "relative_path_cn": "/leetcode/0300-0399/0372.Super%20Pow/README.md", "relative_path_en": "/leetcode/0300-0399/0372.Super%20Pow/README_EN.md", "title_cn": "\u8d85\u7ea7\u6b21\u65b9", "title_en": "Super Pow", "question_title_slug": "super-pow", "content_en": "<p>Your task is to calculate <code>a<sup>b</sup></code> mod <code>1337</code> where <code>a</code> is a positive integer and <code>b</code> is an extremely large positive integer given in the form of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> a = 2, b = [3]\n<strong>Output:</strong> 8\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> a = 2, b = [1,0]\n<strong>Output:</strong> 1024\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> a = 1, b = [4,3,3,8,5,2]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> a = 2147483647, b = [2,0,0]\n<strong>Output:</strong> 1198\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= b.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= b[i] &lt;= 9</code></li>\n\t<li><code>b</code> doesn&#39;t contain leading zeros.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u00a0<code>a<sup>b</sup></code>\u00a0\u5bf9\u00a0<code>1337</code> \u53d6\u6a21\uff0c<code>a</code> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c<code>b</code> \u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6574\u6570\u4e14\u4f1a\u4ee5\u6570\u7ec4\u5f62\u5f0f\u7ed9\u51fa\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>a = 2, b = [3]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>a = 2, b = [1,0]\n<strong>\u8f93\u51fa\uff1a</strong>1024\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>a = 1, b = [4,3,3,8,5,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>a = 2147483647, b = [2,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>1198\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= a <= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 <= b.length <= 2000</code></li>\n\t<li><code>0 <= b[i] <= 9</code></li>\n\t<li><code>b</code> \u4e0d\u542b\u524d\u5bfc 0</li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int superPow(int a, vector<int>& b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int superPow(int a, int[] b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def superPow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint superPow(int a, int* b, int bSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SuperPow(int a, int[] b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} a\n * @param {number[]} b\n * @return {number}\n */\nvar superPow = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer[]} b\n# @return {Integer}\ndef super_pow(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func superPow(_ a: Int, _ b: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func superPow(a int, b []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def superPow(a: Int, b: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun superPow(a: Int, b: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn super_pow(a: i32, b: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer[] $b\n     * @return Integer\n     */\n    function superPow($a, $b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function superPow(a: number, b: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0373", "frontend_question_id": "0373", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums", "url_en": "https://leetcode.com/problems/find-k-pairs-with-smallest-sums", "relative_path_cn": "/leetcode/0300-0399/0373.Find%20K%20Pairs%20with%20Smallest%20Sums/README.md", "relative_path_en": "/leetcode/0300-0399/0373.Find%20K%20Pairs%20with%20Smallest%20Sums/README_EN.md", "title_cn": "\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57", "title_en": "Find K Pairs with Smallest Sums", "question_title_slug": "find-k-pairs-with-smallest-sums", "content_en": "<p>You are given two integer arrays <b>nums1</b> and <b>nums2</b> sorted in ascending order and an integer <b>k</b>.</p>\r\n\r\n<p>Define a pair <b>(u,v)</b> which consists of one element from the first array and one element from the second array.</p>\r\n\r\n<p>Find the k pairs <b>(u<sub>1</sub>,v<sub>1</sub>),(u<sub>2</sub>,v<sub>2</sub>) ...(u<sub>k</sub>,v<sub>k</sub>)</b> with the smallest sums.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,7,11]</span>, nums2 = <span id=\"example-input-1-2\">[2,4,6]</span>, k = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[1,4],[1,6]] \r\n<strong>Explanation: </strong></span>The first 3 pairs are returned from the sequence: \r\n&nbsp;            [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\r\n<strong>Output: </strong>[1,1],[1,1]<span>\r\n<strong>Explanation: </strong></span>The first 2 pairs are returned from the sequence: \r\n&nbsp;            [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = [1,2], nums2 = [3], k = 3\r\n<strong>Output: </strong>[1,3],[2,3]<span>\r\n<strong>Explanation: </strong></span>All possible pairs are returned from the sequence: [1,3],[2,3]\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5347\u5e8f\u6392\u5217\u7684\u6574\u5f62\u6570\u7ec4 <strong>nums1</strong> \u548c <strong>nums2</strong>, \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 <strong>k</strong>\u3002</p>\n\n<p>\u5b9a\u4e49\u4e00\u5bf9\u503c&nbsp;<strong>(u,v)</strong>\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea&nbsp;<strong>nums1</strong>\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea <strong>nums2</strong>\u3002</p>\n\n<p>\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u5bf9\u6570\u5b57&nbsp;<strong>(u<sub>1</sub>,v<sub>1</sub>), (u<sub>2</sub>,v<sub>2</sub>) ... (u<sub>k</sub>,v<sub>k</sub>)</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>\u8f93\u51fa:</strong> [1,2],[1,4],[1,6]\n<strong>\u89e3\u91ca: </strong>\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 3 \u5bf9\u6570\uff1a\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>\u8f93\u51fa: </strong>[1,1],[1,1]\n<strong>\u89e3\u91ca: </strong>\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 2 \u5bf9\u6570\uff1a\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>\u8f93\u51fa:</strong> [1,3],[2,3]\n<strong>\u89e3\u91ca: </strong>\u4e5f\u53ef\u80fd\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u5bf9\u90fd\u88ab\u8fd4\u56de:[1,3],[2,3]\n</pre>\n", "tags_en": ["Heap"], "tags_cn": ["\u5806"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> KSmallestPairs(int[] nums1, int[] nums2, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[][]}\n */\nvar kSmallestPairs = function(nums1, nums2, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[][]}\ndef k_smallest_pairs(nums1, nums2, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func kSmallestPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [[Int]] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kSmallestPairs(nums1: Array[Int], nums2: Array[Int], k: Int): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kSmallestPairs(nums1: IntArray, nums2: IntArray, k: Int): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn k_smallest_pairs(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function kSmallestPairs($nums1, $nums2, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kSmallestPairs(nums1: number[], nums2: number[], k: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0374", "frontend_question_id": "0374", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/guess-number-higher-or-lower", "url_en": "https://leetcode.com/problems/guess-number-higher-or-lower", "relative_path_cn": "/leetcode/0300-0399/0374.Guess%20Number%20Higher%20or%20Lower/README.md", "relative_path_en": "/leetcode/0300-0399/0374.Guess%20Number%20Higher%20or%20Lower/README_EN.md", "title_cn": "\u731c\u6570\u5b57\u5927\u5c0f", "title_en": "Guess Number Higher or Lower", "question_title_slug": "guess-number-higher-or-lower", "content_en": "<p>We are playing the Guess Game. The game is as follows:</p>\n\n<p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n\n<p>You call a pre-defined API <code>int guess(int num)</code>, which returns 3 possible results:</p>\n\n<ul>\n\t<li><code>-1</code>: The number I picked is lower than your guess (i.e. <code>pick &lt; num</code>).</li>\n\t<li><code>1</code>: The number I picked is higher than your guess (i.e. <code>pick &gt; num</code>).</li>\n\t<li><code>0</code>: The number I picked is equal to your guess (i.e. <code>pick == num</code>).</li>\n</ul>\n\n<p>Return <em>the number that I picked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 10, pick = 6\n<strong>Output:</strong> 6\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1, pick = 1\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 2, pick = 1\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> n = 2, pick = 2\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= pick &lt;= n</code></li>\n</ul>\n", "content_cn": "<p>\u731c\u6570\u5b57\u6e38\u620f\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u8f6e\u6e38\u620f\uff0c\u6211\u90fd\u4f1a\u4ece\u00a0<strong>1</strong>\u00a0\u5230\u00a0<em><strong>n</strong></em> \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\u3002 \u8bf7\u4f60\u731c\u9009\u51fa\u7684\u662f\u54ea\u4e2a\u6570\u5b57\u3002</li>\n\t<li>\u5982\u679c\u4f60\u731c\u9519\u4e86\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u4f60\u731c\u6d4b\u7684\u6570\u5b57\u6bd4\u6211\u9009\u51fa\u7684\u6570\u5b57\u662f\u5927\u4e86\u8fd8\u662f\u5c0f\u4e86\u3002</li>\n</ul>\n\n<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u597d\u7684\u63a5\u53e3 <code>int guess(int num)</code> \u6765\u83b7\u53d6\u731c\u6d4b\u7ed3\u679c\uff0c\u8fd4\u56de\u503c\u4e00\u5171\u6709 3 \u79cd\u53ef\u80fd\u7684\u60c5\u51b5\uff08<code>-1</code>\uff0c<code>1</code>\u00a0\u6216 <code>0</code>\uff09\uff1a</p>\n\n<ul>\n\t<li>-1\uff1a\u6211\u9009\u51fa\u7684\u6570\u5b57\u6bd4\u4f60\u731c\u7684\u6570\u5b57\u5c0f <code>pick < num</code></li>\n\t<li>1\uff1a\u6211\u9009\u51fa\u7684\u6570\u5b57\u6bd4\u4f60\u731c\u7684\u6570\u5b57\u5927 <code>pick > num</code></li>\n\t<li>0\uff1a\u6211\u9009\u51fa\u7684\u6570\u5b57\u548c\u4f60\u731c\u7684\u6570\u5b57\u4e00\u6837\u3002\u606d\u559c\uff01\u4f60\u731c\u5bf9\u4e86\uff01<code>pick == num</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 10, pick = 6\n<strong>\u8f93\u51fa\uff1a</strong>6\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1, pick = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 2, pick = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 2, pick = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 <= pick <= n</code></li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution extends GuessGame {\n    public int guessNumber(int n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num: int) -> int:\n\nclass Solution:\n    def guessNumber(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\n\nint guessNumber(int n){\n\t\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\n\npublic class Solution : GuessGame {\n    public int GuessNumber(int n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t            -1 if num is lower than the guess number\n *\t\t\t             1 if num is higher than the guess number\n *                       otherwise return 0\n * var guess = function(num) {}\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar guessNumber = function(n) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num)\n\ndef guessNumber(n)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/** \n * Forward declaration of guess API.\n * @param  num -> your guess number\n * @return \t     -1 if the picked number is lower than your guess number\n *\t\t\t      1 if the picked number is higher than your guess number\n *               otherwise return 0\n * func guess(_ num: Int) -> Int \n */\n\nclass Solution : GuessGame {\n    func guessNumber(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * func guess(num int) int;\n */\n\nfunc guessNumber(n int) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * def guess(num: Int): Int = {}\n */\n\nclass Solution extends GuessGame {\n    def guessNumber(n: Int): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * fun guess(num:Int):Int {}\n */\n\nclass Solution:GuessGame() {\n    override fun guessNumber(n:Int):Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * unsafe fn guess(num: i32) -> i32 {}\n */\n\nimpl Solution {\n    unsafe fn guessNumber(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/** \n * The API guess is defined in the parent class.\n * @param  num   your guess\n * @return \t     -1 if num is lower than the guess number\n *\t\t\t      1 if num is higher than the guess number\n *               otherwise return 0\n * public function guess($num){}\n */\n\nclass Solution extends GuessGame {\n    /**\n     * @param  Integer  $n\n     * @return Integer\n     */\n    function guessNumber($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}]}, {"question_id": "0375", "frontend_question_id": "0375", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii", "url_en": "https://leetcode.com/problems/guess-number-higher-or-lower-ii", "relative_path_cn": "/leetcode/0300-0399/0375.Guess%20Number%20Higher%20or%20Lower%20II/README.md", "relative_path_en": "/leetcode/0300-0399/0375.Guess%20Number%20Higher%20or%20Lower%20II/README_EN.md", "title_cn": "\u731c\u6570\u5b57\u5927\u5c0f II", "title_en": "Guess Number Higher or Lower II", "question_title_slug": "guess-number-higher-or-lower-ii", "content_en": "<p>We are playing the Guessing Game. The game will work as follows:</p>\n\n<ol>\n\t<li>I pick a number between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>n</code>.</li>\n\t<li>You guess a number.</li>\n\t<li>If you guess the right number, <strong>you win the game</strong>.</li>\n\t<li>If you guess the wrong number, then I will tell you whether the number I picked is <strong>higher or lower</strong>, and you will continue guessing.</li>\n\t<li>Every time you guess a wrong number&nbsp;<code>x</code>, you will pay&nbsp;<code>x</code>&nbsp;dollars. If you run out of money, <strong>you lose the game</strong>.</li>\n</ol>\n\n<p>Given a particular&nbsp;<code>n</code>, return&nbsp;<em>the minimum amount of money you need to&nbsp;<strong>guarantee a win regardless of what number I pick</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/graph.png\" style=\"width: 505px; height: 388px;\" />\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $7.\n&nbsp;   - If my number is higher, the range is [8,10]. Guess 9.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $9.\n&nbsp;       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n&nbsp;       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n&nbsp;   - If my number is lower, the range is [1,6]. Guess 3.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $3.\n&nbsp;       - If my number is higher, the range is [4,6]. Guess 5.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n&nbsp;           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n&nbsp;           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n&nbsp;       - If my number is lower, the range is [1,2]. Guess 1.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n&nbsp;           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;There is only one possible number, so you can guess 1 and not have to pay anything.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;There are two possible numbers, 1 and 2.\n- Guess 1.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $1.\n&nbsp;   - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n</ul>\n", "content_cn": "<p>\u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<p>\u6211\u4ece&nbsp;<strong>1&nbsp;</strong>\u5230 <strong>n</strong> \u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u6765\u731c\u6211\u9009\u4e86\u54ea\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u731c\u9519\u4e86\uff0c\u6211\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u9009\u7684\u6570\u5b57\u6bd4\u4f60\u7684\u5927\u4e86\u6216\u8005\u5c0f\u4e86\u3002</p>\n\n<p>\u7136\u800c\uff0c\u5f53\u4f60\u731c\u4e86\u6570\u5b57 x \u5e76\u4e14\u731c\u9519\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u652f\u4ed8\u91d1\u989d\u4e3a x \u7684\u73b0\u91d1\u3002\u76f4\u5230\u4f60\u731c\u5230\u6211\u9009\u7684\u6570\u5b57\uff0c\u4f60\u624d\u7b97\u8d62\u5f97\u4e86\u8fd9\u4e2a\u6e38\u620f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>n = 10, \u6211\u9009\u62e9\u4e868.\n\n\u7b2c\u4e00\u8f6e: \u4f60\u731c\u6211\u9009\u62e9\u7684\u6570\u5b57\u662f5\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u7136\u540e\u4f60\u9700\u8981\u652f\u4ed85\u5757\u3002\n\u7b2c\u4e8c\u8f6e: \u4f60\u731c\u662f7\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed87\u5757\u3002\n\u7b2c\u4e09\u8f6e: \u4f60\u731c\u662f9\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5c0f\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed89\u5757\u3002\n\n\u6e38\u620f\u7ed3\u675f\u30028 \u5c31\u662f\u6211\u9009\u7684\u6570\u5b57\u3002\n\n\u4f60\u6700\u7ec8\u8981\u652f\u4ed8 5 + 7 + 9 = 21 \u5757\u94b1\u3002\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;<strong>n &ge; 1\uff0c</strong>\u8ba1\u7b97\u4f60\u81f3\u5c11\u9700\u8981\u62e5\u6709\u591a\u5c11\u73b0\u91d1\u624d\u80fd\u786e\u4fdd\u4f60\u80fd\u8d62\u5f97\u8fd9\u4e2a\u6e38\u620f\u3002</p>\n", "tags_en": ["Minimax", "Dynamic Programming"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int getMoneyAmount(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int getMoneyAmount(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getMoneyAmount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint getMoneyAmount(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int GetMoneyAmount(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar getMoneyAmount = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef get_money_amount(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getMoneyAmount(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func getMoneyAmount(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getMoneyAmount(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getMoneyAmount(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_money_amount(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function getMoneyAmount($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getMoneyAmount(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0376", "frontend_question_id": "0376", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/wiggle-subsequence", "url_en": "https://leetcode.com/problems/wiggle-subsequence", "relative_path_cn": "/leetcode/0300-0399/0376.Wiggle%20Subsequence/README.md", "relative_path_en": "/leetcode/0300-0399/0376.Wiggle%20Subsequence/README_EN.md", "title_cn": "\u6446\u52a8\u5e8f\u5217", "title_en": "Wiggle Subsequence", "question_title_slug": "wiggle-subsequence", "content_en": "<p>A sequence of numbers is called a <strong>wiggle sequence</strong> if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>\r\n\r\n<p>For example, <code>[1,7,4,9,2,5]</code> is a wiggle sequence because the differences <code>(6,-3,5,-7,3)</code> are alternately positive and negative. In contrast, <code>[1,4,7,2,5]</code> and <code>[1,7,4,5,5]</code> are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>\r\n\r\n<p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,7,4,9,2,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6\r\n<strong>Explanation:</strong> </span>The entire sequence is a wiggle sequence.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,17,5,10,13,15,10,5,16,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,3,4,5,6,7,8,9]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span></pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCan you do it in O(<i>n</i>) time?</p>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u5982\u679c\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u4e25\u683c\u5730\u5728\u6b63\u6570\u548c\u8d1f\u6570\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5219\u6570\u5b57\u5e8f\u5217\u79f0\u4e3a<strong>\u6446\u52a8\u5e8f\u5217\u3002</strong>\u7b2c\u4e00\u4e2a\u5dee\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\u3002\u5c11\u4e8e\u4e24\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u4e5f\u662f\u6446\u52a8\u5e8f\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c&nbsp;<code>[1,7,4,9,2,5]</code> \u662f\u4e00\u4e2a\u6446\u52a8\u5e8f\u5217\uff0c\u56e0\u4e3a\u5dee\u503c <code>(6,-3,5,-7,3)</code>&nbsp;\u662f\u6b63\u8d1f\u4ea4\u66ff\u51fa\u73b0\u7684\u3002\u76f8\u53cd, <code>[1,4,7,2,5]</code>&nbsp;\u548c&nbsp;<code>[1,7,4,5,5]</code> \u4e0d\u662f\u6446\u52a8\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u524d\u4e24\u4e2a\u5dee\u503c\u90fd\u662f\u6b63\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5dee\u503c\u4e3a\u96f6\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u8fd4\u56de\u4f5c\u4e3a\u6446\u52a8\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u901a\u8fc7\u4ece\u539f\u59cb\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5143\u7d20\u6765\u83b7\u5f97\u5b50\u5e8f\u5217\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,7,4,9,2,5]\n<strong>\u8f93\u51fa: </strong>6 \n<strong>\u89e3\u91ca: </strong>\u6574\u4e2a\u5e8f\u5217\u5747\u4e3a\u6446\u52a8\u5e8f\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,17,5,10,13,15,10,5,16,8]\n<strong>\u8f93\u51fa: </strong>7\n<strong>\u89e3\u91ca: </strong>\u8fd9\u4e2a\u5e8f\u5217\u5305\u542b\u51e0\u4e2a\u957f\u5ea6\u4e3a 7 \u6446\u52a8\u5e8f\u5217\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ef\u4e3a[1,17,10,13,10,16,8]\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5,6,7,8,9]\n<strong>\u8f93\u51fa: </strong>2</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u80fd\u5426\u7528&nbsp;O(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u6b64\u9898?</p>\n", "tags_en": ["Greedy", "Dynamic Programming"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int wiggleMaxLength(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wiggleMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint wiggleMaxLength(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int WiggleMaxLength(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar wiggleMaxLength = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef wiggle_max_length(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wiggleMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func wiggleMaxLength(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wiggleMaxLength(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wiggleMaxLength(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn wiggle_max_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function wiggleMaxLength($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function wiggleMaxLength(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0377", "frontend_question_id": "0377", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/combination-sum-iv", "url_en": "https://leetcode.com/problems/combination-sum-iv", "relative_path_cn": "/leetcode/0300-0399/0377.Combination%20Sum%20IV/README.md", "relative_path_en": "/leetcode/0300-0399/0377.Combination%20Sum%20IV/README_EN.md", "title_cn": "\u7ec4\u5408\u603b\u548c \u2163", "title_en": "Combination Sum IV", "question_title_slug": "combination-sum-iv", "content_en": "<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<i><b>nums</b></i> = [1, 2, 3]\r\n<i><b>target</b></i> = 4\r\n\r\nThe possible combination ways are:\r\n(1, 1, 1, 1)\r\n(1, 1, 2)\r\n(1, 2, 1)\r\n(1, 3)\r\n(2, 1, 1)\r\n(2, 2)\r\n(3, 1)\r\n\r\nNote that different sequences are counted as different combinations.\r\n\r\nTherefore the output is <i><b>7</b></i>.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if negative numbers are allowed in the given array?<br />\r\nHow does it change the problem?<br />\r\nWhat limitation we need to add to the question to allow negative numbers?</p>\r\n\r\n<p><b>Credits:</b><br />\r\nSpecial thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<em><strong>nums</strong></em> = [1, 2, 3]\n<em><strong>target</strong></em> = 4\n\n\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\n\u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002\n\n\u56e0\u6b64\u8f93\u51fa\u4e3a <strong>7</strong>\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br />\n\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\u542b\u6709\u8d1f\u6570\u4f1a\u600e\u4e48\u6837\uff1f<br />\n\u95ee\u9898\u4f1a\u4ea7\u751f\u4ec0\u4e48\u53d8\u5316\uff1f<br />\n\u6211\u4eec\u9700\u8981\u5728\u9898\u76ee\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u9650\u5236\u6765\u5141\u8bb8\u8d1f\u6570\u7684\u51fa\u73b0\uff1f</p>\n\n<p><strong>\u81f4\u8c22\uff1a</strong><br />\n\u7279\u522b\u611f\u8c22&nbsp;<a href=\"https://leetcode.com/pbrother/\">@pbrother</a>&nbsp;\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int combinationSum4(vector<int>& nums, int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int combinationSum4(int[] nums, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def combinationSum4(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint combinationSum4(int* nums, int numsSize, int target){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CombinationSum4(int[] nums, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar combinationSum4 = function(nums, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef combination_sum4(nums, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func combinationSum4(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func combinationSum4(nums []int, target int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def combinationSum4(nums: Array[Int], target: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun combinationSum4(nums: IntArray, target: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn combination_sum4(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function combinationSum4($nums, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function combinationSum4(nums: number[], target: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0378", "frontend_question_id": "0378", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix", "url_en": "https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix", "relative_path_cn": "/leetcode/0300-0399/0378.Kth%20Smallest%20Element%20in%20a%20Sorted%20Matrix/README.md", "relative_path_en": "/leetcode/0300-0399/0378.Kth%20Smallest%20Element%20in%20a%20Sorted%20Matrix/README_EN.md", "title_cn": "\u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20", "title_en": "Kth Smallest Element in a Sorted Matrix", "question_title_slug": "kth-smallest-element-in-a-sorted-matrix", "content_en": "<p>Given a <i>n</i> x <i>n</i> matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\r\n\r\n<p>\r\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nmatrix = [\r\n   [ 1,  5,  9],\r\n   [10, 11, 13],\r\n   [12, 13, 15]\r\n],\r\nk = 8,\r\n\r\nreturn 13.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note: </b><br>\r\nYou may assume k is always valid, 1 &le; k &le; n<sup>2</sup>.</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<em><code>n x n</code>&nbsp;</em>\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2c <code>k</code> \u5c0f\u7684\u5143\u7d20\u3002<br>\n\u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u540e\u7684\u7b2c <code>k</code> \u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c <code>k</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>matrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n\u8fd4\u56de 13\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe k \u7684\u503c\u6c38\u8fdc\u662f\u6709\u6548\u7684\uff0c<code>1 &le; k &le; n<sup>2&nbsp;</sup></code>\u3002</p>\n", "tags_en": ["Heap", "Binary Search"], "tags_cn": ["\u5806", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def kthSmallest(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint kthSmallest(int** matrix, int matrixSize, int* matrixColSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int KthSmallest(int[][] matrix, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(matrix, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef kth_smallest(matrix, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func kthSmallest(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func kthSmallest(matrix [][]int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def kthSmallest(matrix: Array[Array[Int]], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun kthSmallest(matrix: Array<IntArray>, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn kth_smallest(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthSmallest($matrix, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function kthSmallest(matrix: number[][], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0379", "frontend_question_id": "0379", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-phone-directory", "url_en": "https://leetcode.com/problems/design-phone-directory", "relative_path_cn": "/leetcode/0300-0399/0379.Design%20Phone%20Directory/README.md", "relative_path_en": "/leetcode/0300-0399/0379.Design%20Phone%20Directory/README_EN.md", "title_cn": "\u7535\u8bdd\u76ee\u5f55\u7ba1\u7406\u7cfb\u7edf", "title_en": "Design Phone Directory", "question_title_slug": "design-phone-directory", "content_en": null, "content_cn": null, "tags_en": ["Design", "Linked List"], "tags_cn": ["\u8bbe\u8ba1", "\u94fe\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0380", "frontend_question_id": "0380", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/insert-delete-getrandom-o1", "url_en": "https://leetcode.com/problems/insert-delete-getrandom-o1", "relative_path_cn": "/leetcode/0300-0399/0380.Insert%20Delete%20GetRandom%20O%281%29/README.md", "relative_path_en": "/leetcode/0300-0399/0380.Insert%20Delete%20GetRandom%20O%281%29/README_EN.md", "title_cn": "\u5e38\u6570\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20", "title_en": "Insert Delete GetRandom O(1)", "question_title_slug": "insert-delete-getrandom-o1", "content_en": "<p>Implement the&nbsp;<code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p><strong>Follow up:</strong> Could you implement the functions of the class with each function works in <strong>average</strong> <code>O(1)</code> time?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code>&nbsp;is called.</li>\n</ul>\n", "content_cn": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728<em>\u5e73\u5747&nbsp;</em>\u65f6\u95f4\u590d\u6742\u5ea6 <strong>O(1)</strong>&nbsp;\u4e0b\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002</p>\n\n<ol>\n\t<li><code>insert(val)</code>\uff1a\u5f53\u5143\u7d20 val \u4e0d\u5b58\u5728\u65f6\uff0c\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u8be5\u9879\u3002</li>\n\t<li><code>remove(val)</code>\uff1a\u5143\u7d20 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u9879\u3002</li>\n\t<li><code>getRandom</code>\uff1a\u968f\u673a\u8fd4\u56de\u73b0\u6709\u96c6\u5408\u4e2d\u7684\u4e00\u9879\u3002\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u6709<strong>\u76f8\u540c\u7684\u6982\u7387</strong>\u88ab\u8fd4\u56de\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n// \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002\nRandomizedSet randomSet = new RandomizedSet();\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a 1 \u88ab\u6210\u529f\u5730\u63d2\u5165\u3002\nrandomSet.insert(1);\n\n// \u8fd4\u56de false \uff0c\u8868\u793a\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728 2 \u3002\nrandomSet.remove(2);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \u3002\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002\nrandomSet.insert(2);\n\n// getRandom \u5e94\u968f\u673a\u8fd4\u56de 1 \u6216 2 \u3002\nrandomSet.getRandom();\n\n// \u4ece\u96c6\u5408\u4e2d\u79fb\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [2] \u3002\nrandomSet.remove(1);\n\n// 2 \u5df2\u5728\u96c6\u5408\u4e2d\uff0c\u6240\u4ee5\u8fd4\u56de false \u3002\nrandomSet.insert(2);\n\n// \u7531\u4e8e 2 \u662f\u96c6\u5408\u4e2d\u552f\u4e00\u7684\u6570\u5b57\uff0cgetRandom \u603b\u662f\u8fd4\u56de 2 \u3002\nrandomSet.getRandom();\n</pre>\n", "tags_en": ["Design", "Array", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class RandomizedSet {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n\n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n\n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n\n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class RandomizedSet {\n\n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n\n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    public boolean insert(int val) {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    public boolean remove(int val) {\n\n    }\n    \n    /** Get a random element from the set. */\n    public int getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class RandomizedSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class RandomizedSet:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        \"\"\"\n\n\n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        \"\"\"\n\n\n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the set.\n        \"\"\"\n\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} RandomizedSet;\n\n/** Initialize your data structure here. */\n\nRandomizedSet* randomizedSetCreate() {\n\n}\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n\n}\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n\n}\n\n/** Get a random element from the set. */\nint randomizedSetGetRandom(RandomizedSet* obj) {\n\n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n\n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n \n * bool param_2 = randomizedSetRemove(obj, val);\n \n * int param_3 = randomizedSetGetRandom(obj);\n \n * randomizedSetFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class RandomizedSet {\n\n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n\n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    public bool Insert(int val) {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    public bool Remove(int val) {\n\n    }\n    \n    /** Get a random element from the set. */\n    public int GetRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar RandomizedSet = function() {\n\n};\n\n/**\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n\n};\n\n/**\n * Removes a value from the set. Returns true if the set contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n\n};\n\n/**\n * Get a random element from the set.\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class RandomizedSet\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n\n    end\n\n\n=begin\n    Removes a value from the set. Returns true if the set contained the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n\n    end\n\n\n=begin\n    Get a random element from the set.\n    :rtype: Integer\n=end\n    def get_random()\n\n    end\n\n\nend\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass RandomizedSet {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Get a random element from the set. */\n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type RandomizedSet struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() RandomizedSet {\n\n}\n\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nfunc (this *RandomizedSet) Insert(val int) bool {\n\n}\n\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nfunc (this *RandomizedSet) Remove(val int) bool {\n\n}\n\n\n/** Get a random element from the set. */\nfunc (this *RandomizedSet) GetRandom() int {\n\n}\n\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class RandomizedSet() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    def insert(`val`: Int): Boolean = {\n\n    }\n\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    def remove(`val`: Int): Boolean = {\n\n    }\n\n    /** Get a random element from the set. */\n    def getRandom(): Int = {\n\n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class RandomizedSet() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    fun insert(`val`: Int): Boolean {\n\n    }\n\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    fun remove(`val`: Int): Boolean {\n\n    }\n\n    /** Get a random element from the set. */\n    fun getRandom(): Int {\n\n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct RandomizedSet {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedSet {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    fn insert(&self, val: i32) -> bool {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    fn remove(&self, val: i32) -> bool {\n\n    }\n    \n    /** Get a random element from the set. */\n    fn get_random(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class RandomizedSet {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Inserts a value to the set. Returns true if the set did not already contain the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n\n    }\n\n    /**\n     * Removes a value from the set. Returns true if the set contained the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n\n    }\n\n    /**\n     * Get a random element from the set.\n     * @return Integer\n     */\n    function getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * $obj = RandomizedSet();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class RandomizedSet {\n    constructor() {\n\n    }\n\n    insert(val: number): boolean {\n\n    }\n\n    remove(val: number): boolean {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0381", "frontend_question_id": "0381", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/insert-delete-getrandom-o1-duplicates-allowed", "url_en": "https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed", "relative_path_cn": "/leetcode/0300-0399/0381.Insert%20Delete%20GetRandom%20O%281%29%20-%20Duplicates%20allowed/README.md", "relative_path_en": "/leetcode/0300-0399/0381.Insert%20Delete%20GetRandom%20O%281%29%20-%20Duplicates%20allowed/README_EN.md", "title_cn": "O(1) \u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20 - \u5141\u8bb8\u91cd\u590d", "title_en": "Insert Delete GetRandom O(1) - Duplicates allowed", "question_title_slug": "insert-delete-getrandom-o1-duplicates-allowed", "content_en": "<p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\r\n<b>Note: Duplicate elements are allowed.</b>\r\n<p>\r\n<ol>\r\n<li><code>insert(val)</code>: Inserts an item val to the collection.</li>\r\n<li><code>remove(val)</code>: Removes an item val from the collection if present.</li>\r\n<li><code>getRandom</code>: Returns a random element from current collection of elements. The probability of each element being returned is <b>linearly related</b> to the number of same value the collection contains.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an empty collection.\r\nRandomizedCollection collection = new RandomizedCollection();\r\n\r\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\r\ncollection.insert(1);\r\n\r\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\r\ncollection.insert(1);\r\n\r\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\r\ncollection.insert(2);\r\n\r\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\r\ncollection.getRandom();\r\n\r\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\r\ncollection.remove(1);\r\n\r\n// getRandom should return 1 and 2 both equally likely.\r\ncollection.getRandom();\r\n</pre>\r\n</p>", "content_cn": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728<em>\u5e73\u5747&nbsp;</em>\u65f6\u95f4\u590d\u6742\u5ea6&nbsp;<strong>O(1)&nbsp;</strong>\u4e0b<strong>\uff0c&nbsp;</strong>\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002</p>\n\n<p><strong>\u6ce8\u610f: \u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u3002</strong></p>\n\n<ol>\n\t<li><code>insert(val)</code>\uff1a\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 val\u3002</li>\n\t<li><code>remove(val)</code>\uff1a\u5f53 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u4e00\u4e2a val\u3002</li>\n\t<li><code>getRandom</code>\uff1a\u4ece\u73b0\u6709\u96c6\u5408\u4e2d\u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u88ab\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u4e0e\u5176\u5728\u96c6\u5408\u4e2d\u7684\u6570\u91cf\u5448\u7ebf\u6027\u76f8\u5173\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>// \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002\nRandomizedCollection collection = new RandomizedCollection();\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a\u96c6\u5408\u4e0d\u5305\u542b 1 \u3002\ncollection.insert(1);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165\u53e6\u4e00\u4e2a 1 \u3002\u8fd4\u56de false \u8868\u793a\u96c6\u5408\u5305\u542b 1 \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,1] \u3002\ncollection.insert(1);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,1,2] \u3002\ncollection.insert(2);\n\n// getRandom \u5e94\u5f53\u6709 2/3 \u7684\u6982\u7387\u8fd4\u56de 1 \uff0c1/3 \u7684\u6982\u7387\u8fd4\u56de 2 \u3002\ncollection.getRandom();\n\n// \u4ece\u96c6\u5408\u4e2d\u5220\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002\ncollection.remove(1);\n\n// getRandom \u5e94\u6709\u76f8\u540c\u6982\u7387\u8fd4\u56de 1 \u548c 2 \u3002\ncollection.getRandom();\n</pre>\n", "tags_en": ["Design", "Array", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class RandomizedCollection {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedCollection() {\n\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    bool insert(int val) {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    bool remove(int val) {\n\n    }\n    \n    /** Get a random element from the collection. */\n    int getRandom() {\n\n    }\n};\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection* obj = new RandomizedCollection();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class RandomizedCollection {\n\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public boolean insert(int val) {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public boolean remove(int val) {\n\n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = new RandomizedCollection();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class RandomizedCollection(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the collection. Returns true if the collection contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the collection.\n        :rtype: int\n        \"\"\"\n\n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class RandomizedCollection:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n        \"\"\"\n\n\n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the collection. Returns true if the collection contained the specified element.\n        \"\"\"\n\n\n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the collection.\n        \"\"\"\n\n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} RandomizedCollection;\n\n/** Initialize your data structure here. */\n\nRandomizedCollection* randomizedCollectionCreate() {\n\n}\n\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\nbool randomizedCollectionInsert(RandomizedCollection* obj, int val) {\n\n}\n\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\nbool randomizedCollectionRemove(RandomizedCollection* obj, int val) {\n\n}\n\n/** Get a random element from the collection. */\nint randomizedCollectionGetRandom(RandomizedCollection* obj) {\n\n}\n\nvoid randomizedCollectionFree(RandomizedCollection* obj) {\n\n}\n\n/**\n * Your RandomizedCollection struct will be instantiated and called as such:\n * RandomizedCollection* obj = randomizedCollectionCreate();\n * bool param_1 = randomizedCollectionInsert(obj, val);\n \n * bool param_2 = randomizedCollectionRemove(obj, val);\n \n * int param_3 = randomizedCollectionGetRandom(obj);\n \n * randomizedCollectionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class RandomizedCollection {\n\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public bool Insert(int val) {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public bool Remove(int val) {\n\n    }\n    \n    /** Get a random element from the collection. */\n    public int GetRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = new RandomizedCollection();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar RandomizedCollection = function() {\n\n};\n\n/**\n * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.insert = function(val) {\n\n};\n\n/**\n * Removes a value from the collection. Returns true if the collection contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.remove = function(val) {\n\n};\n\n/**\n * Get a random element from the collection.\n * @return {number}\n */\nRandomizedCollection.prototype.getRandom = function() {\n\n};\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class RandomizedCollection\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n\n    end\n\n\n=begin\n    Removes a value from the collection. Returns true if the collection contained the specified element.\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n\n    end\n\n\n=begin\n    Get a random element from the collection.\n    :rtype: Integer\n=end\n    def get_random()\n\n    end\n\n\nend\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass RandomizedCollection {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    func insert(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    func remove(_ val: Int) -> Bool {\n        \n    }\n    \n    /** Get a random element from the collection. */\n    func getRandom() -> Int {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * let obj = RandomizedCollection()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type RandomizedCollection struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() RandomizedCollection {\n\n}\n\n\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\nfunc (this *RandomizedCollection) Insert(val int) bool {\n\n}\n\n\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\nfunc (this *RandomizedCollection) Remove(val int) bool {\n\n}\n\n\n/** Get a random element from the collection. */\nfunc (this *RandomizedCollection) GetRandom() int {\n\n}\n\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class RandomizedCollection() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    def insert(`val`: Int): Boolean = {\n\n    }\n\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    def remove(`val`: Int): Boolean = {\n\n    }\n\n    /** Get a random element from the collection. */\n    def getRandom(): Int = {\n\n    }\n\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class RandomizedCollection() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    fun insert(`val`: Int): Boolean {\n\n    }\n\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    fun remove(`val`: Int): Boolean {\n\n    }\n\n    /** Get a random element from the collection. */\n    fun getRandom(): Int {\n\n    }\n\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = RandomizedCollection()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct RandomizedCollection {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedCollection {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    fn insert(&self, val: i32) -> bool {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    fn remove(&self, val: i32) -> bool {\n\n    }\n    \n    /** Get a random element from the collection. */\n    fn get_random(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * let obj = RandomizedCollection::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class RandomizedCollection {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n\n    }\n\n    /**\n     * Removes a value from the collection. Returns true if the collection contained the specified element.\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n\n    }\n\n    /**\n     * Get a random element from the collection.\n     * @return Integer\n     */\n    function getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * $obj = RandomizedCollection();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class RandomizedCollection {\n    constructor() {\n\n    }\n\n    insert(val: number): boolean {\n\n    }\n\n    remove(val: number): boolean {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0382", "frontend_question_id": "0382", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/linked-list-random-node", "url_en": "https://leetcode.com/problems/linked-list-random-node", "relative_path_cn": "/leetcode/0300-0399/0382.Linked%20List%20Random%20Node/README.md", "relative_path_en": "/leetcode/0300-0399/0382.Linked%20List%20Random%20Node/README_EN.md", "title_cn": "\u94fe\u8868\u968f\u673a\u8282\u70b9", "title_en": "Linked List Random Node", "question_title_slug": "linked-list-random-node", "content_en": "<p>Given a singly linked list, return a random node&#39;s value from the linked list. Each node must have the <strong>same probability</strong> of being chosen.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n<strong>Output</strong>\n[null, 1, 3, 2, 2, 3]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list will be in the range <code>[1, 10<sup>4</sup>]</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>getRandom</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the linked list is extremely large and its length is unknown to you?</li>\n\t<li>Could you solve this efficiently without using extra space?</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u968f\u673a\u9009\u62e9\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94\u7684\u8282\u70b9\u503c\u3002\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9<strong>\u88ab\u9009\u7684\u6982\u7387\u4e00\u6837</strong>\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br />\n\u5982\u679c\u94fe\u8868\u5341\u5206\u5927\u4e14\u957f\u5ea6\u672a\u77e5\uff0c\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\u4f60\u80fd\u5426\u4f7f\u7528\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n// \u521d\u59cb\u5316\u4e00\u4e2a\u5355\u94fe\u8868 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()\u65b9\u6cd5\u5e94\u968f\u673a\u8fd4\u56de1,2,3\u4e2d\u7684\u4e00\u4e2a\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u5143\u7d20\u88ab\u8fd4\u56de\u7684\u6982\u7387\u76f8\u7b49\u3002\nsolution.getRandom();\n</pre>\n", "tags_en": ["Reservoir Sampling"], "tags_cn": ["\u84c4\u6c34\u6c60\u62bd\u6837"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    Solution(ListNode* head) {\n\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    public Solution(ListNode head) {\n\n    }\n    \n    /** Returns a random node's value. */\n    public int getRandom() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n\n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n\n    def __init__(self, head: ListNode):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        \"\"\"\n\n\n    def getRandom(self) -> int:\n        \"\"\"\n        Returns a random node's value.\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\n\ntypedef struct {\n\n} Solution;\n\n/** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n\nSolution* solutionCreate(struct ListNode* head) {\n\n}\n\n/** Returns a random node's value. */\nint solutionGetRandom(Solution* obj) {\n\n}\n\nvoid solutionFree(Solution* obj) {\n\n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(head);\n * int param_1 = solutionGetRandom(obj);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    public Solution(ListNode head) {\n\n    }\n    \n    /** Returns a random node's value. */\n    public int GetRandom() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n\n};\n\n/**\n * Returns a random node's value.\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\nclass Solution\n\n=begin\n    @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n    :type head: ListNode\n=end\n    def initialize(head)\n\n    end\n\n\n=begin\n    Returns a random node's value.\n    :rtype: Integer\n=end\n    def get_random()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(head)\n# param_1 = obj.get_random()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\n\nclass Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    init(_ head: ListNode?) {\n\n    }\n    \n    /** Returns a random node's value. */\n    func getRandom() -> Int {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(head)\n * let ret_1: Int = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\ntype Solution struct {\n\n}\n\n\n/** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\nfunc Constructor(head *ListNode) Solution {\n\n}\n\n\n/** Returns a random node's value. */\nfunc (this *Solution) GetRandom() int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(head);\n * param_1 := obj.GetRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nclass Solution(_head: ListNode) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n\n\n    /** Returns a random node's value. */\n    def getRandom(): Int = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution(head: ListNode?) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n\n\n    /** Returns a random node's value. */\n    fun getRandom(): Int {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(head)\n * var param_1 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nstruct Solution {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    fn new(head: Option<Box<ListNode>>) -> Self {\n\n    }\n    \n    /** Returns a random node's value. */\n    fn get_random(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(head);\n * let ret_1: i32 = obj.get_random();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n    /**\n     * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n     * @param ListNode $head\n     */\n    function __construct($head) {\n\n    }\n\n    /**\n     * Returns a random node's value.\n     * @return Integer\n     */\n    function getRandom() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($head);\n * $ret_1 = $obj->getRandom();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nclass Solution {\n    constructor(head: ListNode | null) {\n\n    }\n\n    getRandom(): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0383", "frontend_question_id": "0383", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ransom-note", "url_en": "https://leetcode.com/problems/ransom-note", "relative_path_cn": "/leetcode/0300-0399/0383.Ransom%20Note/README.md", "relative_path_en": "/leetcode/0300-0399/0383.Ransom%20Note/README_EN.md", "title_cn": "\u8d4e\u91d1\u4fe1", "title_en": "Ransom Note", "question_title_slug": "ransom-note", "content_en": "<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"a\", magazine = \"b\"\n<strong>Output:</strong> false\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"ab\"\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"aab\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>You may assume that both strings contain only lowercase letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8d4e\u91d1\u4fe1 (<code>ransom</code>) \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6742\u5fd7(<code>magazine</code>)\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>ransom</code> \u80fd\u4e0d\u80fd\u7531\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32 <code>magazines</code> \u91cc\u9762\u7684\u5b57\u7b26\u6784\u6210\u3002\u5982\u679c\u53ef\u4ee5\u6784\u6210\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>(\u9898\u76ee\u8bf4\u660e\uff1a\u4e3a\u4e86\u4e0d\u66b4\u9732\u8d4e\u91d1\u4fe1\u5b57\u8ff9\uff0c\u8981\u4ece\u6742\u5fd7\u4e0a\u641c\u7d22\u5404\u4e2a\u9700\u8981\u7684\u5b57\u6bcd\uff0c\u7ec4\u6210\u5355\u8bcd\u6765\u8868\u8fbe\u610f\u601d\u3002\u6742\u5fd7\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u53ea\u80fd\u5728\u8d4e\u91d1\u4fe1\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u4e00\u6b21\u3002)</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u4e24\u4e2a\u5b57\u7b26\u4e32\u5747\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<pre>canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canConstruct(char * ransomNote, char * magazine){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanConstruct(string ransomNote, string magazine) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} ransom_note\n# @param {String} magazine\n# @return {Boolean}\ndef can_construct(ransom_note, magazine)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canConstruct(ransomNote string, magazine string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $ransomNote\n     * @param String $magazine\n     * @return Boolean\n     */\n    function canConstruct($ransomNote, $magazine) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canConstruct(ransomNote: string, magazine: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0384", "frontend_question_id": "0384", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shuffle-an-array", "url_en": "https://leetcode.com/problems/shuffle-an-array", "relative_path_cn": "/leetcode/0300-0399/0384.Shuffle%20an%20Array/README.md", "relative_path_en": "/leetcode/0300-0399/0384.Shuffle%20an%20Array/README_EN.md", "title_cn": "\u6253\u4e71\u6570\u7ec4", "title_en": "Shuffle an Array", "question_title_slug": "shuffle-an-array", "content_en": "<p>Given an integer array <code>nums</code>, design an algorithm to randomly shuffle the array.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> Initializes the object with the integer array nums.</li>\n\t<li><code>int[] reset()</code> Resets the array to its original configuration and returns it.</li>\n\t<li><code>int[] shuffle()</code> Returns a random shuffling of the array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;shuffle&quot;, &quot;reset&quot;, &quot;shuffle&quot;]\n[[[1, 2, 3]], [], [], []]\n<strong>Output</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must be equally likely to be returned. Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>reset</code> and <code>shuffle</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bbe\u8ba1\u7b97\u6cd5\u6765\u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002</p>\n\n<p>\u5b9e\u73b0 <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> \u4f7f\u7528\u6574\u6570\u6570\u7ec4 <code>nums</code> \u521d\u59cb\u5316\u5bf9\u8c61</li>\n\t<li><code>int[] reset()</code> \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001\u5e76\u8fd4\u56de</li>\n\t<li><code>int[] shuffle()</code> \u8fd4\u56de\u6570\u7ec4\u968f\u673a\u6253\u4e71\u540e\u7684\u7ed3\u679c</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\n<strong>\u8f93\u51fa</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>\u89e3\u91ca</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u8fd4\u56de [3, 1, 2]\nsolution.reset();      // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001 [1, 2, 3] \u3002\u8fd4\u56de [1, 2, 3]\nsolution.shuffle();    // \u968f\u673a\u8fd4\u56de\u6570\u7ec4 [1, 2, 3] \u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u8fd4\u56de [1, 3, 2]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 200</code></li>\n\t<li><code>-10<sup>6</sup> <= nums[i] <= 10<sup>6</sup></code></li>\n\t<li><code>nums</code> \u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f <strong>\u552f\u4e00\u7684</strong></li>\n\t<li>\u6700\u591a\u53ef\u4ee5\u8c03\u7528 <code>5 * 10<sup>4</sup></code> \u6b21 <code>reset</code> \u548c <code>shuffle</code></li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(vector<int>& nums) {\n\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    vector<int> reset() {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    vector<int> shuffle() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * vector<int> param_1 = obj->reset();\n * vector<int> param_2 = obj->shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    public int[] reset() {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    public int[] shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.reset();\n * int[] param_2 = obj.shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n\n\n    def reset(self):\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        :rtype: List[int]\n        \"\"\"\n\n\n    def shuffle(self):\n        \"\"\"\n        Returns a random shuffling of the array.\n        :rtype: List[int]\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, nums: List[int]):\n\n\n    def reset(self) -> List[int]:\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        \"\"\"\n\n\n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Returns a random shuffling of the array.\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} Solution;\n\n\nSolution* solutionCreate(int* nums, int numsSize) {\n\n}\n\n/** Resets the array to its original configuration and return it. */\nint* solutionReset(Solution* obj, int* retSize) {\n\n}\n\n/** Returns a random shuffling of the array. */\nint* solutionShuffle(Solution* obj, int* retSize) {\n\n}\n\nvoid solutionFree(Solution* obj) {\n\n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(nums, numsSize);\n * int* param_1 = solutionReset(obj, retSize);\n \n * int* param_2 = solutionShuffle(obj, retSize);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    public int[] Reset() {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    public int[] Shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.Reset();\n * int[] param_2 = obj.Shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n\n};\n\n/**\n * Resets the array to its original configuration and return it.\n * @return {number[]}\n */\nSolution.prototype.reset = function() {\n\n};\n\n/**\n * Returns a random shuffling of the array.\n * @return {number[]}\n */\nSolution.prototype.shuffle = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n\n    end\n\n\n=begin\n    Resets the array to its original configuration and return it.\n    :rtype: Integer[]\n=end\n    def reset()\n\n    end\n\n\n=begin\n    Returns a random shuffling of the array.\n    :rtype: Integer[]\n=end\n    def shuffle()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ nums: [Int]) {\n\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    func reset() -> [Int] {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    func shuffle() -> [Int] {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(nums)\n * let ret_1: [Int] = obj.reset()\n * let ret_2: [Int] = obj.shuffle()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(nums []int) Solution {\n\n}\n\n\n/** Resets the array to its original configuration and return it. */\nfunc (this *Solution) Reset() []int {\n\n}\n\n\n/** Returns a random shuffling of the array. */\nfunc (this *Solution) Shuffle() []int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.Reset();\n * param_2 := obj.Shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_nums: Array[Int]) {\n\n    /** Resets the array to its original configuration and return it. */\n    def reset(): Array[Int] = {\n\n    }\n\n    /** Returns a random shuffling of the array. */\n    def shuffle(): Array[Int] = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(nums: IntArray) {\n\n    /** Resets the array to its original configuration and return it. */\n    fun reset(): IntArray {\n\n    }\n\n    /** Returns a random shuffling of the array. */\n    fun shuffle(): IntArray {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(nums: Vec<i32>) -> Self {\n\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    fn reset(&self) -> Vec<i32> {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    fn shuffle(&self) -> Vec<i32> {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(nums);\n * let ret_1: Vec<i32> = obj.reset();\n * let ret_2: Vec<i32> = obj.shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n\n    }\n\n    /**\n     * Resets the array to its original configuration and return it.\n     * @return Integer[]\n     */\n    function reset() {\n\n    }\n\n    /**\n     * Returns a random shuffling of the array.\n     * @return Integer[]\n     */\n    function shuffle() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($nums);\n * $ret_1 = $obj->reset();\n * $ret_2 = $obj->shuffle();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(nums: number[]) {\n\n    }\n\n    reset(): number[] {\n\n    }\n\n    shuffle(): number[] {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0385", "frontend_question_id": "0385", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/mini-parser", "url_en": "https://leetcode.com/problems/mini-parser", "relative_path_cn": "/leetcode/0300-0399/0385.Mini%20Parser/README.md", "relative_path_en": "/leetcode/0300-0399/0385.Mini%20Parser/README_EN.md", "title_cn": "\u8ff7\u4f60\u8bed\u6cd5\u5206\u6790\u5668", "title_en": "Mini Parser", "question_title_slug": "mini-parser", "content_en": "<p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><b>Note:</b> You may assume that the string is well-formed:</p>\r\n\r\n<ul>\r\n\t<li>String is non-empty.</li>\r\n\t<li>String does not contain white spaces.</li>\r\n\t<li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nGiven s = &quot;324&quot;,\r\n\r\nYou should return a NestedInteger object which contains a single integer 324.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nGiven s = &quot;[123,[456,[789]]]&quot;,\r\n\r\nReturn a NestedInteger object containing a nested list with 2 elements:\r\n\r\n1. An integer containing value 123.\r\n2. A nested list containing two elements:\r\n    i.  An integer containing value 456.\r\n    ii. A nested list with one element:\r\n         a. An integer containing value 789.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6574\u6570\u7684\u5d4c\u5957\u5217\u8868\uff0c\u5b9e\u73b0\u4e00\u4e2a\u89e3\u6790\u5b83\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u662f\u6574\u6570\u6216\u6574\u6570\u5d4c\u5957\u5217\u8868</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd9\u4e9b\u5b57\u7b26\u4e32\u90fd\u662f\u683c\u5f0f\u826f\u597d\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32\u975e\u7a7a</li>\n\t<li>\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c</li>\n\t<li>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6570\u5b57<code>0-9</code>\u3001<code>[</code>\u3001<code>-</code>\u3001<code>,</code>\u3001<code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a s = &quot;324&quot;,\n\n\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\uff0c\u5176\u4e2d\u53ea\u5305\u542b\u6574\u6570\u503c 324\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a s = &quot;[123,[456,[789]]]&quot;,\n\n\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\u5305\u542b\u4e00\u4e2a\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n\n1. \u4e00\u4e2a integer \u5305\u542b\u503c 123\n2. \u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n    i.  \u4e00\u4e2a integer \u5305\u542b\u503c 456\n    ii. \u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\n         a. \u4e00\u4e2a integer \u5305\u542b\u503c 789\n</pre>\n", "tags_en": ["Stack", "String"], "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass Solution {\npublic:\n    NestedInteger deserialize(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public NestedInteger deserialize(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        \"\"\"\n#\n#    def setInteger(self, value):\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\nclass Solution(object):\n    def deserialize(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: NestedInteger\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        \"\"\"\n#\n#    def setInteger(self, value):\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\nclass Solution:\n    def deserialize(self, s: str) -> NestedInteger:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * *********************************************************************\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Initializes an empty nested list and return a reference to the nested integer.\n * struct NestedInteger *NestedIntegerInit();\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger *);\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger *);\n *\n * // Set this NestedInteger to hold a single integer.\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\n *\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * int NestedIntegerGetListSize(struct NestedInteger *);\n * };\n */\n\n\nstruct NestedInteger* deserialize(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * interface NestedInteger {\n *\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     int GetInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void SetInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void Add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class Solution {\n    public NestedInteger Deserialize(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {string} s\n * @return {NestedInteger}\n */\nvar deserialize = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a nested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def set_integer(value)\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        @return {Void}\n#        \"\"\"\n#\n#    def add(elem)\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        @return {Void}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return nil if this NestedInteger holds a single integer\n#        @return {NestedInteger[]}\n#        \"\"\"\n# @param {String} s\n# @return {NestedInteger}\ndef deserialize(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     public func getList() -> [NestedInteger]\n * }\n */\nclass Solution {\n    func deserialize(_ s: String) -> NestedInteger {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * type NestedInteger struct {\n * }\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * func (n NestedInteger) IsInteger() bool {}\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * // So before calling this method, you should have a check\n * func (n NestedInteger) GetInteger() int {}\n *\n * // Set this NestedInteger to hold a single integer.\n * func (n *NestedInteger) SetInteger(value int) {}\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n * func (n *NestedInteger) Add(elem NestedInteger) {}\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The list length is zero if this NestedInteger holds a single integer\n * // You can access NestedInteger's List element directly if you want to modify it\n * func (n NestedInteger) GetList() []*NestedInteger {}\n */\nfunc deserialize(s string) *NestedInteger {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *   def isInteger: Boolean = {}\n *\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer\n *   def getInteger: Int = {}\n *\n *   // Set this NestedInteger to hold a single integer.\n *   def setInteger(i: Int) = {}\n *\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list\n *   def getList = {}\n *\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *   def add(ni: NestedInteger) = {}\n * }\n */\nobject Solution {\n    def deserialize(s: String): NestedInteger = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     constructor()\n *\n *     // Constructor initializes a single integer.\n *     constructor(value: Int)\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     fun isInteger(): Boolean\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     fun getInteger(): Int?\n *\n *     // Set this NestedInteger to hold a single integer.\n *     fun setInteger(value: Int): Unit\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     fun add(ni: NestedInteger): Unit\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     fun getList(): List<NestedInteger>?\n * }\n */\nclass Solution {\n    fun deserialize(s: String): NestedInteger {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// #[derive(Debug, PartialEq, Eq)]\n// pub enum NestedInteger {\n//   Int(i32),\n//   List(Vec<NestedInteger>)\n// }\nimpl Solution {\n    pub fn deserialize(s: String) -> NestedInteger {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n\n *     // if value is not specified, initializes an empty list.\n *     // Otherwise initializes a single integer equal to value.\n *     function __construct($value = null)\n\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single integer.\n *     function setInteger($i) : void\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     function add($ni) : void\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     function getList() : array\n * }\n */\nclass Solution {\n\n    /**\n     * @param String $s\n     * @return NestedInteger\n     */\n    function deserialize($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     If value is provided, then it holds a single integer\n *     Otherwise it holds an empty nested list\n *     constructor(value?: number) {\n *         ...\n *     };\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     isInteger(): boolean {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     getInteger(): number | null {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     setInteger(value: number) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     add(elem: NestedInteger) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds,\n *     or an empty list if this NestedInteger holds a single integer\n *     getList(): NestedInteger[] {\n *         ...\n *     };\n * };\n */\n\nfunction deserialize(s: string): NestedInteger {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0386", "frontend_question_id": "0386", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/lexicographical-numbers", "url_en": "https://leetcode.com/problems/lexicographical-numbers", "relative_path_cn": "/leetcode/0300-0399/0386.Lexicographical%20Numbers/README.md", "relative_path_en": "/leetcode/0300-0399/0386.Lexicographical%20Numbers/README_EN.md", "title_cn": "\u5b57\u5178\u5e8f\u6392\u6570", "title_en": "Lexicographical Numbers", "question_title_slug": "lexicographical-numbers", "content_en": "<p>Given an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.</p>\r\n\r\n<p>For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].</p>\r\n\r\n<p>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570&nbsp;<em>n</em>, \u8fd4\u56de\u4ece&nbsp;<em>1&nbsp;</em>\u5230&nbsp;<em>n&nbsp;</em>\u7684\u5b57\u5178\u987a\u5e8f\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<p>\u7ed9\u5b9a <em>n</em> =1 3\uff0c\u8fd4\u56de [1,10,11,12,13,2,3,4,5,6,7,8,9] \u3002</p>\n\n<p>\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f18\u5316\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u8f93\u5165\u7684\u6570\u636e&nbsp;<em>n&nbsp;</em>\u5c0f\u4e8e\u7b49\u4e8e&nbsp;5,000,000\u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> lexicalOrder(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> lexicalOrder(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lexicalOrder(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lexicalOrder(self, n: int) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicalOrder(int n, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> LexicalOrder(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar lexicalOrder = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef lexical_order(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lexicalOrder(_ n: Int) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lexicalOrder(n int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lexicalOrder(n: Int): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lexicalOrder(n: Int): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn lexical_order(n: i32) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function lexicalOrder($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lexicalOrder(n: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0387", "frontend_question_id": "0387", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/first-unique-character-in-a-string", "url_en": "https://leetcode.com/problems/first-unique-character-in-a-string", "relative_path_cn": "/leetcode/0300-0399/0387.First%20Unique%20Character%20in%20a%20String/README.md", "relative_path_en": "/leetcode/0300-0399/0387.First%20Unique%20Character%20in%20a%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26", "title_en": "First Unique Character in a String", "question_title_slug": "first-unique-character-in-a-string", "content_en": "<p>Given a string, find the first non-repeating character in it and return its index. If it doesn&#39;t exist, return -1.</p>\n\n<p><b>Examples:</b></p>\n\n<pre>\ns = &quot;leetcode&quot;\nreturn 0.\n\ns = &quot;loveleetcode&quot;\nreturn 2.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b> You may assume the string contains only lowercase English letters.</p>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>s = &quot;leetcode&quot;\n\u8fd4\u56de 0\n\ns = &quot;loveleetcode&quot;\n\u8fd4\u56de 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n", "tags_en": ["Hash Table", "String"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int firstUniqChar(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int firstUniqChar(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def firstUniqChar(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint firstUniqChar(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FirstUniqChar(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar firstUniqChar = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef first_uniq_char(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func firstUniqChar(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func firstUniqChar(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def firstUniqChar(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun firstUniqChar(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn first_uniq_char(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function firstUniqChar($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function firstUniqChar(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0388", "frontend_question_id": "0388", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-absolute-file-path", "url_en": "https://leetcode.com/problems/longest-absolute-file-path", "relative_path_cn": "/leetcode/0300-0399/0388.Longest%20Absolute%20File%20Path/README.md", "relative_path_en": "/leetcode/0300-0399/0388.Longest%20Absolute%20File%20Path/README_EN.md", "title_cn": "\u6587\u4ef6\u7684\u6700\u957f\u7edd\u5bf9\u8def\u5f84", "title_en": "Longest Absolute File Path", "question_title_slug": "longest-absolute-file-path", "content_en": "<p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg\" style=\"width: 681px; height: 322px;\" /></p>\n\n<p>Here, we have <code>dir</code> as the only directory in the root. <code>dir</code> contains two subdirectories, <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and subdirectory <code>subsubdir1</code>. <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>, which contains a file <code>file2.ext</code>.</p>\n\n<p>In text form, it looks like this (with \u27f6 representing the tab character):</p>\n\n<pre>\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n</pre>\n\n<p>If we were to write this representation in code, it will look like this: <code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code>. Note that the <code>&#39;\\n&#39;</code> and <code>&#39;\\t&#39;</code> are the new-line and tab characters.</p>\n\n<p>Every file and directory has a unique <strong>absolute path</strong> in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by <code>&#39;/&#39;s</code>. Using the above example, the <strong>absolute path</strong> to <code>file2.ext</code> is <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form <code>name.extension</code>, where <code>name</code> and <code>extension</code> consist of letters, digits, and/or spaces.</p>\n\n<p>Given a string <code>input</code> representing the file system in the explained format, return <em>the length of the <strong>longest absolute path</strong> to a <strong>file</strong> in the abstracted file system</em>. If there is no file in the system, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg\" style=\"width: 401px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> input = &quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> We have only one file, and the absolute path is &quot;dir/subdir2/file.ext&quot; of length 20.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg\" style=\"width: 641px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> input = &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> We have two files:\n&quot;dir/subdir1/file1.ext&quot; of length 21\n&quot;dir/subdir2/subsubdir2/file2.ext&quot; of length 32.\nWe return 32 since it is the longest absolute path to a file.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> input = &quot;a&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We do not have any files, just a single directory named &quot;a&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> input = &quot;file1.txt\\nfile2.txt\\nlongfile.txt&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> There are 3 files at the root directory.\nSince the absolute path for anything at the root directory is just the name itself, the answer is &quot;longfile.txt&quot; with length 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= input.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>input</code> may contain lowercase or uppercase English letters, a new line character <code>&#39;\\n&#39;</code>, a tab character <code>&#39;\\t&#39;</code>, a dot <code>&#39;.&#39;</code>, a space <code>&#39; &#39;</code>, and digits.</li>\n</ul>\n", "content_cn": "<p>\u5047\u8bbe\u6587\u4ef6\u7cfb\u7edf\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg\" style=\"width: 681px; height: 322px;\" /></p>\n\n<p>\u8fd9\u91cc\u5c06 <code>dir</code> \u4f5c\u4e3a\u6839\u76ee\u5f55\u4e2d\u7684\u552f\u4e00\u76ee\u5f55\u3002<code>dir</code> \u5305\u542b\u4e24\u4e2a\u5b50\u76ee\u5f55 <code>subdir1</code> \u548c <code>subdir2</code> \u3002<code>subdir1</code> \u5305\u542b\u6587\u4ef6 <code>file1.ext</code> \u548c\u5b50\u76ee\u5f55 <code>subsubdir1</code>\uff1b<code>subdir2</code> \u5305\u542b\u5b50\u76ee\u5f55 <code>subsubdir2</code>\uff0c\u8be5\u5b50\u76ee\u5f55\u4e0b\u5305\u542b\u6587\u4ef6 <code>file2.ext</code> \u3002</p>\n\n<p>\u5728\u6587\u672c\u683c\u5f0f\u4e2d\uff0c\u5982\u4e0b\u6240\u793a(\u27f6\u8868\u793a\u5236\u8868\u7b26)\uff1a</p>\n\n<pre>\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n</pre>\n\n<p>\u5982\u679c\u662f\u4ee3\u7801\u8868\u793a\uff0c\u4e0a\u9762\u7684\u6587\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u5199\u4e3a <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code> \u3002<code>'\\n'</code> \u548c <code>'\\t'</code> \u5206\u522b\u662f\u6362\u884c\u7b26\u548c\u5236\u8868\u7b26\u3002</p>\n\n<p>\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 <strong>\u7edd\u5bf9\u8def\u5f84</strong> \uff0c\u5373\u5fc5\u987b\u6253\u5f00\u624d\u80fd\u5230\u8fbe\u6587\u4ef6/\u76ee\u5f55\u6240\u5728\u4f4d\u7f6e\u7684\u76ee\u5f55\u987a\u5e8f\uff0c\u6240\u6709\u8def\u5f84\u7528 <code>'/'</code> \u8fde\u63a5\u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u6307\u5411 <code>file2.ext</code> \u7684\u7edd\u5bf9\u8def\u5f84\u662f <code>\"dir/subdir2/subsubdir2/file2.ext\"</code> \u3002\u6bcf\u4e2a\u76ee\u5f55\u540d\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c/\u6216\u7a7a\u683c\u7ec4\u6210\uff0c\u6bcf\u4e2a\u6587\u4ef6\u540d\u9075\u5faa <code>name.extension</code> \u7684\u683c\u5f0f\uff0c\u5176\u4e2d\u540d\u79f0\u548c\u6269\u5c55\u540d\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c/\u6216\u7a7a\u683c\u7ec4\u6210\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u4e0a\u8ff0\u683c\u5f0f\u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u7684\u5b57\u7b26\u4e32 <code>input</code> \uff0c\u8fd4\u56de\u6587\u4ef6\u7cfb\u7edf\u4e2d <strong>\u6307\u5411\u6587\u4ef6\u7684\u6700\u957f\u7edd\u5bf9\u8def\u5f84</strong> \u7684\u957f\u5ea6\u3002 \u5982\u679c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u6587\u4ef6\uff0c\u8fd4\u56de\u00a0<code>0</code>\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg\" style=\"width: 401px; height: 202px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\uff0c\u7edd\u5bf9\u8def\u5f84\u4e3a \"dir/subdir2/file.ext\" \uff0c\u8def\u5f84\u957f\u5ea6 20\n\u8def\u5f84 \"dir/subdir1\" \u4e0d\u542b\u4efb\u4f55\u6587\u4ef6\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg\" style=\"width: 641px; height: 322px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n<strong>\u8f93\u51fa\uff1a</strong>32\n<strong>\u89e3\u91ca\uff1a</strong>\u5b58\u5728\u4e24\u4e2a\u6587\u4ef6\uff1a\n\"dir/subdir1/file1.ext\" \uff0c\u8def\u5f84\u957f\u5ea6 21\n\"dir/subdir2/subsubdir2/file2.ext\" \uff0c\u8def\u5f84\u957f\u5ea6 32\n\u8fd4\u56de 32 \uff0c\u56e0\u4e3a\u8fd9\u662f\u6700\u957f\u7684\u8def\u5f84</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>input = \"a\"\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0d\u5b58\u5728\u4efb\u4f55\u6587\u4ef6</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\u6839\u76ee\u5f55\u4e0b\u6709 3 \u4e2a\u6587\u4ef6\u3002\n\u56e0\u4e3a\u6839\u76ee\u5f55\u4e2d\u4efb\u4f55\u4e1c\u897f\u7684\u7edd\u5bf9\u8def\u5f84\u53ea\u662f\u540d\u79f0\u672c\u8eab\uff0c\u6240\u4ee5\u7b54\u6848\u662f \"longfile.txt\" \uff0c\u8def\u5f84\u957f\u5ea6\u4e3a 12\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= input.length <= 10<sup>4</sup></code></li>\n\t<li><code>input</code> \u53ef\u80fd\u5305\u542b\u5c0f\u5199\u6216\u5927\u5199\u7684\u82f1\u6587\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6362\u884c\u7b26 <code>'\\n'</code>\uff0c\u4e00\u4e2a\u6307\u8868\u7b26 <code>'\\t'</code>\uff0c\u4e00\u4e2a\u70b9 <code>'.'</code>\uff0c\u4e00\u4e2a\u7a7a\u683c <code>' '</code>\uff0c\u548c\u6570\u5b57\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lengthLongestPath(string input) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lengthLongestPath(String input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lengthLongestPath(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint lengthLongestPath(char * input){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LengthLongestPath(string input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} input\n * @return {number}\n */\nvar lengthLongestPath = function(input) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} input\n# @return {Integer}\ndef length_longest_path(input)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lengthLongestPath(_ input: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lengthLongestPath(input string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lengthLongestPath(input: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lengthLongestPath(input: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn length_longest_path(input: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $input\n     * @return Integer\n     */\n    function lengthLongestPath($input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lengthLongestPath(input: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0389", "frontend_question_id": "0389", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-the-difference", "url_en": "https://leetcode.com/problems/find-the-difference", "relative_path_cn": "/leetcode/0300-0399/0389.Find%20the%20Difference/README.md", "relative_path_en": "/leetcode/0300-0399/0389.Find%20the%20Difference/README_EN.md", "title_cn": "\u627e\u4e0d\u540c", "title_en": "Find the Difference", "question_title_slug": "find-the-difference", "content_en": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p>\n\n<p>Return the letter that was added to <code>t</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;abcde&quot;\n<strong>Output:</strong> &quot;e&quot;\n<strong>Explanation:</strong> &#39;e&#39; is the letter that was added.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;y&quot;\n<strong>Output:</strong> &quot;y&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ae&quot;, t = &quot;aea&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>t.length == s.length + 1</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lower-case English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <em><strong>s</strong></em> \u548c <em><strong>t</strong></em>\uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<strong><em>t</em></strong>&nbsp;\u7531\u5b57\u7b26\u4e32&nbsp;<strong><em>s</em></strong>&nbsp;\u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u5728 <em><strong>t</strong></em> \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;abcd&quot;, t = &quot;abcde&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;e&quot;\n<strong>\u89e3\u91ca\uff1a</strong>&#39;e&#39; \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;&quot;, t = &quot;y&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;y&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;ae&quot;, t = &quot;aea&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>t.length == s.length + 1</code></li>\n\t<li><code>s</code> \u548c <code>t</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Hash Table"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    char findTheDifference(string s, string t) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public char findTheDifference(String s, String t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar findTheDifference(char * s, char * t){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public char FindTheDifference(string s, string t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {character}\n */\nvar findTheDifference = function(s, t) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Character}\ndef find_the_difference(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findTheDifference(_ s: String, _ t: String) -> Character {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findTheDifference(s string, t string) byte {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findTheDifference(s: String, t: String): Char = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findTheDifference(s: String, t: String): Char {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_the_difference(s: String, t: String) -> char {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function findTheDifference($s, $t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findTheDifference(s: string, t: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0390", "frontend_question_id": "0390", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/elimination-game", "url_en": "https://leetcode.com/problems/elimination-game", "relative_path_cn": "/leetcode/0300-0399/0390.Elimination%20Game/README.md", "relative_path_en": "/leetcode/0300-0399/0390.Elimination%20Game/README_EN.md", "title_cn": "\u6d88\u9664\u6e38\u620f", "title_en": "Elimination Game", "question_title_slug": "elimination-game", "content_en": "<p>\r\nThere is a list of sorted integers from 1 to <i>n</i>. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>\r\n\r\n<p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p>\r\n\r\n<p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>\r\n\r\n<p>Find the last number that remains starting with a list of length <i>n</i>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\nn = 9,\r\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\r\n2 <u>4</u> 6 <u>8</u>\r\n<u>2</u> 6\r\n6\r\n\r\nOutput:\r\n6\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ece1 \u5230 n \u6392\u5e8f\u7684\u6574\u6570\u5217\u8868\u3002<br />\n\u9996\u5148\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u6bcf\u9694\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u5220\u9664\uff0c\u76f4\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002<br />\n\u7b2c\u4e8c\u6b65\uff0c\u5728\u5269\u4e0b\u7684\u6570\u5b57\u4e2d\uff0c\u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u5012\u6570\u7b2c\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u6bcf\u9694\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u5220\u9664\uff0c\u76f4\u5230\u5217\u8868\u5f00\u5934\u3002<br />\n\u6211\u4eec\u4e0d\u65ad\u91cd\u590d\u8fd9\u4e24\u6b65\uff0c\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4ea4\u66ff\u8fdb\u884c\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002<br />\n\u8fd4\u56de\u957f\u5ea6\u4e3a n \u7684\u5217\u8868\u4e2d\uff0c\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\n<strong>\u8f93\u51fa:</strong>\n6</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int lastRemaining(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int lastRemaining(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def lastRemaining(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint lastRemaining(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LastRemaining(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar lastRemaining = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef last_remaining(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func lastRemaining(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func lastRemaining(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def lastRemaining(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun lastRemaining(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn last_remaining(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function lastRemaining($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function lastRemaining(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0391", "frontend_question_id": "0391", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/perfect-rectangle", "url_en": "https://leetcode.com/problems/perfect-rectangle", "relative_path_cn": "/leetcode/0300-0399/0391.Perfect%20Rectangle/README.md", "relative_path_en": "/leetcode/0300-0399/0391.Perfect%20Rectangle/README_EN.md", "title_cn": "\u5b8c\u7f8e\u77e9\u5f62", "title_en": "Perfect Rectangle", "question_title_slug": "perfect-rectangle", "content_en": "<p>Given N axis-aligned rectangles where N &gt; 0, determine if they all together form an exact cover of a rectangular region.</p>\r\n\r\n<p>Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).</p>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_perfect.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [3,2,4,4],\r\n  [1,3,2,4],\r\n  [2,3,3,4]\r\n]\r\n\r\nReturn true. All 5 rectangles together form an exact cover of a rectangular region.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_separated.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,2,3],\r\n  [1,3,2,4],\r\n  [3,1,4,2],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap between the two rectangular regions.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_hole.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap in the top center.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_intersect.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [2,2,4,4]\r\n]\r\n\r\nReturn false. Because two of the rectangles overlap with each other.\r\n</pre>\r\n\r\n<p>&nbsp;</p>", "content_cn": "<p>\u6211\u4eec\u6709 N \u4e2a\u4e0e\u5750\u6807\u8f74\u5bf9\u9f50\u7684\u77e9\u5f62, \u5176\u4e2d N &gt; 0, \u5224\u65ad\u5b83\u4eec\u662f\u5426\u80fd\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002</p>\n\n<p>\u6bcf\u4e2a\u77e9\u5f62\u7528\u5de6\u4e0b\u89d2\u7684\u70b9\u548c\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u6765\u8868\u793a\u3002\u4f8b\u5982\uff0c&nbsp;\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u5f62\u53ef\u4ee5\u8868\u793a\u4e3a [1,1,2,2]\u3002&nbsp;( \u5de6\u4e0b\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (1, 1) \u4ee5\u53ca\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (2, 2) )\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_perfect.gif\"></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\n\u8fd4\u56de true\u30025\u4e2a\u77e9\u5f62\u4e00\u8d77\u53ef\u4ee5\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_separated.gif\"></p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u4e24\u4e2a\u77e9\u5f62\u4e4b\u95f4\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_hole.gif\"></p>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56fe\u5f62\u9876\u7aef\u7559\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_intersect.gif\"></p>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56e0\u4e3a\u4e2d\u95f4\u6709\u76f8\u4ea4\u533a\u57df\uff0c\u867d\u7136\u5f62\u6210\u4e86\u77e9\u5f62\uff0c\u4f46\u4e0d\u662f\u7cbe\u786e\u8986\u76d6\u3002\n</pre>\n", "tags_en": ["Line Sweep"], "tags_cn": [null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isRectangleCover(int** rectangles, int rectanglesSize, int* rectanglesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsRectangleCover(int[][] rectangles) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\nvar isRectangleCover = function(rectangles) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} rectangles\n# @return {Boolean}\ndef is_rectangle_cover(rectangles)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isRectangleCover(_ rectangles: [[Int]]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isRectangleCover(rectangles [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isRectangleCover(rectangles: Array<IntArray>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_rectangle_cover(rectangles: Vec<Vec<i32>>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Boolean\n     */\n    function isRectangleCover($rectangles) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isRectangleCover(rectangles: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0392", "frontend_question_id": "0392", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/is-subsequence", "url_en": "https://leetcode.com/problems/is-subsequence", "relative_path_cn": "/leetcode/0300-0399/0392.Is%20Subsequence/README.md", "relative_path_en": "/leetcode/0300-0399/0392.Is%20Subsequence/README_EN.md", "title_cn": "\u5224\u65ad\u5b50\u5e8f\u5217", "title_en": "Is Subsequence", "question_title_slug": "is-subsequence", "content_en": "<p>Given a string <b>s</b> and a string <b>t</b>, check if <b>s</b> is subsequence of <b>t</b>.</p>\n\n<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p><b>Follow up:</b><br />\nIf there are lots of incoming S, say S1, S2, ... , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p>\n\n<p><b>Credits:</b><br />\nSpecial thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10^4</code></li>\n\t<li>Both strings consists only of lowercase characters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 <strong>s</strong> \u548c <strong>t</strong> \uff0c\u5224\u65ad <strong>s</strong> \u662f\u5426\u4e3a <strong>t</strong> \u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c<code>\"ace\"</code>\u662f<code>\"abcde\"</code>\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c<code>\"aec\"</code>\u4e0d\u662f\uff09\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5c S1, S2, ... , Sk \u5176\u4e2d k >= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f</p>\n\n<p><strong>\u81f4\u8c22\uff1a</strong></p>\n\n<p>\u7279\u522b\u611f\u8c22<strong> </strong><a href=\"https://leetcode.com/pbrother/\">@pbrother\u00a0</a>\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"abc\", t = \"ahbgdc\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"axc\", t = \"ahbgdc\"\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length <= 100</code></li>\n\t<li><code>0 <= t.length <= 10^4</code></li>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u7b26\u7ec4\u6210\u3002</li>\n</ul>\n", "tags_en": ["Greedy", "Binary Search", "Dynamic Programming"], "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u4e8c\u5206\u67e5\u627e", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isSubsequence(String s, String t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isSubsequence(char * s, char * t){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsSubsequence(string s, string t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_subsequence(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isSubsequence(s string, t string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_subsequence(s: String, t: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isSubsequence($s, $t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isSubsequence(s: string, t: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0393", "frontend_question_id": "0393", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/utf-8-validation", "url_en": "https://leetcode.com/problems/utf-8-validation", "relative_path_cn": "/leetcode/0300-0399/0393.UTF-8%20Validation/README.md", "relative_path_en": "/leetcode/0300-0399/0393.UTF-8%20Validation/README_EN.md", "title_cn": "UTF-8 \u7f16\u7801\u9a8c\u8bc1", "title_en": "UTF-8 Validation", "question_title_slug": "utf-8-validation", "content_en": "<p>A character in UTF8 can be from <b>1 to 4 bytes</b> long, subjected to the following rules:</p>\r\n<ol>\r\n<li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>\r\n<li>For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li>\r\n</ol>\r\n<p>This is how the UTF-8 encoding would work:</p>\r\n\r\n<pre><code>   Char. number range  |        UTF-8 octet sequence\r\n      (hexadecimal)    |              (binary)\r\n   --------------------+---------------------------------------------\r\n   0000 0000-0000 007F | 0xxxxxxx\r\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\r\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\r\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n</code></pre>\r\n<p>\r\nGiven an array of integers representing the data, return whether it is a valid utf-8 encoding.\r\n</p>\r\n<p>\r\n<b>Note:</b><br />\r\nThe input is an array of integers. Only the <b>least significant 8 bits</b> of each integer is used to store the data. This means each integer represents only 1 byte of data.\r\n</p>\r\n\r\n<p>\r\n<b>Example 1:</b>\r\n<pre>\r\ndata = [197, 130, 1], which represents the octet sequence: <b>11000101 10000010 00000001</b>.\r\n\r\nReturn <b>true</b>.\r\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2:</b>\r\n<pre>\r\ndata = [235, 140, 4], which represented the octet sequence: <b>11101011 10001100 00000100</b>.\r\n\r\nReturn <b>false</b>.\r\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\r\nThe next byte is a continuation byte which starts with 10 and that's correct.\r\nBut the second continuation byte does not start with 10, so it is invalid.\r\n</pre>\r\n</p>", "content_cn": "<p>UTF-8 \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u7684\u957f\u5ea6\u4e3a <strong>1 \u5230 4 \u5b57\u8282</strong>\uff0c\u9075\u5faa\u4ee5\u4e0b\u7684\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u5bf9\u4e8e 1 \u5b57\u8282\u7684\u5b57\u7b26\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a0\uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684unicode\u7801\u3002</li>\n\t<li>\u5bf9\u4e8e n \u5b57\u8282\u7684\u5b57\u7b26 (n &gt; 1)\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a1\uff0c\u7b2c n+1 \u4f4d\u8bbe\u4e3a0\uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a10\u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684unicode\u7801\u3002</li>\n</ol>\n\n<p>\u8fd9\u662f UTF-8 \u7f16\u7801\u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a</p>\n\n<pre>\n<code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u6570\u636e\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u662f\u5426\u4e3a\u6709\u6548\u7684 utf-8 \u7f16\u7801\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u8f93\u5165\u662f\u6574\u6570\u6570\u7ec4\u3002\u53ea\u6709\u6bcf\u4e2a\u6574\u6570\u7684<strong>\u6700\u4f4e 8 \u4e2a\u6709\u6548\u4f4d</strong>\u7528\u6765\u5b58\u50a8\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6574\u6570\u53ea\u8868\u793a 1 \u5b57\u8282\u7684\u6570\u636e\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\ndata = [197, 130, 1], \u8868\u793a 8 \u4f4d\u7684\u5e8f\u5217: <strong>11000101 10000010 00000001</strong>.\n\n\u8fd4\u56de <strong>true </strong>\u3002\n\u8fd9\u662f\u6709\u6548\u7684 utf-8 \u7f16\u7801\uff0c\u4e3a\u4e00\u4e2a2\u5b57\u8282\u5b57\u7b26\uff0c\u8ddf\u7740\u4e00\u4e2a1\u5b57\u8282\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\ndata = [235, 140, 4], \u8868\u793a 8 \u4f4d\u7684\u5e8f\u5217: <strong>11101011 10001100 00000100</strong>.\n\n\u8fd4\u56de<strong> false</strong> \u3002\n\u524d 3 \u4f4d\u90fd\u662f 1 \uff0c\u7b2c 4 \u4f4d\u4e3a 0 \u8868\u793a\u5b83\u662f\u4e00\u4e2a3\u5b57\u8282\u5b57\u7b26\u3002\n\u4e0b\u4e00\u4e2a\u5b57\u8282\u662f\u5f00\u5934\u4e3a 10 \u7684\u5ef6\u7eed\u5b57\u8282\uff0c\u8fd9\u662f\u6b63\u786e\u7684\u3002\n\u4f46\u7b2c\u4e8c\u4e2a\u5ef6\u7eed\u5b57\u8282\u4e0d\u4ee5 10 \u5f00\u5934\uff0c\u6240\u4ee5\u662f\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u3002\n</pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validUtf8(vector<int>& data) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validUtf8(int[] data) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validUtf8(self, data):\n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validUtf8(int* data, int dataSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidUtf8(int[] data) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} data\n * @return {boolean}\n */\nvar validUtf8 = function(data) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} data\n# @return {Boolean}\ndef valid_utf8(data)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validUtf8(_ data: [Int]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validUtf8(data []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validUtf8(data: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validUtf8(data: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_utf8(data: Vec<i32>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $data\n     * @return Boolean\n     */\n    function validUtf8($data) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validUtf8(data: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0394", "frontend_question_id": "0394", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/decode-string", "url_en": "https://leetcode.com/problems/decode-string", "relative_path_cn": "/leetcode/0300-0399/0394.Decode%20String/README.md", "relative_path_en": "/leetcode/0300-0399/0394.Decode%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u89e3\u7801", "title_en": "Decode String", "question_title_slug": "decode-string", "content_en": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there won&#39;t be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3[a]2[bc]\"\n<strong>Output:</strong> \"aaabcbc\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"3[a2[c]]\"\n<strong>Output:</strong> \"accaccacc\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"2[abc]3[cd]ef\"\n<strong>Output:</strong> \"abcabccdcdcdef\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> s = \"abc3[cd]xyz\"\n<strong>Output:</strong> \"abccdcdcdxyz\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7f16\u7801\u89c4\u5219\u4e3a: <code>k[encoded_string]</code>\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 <em>encoded_string</em> \u6b63\u597d\u91cd\u590d <em>k</em> \u6b21\u3002\u6ce8\u610f <em>k</em> \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002</p>\n\n<p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 <em>k</em> \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf&nbsp;<code>3a</code>&nbsp;\u6216&nbsp;<code>2[4]</code>&nbsp;\u7684\u8f93\u5165\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;3[a]2[bc]&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;aaabcbc&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;3[a2[c]]&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;accaccacc&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;2[abc]3[cd]ef&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abcabccdcdcdef&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;abc3[cd]xyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abccdcdcdxyz&quot;\n</pre>\n", "tags_en": ["Stack", "Depth-first Search"], "tags_cn": ["\u6808", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string decodeString(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String decodeString(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def decodeString(self, s: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * decodeString(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string DecodeString(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef decode_string(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func decodeString(_ s: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func decodeString(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def decodeString(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun decodeString(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn decode_string(s: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function decodeString(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0395", "frontend_question_id": "0395", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters", "url_en": "https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters", "relative_path_cn": "/leetcode/0300-0399/0395.Longest%20Substring%20with%20At%20Least%20K%20Repeating%20Characters/README.md", "relative_path_en": "/leetcode/0300-0399/0395.Longest%20Substring%20with%20At%20Least%20K%20Repeating%20Characters/README_EN.md", "title_cn": "\u81f3\u5c11\u6709K\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32", "title_en": "Longest Substring with At Least K Repeating Characters", "question_title_slug": "longest-substring-with-at-least-k-repeating-characters", "content_en": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabb&quot;, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbc&quot;, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u627e\u5230\u7ed9\u5b9a\u5b57\u7b26\u4e32\uff08\u7531\u5c0f\u5199\u5b57\u7b26\u7ec4\u6210\uff09\u4e2d\u7684\u6700\u957f\u5b50\u4e32 <strong><em>T</em></strong> \uff0c&nbsp;\u8981\u6c42&nbsp;<strong><em>T</em></strong>&nbsp;\u4e2d\u7684\u6bcf\u4e00\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u90fd\u4e0d\u5c11\u4e8e <em>k</em> \u3002\u8f93\u51fa <strong><em>T&nbsp;</em></strong>\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n\u8f93\u5165:\ns = &quot;aaabb&quot;, k = 3\n\n\u8f93\u51fa:\n3\n\n\u6700\u957f\u5b50\u4e32\u4e3a &quot;aaa&quot; \uff0c\u5176\u4e2d &#39;a&#39; \u91cd\u590d\u4e86 3 \u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n\u8f93\u5165:\ns = &quot;ababbc&quot;, k = 2\n\n\u8f93\u51fa:\n5\n\n\u6700\u957f\u5b50\u4e32\u4e3a &quot;ababb&quot; \uff0c\u5176\u4e2d &#39;a&#39; \u91cd\u590d\u4e86 2 \u6b21\uff0c &#39;b&#39; \u91cd\u590d\u4e86 3 \u6b21\u3002\n</pre>\n", "tags_en": ["Recursion", "Divide and Conquer", "Sliding Window"], "tags_cn": ["\u9012\u5f52", "\u5206\u6cbb\u7b97\u6cd5", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestSubstring(string s, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestSubstring(String s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint longestSubstring(char * s, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestSubstring(string s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar longestSubstring = function(s, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef longest_substring(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestSubstring(_ s: String, _ k: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestSubstring(s string, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestSubstring(s: String, k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestSubstring(s: String, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_substring(s: String, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function longestSubstring($s, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestSubstring(s: string, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0396", "frontend_question_id": "0396", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rotate-function", "url_en": "https://leetcode.com/problems/rotate-function", "relative_path_cn": "/leetcode/0300-0399/0396.Rotate%20Function/README.md", "relative_path_en": "/leetcode/0300-0399/0396.Rotate%20Function/README_EN.md", "title_cn": "\u65cb\u8f6c\u51fd\u6570", "title_en": "Rotate Function", "question_title_slug": "rotate-function", "content_en": "<p>\r\nGiven an array of integers <code>A</code> and let <i>n</i> to be its length.\r\n</p>\r\n\r\n<p>\r\nAssume <code>B<sub>k</sub></code> to be an array obtained by rotating the array <code>A</code> <i>k</i> positions clock-wise, we define a \"rotation function\" <code>F</code> on <code>A</code> as follow:\r\n</p>\r\n\r\n<p>\r\n<code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>.</p>\r\n\r\n<p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>. \r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<i>n</i> is guaranteed to be less than 10<sup>5</sup>.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nA = [4, 3, 2, 6]\r\n\r\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\r\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\r\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\r\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\r\n\r\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\r\n</pre>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <em>n</em> \u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u3002</p>\n\n<p>\u5047\u8bbe&nbsp;<code>B<sub>k</sub></code>&nbsp;\u662f\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u987a\u65f6\u9488\u65cb\u8f6c <em>k</em> \u4e2a\u4f4d\u7f6e\u540e\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u5b9a\u4e49&nbsp;<code>A</code>&nbsp;\u7684&ldquo;\u65cb\u8f6c\u51fd\u6570&rdquo;&nbsp;<code>F</code>&nbsp;\u4e3a\uff1a</p>\n\n<p><code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>\u3002</p>\n\n<p>\u8ba1\u7b97<code>F(0), F(1), ..., F(n-1)</code>\u4e2d\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u53ef\u4ee5\u8ba4\u4e3a<em> n</em> \u7684\u503c\u5c0f\u4e8e 10<sup>5</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nA = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\n\u6240\u4ee5 F(0), F(1), F(2), F(3) \u4e2d\u7684\u6700\u5927\u503c\u662f F(3) = 26 \u3002\n</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxRotateFunction(vector<int>& A) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxRotateFunction(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxRotateFunction(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxRotateFunction(self, A: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxRotateFunction(int* A, int ASize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxRotateFunction(int[] A) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxRotateFunction = function(A) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} a\n# @return {Integer}\ndef max_rotate_function(a)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxRotateFunction(_ A: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxRotateFunction(A []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxRotateFunction(A: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxRotateFunction(A: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_rotate_function(a: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @return Integer\n     */\n    function maxRotateFunction($A) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxRotateFunction(A: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0397", "frontend_question_id": "0397", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/integer-replacement", "url_en": "https://leetcode.com/problems/integer-replacement", "relative_path_cn": "/leetcode/0300-0399/0397.Integer%20Replacement/README.md", "relative_path_en": "/leetcode/0300-0399/0397.Integer%20Replacement/README_EN.md", "title_cn": "\u6574\u6570\u66ff\u6362", "title_en": "Integer Replacement", "question_title_slug": "integer-replacement", "content_en": "<p>Given a positive integer <code>n</code>,&nbsp;you can apply one of the following&nbsp;operations:</p>\n\n<ol>\n\t<li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li>\n\t<li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li>\n</ol>\n\n<p>Return <em>the minimum number of operations needed for <code>n</code> to become <code>1</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u00a0<code>n</code> \uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u00a0<code>n</code><em>\u00a0</em>\u662f\u5076\u6570\uff0c\u5219\u7528\u00a0<code>n / 2</code>\u66ff\u6362\u00a0<code>n</code><em> </em>\u3002</li>\n\t<li>\u5982\u679c\u00a0<code>n</code><em>\u00a0</em>\u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528\u00a0<code>n + 1</code>\u6216<code>n - 1</code>\u66ff\u6362\u00a0<code>n</code> \u3002</li>\n</ol>\n\n<p><code>n</code><em>\u00a0</em>\u53d8\u4e3a <code>1</code> \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 8\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>8 -> 4 -> 2 -> 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 7\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>7 -> 8 -> 4 -> 2 -> 1\n\u6216 7 -> 6 -> 3 -> 2 -> 1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 4\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Math"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int integerReplacement(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int integerReplacement(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def integerReplacement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def integerReplacement(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint integerReplacement(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int IntegerReplacement(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar integerReplacement = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef integer_replacement(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func integerReplacement(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func integerReplacement(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def integerReplacement(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun integerReplacement(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn integer_replacement(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function integerReplacement($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function integerReplacement(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0398", "frontend_question_id": "0398", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/random-pick-index", "url_en": "https://leetcode.com/problems/random-pick-index", "relative_path_cn": "/leetcode/0300-0399/0398.Random%20Pick%20Index/README.md", "relative_path_en": "/leetcode/0300-0399/0398.Random%20Pick%20Index/README_EN.md", "title_cn": "\u968f\u673a\u6570\u7d22\u5f15", "title_en": "Random Pick Index", "question_title_slug": "random-pick-index", "content_en": "<p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe array size can be very large. Solution that uses too much extra space will not pass the judge.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nint[] nums = new int[] {1,2,3,3,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\r\nsolution.pick(3);\r\n\r\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\r\nsolution.pick(1);\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong><br />\n\u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nint[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002\nsolution.pick(3);\n\n// pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002\nsolution.pick(1);\n</pre>\n", "tags_en": ["Reservoir Sampling"], "tags_cn": ["\u84c4\u6c34\u6c60\u62bd\u6837"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(vector<int>& nums) {\n\n    }\n    \n    int pick(int target) {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * int param_1 = obj->pick(target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    public int pick(int target) {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.pick(target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def pick(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def pick(self, target: int) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n\nint solutionPick(Solution* obj, int target) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(nums, numsSize);\n * int param_1 = solutionPick(obj, target);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int[] nums) {\n\n    }\n    \n    public int Pick(int target) {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.Pick(target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n\n};\n\n/** \n * @param {number} target\n * @return {number}\n */\nSolution.prototype.pick = function(target) {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n\n    end\n\n\n=begin\n    :type target: Integer\n    :rtype: Integer\n=end\n    def pick(target)\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(nums)\n# param_1 = obj.pick(target)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func pick(_ target: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(nums)\n * let ret_1: Int = obj.pick(target)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(nums []int) Solution {\n\n}\n\n\nfunc (this *Solution) Pick(target int) int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.Pick(target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_nums: Array[Int]) {\n\n    def pick(target: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(nums: IntArray) {\n\n    fun pick(target: Int): Int {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(nums)\n * var param_1 = obj.pick(target)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(nums: Vec<i32>) -> Self {\n        \n    }\n    \n    fn pick(&self, target: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(nums);\n * let ret_1: i32 = obj.pick(target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     */\n    function __construct($nums) {\n        \n    }\n  \n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function pick($target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($nums);\n * $ret_1 = $obj->pick($target);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(nums: number[]) {\n\n    }\n\n    pick(target: number): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0399", "frontend_question_id": "0399", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/evaluate-division", "url_en": "https://leetcode.com/problems/evaluate-division", "relative_path_cn": "/leetcode/0300-0399/0399.Evaluate%20Division/README.md", "relative_path_en": "/leetcode/0300-0399/0399.Evaluate%20Division/README_EN.md", "title_cn": "\u9664\u6cd5\u6c42\u503c", "title_en": "Evaluate Division", "question_title_slug": "evaluate-division", "content_en": "<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p>\n\n<p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p>\n\n<p>Return <em>the answers to all queries</em>. If a single answer cannot be determined, return <code>-1.0</code>.</p>\n\n<p><strong>Note:</strong> The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]\n<strong>Output:</strong> [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>Explanation:</strong> \nGiven: <em>a / b = 2.0</em>, <em>b / c = 3.0</em>\nqueries are: <em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]]\n<strong>Output:</strong> [3.75000,0.40000,5.00000,0.20000]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]]\n<strong>Output:</strong> [0.50000,2.00000,-1.00000,-1.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 20</code></li>\n\t<li><code>equations[i].length == 2</code></li>\n\t<li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li>\n\t<li><code>values.length == equations.length</code></li>\n\t<li><code>0.0 &lt; values[i] &lt;= 20.0</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li>\n\t<li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u65b9\u7a0b\u5f0f&nbsp;<code>A / B = k</code>, \u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code> \u5747\u4e3a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u53d8\u91cf\uff0c&nbsp;<code>k</code> \u662f\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u5b57\u3002\u6839\u636e\u5df2\u77e5\u65b9\u7a0b\u5f0f\u6c42\u89e3\u95ee\u9898\uff0c\u5e76\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u3002\u5982\u679c\u7ed3\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de&nbsp;<code>-1.0</code>\u3002</p>\n\n<p>\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>[6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7ed9\u5b9a\uff1a<em>a / b = 2.0</em>, <em>b / c = 3.0</em>\n\u95ee\u9898\uff1a<em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>\n\u8fd4\u56de\uff1a[6.0, 0.5, -1.0, 1.0, -1.0 ]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>[3.75000,0.40000,5.00000,0.20000]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>[0.50000,2.00000,-1.00000,-1.00000]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 20</code></li>\n\t<li><code>equations[i].length == 2</code></li>\n\t<li><code>1 &lt;= equations[i][0].length, equations[i][1].length &lt;= 5</code></li>\n\t<li><code>values.length ==&nbsp;equations.length</code></li>\n\t<li><code>0.0 &lt;&nbsp;values[i] &lt;= 20.0</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= queries[i][0].length, queries[i][1].length &lt;= 5</code></li>\n\t<li><code>equations[i][0], equations[i][1],&nbsp;queries[i][0], queries[i][1]</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u4e0e\u6570\u5b57\u7ec4\u6210</li>\n</ul>\n", "tags_en": ["Union Find", "Graph"], "tags_cn": ["\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def calcEquation(self, equations, values, queries):\n        \"\"\"\n        :type equations: List[List[str]]\n        :type values: List[float]\n        :type queries: List[List[str]]\n        :rtype: List[float]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* calcEquation(char *** equations, int equationsSize, int* equationsColSize, double* values, int valuesSize, char *** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public double[] CalcEquation(IList<IList<string>> equations, double[] values, IList<IList<string>> queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */\nvar calcEquation = function(equations, values, queries) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[][]} equations\n# @param {Float[]} values\n# @param {String[][]} queries\n# @return {Float[]}\ndef calc_equation(equations, values, queries)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func calcEquation(_ equations: [[String]], _ values: [Double], _ queries: [[String]]) -> [Double] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func calcEquation(equations [][]string, values []float64, queries [][]string) []float64 {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def calcEquation(equations: List[List[String]], values: Array[Double], queries: List[List[String]]): Array[Double] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun calcEquation(equations: List<List<String>>, values: DoubleArray, queries: List<List<String>>): DoubleArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn calc_equation(equations: Vec<Vec<String>>, values: Vec<f64>, queries: Vec<Vec<String>>) -> Vec<f64> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $equations\n     * @param Float[] $values\n     * @param String[][] $queries\n     * @return Float[]\n     */\n    function calcEquation($equations, $values, $queries) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function calcEquation(equations: string[][], values: number[], queries: string[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}]}