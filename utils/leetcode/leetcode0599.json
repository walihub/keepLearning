{"leetcode": [{"question_id": "0500", "frontend_question_id": "0500", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/keyboard-row", "url_en": "https://leetcode.com/problems/keyboard-row", "relative_path_cn": "/leetcode/0500-0599/0500.Keyboard%20Row/README.md", "relative_path_en": "/leetcode/0500-0599/0500.Keyboard%20Row/README_EN.md", "title_cn": "\u952e\u76d8\u884c", "title_en": "Keyboard Row", "question_title_slug": "keyboard-row", "content_en": "<p>Given a List of words, return the words that can be typed using letters of <b>alphabet</b> on only one row&#39;s of American keyboard like the image below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\" /></p>\r\n&nbsp;\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<b>Output:</b> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You may use one character in the keyboard more than once.</li>\r\n\t<li>You may assume the input string will only contain letters of alphabet.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u53ea\u8fd4\u56de\u53ef\u4ee5\u4f7f\u7528\u5728\u952e\u76d8\u540c\u4e00\u884c\u7684\u5b57\u6bcd\u6253\u5370\u51fa\u6765\u7684\u5355\u8bcd\u3002\u952e\u76d8\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"American keyboard\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<strong>\u8f93\u51fa:</strong> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li>\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u952e\u76d8\u4e0a\u540c\u4e00\u5b57\u7b26\u3002</li>\r\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5c06\u53ea\u5305\u542b\u5b57\u6bcd\u3002</li>\r\n</ol>", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] findWords(String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findWords(char ** words, int wordsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] FindWords(string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} words\n# @return {String[]}\ndef find_words(words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findWords(_ words: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findWords(words []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findWords(words: Array[String]): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findWords(words: Array<String>): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_words(words: Vec<String>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return String[]\n     */\n    function findWords($words) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findWords(words: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0501", "frontend_question_id": "0501", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-mode-in-binary-search-tree", "url_en": "https://leetcode.com/problems/find-mode-in-binary-search-tree", "relative_path_cn": "/leetcode/0500-0599/0501.Find%20Mode%20in%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0501.Find%20Mode%20in%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570", "title_en": "Find Mode in Binary Search Tree", "question_title_slug": "find-mode-in-binary-search-tree", "content_en": "<p>Given a binary search tree (BST) with duplicates, find all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (the most frequently occurred element) in the given BST.</p>\r\n\r\n<p>Assume a BST is defined as follows:</p>\r\n\r\n<ul>\r\n\t<li>The left subtree of a node contains only nodes with keys <b>less than or equal to</b> the node&#39;s key.</li>\r\n\t<li>The right subtree of a node contains only nodes with keys <b>greater than or equal to</b> the node&#39;s key.</li>\r\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example:<br />\r\nGiven BST <code>[1,null,2,2]</code>,</p>\r\n\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>return <code>[2]</code>.</p>\r\n\r\n<p><b>Note:</b> If a tree has more than one mode, you can return them in any order.</p>\r\n\r\n<p><b>Follow up:</b> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u76f8\u540c\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff0c\u627e\u51fa BST \u4e2d\u7684\u6240\u6709\u4f17\u6570\uff08\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3002</p>\n\n<p>\u5047\u5b9a BST \u6709\u5982\u4e0b\u5b9a\u4e49\uff1a</p>\n\n<ul>\n\t<li>\u7ed3\u70b9\u5de6\u5b50\u6811\u4e2d\u6240\u542b\u7ed3\u70b9\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c</li>\n\t<li>\u7ed3\u70b9\u53f3\u5b50\u6811\u4e2d\u6240\u542b\u7ed3\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c</li>\n\t<li>\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811</li>\n</ul>\n\n<p>\u4f8b\u5982\uff1a<br>\n\u7ed9\u5b9a BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>\u8fd4\u56de[2]</code>.</p>\n\n<p><strong>\u63d0\u793a</strong>\uff1a\u5982\u679c\u4f17\u6570\u8d85\u8fc71\u4e2a\uff0c\u4e0d\u9700\u8003\u8651\u8f93\u51fa\u987a\u5e8f</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5417\uff1f\uff08\u5047\u8bbe\u7531\u9012\u5f52\u4ea7\u751f\u7684\u9690\u5f0f\u8c03\u7528\u6808\u7684\u5f00\u9500\u4e0d\u88ab\u8ba1\u7b97\u5728\u5185\uff09</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findMode(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] findMode(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def findMode(self, root: TreeNode) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMode(struct TreeNode* root, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int[] FindMode(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findMode = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer[]}\ndef find_mode(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func findMode(_ root: TreeNode?) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findMode(root: TreeNode): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findMode(root: TreeNode?): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_mode(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function findMode($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findMode(root: TreeNode | null): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0502", "frontend_question_id": "0502", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ipo", "url_en": "https://leetcode.com/problems/ipo", "relative_path_cn": "/leetcode/0500-0599/0502.IPO/README.md", "relative_path_en": "/leetcode/0500-0599/0502.IPO/README_EN.md", "title_cn": "IPO", "title_en": "IPO", "question_title_slug": "ipo", "content_en": "<p>\r\nSuppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most <b>k</b> distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most <b>k</b> distinct projects. \r\n</p>\r\n\r\n<p>\r\nYou are given several projects. For each project <b>i</b>, it has a pure profit <b>P<sub>i</sub></b> and a minimum capital of <b>C<sub>i</sub></b> is needed to start the corresponding project. Initially, you have <b>W</b> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\r\n</p>\r\n\r\n<p>\r\nTo sum up, pick a list of at most <b>k</b> distinct projects from given projects to maximize your final capital, and output your final maximized capital.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\r\n\r\n<b>Output:</b> 4\r\n\r\n<b>Explanation:</b> Since your initial capital is 0, you can only start the project indexed 0.\r\n             After finishing it you will obtain profit 1 and your capital becomes 1.\r\n             With capital 1, you can either start the project indexed 1 or the project indexed 2.\r\n             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\r\n             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume all numbers in the input are non-negative integers.</li>\r\n<li>The length of Profits array and Capital array will not exceed 50,000.</li>\r\n<li>The answer is guaranteed to fit in a 32-bit signed integer.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u5047\u8bbe \u529b\u6263\uff08LeetCode\uff09\u5373\u5c06\u5f00\u59cb\u5176 IPO\u3002\u4e3a\u4e86\u4ee5\u66f4\u9ad8\u7684\u4ef7\u683c\u5c06\u80a1\u7968\u5356\u7ed9\u98ce\u9669\u6295\u8d44\u516c\u53f8\uff0c\u529b\u6263 \u5e0c\u671b\u5728 IPO \u4e4b\u524d\u5f00\u5c55\u4e00\u4e9b\u9879\u76ee\u4ee5\u589e\u52a0\u5176\u8d44\u672c\u3002 \u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u5b83\u53ea\u80fd\u5728 IPO \u4e4b\u524d\u5b8c\u6210\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u7684\u9879\u76ee\u3002\u5e2e\u52a9 \u529b\u6263 \u8bbe\u8ba1\u5b8c\u6210\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u9879\u76ee\u540e\u5f97\u5230\u6700\u5927\u603b\u8d44\u672c\u7684\u65b9\u5f0f\u3002</p>\n\n<p>\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u9879\u76ee\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u9879\u76ee <strong>i</strong>\uff0c\u5b83\u90fd\u6709\u4e00\u4e2a\u7eaf\u5229\u6da6 <strong>P<sub>i</sub></strong>\uff0c\u5e76\u4e14\u9700\u8981\u6700\u5c0f\u7684\u8d44\u672c <strong>C<sub>i</sub></strong> \u6765\u542f\u52a8\u76f8\u5e94\u7684\u9879\u76ee\u3002\u6700\u521d\uff0c\u4f60\u6709 <strong>W</strong> \u8d44\u672c\u3002\u5f53\u4f60\u5b8c\u6210\u4e00\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u5c06\u83b7\u5f97\u7eaf\u5229\u6da6\uff0c\u4e14\u5229\u6da6\u5c06\u88ab\u6dfb\u52a0\u5230\u4f60\u7684\u603b\u8d44\u672c\u4e2d\u3002</p>\n\n<p>\u603b\u800c\u8a00\u4e4b\uff0c\u4ece\u7ed9\u5b9a\u9879\u76ee\u4e2d\u9009\u62e9\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u9879\u76ee\u7684\u5217\u8868\uff0c\u4ee5\u6700\u5927\u5316\u6700\u7ec8\u8d44\u672c\uff0c\u5e76\u8f93\u51fa\u6700\u7ec8\u53ef\u83b7\u5f97\u7684\u6700\u591a\u8d44\u672c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n\n<strong>\u8f93\u51fa:</strong> 4\n\n<strong>\u89e3\u91ca:\n</strong>\u7531\u4e8e\u4f60\u7684\u521d\u59cb\u8d44\u672c\u4e3a 0\uff0c\u4f60\u5c3d\u53ef\u4ee5\u4ece 0 \u53f7\u9879\u76ee\u5f00\u59cb\u3002\n\u5728\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u83b7\u5f97 1 \u7684\u5229\u6da6\uff0c\u4f60\u7684\u603b\u8d44\u672c\u5c06\u53d8\u4e3a 1\u3002\n\u6b64\u65f6\u4f60\u53ef\u4ee5\u9009\u62e9\u5f00\u59cb 1 \u53f7\u6216 2 \u53f7\u9879\u76ee\u3002\n\u7531\u4e8e\u4f60\u6700\u591a\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u9879\u76ee\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5b8c\u6210 2 \u53f7\u9879\u76ee\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u8d44\u672c\u3002\n\u56e0\u6b64\uff0c\u8f93\u51fa\u6700\u540e\u6700\u5927\u5316\u7684\u8d44\u672c\uff0c\u4e3a 0 + 1 + 3 = 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5047\u8bbe\u6240\u6709\u8f93\u5165\u6570\u5b57\u90fd\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u8868\u793a\u5229\u6da6\u548c\u8d44\u672c\u7684\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 50000\u3002</li>\n\t<li>\u7b54\u6848\u4fdd\u8bc1\u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Heap", "Greedy"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaximizedCapital(int k, int W, vector<int>& Profits, vector<int>& Capital) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaximizedCapital(self, k, W, Profits, Capital):\n        \"\"\"\n        :type k: int\n        :type W: int\n        :type Profits: List[int]\n        :type Capital: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaximizedCapital(self, k: int, W: int, Profits: List[int], Capital: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMaximizedCapital(int k, int W, int* Profits, int ProfitsSize, int* Capital, int CapitalSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number} W\n * @param {number[]} Profits\n * @param {number[]} Capital\n * @return {number}\n */\nvar findMaximizedCapital = function(k, W, Profits, Capital) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} w\n# @param {Integer[]} profits\n# @param {Integer[]} capital\n# @return {Integer}\ndef find_maximized_capital(k, w, profits, capital)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMaximizedCapital(_ k: Int, _ W: Int, _ Profits: [Int], _ Capital: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaximizedCapital(k int, W int, Profits []int, Capital []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaximizedCapital(k: Int, W: Int, Profits: Array[Int], Capital: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaximizedCapital(k: Int, W: Int, Profits: IntArray, Capital: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_maximized_capital(k: i32, w: i32, profits: Vec<i32>, capital: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $W\n     * @param Integer[] $Profits\n     * @param Integer[] $Capital\n     * @return Integer\n     */\n    function findMaximizedCapital($k, $W, $Profits, $Capital) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaximizedCapital(k: number, W: number, Profits: number[], Capital: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0503", "frontend_question_id": "0503", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/next-greater-element-ii", "url_en": "https://leetcode.com/problems/next-greater-element-ii", "relative_path_cn": "/leetcode/0500-0599/0503.Next%20Greater%20Element%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0503.Next%20Greater%20Element%20II/README_EN.md", "title_cn": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II", "title_en": "Next Greater Element II", "question_title_slug": "next-greater-element-ii", "content_en": "<p>\r\nGiven a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,1]\r\n<b>Output:</b> [2,-1,2]\r\n<b>Explanation:</b> The first 1's next greater number is 2; </br>The number 2 can't find next greater number; </br>The second 1's next greater number needs to search circularly, which is also 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of given array won't exceed 10000.\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u3002\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\u662f\u6309\u6570\u7ec4\u904d\u5386\u987a\u5e8f\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u66f4\u5927\u7684\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5faa\u73af\u5730\u641c\u7d22\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa -1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,1]\n<strong>\u8f93\u51fa:</strong> [2,-1,2]\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a 1 \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u662f 2\uff1b\n\u6570\u5b57 2 \u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\uff1b \n\u7b2c\u4e8c\u4e2a 1 \u7684\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u6570\u9700\u8981\u5faa\u73af\u641c\u7d22\uff0c\u7ed3\u679c\u4e5f\u662f 2\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10000\u3002</p>\n", "tags_en": ["Stack"], "tags_cn": ["\u6808"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> nextGreaterElements(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] nextGreaterElements(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextGreaterElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextGreaterElements(int* nums, int numsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] NextGreaterElements(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar nextGreaterElements = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef next_greater_elements(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextGreaterElements(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nextGreaterElements(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextGreaterElements(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextGreaterElements(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_greater_elements(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function nextGreaterElements($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextGreaterElements(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0504", "frontend_question_id": "0504", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/base-7", "url_en": "https://leetcode.com/problems/base-7", "relative_path_cn": "/leetcode/0500-0599/0504.Base%207/README.md", "relative_path_en": "/leetcode/0500-0599/0504.Base%207/README_EN.md", "title_cn": "\u4e03\u8fdb\u5236\u6570", "title_en": "Base 7", "question_title_slug": "base-7", "content_en": "<p>Given an integer, return its base 7 string representation.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 100\r\n<b>Output:</b> \"202\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> -7\r\n<b>Output:</b> \"-10\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe input will be in range of [-1e7, 1e7].\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a7\u8fdb\u5236\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8f93\u51fa\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 100\n<strong>\u8f93\u51fa:</strong> &quot;202&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> -7\n<strong>\u8f93\u51fa:</strong> &quot;-10&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u8303\u56f4\u662f&nbsp;[-1e7, 1e7] \u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string convertToBase7(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String convertToBase7(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * convertToBase7(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ConvertToBase7(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar convertToBase7 = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String}\ndef convert_to_base7(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func convertToBase7(_ num: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func convertToBase7(num int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def convertToBase7(num: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun convertToBase7(num: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn convert_to_base7(num: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function convertToBase7($num) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function convertToBase7(num: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0505", "frontend_question_id": "0505", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/the-maze-ii", "url_en": "https://leetcode.com/problems/the-maze-ii", "relative_path_cn": "/leetcode/0500-0599/0505.The%20Maze%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0505.The%20Maze%20II/README_EN.md", "title_cn": "\u8ff7\u5bab II", "title_en": "The Maze II", "question_title_slug": "the-maze-ii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0506", "frontend_question_id": "0506", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/relative-ranks", "url_en": "https://leetcode.com/problems/relative-ranks", "relative_path_cn": "/leetcode/0500-0599/0506.Relative%20Ranks/README.md", "relative_path_en": "/leetcode/0500-0599/0506.Relative%20Ranks/README_EN.md", "title_cn": "\u76f8\u5bf9\u540d\u6b21", "title_en": "Relative Ranks", "question_title_slug": "relative-ranks", "content_en": "<p>\r\nGiven scores of <b>N</b> athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [5, 4, 3, 2, 1]\r\n<b>Output:</b> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\r\n<b>Explanation:</b> The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\". <br/>For the left two athletes, you just need to output their relative ranks according to their scores.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>N is a positive integer and won't exceed 10,000.</li>\r\n<li>All the scores of athletes are guaranteed to be unique.</li>\r\n</ol>\r\n</p>\r\n", "content_cn": "<p>\u7ed9\u51fa&nbsp;<strong>N</strong> \u540d\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\uff0c\u627e\u51fa\u4ed6\u4eec\u7684\u76f8\u5bf9\u540d\u6b21\u5e76\u6388\u4e88\u524d\u4e09\u540d\u5bf9\u5e94\u7684\u5956\u724c\u3002\u524d\u4e09\u540d\u8fd0\u52a8\u5458\u5c06\u4f1a\u88ab\u5206\u522b\u6388\u4e88 &ldquo;\u91d1\u724c&rdquo;\uff0c&ldquo;\u94f6\u724c&rdquo; \u548c&ldquo; \u94dc\u724c&rdquo;\uff08&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;\uff09\u3002</p>\n\n<p>(\u6ce8\uff1a\u5206\u6570\u8d8a\u9ad8\u7684\u9009\u624b\uff0c\u6392\u540d\u8d8a\u9760\u524d\u3002)</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [5, 4, 3, 2, 1]\n<strong>\u8f93\u51fa:</strong> [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]\n<strong>\u89e3\u91ca:</strong> \u524d\u4e09\u540d\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\u4e3a\u524d\u4e09\u9ad8\u7684\uff0c\u56e0\u6b64\u5c06\u4f1a\u5206\u522b\u88ab\u6388\u4e88 &ldquo;\u91d1\u724c&rdquo;\uff0c&ldquo;\u94f6\u724c&rdquo;\u548c&ldquo;\u94dc\u724c&rdquo; (&quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;).\n\u4f59\u4e0b\u7684\u4e24\u540d\u8fd0\u52a8\u5458\uff0c\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u4ed6\u4eec\u7684\u6210\u7ee9\u8ba1\u7b97\u5c06\u5176\u76f8\u5bf9\u540d\u6b21\u5373\u53ef\u3002</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>N \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u5e76\u4e14\u4e0d\u4f1a\u8d85\u8fc7&nbsp;10000\u3002</li>\n\t<li>\u6240\u6709\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\u90fd\u4e0d\u76f8\u540c\u3002</li>\n</ol>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] findRelativeRanks(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRelativeRanks(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRelativeRanks(self, nums: List[int]) -> List[str]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRelativeRanks(int* nums, int numsSize, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] FindRelativeRanks(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar findRelativeRanks = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {String[]}\ndef find_relative_ranks(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRelativeRanks(_ nums: [Int]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRelativeRanks(nums []int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRelativeRanks(nums: Array[Int]): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRelativeRanks(nums: IntArray): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_relative_ranks(nums: Vec<i32>) -> Vec<String> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String[]\n     */\n    function findRelativeRanks($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRelativeRanks(nums: number[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0507", "frontend_question_id": "0507", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/perfect-number", "url_en": "https://leetcode.com/problems/perfect-number", "relative_path_cn": "/leetcode/0500-0599/0507.Perfect%20Number/README.md", "relative_path_en": "/leetcode/0500-0599/0507.Perfect%20Number/README_EN.md", "title_cn": "\u5b8c\u7f8e\u6570", "title_en": "Perfect Number", "question_title_slug": "perfect-number", "content_en": "<p>A <a href=\"https://en.wikipedia.org/wiki/Perfect_number\" target=\"_blank\"><strong>perfect number</strong></a> is a <strong>positive integer</strong> that is equal to the sum of its <strong>positive divisors</strong>, excluding the number itself. A <strong>divisor</strong> of an integer <code>x</code> is an integer that can divide <code>x</code> evenly.</p>\n\n<p>Given an integer <code>n</code>, return <code>true</code><em> if </em><code>n</code><em> is a perfect number, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 28\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 6\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 496\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 8128\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li>\n</ul>\n", "content_cn": "<p>\u5bf9\u4e8e\u4e00\u4e2a&nbsp;<strong>\u6b63\u6574\u6570</strong>\uff0c\u5982\u679c\u5b83\u548c\u9664\u4e86\u5b83\u81ea\u8eab\u4ee5\u5916\u7684\u6240\u6709 <strong>\u6b63\u56e0\u5b50</strong> \u4e4b\u548c\u76f8\u7b49\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a \u300c\u5b8c\u7f8e\u6570\u300d\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<strong>\u6574\u6570&nbsp;</strong><code>n</code>\uff0c&nbsp;\u5982\u679c\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>28\n<strong>\u8f93\u51fa\uff1a</strong>True\n<strong>\u89e3\u91ca\uff1a</strong>28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, \u548c 14 \u662f 28 \u7684\u6240\u6709\u6b63\u56e0\u5b50\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>num = 6\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>num = 496\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>num = 8128\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>num = 2\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li>\n</ul>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkPerfectNumber(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkPerfectNumber(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkPerfectNumber(self, num: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkPerfectNumber(int num){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckPerfectNumber(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef check_perfect_number(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkPerfectNumber(_ num: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkPerfectNumber(num int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkPerfectNumber(num: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkPerfectNumber(num: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_perfect_number(num: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function checkPerfectNumber($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkPerfectNumber(num: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0508", "frontend_question_id": "0508", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/most-frequent-subtree-sum", "url_en": "https://leetcode.com/problems/most-frequent-subtree-sum", "relative_path_cn": "/leetcode/0500-0599/0508.Most%20Frequent%20Subtree%20Sum/README.md", "relative_path_en": "/leetcode/0500-0599/0508.Most%20Frequent%20Subtree%20Sum/README_EN.md", "title_cn": "\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c", "title_en": "Most Frequent Subtree Sum", "question_title_slug": "most-frequent-subtree-sum", "content_en": "<p>\r\nGiven the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\r\n</p>\r\n\r\n<p><b>Examples 1</b><br>\r\nInput:\r\n<pre>\r\n  5\r\n /  \\\r\n2   -3\r\n</pre>\r\nreturn [2, -3, 4], since all the values happen only once, return all of them in any order.\r\n</p>\r\n\r\n<p><b>Examples 2</b><br>\r\nInput:\r\n<pre>\r\n  5\r\n /  \\\r\n2   -5\r\n</pre>\r\nreturn [2], since 2 happens twice, however -5 only occur once.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume the sum of values in any subtree is in the range of 32-bit signed integer.\r\n</p>", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u8bf7\u4f60\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u4e00\u4e2a\u7ed3\u70b9\u7684\u300c\u5b50\u6811\u5143\u7d20\u548c\u300d\u5b9a\u4e49\u4e3a\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5143\u7d20\u4e4b\u548c\uff08\u5305\u62ec\u7ed3\u70b9\u672c\u8eab\uff09\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u5982\u679c\u6709\u591a\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u540c\uff0c\u8fd4\u56de\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\uff08\u4e0d\u9650\u987a\u5e8f\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong><br>\n\u8f93\u5165:</p>\n\n<pre>  5\n /  \\\n2   -3\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2, -3, 4]\uff0c\u6240\u6709\u7684\u503c\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong><br>\n\u8f93\u5165\uff1a</p>\n\n<pre>  5\n /  \\\n2   -5\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2]\uff0c\u53ea\u6709 2 \u51fa\u73b0\u4e24\u6b21\uff0c-5 \u53ea\u51fa\u73b0 1 \u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>&nbsp;\u5047\u8bbe\u4efb\u610f\u5b50\u6811\u5143\u7d20\u548c\u5747\u53ef\u4ee5\u7528 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8868\u793a\u3002</p>\n", "tags_en": ["Tree", "Hash Table"], "tags_cn": ["\u6811", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findFrequentTreeSum(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] findFrequentTreeSum(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findFrequentTreeSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findFrequentTreeSum(struct TreeNode* root, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int[] FindFrequentTreeSum(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findFrequentTreeSum = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer[]}\ndef find_frequent_tree_sum(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func findFrequentTreeSum(_ root: TreeNode?) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findFrequentTreeSum(root *TreeNode) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findFrequentTreeSum(root: TreeNode): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findFrequentTreeSum(root: TreeNode?): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_frequent_tree_sum(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function findFrequentTreeSum($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findFrequentTreeSum(root: TreeNode | null): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "1013", "frontend_question_id": "0509", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/fibonacci-number", "url_en": "https://leetcode.com/problems/fibonacci-number", "relative_path_cn": "/leetcode/0500-0599/0509.Fibonacci%20Number/README.md", "relative_path_en": "/leetcode/0500-0599/0509.Fibonacci%20Number/README_EN.md", "title_cn": "\u6590\u6ce2\u90a3\u5951\u6570", "title_en": "Fibonacci Number", "question_title_slug": "fibonacci-number", "content_en": "<p>The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a sequence, called the <b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n\n<pre>\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</pre>\n\n<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 30</code></li>\n</ul>\n", "content_cn": "<p><strong>\u6590\u6ce2\u90a3\u5951\u6570</strong>\uff0c\u901a\u5e38\u7528&nbsp;<code>F(n)</code> \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a<strong>\u6590\u6ce2\u90a3\u5951\u6570\u5217</strong>\u3002\u8be5\u6570\u5217\u7531&nbsp;<code>0</code> \u548c <code>1</code> \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a</p>\n\n<pre>F(0) = 0,&nbsp; &nbsp;F(1)&nbsp;= 1\nF(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N &gt; 1.\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;<code>N</code>\uff0c\u8ba1\u7b97&nbsp;<code>F(N)</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>0 &le; <code>N</code> &le; 30</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int fib(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int fib(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fib(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint fib(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Fib(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar fib = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef fib(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fib(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fib(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fib(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fib(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fib(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function fib($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fib(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0509", "frontend_question_id": "0510", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/inorder-successor-in-bst-ii", "url_en": "https://leetcode.com/problems/inorder-successor-in-bst-ii", "relative_path_cn": "/leetcode/0500-0599/0510.Inorder%20Successor%20in%20BST%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0510.Inorder%20Successor%20in%20BST%20II/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e2d\u5e8f\u540e\u7ee7 II", "title_en": "Inorder Successor in BST II", "question_title_slug": "inorder-successor-in-bst-ii", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "1179", "frontend_question_id": "0511", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/game-play-analysis-i", "url_en": "https://leetcode.com/problems/game-play-analysis-i", "relative_path_cn": "/leetcode/0500-0599/0511.Game%20Play%20Analysis%20I/README.md", "relative_path_en": "/leetcode/0500-0599/0511.Game%20Play%20Analysis%20I/README_EN.md", "title_cn": "\u6e38\u620f\u73a9\u6cd5\u5206\u6790 I", "title_en": "Game Play Analysis I", "question_title_slug": "game-play-analysis-i", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "1180", "frontend_question_id": "0512", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/game-play-analysis-ii", "url_en": "https://leetcode.com/problems/game-play-analysis-ii", "relative_path_cn": "/leetcode/0500-0599/0512.Game%20Play%20Analysis%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0512.Game%20Play%20Analysis%20II/README_EN.md", "title_cn": "\u6e38\u620f\u73a9\u6cd5\u5206\u6790 II", "title_en": "Game Play Analysis II", "question_title_slug": "game-play-analysis-ii", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0513", "frontend_question_id": "0513", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-bottom-left-tree-value", "url_en": "https://leetcode.com/problems/find-bottom-left-tree-value", "relative_path_cn": "/leetcode/0500-0599/0513.Find%20Bottom%20Left%20Tree%20Value/README.md", "relative_path_en": "/leetcode/0500-0599/0513.Find%20Bottom%20Left%20Tree%20Value/README_EN.md", "title_cn": "\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c", "title_en": "Find Bottom Left Tree Value", "question_title_slug": "find-bottom-left-tree-value", "content_en": "<p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg\" style=\"width: 432px; height: 421px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,null,5,6,null,null,7]\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n\n    2\n   / \\\n  1   3\n\n<strong>\u8f93\u51fa:</strong>\n1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2: </strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n<strong>\u8f93\u51fa:</strong>\n7\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong> \u60a8\u53ef\u4ee5\u5047\u8bbe\u6811\uff08\u5373\u7ed9\u5b9a\u7684\u6839\u8282\u70b9\uff09\u4e0d\u4e3a <strong>NULL</strong>\u3002</p>\n", "tags_en": ["Tree", "Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint findBottomLeftValue(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int FindBottomLeftValue(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef find_bottom_left_value(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findBottomLeftValue(_ root: TreeNode?) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findBottomLeftValue(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findBottomLeftValue(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findBottomLeftValue(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_bottom_left_value(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function findBottomLeftValue($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findBottomLeftValue(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0514", "frontend_question_id": "0514", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/freedom-trail", "url_en": "https://leetcode.com/problems/freedom-trail", "relative_path_cn": "/leetcode/0500-0599/0514.Freedom%20Trail/README.md", "relative_path_en": "/leetcode/0500-0599/0514.Freedom%20Trail/README_EN.md", "title_cn": "\u81ea\u7531\u4e4b\u8def", "title_en": "Freedom Trail", "question_title_slug": "freedom-trail", "content_en": "<p>In the video game Fallout 4, the quest &quot;Road to Freedom&quot; requires players to reach a metal dial called the &quot;Freedom Trail Ring&quot;, and use the dial to spell a specific keyword in order to open the door.</p>\r\n\r\n<p>Given a string <b>ring</b>, which represents the code engraved on the outer ring and another string <b>key</b>, which represents the keyword needs to be spelled. You need to find the <b>minimum</b> number of steps in order to spell all the characters in the keyword.</p>\r\n\r\n<p>Initially, the first character of the <b>ring</b> is aligned at 12:00 direction. You need to spell all the characters in the string <b>key</b> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <b>key</b> aligned at 12:00 direction and then by pressing the center button.</p>\r\n\r\n<p>At the stage of rotating the ring to spell the key character <b>key[i]</b>:</p>\r\n\r\n<ol>\r\n\t<li>You can rotate the <b>ring</b> clockwise or anticlockwise <b>one place</b>, which counts as 1 step. The final purpose of the rotation is to align one of the string <b>ring&#39;s</b> characters at the 12:00 direction, where this character must equal to the character <b>key[i]</b>.</li>\r\n\t<li>If the character <b>key[i]</b> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you&#39;ve finished all the spelling.</li>\r\n</ol>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<center><img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\" /></center>\r\n&nbsp;\r\n\r\n<pre>\r\n<b>Input:</b> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<b>Output:</b> 4\r\n<b>Explanation:</b>\r\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \r\nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\r\nAlso, we need 1 more step for spelling.\r\nSo the final output is 4.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Length of both ring and <b>key</b> will be in range 1 to 100.</li>\r\n\t<li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li>\r\n\t<li>It&#39;s guaranteed that string <b>key</b> could always be spelled by rotating the string <b>ring</b>.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7535\u5b50\u6e38\u620f\u201c\u8f90\u5c044\u201d\u4e2d\uff0c\u4efb\u52a1\u201c\u901a\u5411\u81ea\u7531\u201d\u8981\u6c42\u73a9\u5bb6\u5230\u8fbe\u540d\u4e3a\u201cFreedom Trail Ring\u201d\u7684\u91d1\u5c5e\u8868\u76d8\uff0c\u5e76\u4f7f\u7528\u8868\u76d8\u62fc\u5199\u7279\u5b9a\u5173\u952e\u8bcd\u624d\u80fd\u5f00\u95e8\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<strong>ring</strong>\uff0c\u8868\u793a\u523b\u5728\u5916\u73af\u4e0a\u7684\u7f16\u7801\uff1b\u7ed9\u5b9a\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<strong>key</strong>\uff0c\u8868\u793a\u9700\u8981\u62fc\u5199\u7684\u5173\u952e\u8bcd\u3002\u60a8\u9700\u8981\u7b97\u51fa\u80fd\u591f\u62fc\u5199\u5173\u952e\u8bcd\u4e2d\u6240\u6709\u5b57\u7b26\u7684<strong>\u6700\u5c11</strong>\u6b65\u6570\u3002</p>\n\n<p>\u6700\u521d\uff0c<strong>ring\u00a0</strong>\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0e12:00\u65b9\u5411\u5bf9\u9f50\u3002\u60a8\u9700\u8981\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u65cb\u8f6c ring \u4ee5\u4f7f\u00a0<strong>key\u00a0</strong>\u7684\u4e00\u4e2a\u5b57\u7b26\u5728 12:00 \u65b9\u5411\u5bf9\u9f50\uff0c\u7136\u540e\u6309\u4e0b\u4e2d\u5fc3\u6309\u94ae\uff0c\u4ee5\u6b64\u9010\u4e2a\u62fc\u5199\u5b8c\u00a0<strong>key\u00a0</strong>\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u3002</p>\n\n<p>\u65cb\u8f6c\u00a0<strong>ring\u00a0</strong>\u62fc\u51fa key \u5b57\u7b26\u00a0<strong>key[i]\u00a0</strong>\u7684\u9636\u6bb5\u4e2d\uff1a</p>\n\n<ol>\n\t<li>\u60a8\u53ef\u4ee5\u5c06\u00a0<strong>ring\u00a0</strong>\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u65cb\u8f6c<strong>\u4e00\u4e2a\u4f4d\u7f6e</strong>\uff0c\u8ba1\u4e3a1\u6b65\u3002\u65cb\u8f6c\u7684\u6700\u7ec8\u76ee\u7684\u662f\u5c06\u5b57\u7b26\u4e32\u00a0<strong>ring\u00a0</strong>\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0e 12:00 \u65b9\u5411\u5bf9\u9f50\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u5fc5\u987b\u7b49\u4e8e\u5b57\u7b26\u00a0<strong>key[i] \u3002</strong></li>\n\t<li>\u5982\u679c\u5b57\u7b26\u00a0<strong>key[i]\u00a0</strong>\u5df2\u7ecf\u5bf9\u9f50\u523012:00\u65b9\u5411\uff0c\u60a8\u9700\u8981\u6309\u4e0b\u4e2d\u5fc3\u6309\u94ae\u8fdb\u884c\u62fc\u5199\uff0c\u8fd9\u4e5f\u5c06\u7b97\u4f5c\u00a0<strong>1 \u6b65</strong>\u3002\u6309\u5b8c\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5f00\u59cb\u62fc\u5199\u00a0<strong>key\u00a0</strong>\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff08\u4e0b\u4e00\u9636\u6bb5\uff09, \u76f4\u81f3\u5b8c\u6210\u6240\u6709\u62fc\u5199\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u00a0</p>\n\n<center><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\" /></center>\n\u00a0\n\n<pre>\n<strong>\u8f93\u5165:</strong> ring = \"godding\", key = \"gd\"\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n \u5bf9\u4e8e key \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 'g'\uff0c\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4f4d\u7f6e, \u6211\u4eec\u53ea\u9700\u89811\u6b65\u6765\u62fc\u5199\u8fd9\u4e2a\u5b57\u7b26\u3002 \n \u5bf9\u4e8e key \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26 'd'\uff0c\u6211\u4eec\u9700\u8981\u9006\u65f6\u9488\u65cb\u8f6c ring \"godding\" 2\u6b65\u4f7f\u5b83\u53d8\u6210 \"ddinggo\"\u3002\n \u5f53\u7136, \u6211\u4eec\u8fd8\u9700\u89811\u6b65\u8fdb\u884c\u62fc\u5199\u3002\n \u56e0\u6b64\u6700\u7ec8\u7684\u8f93\u51fa\u662f 4\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><strong>ring</strong> \u548c\u00a0<strong>key</strong>\u00a0\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u53d6\u503c\u8303\u56f4\u5747\u4e3a\u00a01 \u81f3\u00a0100\uff1b</li>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u90fd\u53ea\u6709\u5c0f\u5199\u5b57\u7b26\uff0c\u5e76\u4e14\u5747\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u5b57\u7b26\uff1b</li>\n\t<li>\u5b57\u7b26\u4e32\u00a0<strong>key</strong>\u00a0\u4e00\u5b9a\u53ef\u4ee5\u7531\u5b57\u7b26\u4e32 <strong>ring</strong>\u00a0\u65cb\u8f6c\u62fc\u51fa\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Divide and Conquer", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5206\u6cbb\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findRotateSteps(string ring, string key) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findRotateSteps(String ring, String key) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRotateSteps(self, ring, key):\n        \"\"\"\n        :type ring: str\n        :type key: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findRotateSteps(char * ring, char * key){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindRotateSteps(string ring, string key) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} ring\n * @param {string} key\n * @return {number}\n */\nvar findRotateSteps = function(ring, key) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} ring\n# @param {String} key\n# @return {Integer}\ndef find_rotate_steps(ring, key)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRotateSteps(_ ring: String, _ key: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRotateSteps(ring string, key string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRotateSteps(ring: String, key: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRotateSteps(ring: String, key: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_rotate_steps(ring: String, key: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $ring\n     * @param String $key\n     * @return Integer\n     */\n    function findRotateSteps($ring, $key) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRotateSteps(ring: string, key: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0515", "frontend_question_id": "0515", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row", "url_en": "https://leetcode.com/problems/find-largest-value-in-each-tree-row", "relative_path_cn": "/leetcode/0500-0599/0515.Find%20Largest%20Value%20in%20Each%20Tree%20Row/README.md", "relative_path_en": "/leetcode/0500-0599/0515.Find%20Largest%20Value%20in%20Each%20Tree%20Row/README_EN.md", "title_cn": "\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c", "title_en": "Find Largest Value in Each Tree Row", "question_title_slug": "find-largest-value-in-each-tree-row", "content_en": "<p>Given the <code>root</code> of a binary tree, return <em>an array of the largest value in each row</em> of the tree <strong>(0-indexed)</strong>.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg\" style=\"width: 450px; height: 258px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,3,null,9]\n<strong>Output:</strong> [1,3,9]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n<strong>\u8f93\u51fa:</strong> [1, 3, 9]\n</pre>\n", "tags_en": ["Tree", "Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> largestValues(TreeNode* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> largestValues(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def largestValues(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: TreeNode) -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* largestValues(struct TreeNode* root, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> LargestValues(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar largestValues = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef largest_values(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func largestValues(_ root: TreeNode?) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc largestValues(root *TreeNode) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def largestValues(root: TreeNode): List[Int] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun largestValues(root: TreeNode?): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn largest_values(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function largestValues($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction largestValues(root: TreeNode | null): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0516", "frontend_question_id": "0516", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-palindromic-subsequence", "url_en": "https://leetcode.com/problems/longest-palindromic-subsequence", "relative_path_cn": "/leetcode/0500-0599/0516.Longest%20Palindromic%20Subsequence/README.md", "relative_path_en": "/leetcode/0500-0599/0516.Longest%20Palindromic%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217", "title_en": "Longest Palindromic Subsequence", "question_title_slug": "longest-palindromic-subsequence", "content_en": "<p>Given a string s, find the longest palindromic subsequence&#39;s length in s. You may assume that the maximum length of s is 1000.</p>\n\n<p><b>Example 1:</b><br />\nInput:</p>\n\n<pre>\n&quot;bbbab&quot;\n</pre>\nOutput:\n\n<pre>\n4\n</pre>\nOne possible longest palindromic subsequence is &quot;bbbb&quot;.\n\n<p>&nbsp;</p>\n\n<p><b>Example 2:</b><br />\nInput:</p>\n\n<pre>\n&quot;cbbd&quot;\n</pre>\nOutput:\n\n<pre>\n2\n</pre>\nOne possible longest palindromic subsequence is &quot;bb&quot;.\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u5047\u8bbe <code>s</code> \u7684\u6700\u5927\u957f\u5ea6\u4e3a <code>1000</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong><br>\n\u8f93\u5165:</p>\n\n<pre>&quot;bbbab&quot;\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>4\n</pre>\n\n<p>\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a &quot;bbbb&quot;\u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong><br>\n\u8f93\u5165:</p>\n\n<pre>&quot;cbbd&quot;\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>2\n</pre>\n\n<p>\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a &quot;bb&quot;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd</li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int longestPalindromeSubseq(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint longestPalindromeSubseq(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LongestPalindromeSubseq(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_palindrome_subseq(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func longestPalindromeSubseq(_ s: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func longestPalindromeSubseq(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def longestPalindromeSubseq(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindromeSubseq(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome_subseq(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestPalindromeSubseq($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function longestPalindromeSubseq(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0517", "frontend_question_id": "0517", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/super-washing-machines", "url_en": "https://leetcode.com/problems/super-washing-machines", "relative_path_cn": "/leetcode/0500-0599/0517.Super%20Washing%20Machines/README.md", "relative_path_en": "/leetcode/0500-0599/0517.Super%20Washing%20Machines/README_EN.md", "title_cn": "\u8d85\u7ea7\u6d17\u8863\u673a", "title_en": "Super Washing Machines", "question_title_slug": "super-washing-machines", "content_en": "<p>You have <b>n</b> super washing machines on a line. Initially, each washing machine has some dresses or is empty. \r\n</p>\r\n\r\n<p>For each <b>move</b>, you could choose <b>any m</b> (1 &le; m &le; n) washing machines, and pass <b>one dress</b> of each washing machine to one of its adjacent washing machines <b> at the same time </b>.  </p>\r\n\r\n<p>Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the <b>minimum number of moves</b> to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.</p>\r\n\r\n<p><b>Example1</b>\r\n<pre>\r\n<b>Input:</b> [1,0,5]\r\n\r\n<b>Output:</b> 3\r\n\r\n<b>Explanation:</b> \r\n1st move:    1     0 <-- 5    =>    1     1     4\r\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3    \r\n3rd move:    2     1 <-- 3    =>    2     2     2   \r\n</pre>\r\n\r\n<p><b>Example2</b>\r\n<pre>\r\n<b>Input:</b> [0,3,0]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> \r\n1st move:    0 <-- 3     0    =>    1     2     0    \r\n2nd move:    1     2 --> 0    =>    1     1     1     \r\n</pre>\r\n\r\n<p><b>Example3</b>\r\n<pre>\r\n<b>Input:</b> [0,2,0]\r\n\r\n<b>Output:</b> -1\r\n\r\n<b>Explanation:</b> \r\nIt's impossible to make all the three washing machines have the same number of dresses. \r\n</pre>\r\n\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of n is [1, 10000].</li>\r\n<li>The range of dresses number in a super washing machine is [0, 1e5].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u5047\u8bbe\u6709 <strong>n&nbsp;</strong>\u53f0\u8d85\u7ea7\u6d17\u8863\u673a\u653e\u5728\u540c\u4e00\u6392\u4e0a\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6bcf\u53f0\u6d17\u8863\u673a\u5185\u53ef\u80fd\u6709\u4e00\u5b9a\u91cf\u7684\u8863\u670d\uff0c\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002</p>\n\n<p>\u5728<strong>\u6bcf\u4e00\u6b65\u64cd\u4f5c</strong>\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9<strong>\u4efb\u610f m&nbsp;</strong>\uff081 &le; m &le; n\uff09&nbsp;\u53f0\u6d17\u8863\u673a\uff0c\u4e0e\u6b64<strong>\u540c\u65f6</strong>\u5c06\u6bcf\u53f0\u6d17\u8863\u673a\u7684<strong>\u4e00\u4ef6\u8863\u670d</strong>\u9001\u5230\u76f8\u90bb\u7684\u4e00\u53f0\u6d17\u8863\u673a\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u4ee3\u8868\u4ece\u5de6\u81f3\u53f3\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u7684\u8863\u7269\u6570\u91cf\uff0c\u8bf7\u7ed9\u51fa\u80fd\u8ba9\u6240\u6709\u6d17\u8863\u673a\u4e2d\u5269\u4e0b\u7684\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\u7684<strong>\u6700\u5c11\u7684\u64cd\u4f5c\u6b65\u6570</strong>\u3002\u5982\u679c\u4e0d\u80fd\u4f7f\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,0,5]\n\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u6b65:    1     0 &lt;-- 5    =&gt;    1     1     4\n\u7b2c\u4e8c\u6b65:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3    \n\u7b2c\u4e09\u6b65:    2     1 &lt;-- 3    =&gt;    2     2     2   \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,3,0]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u6b65:    0 &lt;-- 3     0    =&gt;    1     2     0    \n\u7b2c\u4e8c\u6b65:    1     2 --&gt; 0    =&gt;    1     1     1     \n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,2,0]\n\n<strong>\u8f93\u51fa:</strong> -1\n\n<strong>\u89e3\u91ca:</strong> \n\u4e0d\u53ef\u80fd\u8ba9\u6240\u6709\u4e09\u4e2a\u6d17\u8863\u673a\u540c\u65f6\u5269\u4e0b\u76f8\u540c\u6570\u91cf\u7684\u8863\u7269\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>n \u7684\u8303\u56f4\u662f [1, 10000]\u3002</li>\n\t<li>\u5728\u6bcf\u53f0\u8d85\u7ea7\u6d17\u8863\u673a\u4e2d\uff0c\u8863\u7269\u6570\u91cf\u7684\u8303\u56f4\u662f [0, 1e5]\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMinMoves(vector<int>& machines) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMinMoves(int[] machines) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMinMoves(int* machines, int machinesSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMinMoves(int[] machines) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} machines\n * @return {number}\n */\nvar findMinMoves = function(machines) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} machines\n# @return {Integer}\ndef find_min_moves(machines)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMinMoves(_ machines: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMinMoves(machines []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMinMoves(machines: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMinMoves(machines: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_min_moves(machines: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $machines\n     * @return Integer\n     */\n    function findMinMoves($machines) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMinMoves(machines: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0518", "frontend_question_id": "0518", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/coin-change-2", "url_en": "https://leetcode.com/problems/coin-change-2", "relative_path_cn": "/leetcode/0500-0599/0518.Coin%20Change%202/README.md", "relative_path_en": "/leetcode/0500-0599/0518.Coin%20Change%202/README_EN.md", "title_cn": "\u96f6\u94b1\u5151\u6362 II", "title_en": "Coin Change 2", "question_title_slug": "coin-change-2", "content_en": "<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 5, coins = [1, 2, 5]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> there are four ways to make up the amount:\r\n5=5\r\n5=2+2+1\r\n5=2+1+1+1\r\n5=1+1+1+1+1\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 3, coins = [2]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> the amount of 3 cannot be made up just with coins of 2.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 10, coins = [10] \r\n<b>Output:</b> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>You can assume that</p>\r\n\r\n<ul>\r\n\t<li>0 &lt;= amount &lt;= 5000</li>\r\n\t<li>1 &lt;= coin &lt;= 5000</li>\r\n\t<li>the number of coins is less than 500</li>\r\n\t<li>the answer is guaranteed to fit into signed 32-bit integer</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\u548c\u4e00\u4e2a\u603b\u91d1\u989d\u3002\u5199\u51fa\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u3002\u5047\u8bbe\u6bcf\u4e00\u79cd\u9762\u989d\u7684\u786c\u5e01\u6709\u65e0\u9650\u4e2a\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 5, coins = [1, 2, 5]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6709\u56db\u79cd\u65b9\u5f0f\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 3, coins = [2]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u53ea\u7528\u9762\u989d2\u7684\u786c\u5e01\u4e0d\u80fd\u51d1\u6210\u603b\u91d1\u989d3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 10, coins = [10] \n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f</strong><strong>:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\uff1a</p>\n\n<ul>\n\t<li>0 &lt;= amount (\u603b\u91d1\u989d) &lt;= 5000</li>\n\t<li>1 &lt;= coin (\u786c\u5e01\u9762\u989d)&nbsp;&lt;= 5000</li>\n\t<li>\u786c\u5e01\u79cd\u7c7b\u4e0d\u8d85\u8fc7 500 \u79cd</li>\n\t<li>\u7ed3\u679c\u7b26\u5408 32 \u4f4d\u7b26\u53f7\u6574\u6570</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int change(int amount, int[] coins) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def change(self, amount, coins):\n        \"\"\"\n        :type amount: int\n        :type coins: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint change(int amount, int* coins, int coinsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Change(int amount, int[] coins) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function(amount, coins) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} amount\n# @param {Integer[]} coins\n# @return {Integer}\ndef change(amount, coins)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func change(_ amount: Int, _ coins: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func change(amount int, coins []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def change(amount: Int, coins: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun change(amount: Int, coins: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn change(amount: i32, coins: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $amount\n     * @param Integer[] $coins\n     * @return Integer\n     */\n    function change($amount, $coins) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function change(amount: number, coins: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0913", "frontend_question_id": "0519", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/random-flip-matrix", "url_en": "https://leetcode.com/problems/random-flip-matrix", "relative_path_cn": "/leetcode/0500-0599/0519.Random%20Flip%20Matrix/README.md", "relative_path_en": "/leetcode/0500-0599/0519.Random%20Flip%20Matrix/README_EN.md", "title_cn": "\u968f\u673a\u7ffb\u8f6c\u77e9\u9635", "title_en": "Random Flip Matrix", "question_title_slug": "random-flip-matrix", "content_en": "<p>You are given the number of rows <code>n_rows</code>&nbsp;and number of columns <code>n_cols</code>&nbsp;of a&nbsp;2D&nbsp;binary matrix&nbsp;where all values are initially 0.&nbsp;Write a function <code>flip</code>&nbsp;which chooses&nbsp;a 0 value&nbsp;<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\" target=\"_blank\">uniformly at random</a>,&nbsp;changes it to 1,&nbsp;and then returns the position <code>[row.id, col.id]</code> of that value. Also, write a function <code>reset</code> which sets all values back to 0.&nbsp;<strong>Try to minimize the number of calls to system&#39;s Math.random()</strong> and optimize the time and&nbsp;space complexity.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= n_rows, n_cols&nbsp;&lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= row.id &lt; n_rows</code> and <code>0 &lt;= col.id &lt; n_cols</code></li>\r\n\t<li><code>flip</code>&nbsp;will not be called when the matrix has no&nbsp;0 values left.</li>\r\n\t<li>the total number of calls to&nbsp;<code>flip</code>&nbsp;and <code>reset</code>&nbsp;will not exceed&nbsp;1000.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-1-2\">[[2,3],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,[0,1],[1,2],[1,0],[1,1]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-2-2\">[[1,2],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,[0,0],[0,1],null,[0,0]]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments. <code>Solution</code>&#39;s constructor&nbsp;has two arguments, <code>n_rows</code> and <code>n_cols</code>.&nbsp;<code>flip</code>&nbsp;and <code>reset</code> have&nbsp;no&nbsp;arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n", "content_cn": "<p>\u9898\u4e2d\u7ed9\u51fa\u4e00\u4e2a <code>n_rows</code> \u884c <code>n_cols</code> \u5217\u7684\u4e8c\u7ef4\u77e9\u9635\uff0c\u4e14\u6240\u6709\u503c\u88ab\u521d\u59cb\u5316\u4e3a 0\u3002\u8981\u6c42\u7f16\u5199\u4e00\u4e2a <code>flip</code> \u51fd\u6570\uff0c<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\">\u5747\u5300\u968f\u673a</a>\u7684\u5c06\u77e9\u9635\u4e2d\u7684 0 \u53d8\u4e3a 1\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u4f4d\u7f6e\u4e0b\u6807 <code>[row_id,col_id]</code>\uff1b\u540c\u6837\u7f16\u5199\u4e00\u4e2a <code>reset</code> \u51fd\u6570\uff0c\u5c06\u6240\u6709\u7684\u503c\u90fd\u91cd\u65b0\u7f6e\u4e3a 0\u3002<strong>\u5c3d\u91cf\u6700\u5c11\u8c03\u7528\u968f\u673a\u51fd\u6570 Math.random()</strong>\uff0c\u5e76\u4e14\u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>1 &lt;= n_rows, n_cols &lt;= 10000</li>\n\t<li>0 &lt;= row.id &lt; n_rows \u5e76\u4e14 0 &lt;= col.id &lt; n_cols</li>\n\t<li>\u5f53\u77e9\u9635\u4e2d\u6ca1\u6709\u503c\u4e3a 0 \u65f6\uff0c\u4e0d\u53ef\u4ee5\u8c03\u7528 flip \u51fd\u6570</li>\n\t<li>\u8c03\u7528 flip \u548c reset \u51fd\u6570\u7684\u6b21\u6570\u52a0\u8d77\u6765\u4e0d\u4f1a\u8d85\u8fc7 1000 \u6b21</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\n[[2,3],[],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\n[[1,2],[],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[0,0],[0,1],null,[0,0]]</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u89e3\u91ca\uff1a</strong></p>\n\n<p>\u8f93\u5165\u5305\u542b\u4e24\u4e2a\u5217\u8868\uff1a\u88ab\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f\u548c\u4ed6\u4eec\u7684\u53c2\u6570\u3002<code>Solution</code> \u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a <code>n_rows</code> \u548c <code>n_cols</code>\u3002<code>flip</code>&nbsp;\u548c <code>reset</code> \u6ca1\u6709\u53c2\u6570\uff0c\u53c2\u6570\u603b\u4f1a\u4ee5\u5217\u8868\u5f62\u5f0f\u7ed9\u51fa\uff0c\u54ea\u6015\u8be5\u5217\u8868\u4e3a\u7a7a</p>\n", "tags_en": ["Random"], "tags_cn": [null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(int n_rows, int n_cols) {\n\n    }\n    \n    vector<int> flip() {\n\n    }\n    \n    void reset() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(n_rows, n_cols);\n * vector<int> param_1 = obj->flip();\n * obj->reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int n_rows, int n_cols) {\n\n    }\n    \n    public int[] flip() {\n\n    }\n    \n    public void reset() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n_rows, n_cols);\n * int[] param_1 = obj.flip();\n * obj.reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, n_rows, n_cols):\n        \"\"\"\n        :type n_rows: int\n        :type n_cols: int\n        \"\"\"\n        \n\n    def flip(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def reset(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, n_rows: int, n_cols: int):\n        \n\n    def flip(self) -> List[int]:\n        \n\n    def reset(self) -> None:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Solution;\n\n\nSolution* solutionCreate(int n_rows, int n_cols) {\n    \n}\n\nint* solutionFlip(Solution* obj, int* retSize) {\n  \n}\n\nvoid solutionReset(Solution* obj) {\n  \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(n_rows, n_cols);\n * int* param_1 = solutionFlip(obj, retSize);\n \n * solutionReset(obj);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int n_rows, int n_cols) {\n\n    }\n    \n    public int[] Flip() {\n\n    }\n    \n    public void Reset() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n_rows, n_cols);\n * int[] param_1 = obj.Flip();\n * obj.Reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n_rows\n * @param {number} n_cols\n */\nvar Solution = function(n_rows, n_cols) {\n\n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.flip = function() {\n\n};\n\n/**\n * @return {void}\n */\nSolution.prototype.reset = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type n_rows: Integer\n    :type n_cols: Integer\n=end\n    def initialize(n_rows, n_cols)\n\n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def flip()\n\n    end\n\n\n=begin\n    :rtype: Void\n=end\n    def reset()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(n_rows, n_cols)\n# param_1 = obj.flip()\n# obj.reset()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ n_rows: Int, _ n_cols: Int) {\n        \n    }\n    \n    func flip() -> [Int] {\n        \n    }\n    \n    func reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(n_rows, n_cols)\n * let ret_1: [Int] = obj.flip()\n * obj.reset()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(n_rows int, n_cols int) Solution {\n\n}\n\n\nfunc (this *Solution) Flip() []int {\n\n}\n\n\nfunc (this *Solution) Reset()  {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(n_rows, n_cols);\n * param_1 := obj.Flip();\n * obj.Reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_n_rows: Int, _n_cols: Int) {\n\n    def flip(): Array[Int] = {\n\n    }\n\n    def reset() {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(n_rows: Int, n_cols: Int) {\n\n    fun flip(): IntArray {\n\n    }\n\n    fun reset() {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(n_rows: i32, n_cols: i32) -> Self {\n        \n    }\n    \n    fn flip(&self) -> Vec<i32> {\n        \n    }\n    \n    fn reset(&self) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(n_rows, n_cols);\n * let ret_1: Vec<i32> = obj.flip();\n * obj.reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer $n_rows\n     * @param Integer $n_cols\n     */\n    function __construct($n_rows, $n_cols) {\n        \n    }\n  \n    /**\n     * @return Integer[]\n     */\n    function flip() {\n        \n    }\n  \n    /**\n     * @return NULL\n     */\n    function reset() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($n_rows, $n_cols);\n * $ret_1 = $obj->flip();\n * $obj->reset();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(n_rows: number, n_cols: number) {\n\n    }\n\n    flip(): number[] {\n\n    }\n\n    reset(): void {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0520", "frontend_question_id": "0520", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/detect-capital", "url_en": "https://leetcode.com/problems/detect-capital", "relative_path_cn": "/leetcode/0500-0599/0520.Detect%20Capital/README.md", "relative_path_en": "/leetcode/0500-0599/0520.Detect%20Capital/README_EN.md", "title_cn": "\u68c0\u6d4b\u5927\u5199\u5b57\u6bcd", "title_en": "Detect Capital", "question_title_slug": "detect-capital", "content_en": "<p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p>\r\n\r\n<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\r\n\r\n<ol>\r\n\t<li>All letters in this word are capitals, like &quot;USA&quot;.</li>\r\n\t<li>All letters in this word are not capitals, like &quot;leetcode&quot;.</li>\r\n\t<li>Only the first letter in this word is capital, like &quot;Google&quot;.</li>\r\n</ol>\r\nOtherwise, we define that this word doesn&#39;t use capitals in a right way.\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;USA&quot;\r\n<b>Output:</b> True\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;FlaG&quot;\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> The input will be a non-empty word consisting of uppercase and lowercase latin letters.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\uff0c\u4f60\u9700\u8981\u5224\u65ad\u5355\u8bcd\u7684\u5927\u5199\u4f7f\u7528\u662f\u5426\u6b63\u786e\u3002</p>\n\n<p>\u6211\u4eec\u5b9a\u4e49\uff0c\u5728\u4ee5\u4e0b\u60c5\u51b5\u65f6\uff0c\u5355\u8bcd\u7684\u5927\u5199\u7528\u6cd5\u662f\u6b63\u786e\u7684\uff1a</p>\n\n<ol>\n\t<li>\u5168\u90e8\u5b57\u6bcd\u90fd\u662f\u5927\u5199\uff0c\u6bd4\u5982&quot;USA&quot;\u3002</li>\n\t<li>\u5355\u8bcd\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd\u4e0d\u662f\u5927\u5199\uff0c\u6bd4\u5982&quot;leetcode&quot;\u3002</li>\n\t<li>\u5982\u679c\u5355\u8bcd\u4e0d\u53ea\u542b\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\uff0c&nbsp;\u6bd4\u5982&nbsp;&quot;Google&quot;\u3002</li>\n</ol>\n\n<p>\u5426\u5219\uff0c\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u5355\u8bcd\u6ca1\u6709\u6b63\u786e\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;USA&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;FlaG&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u662f\u7531\u5927\u5199\u548c\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7ec4\u6210\u7684\u975e\u7a7a\u5355\u8bcd\u3002</p>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool detectCapitalUse(string word) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean detectCapitalUse(String word) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool detectCapitalUse(char * word){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool DetectCapitalUse(string word) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word\n# @return {Boolean}\ndef detect_capital_use(word)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func detectCapitalUse(_ word: String) -> Bool {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func detectCapitalUse(word string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def detectCapitalUse(word: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun detectCapitalUse(word: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn detect_capital_use(word: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function detectCapitalUse($word) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function detectCapitalUse(word: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0521", "frontend_question_id": "0521", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-uncommon-subsequence-i", "url_en": "https://leetcode.com/problems/longest-uncommon-subsequence-i", "relative_path_cn": "/leetcode/0500-0599/0521.Longest%20Uncommon%20Subsequence%20I/README.md", "relative_path_en": "/leetcode/0500-0599/0521.Longest%20Uncommon%20Subsequence%20I/README_EN.md", "title_cn": "\u6700\u957f\u7279\u6b8a\u5e8f\u5217 \u2160", "title_en": "Longest Uncommon Subsequence I", "question_title_slug": "longest-uncommon-subsequence-i", "content_en": "<p>Given two strings <code>a</code>&nbsp;and <code>b</code>, find the length of the&nbsp;<strong>longest uncommon subsequence</strong>&nbsp;between them.</p>\n\n<p>A&nbsp;<b>subsequence</b>&nbsp;of&nbsp;a string&nbsp;<code>s</code>&nbsp;is a string that can be obtained after deleting any number of characters from <code>s</code>. For example, <code>&quot;abc&quot;</code>&nbsp;is a subsequence of <code>&quot;aebdc&quot;</code>&nbsp;because you can delete the underlined characters in&nbsp;<code>&quot;a<u>e</u>b<u>d</u>c&quot;</code>&nbsp;to get <code>&quot;abc&quot;</code>. Other subsequences of&nbsp;<code>&quot;aebdc&quot;</code>&nbsp;include&nbsp;<code>&quot;aebdc&quot;</code>,&nbsp;<code>&quot;aeb&quot;</code>,&nbsp;and&nbsp;<code>&quot;&quot;</code>&nbsp;(empty string).</p>\n\n<p>An&nbsp;<strong>uncommon subsequence</strong>&nbsp;between two strings&nbsp;is a string that is a <strong>subsequence of one&nbsp;but not the other</strong>.</p>\n\n<p>Return <em>the length of the <strong>longest uncommon subsequence</strong>&nbsp;between <code>a</code>&nbsp;and <code>b</code></em>. If the longest uncommon subsequence doesn&#39;t exist, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aba&quot;, b = &quot;cdc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One longest uncommon subsequence is &quot;aba&quot; because &quot;aba&quot; is a subsequence of &quot;aba&quot; but not &quot;cdc&quot;.\nNote that &quot;cdc&quot; is also a longest uncommon subsequence.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aaa&quot;, b = &quot;bbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>&nbsp;The longest uncommon subsequences are &quot;aaa&quot; and &quot;bbb&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aaa&quot;, b = &quot;aaa&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>&nbsp;Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 100</code></li>\n\t<li><code>a</code> and <code>b</code> consist of lower-case English letters.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u4ece\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u6700\u957f\u7684\u7279\u6b8a\u5e8f\u5217\u3002</p>\n\n<p>\u300c\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u300d\u5b9a\u4e49\u5982\u4e0b\uff1a\u8be5\u5e8f\u5217\u4e3a\u67d0\u5b57\u7b26\u4e32\u72ec\u6709\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff08\u5373\u4e0d\u80fd\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff09\u3002</p>\n\n<p><strong>\u5b50\u5e8f\u5217</strong> \u53ef\u4ee5\u901a\u8fc7\u5220\u53bb\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u7a7a\u5e8f\u5217\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff0c\u4efb\u4f55\u5b57\u7b26\u4e32\u4e3a\u5176\u81ea\u8eab\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u8f93\u5165\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;aba&quot;, &quot;cdc&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u7279\u6b8a\u5e8f\u5217\u53ef\u4e3a &quot;aba&quot; (\u6216 &quot;cdc&quot;)\uff0c\u4e24\u8005\u5747\u4e3a\u81ea\u8eab\u7684\u5b50\u5e8f\u5217\u4e14\u4e0d\u662f\u5bf9\u65b9\u7684\u5b50\u5e8f\u5217\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;aaa&quot;, b = &quot;bbb&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>a = &quot;aaa&quot;, b = &quot;aaa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u5904\u4e8e\u533a\u95f4&nbsp;<code>[1 - 100]</code> \u3002</li>\n\t<li>\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4ec5\u542b\u6709&nbsp;<code>&#39;a&#39;~&#39;z&#39;</code> \u3002</li>\n</ol>\n", "tags_en": ["Brainteaser", "String"], "tags_cn": ["\u8111\u7b4b\u6025\u8f6c\u5f2f", "\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLUSlength(string a, string b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLUSlength(String a, String b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLUSlength(self, a: str, b: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLUSlength(char * a, char * b){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLUSlength(string a, string b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar findLUSlength = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {Integer}\ndef find_lu_slength(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLUSlength(_ a: String, _ b: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLUSlength(a string, b string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLUSlength(a: String, b: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLUSlength(a: String, b: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_lu_slength(a: String, b: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return Integer\n     */\n    function findLUSlength($a, $b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLUSlength(a: string, b: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0522", "frontend_question_id": "0522", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-uncommon-subsequence-ii", "url_en": "https://leetcode.com/problems/longest-uncommon-subsequence-ii", "relative_path_cn": "/leetcode/0500-0599/0522.Longest%20Uncommon%20Subsequence%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0522.Longest%20Uncommon%20Subsequence%20II/README_EN.md", "title_cn": "\u6700\u957f\u7279\u6b8a\u5e8f\u5217 II", "title_en": "Longest Uncommon Subsequence II", "question_title_slug": "longest-uncommon-subsequence-ii", "content_en": "<p>\r\nGiven a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <b>any</b> subsequence of the other strings.\r\n</p>\r\n\r\n<p>\r\nA <b>subsequence</b> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n</p>\r\n\r\n<p>\r\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\", \"cdc\", \"eae\"\r\n<b>Output:</b> 3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>All the given strings' lengths will not exceed 10.</li>\r\n<li>The length of the given list will be in the range of [2, 50].</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u4f60\u9700\u8981\u4ece\u5b83\u4eec\u4e2d\u627e\u51fa\u6700\u957f\u7684\u7279\u6b8a\u5e8f\u5217\u3002\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u5b9a\u4e49\u5982\u4e0b\uff1a\u8be5\u5e8f\u5217\u4e3a\u67d0\u5b57\u7b26\u4e32\u72ec\u6709\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff08\u5373\u4e0d\u80fd\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff09\u3002</p>\n\n<p><strong>\u5b50\u5e8f\u5217</strong>\u53ef\u4ee5\u901a\u8fc7\u5220\u53bb\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u7a7a\u5e8f\u5217\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff0c\u4efb\u4f55\u5b57\u7b26\u4e32\u4e3a\u5176\u81ea\u8eab\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u8f93\u5165\u5c06\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u8f93\u51fa\u662f\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de -1 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;aba&quot;, &quot;cdc&quot;, &quot;eae&quot;\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10 \u3002</li>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u957f\u5ea6\u5c06\u5728 [2, 50 ] \u4e4b\u95f4\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLUSlength(vector<string>& strs) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLUSlength(String[] strs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLUSlength(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLUSlength(char ** strs, int strsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLUSlength(string[] strs) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} strs\n * @return {number}\n */\nvar findLUSlength = function(strs) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} strs\n# @return {Integer}\ndef find_lu_slength(strs)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLUSlength(_ strs: [String]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLUSlength(strs []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLUSlength(strs: Array[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLUSlength(strs: Array<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_lu_slength(strs: Vec<String>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return Integer\n     */\n    function findLUSlength($strs) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLUSlength(strs: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0523", "frontend_question_id": "0523", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/continuous-subarray-sum", "url_en": "https://leetcode.com/problems/continuous-subarray-sum", "relative_path_cn": "/leetcode/0500-0599/0523.Continuous%20Subarray%20Sum/README.md", "relative_path_en": "/leetcode/0500-0599/0523.Continuous%20Subarray%20Sum/README_EN.md", "title_cn": "\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u548c", "title_en": "Continuous Subarray Sum", "question_title_slug": "continuous-subarray-sum", "content_en": "<p>Given a list of <b>non-negative</b> numbers and a target <b>integer</b> k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of <b>k</b>, that is, sums up to n*k where n is also an <b>integer</b>.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> [23, 2, 4, 6, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> [23, 2, 6, 4, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The length of the array won&#39;t exceed 10,000.</li>\n\t<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b<strong> \u975e\u8d1f\u6570</strong> \u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807<strong> \u6574\u6570</strong>&nbsp;k\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u5426\u542b\u6709\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u81f3\u5c11\u4e3a 2\uff0c\u4e14\u603b\u548c\u4e3a <strong>k</strong> \u7684\u500d\u6570\uff0c\u5373\u603b\u548c\u4e3a n*k\uff0c\u5176\u4e2d n \u4e5f\u662f\u4e00\u4e2a<strong>\u6574\u6570</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[23,2,4,6,7], k = 6\n<strong>\u8f93\u51fa\uff1a</strong>True\n<strong>\u89e3\u91ca\uff1a</strong>[2,4] \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[23,2,6,4,7], k = 6\n<strong>\u8f93\u51fa\uff1a</strong>True\n<strong>\u89e3\u91ca\uff1a</strong>[23,2,6,4,7]\u662f\u5927\u5c0f\u4e3a 5 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 42\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10,000 \u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6240\u6709\u6570\u5b57\u603b\u548c\u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ul>\n", "tags_en": ["Math", "Dynamic Programming"], "tags_cn": ["\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkSubarraySum(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkSubarraySum(int* nums, int numsSize, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckSubarraySum(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar checkSubarraySum = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef check_subarray_sum(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkSubarraySum(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkSubarraySum(nums []int, k int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkSubarraySum(nums: Array[Int], k: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkSubarraySum(nums: IntArray, k: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_subarray_sum(nums: Vec<i32>, k: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function checkSubarraySum($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkSubarraySum(nums: number[], k: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0524", "frontend_question_id": "0524", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting", "url_en": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting", "relative_path_cn": "/leetcode/0500-0599/0524.Longest%20Word%20in%20Dictionary%20through%20Deleting/README.md", "relative_path_en": "/leetcode/0500-0599/0524.Longest%20Word%20in%20Dictionary%20through%20Deleting/README_EN.md", "title_cn": "\u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd", "title_en": "Longest Word in Dictionary through Deleting", "question_title_slug": "longest-word-in-dictionary-through-deleting", "content_en": "<p>\r\nGiven a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\r\n</p>\r\n<p><b>Example 1:</b><br>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\r\n\r\n<b>Output:</b> \r\n\"apple\"\r\n</pre>\r\n</p>\r\n\r\n</p>\r\n<p><b>Example 2:</b><br>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\r\n\r\n<b>Output:</b> \r\n\"a\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>All the strings in the input will only contain lower-case letters.</li>\r\n<li>The size of the dictionary won't exceed 1,000.</li>\r\n<li>The length of all the strings in the input won't exceed 1,000.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u5178\uff0c\u627e\u5230\u5b57\u5178\u91cc\u9762\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u67d0\u4e9b\u5b57\u7b26\u6765\u5f97\u5230\u3002\u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u5178\u987a\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n\n<strong>\u8f93\u51fa:</strong> \n&quot;apple&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n\n<strong>\u8f93\u51fa:</strong> \n&quot;a&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u5b57\u5178\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 1000\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1000\u3002</li>\n</ol>\n", "tags_en": ["Sort", "Two Pointers"], "tags_cn": ["\u6392\u5e8f", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string findLongestWord(string s, vector<string>& d) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String findLongestWord(String s, List<String> d) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLongestWord(self, s, d):\n        \"\"\"\n        :type s: str\n        :type d: List[str]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLongestWord(self, s: str, d: List[str]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * findLongestWord(char * s, char ** d, int dSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FindLongestWord(string s, IList<string> d) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string[]} d\n * @return {string}\n */\nvar findLongestWord = function(s, d) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String[]} d\n# @return {String}\ndef find_longest_word(s, d)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLongestWord(_ s: String, _ d: [String]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLongestWord(s string, d []string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLongestWord(s: String, d: List[String]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLongestWord(s: String, d: List<String>): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_longest_word(s: String, d: Vec<String>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $d\n     * @return String\n     */\n    function findLongestWord($s, $d) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLongestWord(s: string, d: string[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0525", "frontend_question_id": "0525", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/contiguous-array", "url_en": "https://leetcode.com/problems/contiguous-array", "relative_path_cn": "/leetcode/0500-0599/0525.Contiguous%20Array/README.md", "relative_path_en": "/leetcode/0500-0599/0525.Contiguous%20Array/README_EN.md", "title_cn": "\u8fde\u7eed\u6570\u7ec4", "title_en": "Contiguous Array", "question_title_slug": "contiguous-array", "content_en": "<p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. </p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [0,1]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [0,1,0]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of the given binary array will not exceed 50,000.\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4, \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u7684\u957f\u5ea6\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> [0, 1] \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1,0]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> [0, 1] (\u6216 [1, 0]) \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:&nbsp;</strong>\u7ed9\u5b9a\u7684\u4e8c\u8fdb\u5236\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc750000\u3002</p>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMaxLength(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMaxLength(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxLength(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_length(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func findMaxLength(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMaxLength(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMaxLength(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMaxLength(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxLength($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMaxLength(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0526", "frontend_question_id": "0526", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/beautiful-arrangement", "url_en": "https://leetcode.com/problems/beautiful-arrangement", "relative_path_cn": "/leetcode/0500-0599/0526.Beautiful%20Arrangement/README.md", "relative_path_en": "/leetcode/0500-0599/0526.Beautiful%20Arrangement/README_EN.md", "title_cn": "\u4f18\u7f8e\u7684\u6392\u5217", "title_en": "Beautiful Arrangement", "question_title_slug": "beautiful-arrangement", "content_en": "<p>Suppose you have <b>N</b> integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these <b>N</b> numbers successfully if one of the following is true for the i<sub>th</sub> position (1 &lt;= i &lt;= N) in this array:</p>\r\n\r\n<ol>\r\n\t<li>The number at the i<sub>th</sub> position is divisible by <b>i</b>.</li>\r\n\t<li><b>i</b> is divisible by the number at the i<sub>th</sub> position.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now given N, how many beautiful arrangements can you construct?</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 2\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> \r\n\r\nThe first beautiful arrangement is [1, 2]:\r\n\r\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\r\n\r\nThe second beautiful arrangement is [2, 1]:\r\n\r\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><b>N</b> is a positive integer and will not exceed 15.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u5047\u8bbe\u6709\u4ece 1 \u5230 N \u7684&nbsp;<strong>N&nbsp;</strong>\u4e2a\u6574\u6570\uff0c\u5982\u679c\u4ece\u8fd9&nbsp;<strong>N&nbsp;</strong>\u4e2a\u6570\u5b57\u4e2d\u6210\u529f\u6784\u9020\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f7f\u5f97\u6570\u7ec4\u7684\u7b2c <strong>i</strong>&nbsp;\u4f4d (1 &lt;= i &lt;= N) \u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e2d\u7684\u4e00\u4e2a\uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u4e2a\u6570\u7ec4\u4e3a\u4e00\u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u3002\u6761\u4ef6\uff1a</p>\n\n<ol>\n\t<li>\u7b2c&nbsp;<strong>i&nbsp;</strong>\u4f4d\u7684\u6570\u5b57\u80fd\u88ab&nbsp;<strong>i&nbsp;</strong>\u6574\u9664</li>\n\t<li><strong>i</strong> \u80fd\u88ab\u7b2c <strong>i</strong> \u4f4d\u4e0a\u7684\u6570\u5b57\u6574\u9664</li>\n</ol>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 N\uff0c\u8bf7\u95ee\u53ef\u4ee5\u6784\u9020\u591a\u5c11\u4e2a\u4f18\u7f8e\u7684\u6392\u5217\uff1f</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 2\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\n\u7b2c 1 \u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u662f [1, 2]:\n  \u7b2c 1 \u4e2a\u4f4d\u7f6e\uff08i=1\uff09\u4e0a\u7684\u6570\u5b57\u662f1\uff0c1\u80fd\u88ab i\uff08i=1\uff09\u6574\u9664\n  \u7b2c 2 \u4e2a\u4f4d\u7f6e\uff08i=2\uff09\u4e0a\u7684\u6570\u5b57\u662f2\uff0c2\u80fd\u88ab i\uff08i=2\uff09\u6574\u9664\n\n\u7b2c 2 \u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u662f [2, 1]:\n  \u7b2c 1 \u4e2a\u4f4d\u7f6e\uff08i=1\uff09\u4e0a\u7684\u6570\u5b57\u662f2\uff0c2\u80fd\u88ab i\uff08i=1\uff09\u6574\u9664\n  \u7b2c 2 \u4e2a\u4f4d\u7f6e\uff08i=2\uff09\u4e0a\u7684\u6570\u5b57\u662f1\uff0ci\uff08i=2\uff09\u80fd\u88ab 1 \u6574\u9664\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><strong>N</strong> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8d85\u8fc715\u3002</li>\n</ol>\n", "tags_en": ["Backtracking"], "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countArrangement(int N) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countArrangement(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countArrangement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countArrangement(self, N: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countArrangement(int N){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountArrangement(int N) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} N\n * @return {number}\n */\nvar countArrangement = function(N) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_arrangement(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countArrangement(_ N: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countArrangement(N int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countArrangement(N: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countArrangement(N: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_arrangement(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $N\n     * @return Integer\n     */\n    function countArrangement($N) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countArrangement(N: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0527", "frontend_question_id": "0527", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/word-abbreviation", "url_en": "https://leetcode.com/problems/word-abbreviation", "relative_path_cn": "/leetcode/0500-0599/0527.Word%20Abbreviation/README.md", "relative_path_en": "/leetcode/0500-0599/0527.Word%20Abbreviation/README_EN.md", "title_cn": "\u5355\u8bcd\u7f29\u5199", "title_en": "Word Abbreviation", "question_title_slug": "word-abbreviation", "content_en": null, "content_cn": null, "tags_en": ["Sort", "String"], "tags_cn": ["\u6392\u5e8f", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0912", "frontend_question_id": "0528", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/random-pick-with-weight", "url_en": "https://leetcode.com/problems/random-pick-with-weight", "relative_path_cn": "/leetcode/0500-0599/0528.Random%20Pick%20with%20Weight/README.md", "relative_path_en": "/leetcode/0500-0599/0528.Random%20Pick%20with%20Weight/README_EN.md", "title_cn": "\u6309\u6743\u91cd\u968f\u673a\u9009\u62e9", "title_en": "Random Pick with Weight", "question_title_slug": "random-pick-with-weight", "content_en": "<p>You are given an array of positive integers <code>w</code> where <code>w[i]</code> describes the weight of <code>i</code><sup><code>th</code>&nbsp;</sup>index (0-indexed).</p>\n\n<p>We need to call the function&nbsp;<code>pickIndex()</code> which <strong>randomly</strong> returns an integer in the range <code>[0, w.length - 1]</code>.&nbsp;<code>pickIndex()</code>&nbsp;should return the integer&nbsp;proportional to its weight in the <code>w</code> array. For example, for <code>w = [1, 3]</code>, the probability of picking the index <code>0</code> is <code>1 / (1 + 3)&nbsp;= 0.25</code> (i.e 25%)&nbsp;while the probability of picking the index <code>1</code> is <code>3 / (1 + 3)&nbsp;= 0.75</code> (i.e 75%).</p>\n\n<p>More formally, the probability of picking index <code>i</code> is <code>w[i] / sum(w)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>Output</strong>\n[null,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>Output</strong>\n[null,1,1,1,1,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It&#39;s returning the second element (index = 1) that has probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It&#39;s returning the first element (index = 0) that has probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\n\t<li><code>pickIndex</code>&nbsp;will be called at most <code>10000</code> times.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4&nbsp;<code>w</code> \uff0c\u5176\u4e2d&nbsp;<code>w[i]</code>&nbsp;\u4ee3\u8868\u4e0b\u6807 <code>i</code>&nbsp;\u7684\u6743\u91cd\uff08\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\uff09\uff0c\u8bf7\u5199\u4e00\u4e2a\u51fd\u6570&nbsp;<code>pickIndex</code>&nbsp;\uff0c\u5b83\u53ef\u4ee5\u968f\u673a\u5730\u83b7\u53d6\u4e0b\u6807 <code>i</code>\uff0c\u9009\u53d6\u4e0b\u6807 <code>i</code>&nbsp;\u7684\u6982\u7387\u4e0e&nbsp;<code>w[i]</code>&nbsp;\u6210\u6b63\u6bd4\u3002</p>\n\n<ol>\n</ol>\n\n<p>\u4f8b\u5982\uff0c\u5bf9\u4e8e <code>w = [1, 3]</code>\uff0c\u6311\u9009\u4e0b\u6807 <code>0</code> \u7684\u6982\u7387\u4e3a <code>1 / (1 + 3)&nbsp;= 0.25</code> \uff08\u5373\uff0c25%\uff09\uff0c\u800c\u9009\u53d6\u4e0b\u6807 <code>1</code> \u7684\u6982\u7387\u4e3a <code>3 / (1 + 3)&nbsp;= 0.75</code>\uff08\u5373\uff0c75%\uff09\u3002</p>\n\n<p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u9009\u53d6\u4e0b\u6807 <code>i</code> \u7684\u6982\u7387\u4e3a <code>w[i] / sum(w)</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null,0]\n<strong>\u89e3\u91ca\uff1a</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // \u8fd4\u56de 0\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u552f\u4e00\u7684\u9009\u62e9\u662f\u8fd4\u56de\u4e0b\u6807 0\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null,1,1,1,1,0]\n<strong>\u89e3\u91ca\uff1a</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // \u8fd4\u56de 1\uff0c\u8fd4\u56de\u4e0b\u6807 1\uff0c\u8fd4\u56de\u8be5\u4e0b\u6807\u6982\u7387\u4e3a 3/4 \u3002\nsolution.pickIndex(); // \u8fd4\u56de 1\nsolution.pickIndex(); // \u8fd4\u56de 1\nsolution.pickIndex(); // \u8fd4\u56de 1\nsolution.pickIndex(); // \u8fd4\u56de 0\uff0c\u8fd4\u56de\u4e0b\u6807 0\uff0c\u8fd4\u56de\u8be5\u4e0b\u6807\u6982\u7387\u4e3a 1/4 \u3002\n\n\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u968f\u673a\u95ee\u9898\uff0c\u5141\u8bb8\u591a\u4e2a\u7b54\u6848\uff0c\u56e0\u6b64\u4e0b\u5217\u8f93\u51fa\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\n\u8bf8\u82e5\u6b64\u7c7b\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\n\t<li><code>pickIndex</code>&nbsp;\u5c06\u88ab\u8c03\u7528\u4e0d\u8d85\u8fc7&nbsp;<code>10000</code>&nbsp;\u6b21</li>\n</ul>\n", "tags_en": ["Binary Search", "Random"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    Solution(vector<int>& w) {\n\n    }\n    \n    int pickIndex() {\n\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(w);\n * int param_1 = obj->pickIndex();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n\n    public Solution(int[] w) {\n\n    }\n    \n    public int pickIndex() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(w);\n * int param_1 = obj.pickIndex();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n\n    def __init__(self, w):\n        \"\"\"\n        :type w: List[int]\n        \"\"\"\n\n\n    def pickIndex(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(w)\n# param_1 = obj.pickIndex()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n\n    def __init__(self, w: List[int]):\n\n\n    def pickIndex(self) -> int:\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(w)\n# param_1 = obj.pickIndex()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} Solution;\n\n\nSolution* solutionCreate(int* w, int wSize) {\n\n}\n\nint solutionPickIndex(Solution* obj) {\n\n}\n\nvoid solutionFree(Solution* obj) {\n\n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * Solution* obj = solutionCreate(w, wSize);\n * int param_1 = solutionPickIndex(obj);\n \n * solutionFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n\n    public Solution(int[] w) {\n\n    }\n    \n    public int PickIndex() {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(w);\n * int param_1 = obj.PickIndex();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} w\n */\nvar Solution = function(w) {\n\n};\n\n/**\n * @return {number}\n */\nSolution.prototype.pickIndex = function() {\n\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(w)\n * var param_1 = obj.pickIndex()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Solution\n\n=begin\n    :type w: Integer[]\n=end\n    def initialize(w)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pick_index()\n\n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(w)\n# param_1 = obj.pick_index()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Solution {\n\n    init(_ w: [Int]) {\n        \n    }\n    \n    func pickIndex() -> Int {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(w)\n * let ret_1: Int = obj.pickIndex()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Solution struct {\n\n}\n\n\nfunc Constructor(w []int) Solution {\n\n}\n\n\nfunc (this *Solution) PickIndex() int {\n\n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(w);\n * param_1 := obj.PickIndex();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Solution(_w: Array[Int]) {\n\n    def pickIndex(): Int = {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(w)\n * var param_1 = obj.pickIndex()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution(w: IntArray) {\n\n    fun pickIndex(): Int {\n\n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(w)\n * var param_1 = obj.pickIndex()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Solution {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Solution {\n\n    fn new(w: Vec<i32>) -> Self {\n\n    }\n    \n    fn pick_index(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution::new(w);\n * let ret_1: i32 = obj.pick_index();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n    /**\n     * @param Integer[] $w\n     */\n    function __construct($w) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pickIndex() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * $obj = Solution($w);\n * $ret_1 = $obj->pickIndex();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Solution {\n    constructor(w: number[]) {\n\n    }\n\n    pickIndex(): number {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(w)\n * var param_1 = obj.pickIndex()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0529", "frontend_question_id": "0529", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minesweeper", "url_en": "https://leetcode.com/problems/minesweeper", "relative_path_cn": "/leetcode/0500-0599/0529.Minesweeper/README.md", "relative_path_en": "/leetcode/0500-0599/0529.Minesweeper/README_EN.md", "title_cn": "\u626b\u96f7\u6e38\u620f", "title_en": "Minesweeper", "question_title_slug": "minesweeper", "content_en": "<p>Let&#39;s play the minesweeper game (<a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\">Wikipedia</a>, <a href=\"http://minesweeperonline.com\">online game</a>)!</p>\r\n\r\n<p>You are given a 2D char matrix representing the game board. <b>&#39;M&#39;</b> represents an <b>unrevealed</b> mine, <b>&#39;E&#39;</b> represents an <b>unrevealed</b> empty square, <b>&#39;B&#39;</b> represents a <b>revealed</b> blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, <b>digit</b> (&#39;1&#39; to &#39;8&#39;) represents how many mines are adjacent to this <b>revealed</b> square, and finally <b>&#39;X&#39;</b> represents a <b>revealed</b> mine.</p>\r\n\r\n<p>Now given the next click position (row and column indices) among all the <b>unrevealed</b> squares (&#39;M&#39; or &#39;E&#39;), return the board after revealing this position according to the following rules:</p>\r\n\r\n<ol>\r\n\t<li>If a mine (&#39;M&#39;) is revealed, then the game is over - change it to <b>&#39;X&#39;</b>.</li>\r\n\t<li>If an empty square (&#39;E&#39;) with <b>no adjacent mines</b> is revealed, then change it to revealed blank (&#39;B&#39;) and all of its adjacent <b>unrevealed</b> squares should be revealed recursively.</li>\r\n\t<li>If an empty square (&#39;E&#39;) with <b>at least one adjacent mine</b> is revealed, then change it to a digit (&#39;1&#39; to &#39;8&#39;) representing the number of adjacent mines.</li>\r\n\t<li>Return the board when no more squares will be revealed.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n[[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]\r\n\r\nClick : [3,0]\r\n\r\n<b>Output:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_1.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\nClick : [1,2]\r\n\r\n<b>Output:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_2.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The range of the input matrix&#39;s height and width is [1,50].</li>\r\n\t<li>The click position will only be an unrevealed square (&#39;M&#39; or &#39;E&#39;), which also means the input board contains at least one clickable square.</li>\r\n\t<li>The input board won&#39;t be a stage when game is over (some mines have been revealed).</li>\r\n\t<li>For simplicity, not mentioned rules should be ignored in this problem. For example, you <b>don&#39;t</b> need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.</li>\r\n</ol>\r\n", "content_cn": "<p>\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u73a9\u626b\u96f7\u6e38\u620f\uff01</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6e38\u620f\u677f\u7684\u4e8c\u7ef4\u5b57\u7b26\u77e9\u9635\u3002&nbsp;<strong>&#39;M&#39;</strong>&nbsp;\u4ee3\u8868\u4e00\u4e2a<strong>\u672a\u6316\u51fa\u7684</strong>\u5730\u96f7\uff0c<strong>&#39;E&#39;</strong>&nbsp;\u4ee3\u8868\u4e00\u4e2a<strong>\u672a\u6316\u51fa\u7684</strong>\u7a7a\u65b9\u5757\uff0c<strong>&#39;B&#39;&nbsp;</strong>\u4ee3\u8868\u6ca1\u6709\u76f8\u90bb\uff08\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\uff0c\u548c\u6240\u67094\u4e2a\u5bf9\u89d2\u7ebf\uff09\u5730\u96f7\u7684<strong>\u5df2\u6316\u51fa\u7684</strong>\u7a7a\u767d\u65b9\u5757\uff0c<strong>\u6570\u5b57</strong>\uff08&#39;1&#39; \u5230 &#39;8&#39;\uff09\u8868\u793a\u6709\u591a\u5c11\u5730\u96f7\u4e0e\u8fd9\u5757<strong>\u5df2\u6316\u51fa\u7684</strong>\u65b9\u5757\u76f8\u90bb\uff0c<strong>&#39;X&#39;</strong>&nbsp;\u5219\u8868\u793a\u4e00\u4e2a<strong>\u5df2\u6316\u51fa\u7684</strong>\u5730\u96f7\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u51fa\u5728\u6240\u6709<strong>\u672a\u6316\u51fa\u7684</strong>\u65b9\u5757\u4e2d\uff08&#39;M&#39;\u6216\u8005&#39;E&#39;\uff09\u7684\u4e0b\u4e00\u4e2a\u70b9\u51fb\u4f4d\u7f6e\uff08\u884c\u548c\u5217\u7d22\u5f15\uff09\uff0c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u8fd4\u56de\u76f8\u5e94\u4f4d\u7f6e\u88ab\u70b9\u51fb\u540e\u5bf9\u5e94\u7684\u9762\u677f\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u4e00\u4e2a\u5730\u96f7\uff08&#39;M&#39;\uff09\u88ab\u6316\u51fa\uff0c\u6e38\u620f\u5c31\u7ed3\u675f\u4e86- \u628a\u5b83\u6539\u4e3a&nbsp;<strong>&#39;X&#39;</strong>\u3002</li>\n\t<li>\u5982\u679c\u4e00\u4e2a<strong>\u6ca1\u6709\u76f8\u90bb\u5730\u96f7</strong>\u7684\u7a7a\u65b9\u5757\uff08&#39;E&#39;\uff09\u88ab\u6316\u51fa\uff0c\u4fee\u6539\u5b83\u4e3a\uff08&#39;B&#39;\uff09\uff0c\u5e76\u4e14\u6240\u6709\u548c\u5176\u76f8\u90bb\u7684<strong>\u672a\u6316\u51fa</strong>\u65b9\u5757\u90fd\u5e94\u8be5\u88ab\u9012\u5f52\u5730\u63ed\u9732\u3002</li>\n\t<li>\u5982\u679c\u4e00\u4e2a<strong>\u81f3\u5c11\u4e0e\u4e00\u4e2a\u5730\u96f7\u76f8\u90bb</strong>\u7684\u7a7a\u65b9\u5757\uff08&#39;E&#39;\uff09\u88ab\u6316\u51fa\uff0c\u4fee\u6539\u5b83\u4e3a\u6570\u5b57\uff08&#39;1&#39;\u5230&#39;8&#39;\uff09\uff0c\u8868\u793a\u76f8\u90bb\u5730\u96f7\u7684\u6570\u91cf\u3002</li>\n\t<li>\u5982\u679c\u5728\u6b64\u6b21\u70b9\u51fb\u4e2d\uff0c\u82e5\u65e0\u66f4\u591a\u65b9\u5757\u53ef\u88ab\u63ed\u9732\uff0c\u5219\u8fd4\u56de\u9762\u677f\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n\n[[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\n [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]\n\nClick : [3,0]\n\n<strong>\u8f93\u51fa:</strong> \n\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\n\n<strong>\u89e3\u91ca:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_1.png\" style=\"width: 100%;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\n\nClick : [1,2]\n\n<strong>\u8f93\u51fa:</strong> \n\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\n\n<strong>\u89e3\u91ca:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_2.png\" style=\"width: 100%;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u7684\u8303\u56f4\u4e3a [1,50]\u3002</li>\n\t<li>\u70b9\u51fb\u7684\u4f4d\u7f6e\u53ea\u80fd\u662f\u672a\u88ab\u6316\u51fa\u7684\u65b9\u5757 (&#39;M&#39; \u6216\u8005 &#39;E&#39;)\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u9762\u677f\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u65b9\u5757\u3002</li>\n\t<li>\u8f93\u5165\u9762\u677f\u4e0d\u4f1a\u662f\u6e38\u620f\u7ed3\u675f\u7684\u72b6\u6001\uff08\u5373\u6709\u5730\u96f7\u5df2\u88ab\u6316\u51fa\uff09\u3002</li>\n\t<li>\u7b80\u5355\u8d77\u89c1\uff0c\u672a\u63d0\u53ca\u7684\u89c4\u5219\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u53ef\u88ab\u5ffd\u7565\u3002\u4f8b\u5982\uff0c\u5f53\u6e38\u620f\u7ed3\u675f\u65f6\u4f60\u4e0d\u9700\u8981\u6316\u51fa\u6240\u6709\u5730\u96f7\uff0c\u8003\u8651\u6240\u6709\u4f60\u53ef\u80fd\u8d62\u5f97\u6e38\u620f\u6216\u6807\u8bb0\u65b9\u5757\u7684\u60c5\u51b5\u3002</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public char[][] updateBoard(char[][] board, int[] click) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def updateBoard(self, board, click):\n        \"\"\"\n        :type board: List[List[str]]\n        :type click: List[int]\n        :rtype: List[List[str]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public char[][] UpdateBoard(char[][] board, int[] click) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @param {number[]} click\n * @return {character[][]}\n */\nvar updateBoard = function(board, click) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} board\n# @param {Integer[]} click\n# @return {Character[][]}\ndef update_board(board, click)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func updateBoard(_ board: [[Character]], _ click: [Int]) -> [[Character]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func updateBoard(board [][]byte, click []int) [][]byte {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def updateBoard(board: Array[Array[Char]], click: Array[Int]): Array[Array[Char]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun updateBoard(board: Array<CharArray>, click: IntArray): Array<CharArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn update_board(board: Vec<Vec<char>>, click: Vec<i32>) -> Vec<Vec<char>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param Integer[] $click\n     * @return String[][]\n     */\n    function updateBoard($board, $click) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function updateBoard(board: string[][], click: number[]): string[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0530", "frontend_question_id": "0530", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst", "url_en": "https://leetcode.com/problems/minimum-absolute-difference-in-bst", "relative_path_cn": "/leetcode/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/README.md", "relative_path_en": "/leetcode/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee", "title_en": "Minimum Absolute Difference in BST", "question_title_slug": "minimum-absolute-difference-in-bst", "content_en": "<p>Given a binary search tree with non-negative values, find the minimum <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> between values of any two nodes.</p>\n\n<p><b>Example:</b></p>\n\n<pre>\n<b>Input:</b>\n\n   1\n    \\\n     3\n    /\n   2\n\n<b>Output:</b>\n1\n\n<b>Explanation:</b>\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Note:</b></p>\n\n<ul>\n\t<li>There are at least two nodes in this BST.</li>\n\t<li>This question is the same as 783:&nbsp;<a href=\"https://leetcode.com/problems/minimum-distance-between-bst-nodes/\">https://leetcode.com/problems/minimum-distance-between-bst-nodes/</a></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u68f5\u6240\u6709\u8282\u70b9\u4e3a\u975e\u8d1f\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8ba1\u7b97\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>\u8f93\u51fa\uff1a</strong>\n1\n\n<strong>\u89e3\u91ca\uff1a\n</strong>\u6700\u5c0f\u7edd\u5bf9\u5dee\u4e3a 1\uff0c\u5176\u4e2d 2 \u548c 1 \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a 1\uff08\u6216\u8005 2 \u548c 3\uff09\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u81f3\u5c11\u6709 2 \u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u672c\u9898\u4e0e 783 <a href=\"https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/\">https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/</a> \u76f8\u540c</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int getMinimumDifference(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint getMinimumDifference(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int GetMinimumDifference(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar getMinimumDifference = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef get_minimum_difference(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func getMinimumDifference(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc getMinimumDifference(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def getMinimumDifference(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun getMinimumDifference(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn get_minimum_difference(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function getMinimumDifference($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction getMinimumDifference(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0531", "frontend_question_id": "0531", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/lonely-pixel-i", "url_en": "https://leetcode.com/problems/lonely-pixel-i", "relative_path_cn": "/leetcode/0500-0599/0531.Lonely%20Pixel%20I/README.md", "relative_path_en": "/leetcode/0500-0599/0531.Lonely%20Pixel%20I/README_EN.md", "title_cn": "\u5b64\u72ec\u50cf\u7d20 I", "title_en": "Lonely Pixel I", "question_title_slug": "lonely-pixel-i", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Array"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0532", "frontend_question_id": "0532", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/k-diff-pairs-in-an-array", "url_en": "https://leetcode.com/problems/k-diff-pairs-in-an-array", "relative_path_cn": "/leetcode/0500-0599/0532.K-diff%20Pairs%20in%20an%20Array/README.md", "relative_path_en": "/leetcode/0500-0599/0532.K-diff%20Pairs%20in%20an%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u4e2d\u7684 k-diff \u6570\u5bf9", "title_en": "K-diff Pairs in an Array", "question_title_slug": "k-diff-pairs-in-an-array", "content_en": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of <b>unique</b> k-diff pairs in the array</em>.</p>\n\n<p>A <b>k-diff</b> pair is&nbsp;an integer pair <code>(nums[i], nums[j])</code>, where the following are true:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt; nums.length</code></li>\n\t<li><code>i != j</code></li>\n\t<li><code>|nums[i] - nums[j]| == k</code></li>\n</ul>\n\n<p><strong>Notice</strong>&nbsp;that <code>|val|</code> denotes the absolute value of <code>val</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,1,5], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of <strong>unique</strong> pairs.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1,5,4], k = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is one 0-diff pair in the array, (1, 1).\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,4,3,3,0,9,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3], k = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\u00a0<code><strong>k</strong></code>\uff0c\u4f60\u9700\u8981\u5728\u6570\u7ec4\u91cc\u627e\u5230<strong>\u4e0d\u540c\u7684\u00a0</strong>k-diff \u6570\u5bf9\uff0c\u5e76\u8fd4\u56de\u4e0d\u540c\u7684 <strong>k-diff \u6570\u5bf9</strong> \u7684\u6570\u76ee\u3002</p>\n\n<p>\u8fd9\u91cc\u5c06\u00a0<strong>k-diff</strong>\u00a0\u6570\u5bf9\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6574\u6570\u5bf9 <code>(nums[i], nums[j])</code>\uff0c\u5e76\u6ee1\u8db3\u4e0b\u8ff0\u5168\u90e8\u6761\u4ef6\uff1a</p>\n\n<ul>\n\t<li><code>0 <= i, j < nums.length</code></li>\n\t<li><code>i != j</code></li>\n\t<li><code>|nums[i] - nums[j]| == k</code></li>\n</ul>\n\n<p><strong>\u6ce8\u610f</strong>\uff0c<code>|val|</code> \u8868\u793a <code>val</code> \u7684\u7edd\u5bf9\u503c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [3, 1, 4, 1, 5], k = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6570\u7ec4\u4e2d\u6709\u4e24\u4e2a 2-diff \u6570\u5bf9, (1, 3) \u548c (3, 5)\u3002\n\u5c3d\u7ba1\u6570\u7ec4\u4e2d\u6709\u4e24\u4e2a1\uff0c\u4f46\u6211\u4eec\u53ea\u5e94\u8fd4\u56de\u4e0d\u540c\u7684\u6570\u5bf9\u7684\u6570\u91cf\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1, 2, 3, 4, 5], k = 1\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6570\u7ec4\u4e2d\u6709\u56db\u4e2a 1-diff \u6570\u5bf9, (1, 2), (2, 3), (3, 4) \u548c (4, 5)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1, 3, 1, 5, 4], k = 0\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a 0-diff \u6570\u5bf9\uff0c(1, 1)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,2,4,4,3,3,0,9,2,3], k = 3\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [-1,-2,-3], k = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>7</sup> <= nums[i] <= 10<sup>7</sup></code></li>\n\t<li><code>0 <= k <= 10<sup>7</sup></code></li>\n</ul>\n", "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findPairs(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findPairs(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findPairs(int* nums, int numsSize, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindPairs(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findPairs = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_pairs(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findPairs(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findPairs(nums []int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findPairs(nums: Array[Int], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findPairs(nums: IntArray, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_pairs(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findPairs($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findPairs(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0533", "frontend_question_id": "0533", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/lonely-pixel-ii", "url_en": "https://leetcode.com/problems/lonely-pixel-ii", "relative_path_cn": "/leetcode/0500-0599/0533.Lonely%20Pixel%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0533.Lonely%20Pixel%20II/README_EN.md", "title_cn": "\u5b64\u72ec\u50cf\u7d20 II", "title_en": "Lonely Pixel II", "question_title_slug": "lonely-pixel-ii", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Array"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "1181", "frontend_question_id": "0534", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/game-play-analysis-iii", "url_en": "https://leetcode.com/problems/game-play-analysis-iii", "relative_path_cn": "/leetcode/0500-0599/0534.Game%20Play%20Analysis%20III/README.md", "relative_path_en": "/leetcode/0500-0599/0534.Game%20Play%20Analysis%20III/README_EN.md", "title_cn": "\u6e38\u620f\u73a9\u6cd5\u5206\u6790 III", "title_en": "Game Play Analysis III", "question_title_slug": "game-play-analysis-iii", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0535", "frontend_question_id": "0535", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/encode-and-decode-tinyurl", "url_en": "https://leetcode.com/problems/encode-and-decode-tinyurl", "relative_path_cn": "/leetcode/0500-0599/0535.Encode%20and%20Decode%20TinyURL/README.md", "relative_path_en": "/leetcode/0500-0599/0535.Encode%20and%20Decode%20TinyURL/README_EN.md", "title_cn": "TinyURL \u7684\u52a0\u5bc6\u4e0e\u89e3\u5bc6", "title_en": "Encode and Decode TinyURL", "question_title_slug": "encode-and-decode-tinyurl", "content_en": "<blockquote>Note: This is a companion problem to the <a href=\"https://leetcode.com/discuss/interview-question/system-design/\" target=\"_blank\">System Design</a> problem: <a href=\"https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/\" target=\"_blank\">Design TinyURL</a>.</blockquote>\r\n\r\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p>\r\n\r\n<p>Design the <code>encode</code> and <code>decode</code> methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\r\n", "content_cn": "<p>TinyURL\u662f\u4e00\u79cdURL\u7b80\u5316\u670d\u52a1\uff0c \u6bd4\u5982\uff1a\u5f53\u4f60\u8f93\u5165\u4e00\u4e2aURL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u7b80\u5316\u7684URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p>\n\n<p>\u8981\u6c42\uff1a\u8bbe\u8ba1\u4e00\u4e2a TinyURL \u7684\u52a0\u5bc6&nbsp;<code>encode</code>&nbsp;\u548c\u89e3\u5bc6&nbsp;<code>decode</code>&nbsp;\u7684\u65b9\u6cd5\u3002\u4f60\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u7b97\u6cd5\u5982\u4f55\u8bbe\u8ba1\u548c\u8fd0\u4f5c\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2aURL\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e00\u4e2aTinyURL\uff0c\u5e76\u4e14\u8fd9\u4e2aTinyURL\u53ef\u4ee5\u7528\u89e3\u5bc6\u65b9\u6cd5\u6062\u590d\u6210\u539f\u672c\u7684URL\u3002</p>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n\n    // Encodes a URL to a shortened URL.\n    string encode(string longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    string decode(string shortUrl) {\n        \n    }\n};\n\n// Your Solution object will be instantiated and called as such:\n// Solution solution;\n// solution.decode(solution.encode(url));", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "public class Codec {\n\n    // Encodes a URL to a shortened URL.\n    public String encode(String longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    public String decode(String shortUrl) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Codec:\n\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        \n\n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original URL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Codec:\n\n    def encode(self, longUrl: str) -> str:\n        \"\"\"Encodes a URL to a shortened URL.\n        \"\"\"\n        \n\n    def decode(self, shortUrl: str) -> str:\n        \"\"\"Decodes a shortened URL to its original URL.\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/** Encodes a URL to a shortened URL. */\nchar* encode(char* longUrl) {\n    \n}\n\n/** Decodes a shortened URL to its original URL. */\nchar* decode(char* shortUrl) {\n    \n}\n\n// Your functions will be called as such:\n// char* s = encode(s);\n// decode(s);", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Codec {\n\n    // Encodes a URL to a shortened URL\n    public string encode(string longUrl) {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    public string decode(string shortUrl) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.decode(codec.encode(url));", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */\nvar encode = function(longUrl) {\n    \n};\n\n/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */\nvar decode = function(shortUrl) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(url));\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Encodes a URL to a shortened URL.\n#\n# @param {string} longUrl\n# @return {string}\ndef encode(longUrl)\n    \nend\n\n# Decodes a shortened URL to its original URL.\n#\n# @param {string} shortUrl\n# @return {string}\ndef decode(shortUrl)\n    \nend\n\n\n# Your functions will be called as such:\n# decode(encode(url))", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Codec {\n    // Encodes a URL to a shortened URL.\n    func encode(_ longUrl: String) -> String {\n        \n    }\n    \n    // Decodes a shortened URL to its original URL.\n    func decode(_ shortUrl: String) -> String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec()\n * val s = obj.encode(longUrl)\n * let ans = obj.decode(s)\n*/", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Codec struct {\n    \n}\n\n\nfunc Constructor() Codec {\n    \n}\n\n// Encodes a URL to a shortened URL.\nfunc (this *Codec) encode(longUrl string) string {\n\t\n}\n\n// Decodes a shortened URL to its original URL.\nfunc (this *Codec) decode(shortUrl string) string {\n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * obj := Constructor();\n * url := obj.encode(longUrl);\n * ans := obj.decode(url);\n */\n", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Codec {\n    // Encodes a URL to a shortened URL.\n    def encode(longURL: String): String = {\n        \n    }\n    \n    // Decodes a shortened URL to its original URL.\n    def decode(shortURL: String): String = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = new Codec()\n * val s = obj.encode(longURL)\n * val ans = obj.decode(s)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Codec() {\n    // Encodes a URL to a shortened URL.\n    fun encode(longUrl: String): String {\n        \n    }\n\n    // Decodes a shortened URL to its original URL.\n    fun decode(shortUrl: String): String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var obj = Codec()\n * var url = obj.encode(longUrl)\n * var ans = obj.decode(url)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\t\n    // Encodes a URL to a shortened URL.\n    fn encode(&self, longURL: String) -> String {\n        \n    }\n\t\n    // Decodes a shortened URL to its original URL.\n    fn decode(&self, shortURL: String) -> String {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let s: String = obj.encode(strs);\n * let ans: VecVec<String> = obj.decode(s);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Codec {\n    /**\n     * Encodes a URL to a shortened URL.\n     * @param String $longUrl\n     * @return String\n     */\n    function encode($longUrl) {\n        \n    }\n    \n    /**\n     * Decodes a shortened URL to its original URL.\n     * @param String $shortUrl\n     * @return String\n     */\n    function decode($shortUrl) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $obj = Codec();\n * $s = $obj->encode($longUrl);\n * $ans = $obj->decode($s);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Encodes a URL to a shortened URL.\n */\nfunction encode(longUrl: string): string {\n\t\n};\n\n/**\n * Decodes a shortened URL to its original URL.\n */\nfunction decode(shortUrl: string): string {\n\t\n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0536", "frontend_question_id": "0536", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/construct-binary-tree-from-string", "url_en": "https://leetcode.com/problems/construct-binary-tree-from-string", "relative_path_cn": "/leetcode/0500-0599/0536.Construct%20Binary%20Tree%20from%20String/README.md", "relative_path_en": "/leetcode/0500-0599/0536.Construct%20Binary%20Tree%20from%20String/README_EN.md", "title_cn": "\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e8c\u53c9\u6811", "title_en": "Construct Binary Tree from String", "question_title_slug": "construct-binary-tree-from-string", "content_en": null, "content_cn": null, "tags_en": ["Tree", "String"], "tags_cn": ["\u6811", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0537", "frontend_question_id": "0537", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/complex-number-multiplication", "url_en": "https://leetcode.com/problems/complex-number-multiplication", "relative_path_cn": "/leetcode/0500-0599/0537.Complex%20Number%20Multiplication/README.md", "relative_path_en": "/leetcode/0500-0599/0537.Complex%20Number%20Multiplication/README_EN.md", "title_cn": "\u590d\u6570\u4e58\u6cd5", "title_en": "Complex Number Multiplication", "question_title_slug": "complex-number-multiplication", "content_en": "<p>\r\nGiven two strings representing two <a href = \"https://en.wikipedia.org/wiki/Complex_number\">complex numbers</a>.</p>\r\n\r\n<p>\r\nYou need to return a string representing their multiplication. Note i<sup>2</sup> = -1 according to the definition.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1+1i\", \"1+1i\"\r\n<b>Output:</b> \"0+2i\"\r\n<b>Explanation:</b> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i, and you need convert it to the form of 0+2i.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1+-1i\", \"1+-1i\"\r\n<b>Output:</b> \"0+-2i\"\r\n<b>Explanation:</b> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i, and you need convert it to the form of 0+-2i.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The input strings will not have extra blank.</li>\r\n<li>The input strings will be given in the form of <b>a+bi</b>, where the integer <b>a</b> and <b>b</b> will both belong to the range of [-100, 100]. And <b>the output should be also in this form</b>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u8868\u793a<a href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\">\u590d\u6570</a>\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u8fd4\u56de\u8868\u793a\u5b83\u4eec\u4e58\u79ef\u7684\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u6839\u636e\u5b9a\u4e49 i<sup>2</sup> = -1 \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;1+1i&quot;, &quot;1+1i&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0+2i&quot;\n<strong>\u89e3\u91ca:</strong> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i \uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a 0+2i \u7684\u5f62\u5f0f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;1+-1i&quot;, &quot;1+-1i&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0+-2i&quot;\n<strong>\u89e3\u91ca:</strong> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i \uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a 0+-2i \u7684\u5f62\u5f0f\u3002 \n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u989d\u5916\u7684\u7a7a\u683c\u3002</li>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u5c06\u4ee5&nbsp;<strong>a+bi</strong> \u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5176\u4e2d\u6574\u6570 <strong>a</strong> \u548c <strong>b</strong> \u7684\u8303\u56f4\u5747\u5728 [-100, 100] \u4e4b\u95f4\u3002<strong>\u8f93\u51fa\u4e5f\u5e94\u5f53\u7b26\u5408\u8fd9\u79cd\u5f62\u5f0f</strong>\u3002</li>\n</ol>\n", "tags_en": ["Math", "String"], "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string complexNumberMultiply(string a, string b) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String complexNumberMultiply(String a, String b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def complexNumberMultiply(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def complexNumberMultiply(self, a: str, b: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * complexNumberMultiply(char * a, char * b){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ComplexNumberMultiply(string a, string b) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar complexNumberMultiply = function(a, b) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef complex_number_multiply(a, b)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func complexNumberMultiply(_ a: String, _ b: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func complexNumberMultiply(a string, b string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def complexNumberMultiply(a: String, b: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun complexNumberMultiply(a: String, b: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn complex_number_multiply(a: String, b: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function complexNumberMultiply($a, $b) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function complexNumberMultiply(a: string, b: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0538", "frontend_question_id": "0538", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/convert-bst-to-greater-tree", "url_en": "https://leetcode.com/problems/convert-bst-to-greater-tree", "relative_path_cn": "/leetcode/0500-0599/0538.Convert%20BST%20to%20Greater%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0538.Convert%20BST%20to%20Greater%20Tree/README_EN.md", "title_cn": "\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811", "title_en": "Convert BST to Greater Tree", "question_title_slug": "convert-bst-to-greater-tree", "content_en": "<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n\n<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys&nbsp;<strong>less than</strong>&nbsp;the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys&nbsp;<strong>greater than</strong>&nbsp;the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p><strong>Note:</strong> This question is the same as&nbsp;1038:&nbsp;<a href=\"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/02/tree.png\" style=\"width: 550px; height: 375px;\" />\n<pre>\n<strong>Input:</strong> root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>Output:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0,null,1]\n<strong>Output:</strong> [1,null,1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,0,2]\n<strong>Output:</strong> [3,3,2]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [3,2,4,1]\n<strong>Output:</strong> [7,9,4,10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u4e8c\u53c9<strong> \u641c\u7d22 </strong>\u6811\u7684\u6839\u8282\u70b9\uff0c\u8be5\u6811\u7684\u8282\u70b9\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811\uff08Greater Sum Tree\uff09\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9 <code>node</code>&nbsp;\u7684\u65b0\u503c\u7b49\u4e8e\u539f\u6811\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>node.val</code>&nbsp;\u7684\u503c\u4e4b\u548c\u3002</p>\n\n<p>\u63d0\u9192\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u6ee1\u8db3\u4e0b\u5217\u7ea6\u675f\u6761\u4ef6\uff1a</p>\n\n<ul>\n\t<li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4ec5\u5305\u542b\u952e<strong> \u5c0f\u4e8e </strong>\u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li>\n\t<li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4ec5\u5305\u542b\u952e<strong> \u5927\u4e8e</strong> \u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li>\n\t<li>\u5de6\u53f3\u5b50\u6811\u4e5f\u5fc5\u987b\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li>\n</ul>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u672c\u9898\u548c 1038:&nbsp;<a href=\"https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/\">https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/</a> \u76f8\u540c</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\" style=\"height: 364px; width: 534px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>\u8f93\u51fa\uff1a</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [0,null,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,null,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,0,2]\n<strong>\u8f93\u51fa\uff1a</strong>[3,3,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [3,2,4,1]\n<strong>\u8f93\u51fa\uff1a</strong>[7,9,4,10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e <code>0</code>&nbsp;\u548c <code>10<sup>4</sup></code><sup>&nbsp;</sup>\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e <code>-10<sup>4</sup></code>&nbsp;\u548c&nbsp;<code>10<sup>4</sup></code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6811\u4e2d\u7684\u6240\u6709\u503c <strong>\u4e92\u4e0d\u76f8\u540c</strong> \u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6811\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* convertBST(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public TreeNode ConvertBST(TreeNode root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar convertBST = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {TreeNode}\ndef convert_bst(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func convertBST(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc convertBST(root *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def convertBST(root: TreeNode): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun convertBST(root: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn convert_bst(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function convertBST($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction convertBST(root: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0539", "frontend_question_id": "0539", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-time-difference", "url_en": "https://leetcode.com/problems/minimum-time-difference", "relative_path_cn": "/leetcode/0500-0599/0539.Minimum%20Time%20Difference/README.md", "relative_path_en": "/leetcode/0500-0599/0539.Minimum%20Time%20Difference/README_EN.md", "title_cn": "\u6700\u5c0f\u65f6\u95f4\u5dee", "title_en": "Minimum Time Difference", "question_title_slug": "minimum-time-difference", "content_en": "Given a list of 24-hour clock time points in <strong>&quot;HH:MM&quot;</strong> format, return <em>the minimum <b>minutes</b> difference between any two time-points in the list</em>.\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> timePoints = [\"23:59\",\"00:00\"]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= timePoints &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>timePoints[i]</code> is in the format <strong>&quot;HH:MM&quot;</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a 24 \u5c0f\u65f6\u5236\uff08\u5c0f\u65f6:\u5206\u949f <strong>\"HH:MM\"</strong>\uff09\u7684\u65f6\u95f4\u5217\u8868\uff0c\u627e\u51fa\u5217\u8868\u4e2d\u4efb\u610f\u4e24\u4e2a\u65f6\u95f4\u7684\u6700\u5c0f\u65f6\u95f4\u5dee\u5e76\u4ee5\u5206\u949f\u6570\u8868\u793a\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>timePoints = [\"23:59\",\"00:00\"]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 <= timePoints <= 2 * 10<sup>4</sup></code></li>\n\t<li><code>timePoints[i]</code> \u683c\u5f0f\u4e3a <strong>\"HH:MM\"</strong></li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMinDifference(vector<string>& timePoints) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findMinDifference(List<String> timePoints) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findMinDifference(self, timePoints):\n        \"\"\"\n        :type timePoints: List[str]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findMinDifference(self, timePoints: List[str]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findMinDifference(char ** timePoints, int timePointsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindMinDifference(IList<string> timePoints) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} timePoints\n * @return {number}\n */\nvar findMinDifference = function(timePoints) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} time_points\n# @return {Integer}\ndef find_min_difference(time_points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findMinDifference(_ timePoints: [String]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findMinDifference(timePoints []string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findMinDifference(timePoints: List[String]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findMinDifference(timePoints: List<String>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_min_difference(time_points: Vec<String>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $timePoints\n     * @return Integer\n     */\n    function findMinDifference($timePoints) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findMinDifference(timePoints: string[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0540", "frontend_question_id": "0540", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/single-element-in-a-sorted-array", "url_en": "https://leetcode.com/problems/single-element-in-a-sorted-array", "relative_path_cn": "/leetcode/0500-0599/0540.Single%20Element%20in%20a%20Sorted%20Array/README.md", "relative_path_en": "/leetcode/0500-0599/0540.Single%20Element%20in%20a%20Sorted%20Array/README_EN.md", "title_cn": "\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u5355\u4e00\u5143\u7d20", "title_en": "Single Element in a Sorted Array", "question_title_slug": "single-element-in-a-sorted-array", "content_en": "<p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly&nbsp;once. Find this single element that appears only once.</p>\r\n\r\n<p><b>Follow up:</b> Your solution should run in O(log n) time and O(1) space.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<pre><strong>Input:</strong> nums = [1,1,2,3,3,4,4,8,8]\r\n<strong>Output:</strong> 2\r\n</pre><p><strong>Example 2:</strong></p>\r\n<pre><strong>Input:</strong> nums = [3,3,7,7,10,11,11]\r\n<strong>Output:</strong> 10\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\r\n\t<li><code>0 &lt;= nums[i]&nbsp;&lt;= 10^5</code></li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6574\u6570\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c\u552f\u6709\u4e00\u4e2a\u6570\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,2,3,3,4,4,8,8]\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,3,7,7,10,11,11]\n<strong>\u8f93\u51fa:</strong> 10\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u60a8\u7684\u65b9\u6848\u5e94\u8be5\u5728 O(log n)\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u4e2d\u8fd0\u884c\u3002</p>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int singleNonDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint singleNonDuplicate(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SingleNonDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNonDuplicate = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_non_duplicate(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func singleNonDuplicate(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func singleNonDuplicate(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def singleNonDuplicate(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun singleNonDuplicate(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn single_non_duplicate(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNonDuplicate($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function singleNonDuplicate(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0541", "frontend_question_id": "0541", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-string-ii", "url_en": "https://leetcode.com/problems/reverse-string-ii", "relative_path_cn": "/leetcode/0500-0599/0541.Reverse%20String%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0541.Reverse%20String%20II/README_EN.md", "title_cn": "\u53cd\u8f6c\u5b57\u7b26\u4e32 II", "title_en": "Reverse String II", "question_title_slug": "reverse-string-ii", "content_en": "</p>\r\nGiven a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> s = \"abcdefg\", k = 2\r\n<b>Output:</b> \"bacdfeg\"\r\n</pre>\r\n</p>\r\n\r\n<b>Restrictions:</b> </b>\r\n<ol>\r\n<li> The string consists of lower English letters only.</li>\r\n<li> Length of the given string and k will in the range [1, 10000]</li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code>\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u9694&nbsp;<code>2k</code> \u4e2a\u5b57\u7b26\u7684\u524d <code>k</code> \u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002</p>\n\n<ul>\n\t<li>\u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c11\u4e8e <code>k</code> \u4e2a\uff0c\u5219\u5c06\u5269\u4f59\u5b57\u7b26\u5168\u90e8\u53cd\u8f6c\u3002</li>\n\t<li>\u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c0f\u4e8e <code>2k</code> \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e <code>k</code> \u4e2a\uff0c\u5219\u53cd\u8f6c\u524d <code>k</code> \u4e2a\u5b57\u7b26\uff0c\u5176\u4f59\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;abcdefg&quot;, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;bacdfeg&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c <code>k</code> \u5728 <code>[1, 10000]</code> \u8303\u56f4\u5185\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseStr(string s, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reverseStr(String s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseStr(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * reverseStr(char * s, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReverseStr(string s, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar reverseStr = function(s, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef reverse_str(s, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseStr(_ s: String, _ k: Int) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseStr(s string, k int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseStr(s: String, k: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseStr(s: String, k: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_str(s: String, k: i32) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function reverseStr($s, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverseStr(s: string, k: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0542", "frontend_question_id": "0542", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/01-matrix", "url_en": "https://leetcode.com/problems/01-matrix", "relative_path_cn": "/leetcode/0500-0599/0542.01%20Matrix/README.md", "relative_path_en": "/leetcode/0500-0599/0542.01%20Matrix/README_EN.md", "title_cn": "01 \u77e9\u9635", "title_en": "01 Matrix", "question_title_slug": "01-matrix", "content_en": "<p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p>\r\n\r\n<p>The distance between two adjacent cells is 1.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1: </b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[[0,0,0],\r\n [0,1,0],\r\n [0,0,0]]\r\n\r\n<strong>Output:</strong>\r\n[[0,0,0],\r\n&nbsp;[0,1,0],\r\n&nbsp;[0,0,0]]\r\n</pre>\r\n\r\n<p><b>Example 2: </b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[[0,0,0],\r\n [0,1,0],\r\n [1,1,1]]\r\n\r\n<strong>Output:</strong>\r\n[[0,0,0],\r\n [0,1,0],\r\n [1,2,1]]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The number of elements of the given matrix will not exceed 10,000.</li>\r\n\t<li>There are at least one 0 in the given matrix.</li>\r\n\t<li>The cells are adjacent in only four directions: up, down, left and right.</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002</p>\n\n<p>\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002</p>\n\n<p>\u00a0</p>\n\n<p><b>\u793a\u4f8b 1\uff1a</b></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[[0,0,0],\n [0,1,0],\n [0,0,0]]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n[[0,0,0],\n\u00a0[0,1,0],\n\u00a0[0,0,0]]\n</pre>\n\n<p><b>\u793a\u4f8b 2\uff1a</b></p>\n\n<pre>\n<b>\u8f93\u5165\uff1a</b>\n[[0,0,0],\n [0,1,0],\n [1,1,1]]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n[[0,0,0],\n [0,1,0],\n [1,2,1]]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002</li>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002</li>\n\t<li>\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002</li>\n</ul>\n", "tags_en": ["Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def updateMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** updateMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] UpdateMatrix(int[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar updateMatrix = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef update_matrix(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\r\n    func updateMatrix(_ matrix: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func updateMatrix(matrix [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def updateMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun updateMatrix(matrix: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn update_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function updateMatrix($matrix) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function updateMatrix(matrix: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0543", "frontend_question_id": "0543", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/diameter-of-binary-tree", "url_en": "https://leetcode.com/problems/diameter-of-binary-tree", "relative_path_cn": "/leetcode/0500-0599/0543.Diameter%20of%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0543.Diameter%20of%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u76f4\u5f84", "title_en": "Diameter of Binary Tree", "question_title_slug": "diameter-of-binary-tree", "content_en": "<p>\r\nGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <b>longest</b> path between any two nodes in a tree. This path may or may not pass through the root.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b><br />\r\nGiven a binary tree <br />\r\n<pre>\r\n          1\r\n         / \\\r\n        2   3\r\n       / \\     \r\n      4   5    \r\n</pre>\r\n</p>\r\n<p>\r\nReturn <b>3</b>, which is the length of the path [4,2,1,3] or [5,2,1,3].\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of path between two nodes is represented by the number of edges between them.\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5b83\u7684\u76f4\u5f84\u957f\u5ea6\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u662f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7a7f\u8fc7\u4e5f\u53ef\u80fd\u4e0d\u7a7f\u8fc7\u6839\u7ed3\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b :</strong><br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811</p>\n\n<pre>          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n\n<p>\u8fd4\u56de&nbsp;<strong>3</strong>, \u5b83\u7684\u957f\u5ea6\u662f\u8def\u5f84 [4,2,1,3] \u6216\u8005&nbsp;[5,2,1,3]\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u4e24\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u662f\u4ee5\u5b83\u4eec\u4e4b\u95f4\u8fb9\u7684\u6570\u76ee\u8868\u793a\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def diameterOfBinaryTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint diameterOfBinaryTree(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int DiameterOfBinaryTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef diameter_of_binary_tree(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func diameterOfBinaryTree(_ root: TreeNode?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc diameterOfBinaryTree(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def diameterOfBinaryTree(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun diameterOfBinaryTree(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn diameter_of_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function diameterOfBinaryTree($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction diameterOfBinaryTree(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0544", "frontend_question_id": "0544", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/output-contest-matches", "url_en": "https://leetcode.com/problems/output-contest-matches", "relative_path_cn": "/leetcode/0500-0599/0544.Output%20Contest%20Matches/README.md", "relative_path_en": "/leetcode/0500-0599/0544.Output%20Contest%20Matches/README_EN.md", "title_cn": "\u8f93\u51fa\u6bd4\u8d5b\u5339\u914d\u5bf9", "title_en": "Output Contest Matches", "question_title_slug": "output-contest-matches", "content_en": null, "content_cn": null, "tags_en": ["Recursion", "String"], "tags_cn": ["\u9012\u5f52", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0545", "frontend_question_id": "0545", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/boundary-of-binary-tree", "url_en": "https://leetcode.com/problems/boundary-of-binary-tree", "relative_path_cn": "/leetcode/0500-0599/0545.Boundary%20of%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0545.Boundary%20of%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u8fb9\u754c", "title_en": "Boundary of Binary Tree", "question_title_slug": "boundary-of-binary-tree", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0546", "frontend_question_id": "0546", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-boxes", "url_en": "https://leetcode.com/problems/remove-boxes", "relative_path_cn": "/leetcode/0500-0599/0546.Remove%20Boxes/README.md", "relative_path_en": "/leetcode/0500-0599/0546.Remove%20Boxes/README_EN.md", "title_cn": "\u79fb\u9664\u76d2\u5b50", "title_en": "Remove Boxes", "question_title_slug": "remove-boxes", "content_en": "<p>Given several boxes with different colors represented by different positive numbers.<br />\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k &gt;= 1), remove them and get <code>k*k</code> points.<br />\nFind the maximum points you can get.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,3,2,2,2,3,4,3,1]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 points) \n----&gt; [1, 1] (3*3=9 points) \n----&gt; [] (2*2=4 points)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= boxes.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e9b\u4e0d\u540c\u989c\u8272\u7684\u76d2\u5b50\uff0c\u76d2\u5b50\u7684\u989c\u8272\u7531\u6570\u5b57\u8868\u793a\uff0c\u5373\u4e0d\u540c\u7684\u6570\u5b57\u8868\u793a\u4e0d\u540c\u7684\u989c\u8272\u3002<br>\n\u4f60\u5c06\u7ecf\u8fc7\u82e5\u5e72\u8f6e\u64cd\u4f5c\u53bb\u53bb\u6389\u76d2\u5b50\uff0c\u76f4\u5230\u6240\u6709\u7684\u76d2\u5b50\u90fd\u53bb\u6389\u4e3a\u6b62\u3002\u6bcf\u4e00\u8f6e\u4f60\u53ef\u4ee5\u79fb\u9664\u5177\u6709\u76f8\u540c\u989c\u8272\u7684\u8fde\u7eed k \u4e2a\u76d2\u5b50\uff08k&nbsp;&gt;= 1\uff09\uff0c\u8fd9\u6837\u4e00\u8f6e\u4e4b\u540e\u4f60\u5c06\u5f97\u5230 <code>k*k</code> \u4e2a\u79ef\u5206\u3002<br>\n\u5f53\u4f60\u5c06\u6240\u6709\u76d2\u5b50\u90fd\u53bb\u6389\u4e4b\u540e\uff0c\u6c42\u4f60\u80fd\u83b7\u5f97\u7684\u6700\u5927\u79ef\u5206\u548c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>boxes = [1,3,2,2,2,3,4,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>23\n<strong>\u89e3\u91ca\uff1a</strong>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 \u5206) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 \u5206) \n----&gt; [1, 1] (3*3=9 \u5206) \n----&gt; [] (2*2=4 \u5206)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= boxes.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int removeBoxes(vector<int>& boxes) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int removeBoxes(int[] boxes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeBoxes(self, boxes):\n        \"\"\"\n        :type boxes: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeBoxes(self, boxes: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint removeBoxes(int* boxes, int boxesSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RemoveBoxes(int[] boxes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} boxes\n * @return {number}\n */\nvar removeBoxes = function(boxes) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} boxes\n# @return {Integer}\ndef remove_boxes(boxes)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeBoxes(_ boxes: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func removeBoxes(boxes []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeBoxes(boxes: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeBoxes(boxes: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_boxes(boxes: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $boxes\n     * @return Integer\n     */\n    function removeBoxes($boxes) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeBoxes(boxes: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0547", "frontend_question_id": "0547", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/friend-circles", "url_en": "https://leetcode.com/problems/friend-circles", "relative_path_cn": "/leetcode/0500-0599/0547.Friend%20Circles/README.md", "relative_path_en": "/leetcode/0500-0599/0547.Friend%20Circles/README_EN.md", "title_cn": "\u670b\u53cb\u5708", "title_en": "Friend Circles", "question_title_slug": "friend-circles", "content_en": "<p>There are <b>N</b> students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a <b>direct</b> friend of B, and B is a <b>direct</b> friend of C, then A is an <b>indirect</b> friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.</p>\n\n<p>Given a <b>N*N</b> matrix <b>M</b> representing the friend relationship between students in the class. If M[i][j] = 1, then the i<sub>th</sub> and j<sub>th</sub> students are <b>direct</b> friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input:</b> \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<b>Output:</b> 2\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, so they are in a friend circle. \nThe 2<sub>nd</sub> student himself is in a friend circle. So return 2.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b> \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<b>Output:</b> 1\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, the 1<sub>st</sub> and 2<sub>nd</sub> students are direct friends, \nso the 0<sub>th</sub> and 2<sub>nd</sub> students are indirect friends. All of them are in the same friend circle, so return 1.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 200</code></li>\n\t<li><code>M[i][i] == 1</code></li>\n\t<li><code>M[i][j] == M[j][i]</code></li>\n</ul>\n", "content_cn": "<p>\u73ed\u4e0a\u6709&nbsp;<strong>N&nbsp;</strong>\u540d\u5b66\u751f\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u670b\u53cb\uff0c\u6709\u4e9b\u5219\u4e0d\u662f\u3002\u4ed6\u4eec\u7684\u53cb\u8c0a\u5177\u6709\u662f\u4f20\u9012\u6027\u3002\u5982\u679c\u5df2\u77e5 A \u662f B&nbsp;\u7684\u670b\u53cb\uff0cB \u662f C&nbsp;\u7684\u670b\u53cb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a A \u4e5f\u662f C&nbsp;\u7684\u670b\u53cb\u3002\u6240\u8c13\u7684\u670b\u53cb\u5708\uff0c\u662f\u6307\u6240\u6709\u670b\u53cb\u7684\u96c6\u5408\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<strong>N * N&nbsp;</strong>\u7684\u77e9\u9635&nbsp;<strong>M</strong>\uff0c\u8868\u793a\u73ed\u7ea7\u4e2d\u5b66\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5982\u679cM[i][j] = 1\uff0c\u8868\u793a\u5df2\u77e5\u7b2c i \u4e2a\u548c j \u4e2a\u5b66\u751f<strong>\u4e92\u4e3a</strong>\u670b\u53cb\u5173\u7cfb\uff0c\u5426\u5219\u4e3a\u4e0d\u77e5\u9053\u3002\u4f60\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u5b66\u751f\u4e2d\u7684\u5df2\u77e5\u7684\u670b\u53cb\u5708\u603b\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>2 \n<strong>\u89e3\u91ca\uff1a</strong>\u5df2\u77e5\u5b66\u751f 0 \u548c\u5b66\u751f 1 \u4e92\u4e3a\u670b\u53cb\uff0c\u4ed6\u4eec\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\n\u7b2c2\u4e2a\u5b66\u751f\u81ea\u5df1\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\u6240\u4ee5\u8fd4\u56de 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u5df2\u77e5\u5b66\u751f 0 \u548c\u5b66\u751f 1 \u4e92\u4e3a\u670b\u53cb\uff0c\u5b66\u751f 1 \u548c\u5b66\u751f 2 \u4e92\u4e3a\u670b\u53cb\uff0c\u6240\u4ee5\u5b66\u751f 0 \u548c\u5b66\u751f 2 \u4e5f\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u5728\u4e00\u4e2a\u670b\u53cb\u5708\uff0c\u8fd4\u56de 1 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 200</code></li>\n\t<li><code>M[i][i] == 1</code></li>\n\t<li><code>M[i][j] == M[j][i]</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& M) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findCircleNum(int[][] M) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findCircleNum(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findCircleNum(int** M, int MSize, int* MColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindCircleNum(int[][] M) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} M\n * @return {number}\n */\nvar findCircleNum = function(M) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} m\n# @return {Integer}\ndef find_circle_num(m)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findCircleNum(_ M: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findCircleNum(M [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findCircleNum(M: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findCircleNum(M: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_circle_num(m: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $M\n     * @return Integer\n     */\n    function findCircleNum($M) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findCircleNum(M: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0548", "frontend_question_id": "0548", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/split-array-with-equal-sum", "url_en": "https://leetcode.com/problems/split-array-with-equal-sum", "relative_path_cn": "/leetcode/0500-0599/0548.Split%20Array%20with%20Equal%20Sum/README.md", "relative_path_en": "/leetcode/0500-0599/0548.Split%20Array%20with%20Equal%20Sum/README_EN.md", "title_cn": "\u5c06\u6570\u7ec4\u5206\u5272\u6210\u548c\u76f8\u7b49\u7684\u5b50\u6570\u7ec4", "title_en": "Split Array with Equal Sum", "question_title_slug": "split-array-with-equal-sum", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0549", "frontend_question_id": "0549", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/binary-tree-longest-consecutive-sequence-ii", "url_en": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii", "relative_path_cn": "/leetcode/0500-0599/0549.Binary%20Tree%20Longest%20Consecutive%20Sequence%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0549.Binary%20Tree%20Longest%20Consecutive%20Sequence%20II/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u4e2d\u6700\u957f\u7684\u8fde\u7eed\u5e8f\u5217", "title_en": "Binary Tree Longest Consecutive Sequence II", "question_title_slug": "binary-tree-longest-consecutive-sequence-ii", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "1182", "frontend_question_id": "0550", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/game-play-analysis-iv", "url_en": "https://leetcode.com/problems/game-play-analysis-iv", "relative_path_cn": "/leetcode/0500-0599/0550.Game%20Play%20Analysis%20IV/README.md", "relative_path_en": "/leetcode/0500-0599/0550.Game%20Play%20Analysis%20IV/README_EN.md", "title_cn": "\u6e38\u620f\u73a9\u6cd5\u5206\u6790 IV", "title_en": "Game Play Analysis IV", "question_title_slug": "game-play-analysis-iv", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0551", "frontend_question_id": "0551", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/student-attendance-record-i", "url_en": "https://leetcode.com/problems/student-attendance-record-i", "relative_path_cn": "/leetcode/0500-0599/0551.Student%20Attendance%20Record%20I/README.md", "relative_path_en": "/leetcode/0500-0599/0551.Student%20Attendance%20Record%20I/README_EN.md", "title_cn": "\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 I", "title_en": "Student Attendance Record I", "question_title_slug": "student-attendance-record-i", "content_en": "You are given a string representing an attendance record for a student. The record only contains the following three characters:\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA student could be rewarded if his attendance record doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.    </p>\r\n\r\n<p>You need to return whether the student could be rewarded according to his attendance record.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"PPALLP\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"PPALLL\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u4ee3\u8868\u4e00\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\uff0c\u8fd9\u4e2a\u8bb0\u5f55\u4ec5\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u5b57\u7b26\uff1a</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent\uff0c\u7f3a\u52e4</li>\n\t<li><strong>&#39;L&#39;</strong> : Late\uff0c\u8fdf\u5230</li>\n\t<li><strong>&#39;P&#39;</strong> : Present\uff0c\u5230\u573a</li>\n</ol>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\u4e2d\u4e0d<strong>\u8d85\u8fc7\u4e00\u4e2a&#39;A&#39;(\u7f3a\u52e4)</strong>\u5e76\u4e14<strong>\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684&#39;L&#39;(\u8fdf\u5230)</strong>,\u90a3\u4e48\u8fd9\u4e2a\u5b66\u751f\u4f1a\u88ab\u5956\u8d4f\u3002</p>\n\n<p>\u4f60\u9700\u8981\u6839\u636e\u8fd9\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\u5224\u65ad\u4ed6\u662f\u5426\u4f1a\u88ab\u5956\u8d4f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;PPALLP&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;PPALLL&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkRecord(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkRecord(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkRecord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkRecord(self, s: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkRecord(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckRecord(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkRecord = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Boolean}\ndef check_record(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkRecord(_ s: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkRecord(s string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkRecord(s: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkRecord(s: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_record(s: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkRecord($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkRecord(s: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0552", "frontend_question_id": "0552", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/student-attendance-record-ii", "url_en": "https://leetcode.com/problems/student-attendance-record-ii", "relative_path_cn": "/leetcode/0500-0599/0552.Student%20Attendance%20Record%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0552.Student%20Attendance%20Record%20II/README_EN.md", "title_cn": "\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 II", "title_en": "Student Attendance Record II", "question_title_slug": "student-attendance-record-ii", "content_en": "<p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>A student attendance record is a string that only contains the following three characters:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA record is regarded as rewardable if it doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 2\r\n<b>Output:</b> 8 \r\n<b>Explanation:</b>\r\nThere are 8 records with length 2 will be regarded as rewardable:\r\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\r\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe value of <b>n</b> won't exceed 100,000.\r\n</p>\r\n\r\n\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<strong>n</strong>\uff0c\u8fd4\u56de\u957f\u5ea6\u4e3a n \u7684\u6240\u6709\u53ef\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\u7684\u51fa\u52e4\u8bb0\u5f55\u7684\u6570\u91cf\u3002 \u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8fd4\u56de\u7ed3\u679cmod 10<sup>9</sup> + 7\u7684\u503c\u3002</p>\n\n<p>\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55\u662f\u53ea\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff1a</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent\uff0c\u7f3a\u52e4</li>\n\t<li><strong>&#39;L&#39;</strong> : Late\uff0c\u8fdf\u5230</li>\n\t<li><strong>&#39;P&#39;</strong> : Present\uff0c\u5230\u573a</li>\n</ol>\n\n<p>\u5982\u679c\u8bb0\u5f55\u4e0d\u5305\u542b<strong>\u591a\u4e8e\u4e00\u4e2a&#39;A&#39;\uff08\u7f3a\u52e4\uff09</strong>\u6216<strong>\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684&#39;L&#39;\uff08\u8fdf\u5230\uff09</strong>\uff0c\u5219\u8be5\u8bb0\u5f55\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 2\n<strong>\u8f93\u51fa:</strong> 8 <strong>\n\u89e3\u91ca\uff1a</strong>\n\u67098\u4e2a\u957f\u5ea6\u4e3a2\u7684\u8bb0\u5f55\u5c06\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\uff1a\n&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\n\u53ea\u6709&quot;AA&quot;\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\uff0c\u56e0\u4e3a\u7f3a\u52e4\u6b21\u6570\u8d85\u8fc7\u4e00\u6b21\u3002</pre>\n\n<p><strong>\u6ce8\u610f\uff1an </strong>\u7684\u503c\u4e0d\u4f1a\u8d85\u8fc7100000\u3002</p>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int checkRecord(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int checkRecord(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint checkRecord(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CheckRecord(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar checkRecord = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef check_record(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkRecord(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkRecord(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkRecord(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkRecord(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_record(n: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function checkRecord($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkRecord(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0553", "frontend_question_id": "0553", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/optimal-division", "url_en": "https://leetcode.com/problems/optimal-division", "relative_path_cn": "/leetcode/0500-0599/0553.Optimal%20Division/README.md", "relative_path_en": "/leetcode/0500-0599/0553.Optimal%20Division/README_EN.md", "title_cn": "\u6700\u4f18\u9664\u6cd5", "title_en": "Optimal Division", "question_title_slug": "optimal-division", "content_en": "<p>Given a list of <b>positive integers</b>, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.</p>\r\n\r\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the <b>maximum</b> result, and return the corresponding expression in string format. <b>Your expression should NOT contain redundant parenthesis.</b></p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [1000,100,10,2]\r\n<b>Output:</b> \"1000/(100/10/2)\"\r\n<b>Explanation:</b>\r\n1000/(100/10/2) = 1000/((100/10)/2) = 200\r\nHowever, the bold parenthesis in \"1000/(<b>(</b>100/10<b>)</b>/2)\" are redundant, <br/>since they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \r\n\r\nOther cases:\r\n1000/(100/10)/2 = 50\r\n1000/(100/(10/2)) = 50\r\n1000/100/10/2 = 0.5\r\n1000/100/(10/2) = 2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The length of the input array is [1, 10].</li>\r\n<li>Elements in the given array will be in range [2, 1000].</li>\r\n<li>There is only one optimal division for each test case.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong>\u6b63\u6574\u6570\uff0c</strong>\u76f8\u90bb\u7684\u6574\u6570\u4e4b\u95f4\u5c06\u4f1a\u8fdb\u884c\u6d6e\u70b9\u9664\u6cd5\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c&nbsp;[2,3,4] -&gt; 2 / 3 / 4 \u3002</p>\n\n<p>\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u4efb\u610f\u6570\u76ee\u7684\u62ec\u53f7\uff0c\u6765\u6539\u53d8\u7b97\u6570\u7684\u4f18\u5148\u7ea7\u3002\u4f60\u9700\u8981\u627e\u51fa\u600e\u4e48\u6dfb\u52a0\u62ec\u53f7\uff0c\u624d\u80fd\u5f97\u5230<strong>\u6700\u5927\u7684</strong>\u7ed3\u679c\uff0c\u5e76\u4e14\u8fd4\u56de\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u8868\u8fbe\u5f0f\u3002<strong>\u4f60\u7684\u8868\u8fbe\u5f0f\u4e0d\u5e94\u8be5\u542b\u6709\u5197\u4f59\u7684\u62ec\u53f7\u3002</strong></p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1000,100,10,2]\n<strong>\u8f93\u51fa:</strong> &quot;1000/(100/10/2)&quot;\n<strong>\u89e3\u91ca:</strong>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\n\u4f46\u662f\uff0c\u4ee5\u4e0b\u52a0\u7c97\u7684\u62ec\u53f7 &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; \u662f\u5197\u4f59\u7684\uff0c\n\u56e0\u4e3a\u4ed6\u4eec\u5e76\u4e0d\u5f71\u54cd\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de &quot;1000/(100/10/2)&quot;\u3002\n\n\u5176\u4ed6\u7528\u4f8b:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u5728 [1, 10] \u4e4b\u95f4\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u90fd\u5728 [2, 1000] \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u53ea\u6709\u4e00\u4e2a\u6700\u4f18\u9664\u6cd5\u89e3\u3002</li>\n</ol>\n", "tags_en": ["Math", "String"], "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string optimalDivision(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String optimalDivision(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def optimalDivision(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * optimalDivision(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string OptimalDivision(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar optimalDivision = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {String}\ndef optimal_division(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func optimalDivision(_ nums: [Int]) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func optimalDivision(nums []int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def optimalDivision(nums: Array[Int]): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun optimalDivision(nums: IntArray): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn optimal_division(nums: Vec<i32>) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function optimalDivision($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function optimalDivision(nums: number[]): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0554", "frontend_question_id": "0554", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/brick-wall", "url_en": "https://leetcode.com/problems/brick-wall", "relative_path_cn": "/leetcode/0500-0599/0554.Brick%20Wall/README.md", "relative_path_en": "/leetcode/0500-0599/0554.Brick%20Wall/README_EN.md", "title_cn": "\u7816\u5899", "title_en": "Brick Wall", "question_title_slug": "brick-wall", "content_en": "<p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the <b>top</b> to the <b>bottom</b> and cross the <b>least</b> bricks.</p>\r\n\r\n<p>The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.</p>\r\n\r\n<p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.</p>\r\n\r\n<p><b>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. </b></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,2,2,1],\r\n        [3,1,2],\r\n        [1,3,2],\r\n        [2,4],\r\n        [3,1,2],\r\n        [1,3,1,1]]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> \r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/brick_wall.png\" style=\"width: 100%; max-width: 350px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The width sum of bricks in different rows are the same and won&#39;t exceed INT_MAX.</li>\r\n\t<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won&#39;t exceed 20,000.</li>\r\n</ol>\r\n", "content_cn": "<p>\u4f60\u7684\u9762\u524d\u6709\u4e00\u5835\u77e9\u5f62\u7684\u3001\u7531\u591a\u884c\u7816\u5757\u7ec4\u6210\u7684\u7816\u5899\u3002&nbsp;\u8fd9\u4e9b\u7816\u5757\u9ad8\u5ea6\u76f8\u540c\u4f46\u662f\u5bbd\u5ea6\u4e0d\u540c\u3002\u4f60\u73b0\u5728\u8981\u753b\u4e00\u6761<strong>\u81ea\u9876\u5411\u4e0b</strong>\u7684\u3001\u7a7f\u8fc7<strong>\u6700\u5c11</strong>\u7816\u5757\u7684\u5782\u7ebf\u3002</p>\n\n<p>\u7816\u5899\u7531\u884c\u7684\u5217\u8868\u8868\u793a\u3002 \u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u4ee3\u8868\u4ece\u5de6\u81f3\u53f3\u6bcf\u5757\u7816\u7684\u5bbd\u5ea6\u7684\u6574\u6570\u5217\u8868\u3002</p>\n\n<p>\u5982\u679c\u4f60\u753b\u7684\u7ebf\u53ea\u662f\u4ece\u7816\u5757\u7684\u8fb9\u7f18\u7ecf\u8fc7\uff0c\u5c31\u4e0d\u7b97\u7a7f\u8fc7\u8fd9\u5757\u7816\u3002\u4f60\u9700\u8981\u627e\u51fa\u600e\u6837\u753b\u624d\u80fd\u4f7f\u8fd9\u6761\u7ebf\u7a7f\u8fc7\u7684\u7816\u5757\u6570\u91cf\u6700\u5c11\uff0c\u5e76\u4e14\u8fd4\u56de\u7a7f\u8fc7\u7684\u7816\u5757\u6570\u91cf\u3002</p>\n\n<p><strong>\u4f60\u4e0d\u80fd\u6cbf\u7740\u5899\u7684\u4e24\u4e2a\u5782\u76f4\u8fb9\u7f18\u4e4b\u4e00\u753b\u7ebf\uff0c\u8fd9\u6837\u663e\u7136\u662f\u6ca1\u6709\u7a7f\u8fc7\u4e00\u5757\u7816\u7684\u3002</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2,2,1],\n      [3,1,2],\n      [1,3,2],\n      [2,4],\n      [3,1,2],\n      [1,3,1,1]]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/brick_wall.png\" style=\"width: 100%;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e00\u884c\u7816\u5757\u7684\u5bbd\u5ea6\u4e4b\u548c\u5e94\u8be5\u76f8\u7b49\uff0c\u5e76\u4e14\u4e0d\u80fd\u8d85\u8fc7 INT_MAX\u3002</li>\n\t<li>\u6bcf\u4e00\u884c\u7816\u5757\u7684\u6570\u91cf\u5728&nbsp;[1,10,000] \u8303\u56f4\u5185\uff0c&nbsp;\u5899\u7684\u9ad8\u5ea6\u5728&nbsp;[1,10,000] \u8303\u56f4\u5185\uff0c&nbsp;\u603b\u7684\u7816\u5757\u6570\u91cf\u4e0d\u8d85\u8fc7 20,000\u3002</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int leastBricks(vector<vector<int>>& wall) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int leastBricks(List<List<Integer>> wall) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def leastBricks(self, wall):\n        \"\"\"\n        :type wall: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint leastBricks(int** wall, int wallSize, int* wallColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int LeastBricks(IList<IList<int>> wall) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} wall\n * @return {number}\n */\nvar leastBricks = function(wall) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} wall\n# @return {Integer}\ndef least_bricks(wall)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func leastBricks(_ wall: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func leastBricks(wall [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def leastBricks(wall: List[List[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun leastBricks(wall: List<List<Int>>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn least_bricks(wall: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $wall\n     * @return Integer\n     */\n    function leastBricks($wall) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function leastBricks(wall: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0555", "frontend_question_id": "0555", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/split-concatenated-strings", "url_en": "https://leetcode.com/problems/split-concatenated-strings", "relative_path_cn": "/leetcode/0500-0599/0555.Split%20Concatenated%20Strings/README.md", "relative_path_en": "/leetcode/0500-0599/0555.Split%20Concatenated%20Strings/README_EN.md", "title_cn": "\u5206\u5272\u8fde\u63a5\u5b57\u7b26\u4e32", "title_en": "Split Concatenated Strings", "question_title_slug": "split-concatenated-strings", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0556", "frontend_question_id": "0556", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/next-greater-element-iii", "url_en": "https://leetcode.com/problems/next-greater-element-iii", "relative_path_cn": "/leetcode/0500-0599/0556.Next%20Greater%20Element%20III/README.md", "relative_path_en": "/leetcode/0500-0599/0556.Next%20Greater%20Element%20III/README_EN.md", "title_cn": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 III", "title_en": "Next Greater Element III", "question_title_slug": "next-greater-element-iii", "content_en": "<p>Given a positive integer <code>n</code>, find <em>the smallest integer which has exactly the same digits existing in the integer</em> <code>n</code> <em>and is greater in value than</em> <code>n</code>. If no such positive integer exists, return <code>-1</code>.</p>\n\n<p><strong>Note</strong> that the returned integer should fit in <strong>32-bit integer</strong>, if there is a valid answer but it does not fit in <strong>32-bit integer</strong>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 12\n<strong>Output:</strong> 21\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 21\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>32\u4f4d</strong>\u6b63\u6574\u6570&nbsp;<strong>n</strong>\uff0c\u4f60\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684<strong>32\u4f4d</strong>\u6574\u6570\uff0c\u5176\u4e0e&nbsp;<strong>n&nbsp;</strong>\u4e2d\u5b58\u5728\u7684\u4f4d\u6570\u5b8c\u5168\u76f8\u540c\uff0c\u5e76\u4e14\u5176\u503c\u5927\u4e8en\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684<strong>32\u4f4d</strong>\u6574\u6570\uff0c\u5219\u8fd4\u56de-1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 12\n<strong>\u8f93\u51fa:</strong> 21\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 21\n<strong>\u8f93\u51fa:</strong> -1\n</pre>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int nextGreaterElement(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int nextGreaterElement(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nextGreaterElement(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint nextGreaterElement(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NextGreaterElement(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar nextGreaterElement = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef next_greater_element(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nextGreaterElement(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nextGreaterElement(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nextGreaterElement(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nextGreaterElement(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn next_greater_element(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function nextGreaterElement($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nextGreaterElement(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0557", "frontend_question_id": "0557", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-words-in-a-string-iii", "url_en": "https://leetcode.com/problems/reverse-words-in-a-string-iii", "relative_path_cn": "/leetcode/0500-0599/0557.Reverse%20Words%20in%20a%20String%20III/README.md", "relative_path_en": "/leetcode/0500-0599/0557.Reverse%20Words%20in%20a%20String%20III/README_EN.md", "title_cn": "\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III", "title_en": "Reverse Words in a String III", "question_title_slug": "reverse-words-in-a-string-iii", "content_en": "<p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"Let's take LeetCode contest\"\r\n<b>Output:</b> \"s'teL ekat edoCteeL tsetnoc\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nIn the string, each word is separated by single space and there will not be any extra space in the string.\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;Let&#39;s take LeetCode contest&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;s&#39;teL ekat edoCteeL tsetnoc&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><strong><strong><strong>\u63d0\u793a\uff1a</strong></strong></strong></strong></p>\n\n<ul>\n\t<li>\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string reverseWords(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String reverseWords(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * reverseWords(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ReverseWords(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef reverse_words(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func reverseWords(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def reverseWords(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun reverseWords(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn reverse_words(s: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseWords($s) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function reverseWords(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0773", "frontend_question_id": "0558", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees", "url_en": "https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees", "relative_path_cn": "/leetcode/0500-0599/0558.Logical%20OR%20of%20Two%20Binary%20Grids%20Represented%20as%20Quad-Trees/README.md", "relative_path_en": "/leetcode/0500-0599/0558.Logical%20OR%20of%20Two%20Binary%20Grids%20Represented%20as%20Quad-Trees/README_EN.md", "title_cn": "\u56db\u53c9\u6811\u4ea4\u96c6", "title_en": "Logical OR of Two Binary Grids Represented as Quad-Trees", "question_title_slug": "logical-or-of-two-binary-grids-represented-as-quad-trees", "content_en": "<p>A Binary Matrix is a matrix in which all the elements are either <strong>0</strong> or <strong>1</strong>.</p>\r\n\r\n<p>Given <code>quadTree1</code> and <code>quadTree2</code>. <code>quadTree1</code> represents a <code>n * n</code> binary matrix and <code>quadTree2</code> represents another&nbsp;<code>n * n</code> binary matrix.&nbsp;</p>\r\n\r\n<p>Return <em>a Quad-Tree</em> representing the <code>n * n</code> binary matrix which is the result of <strong>logical bitwise OR</strong> of the two binary matrixes represented by <code>quadTree1</code> and <code>quadTree2</code>.</p>\r\n\r\n<p>Notice that you can assign the value of a node to <strong>True</strong> or <strong>False</strong> when <code>isLeaf</code> is <strong>False</strong>, and both are <strong>accepted</strong> in the answer.</p>\r\n\r\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>\r\n\r\n<ul>\r\n\t<li><code>val</code>: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s.&nbsp;</li>\r\n\t<li><code>isLeaf</code>: True if the node is leaf node on the tree or False if the node has the four children.</li>\r\n</ul>\r\n\r\n<pre>\r\nclass Node {\r\n    public boolean val;\r\n&nbsp; &nbsp; public boolean isLeaf;\r\n&nbsp; &nbsp; public Node topLeft;\r\n&nbsp; &nbsp; public Node topRight;\r\n&nbsp; &nbsp; public Node bottomLeft;\r\n&nbsp; &nbsp; public Node bottomRight;\r\n}</pre>\r\n\r\n<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>\r\n\r\n<ol>\r\n\t<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>)&nbsp;set <code>isLeaf</code>&nbsp;True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>\r\n\t<li>If the current grid has different values, set <code>isLeaf</code> to False and&nbsp;set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>\r\n\t<li>Recurse for each of the children with the proper sub-grid.</li>\r\n</ol>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"width: 777px; height: 181px;\" />\r\n<p>If you want to know more about the Quad-Tree, you can refer to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</p>\r\n\r\n<p><strong>Quad-Tree&nbsp;format:</strong></p>\r\n\r\n<p>The input/output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>\r\n\r\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>\r\n\r\n<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list&nbsp;<code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt1.png\" style=\"width: 550px; height: 196px;\" /> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt2.png\" style=\"width: 550px; height: 278px;\" />\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>Output:</strong> [[0,0],[1,1],[1,1],[1,1],[1,0]]\n<strong>Explanation:</strong> quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don&#39;t have to construct the binary matrix to get the result tree.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qtr.png\" style=\"width: 777px; height: 222px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[1,0]]\n, quadTree2 = [[1,0]]\n<strong>Output:</strong> [[1,0]]\n<strong>Explanation:</strong> Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\n<strong>Output:</strong> [[1,1]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n<strong>Output:</strong> [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\n<strong>Output:</strong> [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>quadTree1</code> and <code>quadTree2</code> are both <strong>valid</strong> Quad-Trees each representing a <code>n * n</code> grid.</li>\n\t<li><code>n == 2^x</code> where <code>0 &lt;= x &lt;= 9</code>.</li>\n</ul>\n", "content_cn": "<p>\u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e0d\u662f 0 \u5c31\u662f <strong>1 </strong>\u3002</p>\n\n<p>\u7ed9\u4f60\u4e24\u4e2a\u56db\u53c9\u6811\uff0c<code>quadTree1</code> \u548c <code>quadTree2</code>\u3002\u5176\u4e2d <code>quadTree1</code> \u8868\u793a\u4e00\u4e2a <code>n * n</code> \u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u800c <code>quadTree2</code> \u8868\u793a\u53e6\u4e00\u4e2a <code>n * n</code> \u4e8c\u8fdb\u5236\u77e9\u9635\u3002</p>\n\n<p>\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u8868\u793a <code>n * n</code> \u4e8c\u8fdb\u5236\u77e9\u9635\u7684\u56db\u53c9\u6811\uff0c\u5b83\u662f <code>quadTree1</code> \u548c <code>quadTree2</code> \u6240\u8868\u793a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u77e9\u9635\u8fdb\u884c <strong>\u6309\u4f4d\u903b\u8f91\u6216\u8fd0\u7b97</strong> \u7684\u7ed3\u679c\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u5f53 <code>isLeaf</code> \u4e3a <strong>False </strong>\u65f6\uff0c\u4f60\u53ef\u4ee5\u628a <strong>True</strong> \u6216\u8005 <strong>False</strong> \u8d4b\u503c\u7ed9\u8282\u70b9\uff0c\u4e24\u79cd\u503c\u90fd\u4f1a\u88ab\u5224\u9898\u673a\u5236 <strong>\u63a5\u53d7</strong> \u3002</p>\n\n<p>\u56db\u53c9\u6811\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\u53ea\u6709\u56db\u4e2a\u5b50\u8282\u70b9\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a</p>\n\n<ul>\n\t<li><code>val</code>\uff1a\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u30021 \u5bf9\u5e94 <strong>True</strong>\uff0c0 \u5bf9\u5e94 <strong>False</strong>\uff1b</li>\n\t<li><code>isLeaf</code>: \u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6\u4e3a <strong>True</strong>\uff0c\u5982\u679c\u5b83\u6709 4 \u4e2a\u5b50\u8282\u70b9\u5219\u4e3a <strong>False</strong> \u3002</li>\n</ul>\n\n<pre>class Node {\n    public boolean val;\n&nbsp; &nbsp; public boolean isLeaf;\n&nbsp; &nbsp; public Node topLeft;\n&nbsp; &nbsp; public Node topRight;\n&nbsp; &nbsp; public Node bottomLeft;\n&nbsp; &nbsp; public Node bottomRight;\n}</pre>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u4e3a\u4e8c\u7ef4\u533a\u57df\u6784\u5efa\u56db\u53c9\u6811\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u5f53\u524d\u7f51\u683c\u7684\u503c\u76f8\u540c\uff08\u5373\uff0c\u5168\u4e3a <code>0</code> \u6216\u8005\u5168\u4e3a <code>1</code>\uff09\uff0c\u5c06 <code>isLeaf</code> \u8bbe\u4e3a True \uff0c\u5c06 <code>val</code> \u8bbe\u4e3a\u7f51\u683c\u76f8\u5e94\u7684\u503c\uff0c\u5e76\u5c06\u56db\u4e2a\u5b50\u8282\u70b9\u90fd\u8bbe\u4e3a Null \u7136\u540e\u505c\u6b62\u3002</li>\n\t<li>\u5982\u679c\u5f53\u524d\u7f51\u683c\u7684\u503c\u4e0d\u540c\uff0c\u5c06 <code>isLeaf</code> \u8bbe\u4e3a False\uff0c \u5c06 <code>val</code> \u8bbe\u4e3a\u4efb\u610f\u503c\uff0c\u7136\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c06\u5f53\u524d\u7f51\u683c\u5212\u5206\u4e3a\u56db\u4e2a\u5b50\u7f51\u683c\u3002</li>\n\t<li>\u4f7f\u7528\u9002\u5f53\u7684\u5b50\u7f51\u683c\u9012\u5f52\u6bcf\u4e2a\u5b50\u8282\u70b9\u3002</li>\n</ol>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"height: 181px; width: 777px;\"></p>\n\n<p>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a> \u3002</p>\n\n<p><strong>\u56db\u53c9\u6811\u683c\u5f0f\uff1a</strong></p>\n\n<p>\u8f93\u51fa\u4e3a\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u540e\u56db\u53c9\u6811\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u5176\u4e2d <code>null</code> \u8868\u793a\u8def\u5f84\u7ec8\u6b62\u7b26\uff0c\u5176\u4e0b\u9762\u4e0d\u5b58\u5728\u8282\u70b9\u3002</p>\n\n<p>\u5b83\u4e0e\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u975e\u5e38\u76f8\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u8282\u70b9\u4ee5\u5217\u8868\u5f62\u5f0f\u8868\u793a <code>[isLeaf, val]</code> \u3002</p>\n\n<p>\u5982\u679c <code>isLeaf</code> \u6216\u8005 <code>val</code> \u7684\u503c\u4e3a True \uff0c\u5219\u8868\u793a\u5b83\u5728\u5217\u8868&nbsp;<code>[isLeaf, val]</code> \u4e2d\u7684\u503c\u4e3a <strong>1</strong> \uff1b\u5982\u679c <code>isLeaf</code> \u6216\u8005 <code>val</code> \u7684\u503c\u4e3a False \uff0c\u5219\u8868\u793a\u503c\u4e3a <strong>0 </strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt1.png\" style=\"height: 196px; width: 550px;\"> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt2.png\" style=\"height: 278px; width: 550px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0],[1,1],[1,1],[1,1],[1,0]]\n<strong>\u89e3\u91ca\uff1a</strong>quadTree1 \u548c quadTree2 \u5982\u4e0a\u6240\u793a\u3002\u7531\u56db\u53c9\u6811\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u77e9\u9635\u4e5f\u5df2\u7ecf\u7ed9\u51fa\u3002\n\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6309\u4f4d\u903b\u8f91\u6216\u8fd0\u7b97\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u7684\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u7531\u4e00\u4e2a\u4f5c\u4e3a\u7ed3\u679c\u7684\u56db\u53c9\u6811\u8868\u793a\u3002\n\u6ce8\u610f\uff0c\u6211\u4eec\u5c55\u793a\u7684\u4e8c\u8fdb\u5236\u77e9\u9635\u4ec5\u4ec5\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u8bf4\u660e\u9898\u610f\uff0c\u4f60\u65e0\u9700\u6784\u9020\u4e8c\u8fdb\u5236\u77e9\u9635\u6765\u83b7\u5f97\u7ed3\u679c\u56db\u53c9\u6811\u3002\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qtr.png\" style=\"height: 222px; width: 777px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>quadTree1 = [[1,0]]\n, quadTree2 = [[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,0]]\n<strong>\u89e3\u91ca\uff1a</strong>\u4e24\u4e2a\u6570\u6240\u8868\u793a\u7684\u77e9\u9635\u5927\u5c0f\u90fd\u4e3a 1*1\uff0c\u503c\u5168\u4e3a 0 \n\u7ed3\u679c\u77e9\u9635\u5927\u5c0f\u4e3a 1*1\uff0c\u503c\u5168\u4e3a 0 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>quadTree1</code> \u548c <code>quadTree2</code> \u90fd\u662f\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u56db\u53c9\u6811\uff0c\u6bcf\u4e2a\u90fd\u4ee3\u8868\u4e00\u4e2a <code>n * n</code> \u7684\u77e9\u9635\u3002</li>\n\t<li><code>n == 2^x</code> \uff0c\u5176\u4e2d <code>0 &lt;= x &lt;= 9</code>.</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* intersect(Node* quadTree1, Node* quadTree2) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node() {}\n\n    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\n    public Node intersect(Node quadTree1, Node quadTree2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a QuadTree node.\nclass Node(object):\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution(object):\n    def intersect(self, quadTree1, quadTree2):\n        \"\"\"\n        :type quadTree1: Node\n        :type quadTree2: Node\n        :rtype: Node\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution:\n    def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a QuadTree node.\npublic class Node {\n    public bool val;\n    public bool isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node(){}\n    public Node(bool _val,bool _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n}\n*/\n\npublic class Solution {\n    public Node Intersect(Node quadTree1, Node quadTree2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n\n/**\n * @param {Node} quadTree1\n * @param {Node} quadTree2\n * @return {Node}\n */\nvar intersect = function(quadTree1, quadTree2) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a QuadTree node.\n# class Node\n#     attr_accessor :val, :isLeaf, :topLeft, :topRight, :bottomLeft, :bottomRight\n#     def initialize(val=false, isLeaf=false, topLeft=nil, topRight=nil, bottomLeft=nil, bottomRight=nil)\n#         @val = val\n#         @isLeaf = isLeaf\n#         @topLeft = topLeft\n#         @topRight = topRight\n#         @bottomLeft = bottomLeft\n#         @bottomRight = bottomRight\n#     end\n# end\n\n# @param {Node} quadTree1\n# @param {Node} quadTree2\n# @return {Node}\ndef intersect(quadTree1, quadTree2)\n\t\nend\n", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Bool\n *     public var isLeaf: Bool\n *     public var topLeft: Node?\n *     public var topRight: Node?\n *     public var bottomLeft: Node?\n *     public var bottomRight: Node?\n *     public init(_ val: Bool, _ isLeaf: Bool) {\n *         self.val = val\n *         self.isLeaf = isLeaf\n *         self.topLeft = nil\n *         self.topRight = nil\n *         self.bottomLeft = nil\n *         self.bottomRight = nil\n *     }\n * }\n */\n\nclass Solution {\n    func intersect(_ quadTree1: Node?, _ quadTree2: Node?) -> Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a QuadTree node.\n * type Node struct {\n *     Val bool\n *     IsLeaf bool\n *     TopLeft *Node\n *     TopRight *Node\n *     BottomLeft *Node\n *     BottomRight *Node\n * }\n */\n\nfunc intersect(quadTree1 *Node, quadTree2 *Node) *Node {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a QuadTree node.\n * class Node(var _value: Boolean, var _isLeaf: Boolean) {\n *   var value: Int = _value\n *   var isLeaf: Boolean = _isLeaf\n *   var topLeft: Node = null\n *   var topRight: Node = null\n *   var bottomLeft: Node = null\n *   var bottomRight: Node = null\n * }\n */\n\nobject Solution {\n    def intersect(quadTree1: Node, quadTree2: Node): Node = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a QuadTree node.\n * class Node(var `val`: Boolean, var isLeaf: Boolean) {\n *     var topLeft: Node? = null\n *     var topRight: Node? = null\n *     var bottomLeft: Node? = null\n *     var bottomRight: Node? = null\n * }\n */\n\nclass Solution {\n    fun intersect(quadTree1: Node?, quadTree2: Node?): Node? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a QuadTree node.\n * class Node {\n *     public $val = null;\n *     public $isLeaf = null;\n *     public $topLeft = null;\n *     public $topRight = null;\n *     public $bottomLeft = null;\n *     public $bottomRight = null;\n *     function __construct($val, $isLeaf) {\n *         $this->val = $val;\n *         $this->isLeaf = $isLeaf;\n *         $this->topLeft = null;\n *         $this->topRight = null;\n *         $this->bottomLeft = null;\n *         $this->bottomRight = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $quadTree1\n     * @param Node $quadTree2\n     * @return Node\n     */\n    function intersect($quadTree1, $quadTree2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for node.\n * class Node {\n *     val: boolean\n *     isLeaf: boolean\n *     topLeft: Node | null\n *     topRight: Node | null\n *     bottomLeft: Node | null\n *     bottomRight: Node | null\n *     constructor(val?: boolean, isLeaf?: boolean, topLeft?: Node, topRight?: Node, bottomLeft?: Node, bottomRight?: Node) {\n *         this.val = (val===undefined ? false : val)\n *         this.isLeaf = (isLeaf===undefined ? false : isLeaf)\n *         this.topLeft = (topLeft===undefined ? null : topLeft)\n *         this.topRight = (topRight===undefined ? null : topRight)\n *         this.bottomLeft = (bottomLeft===undefined ? null : bottomLeft)\n *         this.bottomRight = (bottomRight===undefined ? null : bottomRight)\n *     }\n * }\n */\n\nfunction intersect(quadTree1: Node | null, quadTree2: Node | null): Node | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0774", "frontend_question_id": "0559", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree", "url_en": "https://leetcode.com/problems/maximum-depth-of-n-ary-tree", "relative_path_cn": "/leetcode/0500-0599/0559.Maximum%20Depth%20of%20N-ary%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0559.Maximum%20Depth%20of%20N-ary%20Tree/README_EN.md", "title_cn": "N \u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6", "title_en": "Maximum Depth of N-ary Tree", "question_title_slug": "maximum-depth-of-n-ary-tree", "content_en": "<p>Given a n-ary tree, find its maximum depth.</p>\r\n\r\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\r\n\r\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>\n\t<li>The total number of nodes is between <code>[0,&nbsp;10<sup>4</sup>]</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u627e\u5230\u5176\u6700\u5927\u6df1\u5ea6\u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u6700\u5927\u6df1\u5ea6\u662f\u6307\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u603b\u6570\u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">N \u53c9\u6811\u8f93\u5165\u6309\u5c42\u5e8f\u904d\u5386\u5e8f\u5217\u5316\u8868\u793a\uff0c\u6bcf\u7ec4\u5b50\u8282\u70b9\u7531\u7a7a\u503c\u5206\u9694\uff08\u8bf7\u53c2\u89c1\u793a\u4f8b\uff09\u3002</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,3,2,4,null,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u7684\u6df1\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u00a0<code>1000</code> \u3002</li>\n\t<li>\u6811\u7684\u8282\u70b9\u6570\u76ee\u4f4d\u4e8e <code>[0,\u00a010<sup>4</sup>]</code> \u4e4b\u95f4\u3002</li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search", "Breadth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public int maxDepth(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def maxDepth(self, root: 'Node') -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\nint maxDepth(struct Node* root) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public int MaxDepth(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {int}\ndef maxDepth(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func maxDepth(_ root: Node?) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc maxDepth(root *Node) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def maxDepth(root: Node): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun maxDepth(root: Node?): Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer\n     */\n    function maxDepth($root) {\n    \t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     children: Node[]\n *     constructor(val?: number, children?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\nfunction maxDepth(root: Node): number {\n    \n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0560", "frontend_question_id": "0560", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subarray-sum-equals-k", "url_en": "https://leetcode.com/problems/subarray-sum-equals-k", "relative_path_cn": "/leetcode/0500-0599/0560.Subarray%20Sum%20Equals%20K/README.md", "relative_path_en": "/leetcode/0500-0599/0560.Subarray%20Sum%20Equals%20K/README_EN.md", "title_cn": "\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4", "title_en": "Subarray Sum Equals K", "question_title_slug": "subarray-sum-equals-k", "content_en": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of continuous subarrays whose sum equals to <code>k</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<strong>k\uff0c</strong>\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a&nbsp;<strong>k&nbsp;</strong>\u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>nums = [1,1,1], k = 2\n<strong>\u8f93\u51fa:</strong> 2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570&nbsp;<strong>k&nbsp;</strong>\u7684\u8303\u56f4\u662f&nbsp;[-1e7, 1e7]\u3002</li>\n</ol>\n", "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int subarraySum(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def subarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint subarraySum(int* nums, int numsSize, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func subarraySum(nums []int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def subarraySum(nums: Array[Int], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun subarraySum(nums: IntArray, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarraySum($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function subarraySum(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0561", "frontend_question_id": "0561", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/array-partition-i", "url_en": "https://leetcode.com/problems/array-partition-i", "relative_path_cn": "/leetcode/0500-0599/0561.Array%20Partition%20I/README.md", "relative_path_en": "/leetcode/0500-0599/0561.Array%20Partition%20I/README_EN.md", "title_cn": "\u6570\u7ec4\u62c6\u5206 I", "title_en": "Array Partition I", "question_title_slug": "array-partition-i", "content_en": "<p>Given an integer array <code>nums</code> of <code>2n</code> integers, group these integers into <code>n</code> pairs <code>(a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>)</code> such that the sum of <code>min(a<sub>i</sub>, b<sub>i</sub>)</code> for all <code>i</code> is <strong>maximized</strong>. Return<em> the maximized sum</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,2,6,5,1,2]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u957f\u5ea6\u4e3a\u00a0<code>2n</code><strong>\u00a0</strong>\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5c06\u8fd9\u4e9b\u6570\u5206\u6210\u00a0<code>n</code><strong> </strong>\u5bf9, \u4f8b\u5982 <code>(a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>)</code> \uff0c\u4f7f\u5f97\u4ece <code>1</code> \u5230\u00a0<code>n</code> \u7684 <code>min(a<sub>i</sub>, b<sub>i</sub>)</code> \u603b\u548c\u6700\u5927\u3002</p>\n\n<p>\u8fd4\u56de\u8be5 <strong>\u6700\u5927\u603b\u548c</strong> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,4,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6240\u6709\u53ef\u80fd\u7684\u5206\u6cd5\uff08\u5ffd\u7565\u5143\u7d20\u987a\u5e8f\uff09\u4e3a\uff1a\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\n\u6240\u4ee5\u6700\u5927\u603b\u548c\u4e3a 4</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [6,2,6,5,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>9\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u4f18\u7684\u5206\u6cd5\u4e3a (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 10<sup>4</sup></code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int arrayPairSum(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint arrayPairSum(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ArrayPairSum(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayPairSum = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef array_pair_sum(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arrayPairSum(_ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func arrayPairSum(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arrayPairSum(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arrayPairSum(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn array_pair_sum(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function arrayPairSum($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arrayPairSum(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0562", "frontend_question_id": "0562", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/longest-line-of-consecutive-one-in-matrix", "url_en": "https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix", "relative_path_cn": "/leetcode/0500-0599/0562.Longest%20Line%20of%20Consecutive%20One%20in%20Matrix/README.md", "relative_path_en": "/leetcode/0500-0599/0562.Longest%20Line%20of%20Consecutive%20One%20in%20Matrix/README_EN.md", "title_cn": "\u77e9\u9635\u4e2d\u6700\u957f\u7684\u8fde\u7eed1\u7ebf\u6bb5", "title_en": "Longest Line of Consecutive One in Matrix", "question_title_slug": "longest-line-of-consecutive-one-in-matrix", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0563", "frontend_question_id": "0563", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-tree-tilt", "url_en": "https://leetcode.com/problems/binary-tree-tilt", "relative_path_cn": "/leetcode/0500-0599/0563.Binary%20Tree%20Tilt/README.md", "relative_path_en": "/leetcode/0500-0599/0563.Binary%20Tree%20Tilt/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5761\u5ea6", "title_en": "Binary Tree Tilt", "question_title_slug": "binary-tree-tilt", "content_en": "<p>Given the <code>root</code> of a binary tree, return <em>the sum of every tree node&#39;s <strong>tilt</strong>.</em></p>\r\n\r\n<p>The <strong>tilt</strong> of a tree node is the <b>absolute difference</b> between the sum of all left subtree node <strong>values</strong> and all right subtree node <strong>values</strong>. If a node does not have a left child, then the sum of the left subtree node <strong>values</strong> is treated as <code>0</code>. The rule is similar if there the node does not have a right child.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg\" style=\"width: 712px; height: 182px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [1,2,3]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> \r\nTilt of node 2 : |0-0| = 0 (no children)\r\nTilt of node 3 : |0-0| = 0 (no children)\r\nTile of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\r\nSum of every tilt : 0 + 0 + 1 = 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg\" style=\"width: 800px; height: 203px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [4,2,9,3,5,null,7]\r\n<strong>Output:</strong> 15\r\n<strong>Explanation:</strong> \r\nTilt of node 3 : |0-0| = 0 (no children)\r\nTilt of node 5 : |0-0| = 0 (no children)\r\nTilt of node 7 : |0-0| = 0 (no children)\r\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\r\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\r\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\r\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg\" style=\"width: 800px; height: 293px;\" />\r\n<pre>\r\n<strong>Input:</strong> root = [21,7,14,1,1,2,2,3,3]\r\n<strong>Output:</strong> 9\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\r\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\r\n</ul>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8ba1\u7b97 <strong>\u6574\u4e2a\u6811 </strong>\u7684\u5761\u5ea6 \u3002</p>\n\n<p>\u4e00\u4e2a\u6811\u7684<strong> \u8282\u70b9\u7684\u5761\u5ea6 </strong>\u5b9a\u4e49\u5373\u4e3a\uff0c\u8be5\u8282\u70b9\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e4b\u548c\u548c\u53f3\u5b50\u6811\u8282\u70b9\u4e4b\u548c\u7684 <strong>\u5dee\u7684\u7edd\u5bf9\u503c </strong>\u3002\u5982\u679c\u6ca1\u6709\u5de6\u5b50\u6811\u7684\u8bdd\uff0c\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4e4b\u548c\u4e3a 0 \uff1b\u6ca1\u6709\u53f3\u5b50\u6811\u7684\u8bdd\u4e5f\u662f\u4e00\u6837\u3002\u7a7a\u7ed3\u70b9\u7684\u5761\u5ea6\u662f 0 \u3002</p>\n\n<p><strong>\u6574\u4e2a\u6811</strong> \u7684\u5761\u5ea6\u5c31\u662f\u5176\u6240\u6709\u8282\u70b9\u7684\u5761\u5ea6\u4e4b\u548c\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg\" style=\"width: 712px; height: 182px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8282\u70b9 2 \u7684\u5761\u5ea6\uff1a|0-0| = 0\uff08\u6ca1\u6709\u5b50\u8282\u70b9\uff09\n\u8282\u70b9 3 \u7684\u5761\u5ea6\uff1a|0-0| = 0\uff08\u6ca1\u6709\u5b50\u8282\u70b9\uff09\n\u8282\u70b9 1 \u7684\u5761\u5ea6\uff1a|2-3| = 1\uff08\u5de6\u5b50\u6811\u5c31\u662f\u5de6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u548c\u662f 2 \uff1b\u53f3\u5b50\u6811\u5c31\u662f\u53f3\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u548c\u662f 3 \uff09\n\u5761\u5ea6\u603b\u548c\uff1a0 + 0 + 1 = 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg\" style=\"width: 800px; height: 203px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [4,2,9,3,5,null,7]\n<strong>\u8f93\u51fa\uff1a</strong>15\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8282\u70b9 3 \u7684\u5761\u5ea6\uff1a|0-0| = 0\uff08\u6ca1\u6709\u5b50\u8282\u70b9\uff09\n\u8282\u70b9 5 \u7684\u5761\u5ea6\uff1a|0-0| = 0\uff08\u6ca1\u6709\u5b50\u8282\u70b9\uff09\n\u8282\u70b9 7 \u7684\u5761\u5ea6\uff1a|0-0| = 0\uff08\u6ca1\u6709\u5b50\u8282\u70b9\uff09\n\u8282\u70b9 2 \u7684\u5761\u5ea6\uff1a|3-5| = 2\uff08\u5de6\u5b50\u6811\u5c31\u662f\u5de6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u548c\u662f 3 \uff1b\u53f3\u5b50\u6811\u5c31\u662f\u53f3\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u548c\u662f 5 \uff09\n\u8282\u70b9 9 \u7684\u5761\u5ea6\uff1a|0-7| = 7\uff08\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u6240\u4ee5\u548c\u662f 0 \uff1b\u53f3\u5b50\u6811\u6b63\u597d\u662f\u53f3\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u548c\u662f 7 \uff09\n\u8282\u70b9 4 \u7684\u5761\u5ea6\uff1a|(3+5+2)-(9+7)| = |10-16| = 6\uff08\u5de6\u5b50\u6811\u503c\u4e3a 3\u30015 \u548c 2 \uff0c\u548c\u662f 10 \uff1b\u53f3\u5b50\u6811\u503c\u4e3a 9 \u548c 7 \uff0c\u548c\u662f 16 \uff09\n\u5761\u5ea6\u603b\u548c\uff1a0 + 0 + 0 + 2 + 7 + 6 = 15\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg\" style=\"width: 800px; height: 293px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [21,7,14,1,1,2,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>9\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u7684\u8303\u56f4\u5728 <code>[0, 10<sup>4</sup>]</code> \u5185</li>\n\t<li><code>-1000 <= Node.val <= 1000</code></li>\n</ul>\n", "tags_en": ["Tree", "Depth-first Search", "Recursion"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findTilt(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int findTilt(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTilt(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint findTilt(struct TreeNode* root){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int FindTilt(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findTilt = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef find_tilt(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func findTilt(_ root: TreeNode?) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findTilt(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def findTilt(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun findTilt(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn find_tilt(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function findTilt($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction findTilt(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0564", "frontend_question_id": "0564", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-the-closest-palindrome", "url_en": "https://leetcode.com/problems/find-the-closest-palindrome", "relative_path_cn": "/leetcode/0500-0599/0564.Find%20the%20Closest%20Palindrome/README.md", "relative_path_en": "/leetcode/0500-0599/0564.Find%20the%20Closest%20Palindrome/README_EN.md", "title_cn": "\u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570", "title_en": "Find the Closest Palindrome", "question_title_slug": "find-the-closest-palindrome", "content_en": "<p>Given an integer n, find the closest integer (not including itself), which is a palindrome. </p>\r\n\r\n<p>The 'closest' is defined as absolute difference minimized between two integers.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"123\"\r\n<b>Output:</b> \"121\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input <b>n</b> is a positive integer represented by string, whose length will not exceed 18.</li>\r\n<li>If there is a tie, return the smaller one as answer.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u4f60\u9700\u8981\u627e\u5230\u4e0e\u5b83\u6700\u8fd1\u7684\u56de\u6587\u6570\uff08\u4e0d\u5305\u62ec\u81ea\u8eab\uff09\u3002</p>\n\n<p>&ldquo;\u6700\u8fd1\u7684&rdquo;\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u6574\u6570<strong>\u5dee\u7684\u7edd\u5bf9\u503c</strong>\u6700\u5c0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;123&quot;\n<strong>\u8f93\u51fa:</strong> &quot;121&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><strong>n </strong>\u662f\u7531\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6b63\u6574\u6570\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc718\u3002</li>\n\t<li>\u5982\u679c\u6709\u591a\u4e2a\u7ed3\u679c\uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u90a3\u4e2a\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string nearestPalindromic(string n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String nearestPalindromic(String n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nearestPalindromic(self, n: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * nearestPalindromic(char * n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string NearestPalindromic(string n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} n\n * @return {string}\n */\nvar nearestPalindromic = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} n\n# @return {String}\ndef nearest_palindromic(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nearestPalindromic(_ n: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nearestPalindromic(n string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nearestPalindromic(n: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nearestPalindromic(n: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn nearest_palindromic(n: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $n\n     * @return String\n     */\n    function nearestPalindromic($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nearestPalindromic(n: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0565", "frontend_question_id": "0565", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/array-nesting", "url_en": "https://leetcode.com/problems/array-nesting", "relative_path_cn": "/leetcode/0500-0599/0565.Array%20Nesting/README.md", "relative_path_en": "/leetcode/0500-0599/0565.Array%20Nesting/README_EN.md", "title_cn": "\u6570\u7ec4\u5d4c\u5957", "title_en": "Array Nesting", "question_title_slug": "array-nesting", "content_en": "<p>A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.</p>\r\n\r\n<p>Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]&hellip; By that analogy, we stop adding right before a duplicate element occurs in S.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> A = [5,4,0,3,1,6,2]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> \r\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\r\n\r\nOne of the longest S[K]:\r\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>N is an integer within the range [1, 20,000].</li>\r\n\t<li>The elements of A are all distinct.</li>\r\n\t<li>Each element of A is an integer within the range [0, N-1].</li>\r\n</ol>\r\n", "content_cn": "<p>\u7d22\u5f15\u4ece<code>0</code>\u5f00\u59cb\u957f\u5ea6\u4e3a<code>N</code>\u7684\u6570\u7ec4<code>A</code>\uff0c\u5305\u542b<code>0</code>\u5230<code>N - 1</code>\u7684\u6240\u6709\u6574\u6570\u3002\u627e\u5230\u6700\u5927\u7684\u96c6\u5408<code>S</code>\u5e76\u8fd4\u56de\u5176\u5927\u5c0f\uff0c\u5176\u4e2d <code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>\u4e14\u9075\u5b88\u4ee5\u4e0b\u7684\u89c4\u5219\u3002</p>\n\n<p>\u5047\u8bbe\u9009\u62e9\u7d22\u5f15\u4e3a<code>i</code>\u7684\u5143\u7d20<code>A[i]</code>\u4e3a<code>S</code>\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c<code>S</code>\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u662f<code>A[A[i]]</code>\uff0c\u4e4b\u540e\u662f<code>A[A[A[i]]]...</code> \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4e0d\u65ad\u6dfb\u52a0\u76f4\u5230<code>S</code>\u51fa\u73b0\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> A = [5,4,0,3,1,6,2]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\n\u5176\u4e2d\u4e00\u79cd\u6700\u957f\u7684 S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>N</code>\u662f<code>[1, 20,000]</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002</li>\n\t<li><code>A</code>\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</li>\n\t<li><code>A</code>\u4e2d\u7684\u5143\u7d20\u5927\u5c0f\u5728<code>[0, N-1]</code>\u4e4b\u95f4\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int arrayNesting(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int arrayNesting(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def arrayNesting(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint arrayNesting(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ArrayNesting(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayNesting = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef array_nesting(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func arrayNesting(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func arrayNesting(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def arrayNesting(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun arrayNesting(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn array_nesting(nums: Vec<i32>) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function arrayNesting($nums) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function arrayNesting(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0566", "frontend_question_id": "0566", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reshape-the-matrix", "url_en": "https://leetcode.com/problems/reshape-the-matrix", "relative_path_cn": "/leetcode/0500-0599/0566.Reshape%20the%20Matrix/README.md", "relative_path_en": "/leetcode/0500-0599/0566.Reshape%20the%20Matrix/README_EN.md", "title_cn": "\u91cd\u5851\u77e9\u9635", "title_en": "Reshape the Matrix", "question_title_slug": "reshape-the-matrix", "content_en": "<p>In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.\r\n</p>\r\n\r\n<p>\r\nYou're given a matrix represented by a two-dimensional array, and two <b>positive</b> integers <b>r</b> and <b>c</b> representing the <b>row</b> number and <b>column</b> number of the wanted reshaped matrix, respectively.</p>\r\n\r\n <p>The reshaped matrix need to be filled with all the elements of the original matrix in the same <b>row-traversing</b> order as they were.\r\n</p>\r\n\r\n<p>\r\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 1, c = 4\r\n<b>Output:</b> \r\n[[1,2,3,4]]\r\n<b>Explanation:</b><br>The <b>row-traversing</b> of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 2, c = 4\r\n<b>Output:</b> \r\n[[1,2],\r\n [3,4]]\r\n<b>Explanation:</b><br>There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The height and width of the given matrix is in range [1, 100].</li>\r\n<li>The given r and c are all positive.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 <code>reshape</code>\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570<code>r</code>\u548c<code>c</code>\uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p>\n\n<p>\u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684<strong>\u884c\u904d\u5386\u987a\u5e8f</strong>\u586b\u5145\u3002</p>\n\n<p>\u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684<code>reshape</code>\u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n<strong>\u8f93\u51fa:</strong> \n[[1,2,3,4]]\n<strong>\u89e3\u91ca:</strong>\n\u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n<strong>\u8f93\u51fa:</strong> \n[[1,2],\n [3,4]]\n<strong>\u89e3\u91ca:</strong>\n\u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002</li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def matrixReshape(self, nums, r, c):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def matrixReshape(self, nums: List[List[int]], r: int, c: int) -> List[List[int]]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** matrixReshape(int** nums, int numsSize, int* numsColSize, int r, int c, int* returnSize, int** returnColumnSizes){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] MatrixReshape(int[][] nums, int r, int c) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} nums\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */\nvar matrixReshape = function(nums, r, c) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} nums\n# @param {Integer} r\n# @param {Integer} c\n# @return {Integer[][]}\ndef matrix_reshape(nums, r, c)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func matrixReshape(_ nums: [[Int]], _ r: Int, _ c: Int) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func matrixReshape(nums [][]int, r int, c int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def matrixReshape(nums: Array[Array[Int]], r: Int, c: Int): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun matrixReshape(nums: Array<IntArray>, r: Int, c: Int): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn matrix_reshape(nums: Vec<Vec<i32>>, r: i32, c: i32) -> Vec<Vec<i32>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $nums\n     * @param Integer $r\n     * @param Integer $c\n     * @return Integer[][]\n     */\n    function matrixReshape($nums, $r, $c) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function matrixReshape(nums: number[][], r: number, c: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0567", "frontend_question_id": "0567", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/permutation-in-string", "url_en": "https://leetcode.com/problems/permutation-in-string", "relative_path_cn": "/leetcode/0500-0599/0567.Permutation%20in%20String/README.md", "relative_path_en": "/leetcode/0500-0599/0567.Permutation%20in%20String/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u7684\u6392\u5217", "title_en": "Permutation in String", "question_title_slug": "permutation-in-string", "content_en": "<p>Given two strings <b>s1</b> and <b>s2</b>, write a function to return true if <b>s2</b> contains the permutation of <b>s1</b>. In other words, one of the first string&#39;s permutations is the <b>substring</b> of the second string.</p>\n\n<p>&nbsp;</p>\n\n<p><b>Example 1:</b></p>\n\n<pre>\n<b>Input: </b>s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\n<b>Output: </b>True\n<b>Explanation:</b> s2 contains one permutation of s1 (&quot;ba&quot;).\n</pre>\n\n<p><b>Example 2:</b></p>\n\n<pre>\n<b>Input:</b>s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;\n<b>Output:</b> False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input strings only contain lower case letters.</li>\n\t<li>The length of both given strings is in range [1, 10,000].</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s1</strong>&nbsp;\u548c&nbsp;<strong>s2</strong>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad <strong>s2</strong> \u662f\u5426\u5305\u542b <strong>s1&nbsp;</strong>\u7684\u6392\u5217\u3002</p>\n\n<p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\n<strong>\u8f93\u51fa: </strong>True\n<strong>\u89e3\u91ca:</strong> s2 \u5305\u542b s1 \u7684\u6392\u5217\u4e4b\u4e00 (&quot;ba&quot;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u5728 [1, 10,000] \u4e4b\u95f4</li>\n</ol>\n", "tags_en": ["Two Pointers", "Sliding Window"], "tags_cn": ["\u53cc\u6307\u9488", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool checkInclusion(string s1, string s2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean checkInclusion(String s1, String s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def checkInclusion(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool checkInclusion(char * s1, char * s2){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CheckInclusion(string s1, string s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef check_inclusion(s1, s2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func checkInclusion(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func checkInclusion(s1 string, s2 string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def checkInclusion(s1: String, s2: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun checkInclusion(s1: String, s2: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn check_inclusion(s1: String, s2: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function checkInclusion($s1, $s2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function checkInclusion(s1: string, s2: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0568", "frontend_question_id": "0568", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/maximum-vacation-days", "url_en": "https://leetcode.com/problems/maximum-vacation-days", "relative_path_cn": "/leetcode/0500-0599/0568.Maximum%20Vacation%20Days/README.md", "relative_path_en": "/leetcode/0500-0599/0568.Maximum%20Vacation%20Days/README_EN.md", "title_cn": "\u6700\u5927\u4f11\u5047\u5929\u6570", "title_en": "Maximum Vacation Days", "question_title_slug": "maximum-vacation-days", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0569", "frontend_question_id": "0569", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/median-employee-salary", "url_en": "https://leetcode.com/problems/median-employee-salary", "relative_path_cn": "/leetcode/0500-0599/0569.Median%20Employee%20Salary/README.md", "relative_path_en": "/leetcode/0500-0599/0569.Median%20Employee%20Salary/README_EN.md", "title_cn": "\u5458\u5de5\u85aa\u6c34\u4e2d\u4f4d\u6570", "title_en": "Median Employee Salary", "question_title_slug": "median-employee-salary", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0570", "frontend_question_id": "0570", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/managers-with-at-least-5-direct-reports", "url_en": "https://leetcode.com/problems/managers-with-at-least-5-direct-reports", "relative_path_cn": "/leetcode/0500-0599/0570.Managers%20with%20at%20Least%205%20Direct%20Reports/README.md", "relative_path_en": "/leetcode/0500-0599/0570.Managers%20with%20at%20Least%205%20Direct%20Reports/README_EN.md", "title_cn": "\u81f3\u5c11\u67095\u540d\u76f4\u63a5\u4e0b\u5c5e\u7684\u7ecf\u7406", "title_en": "Managers with at Least 5 Direct Reports", "question_title_slug": "managers-with-at-least-5-direct-reports", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0571", "frontend_question_id": "0571", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-median-given-frequency-of-numbers", "url_en": "https://leetcode.com/problems/find-median-given-frequency-of-numbers", "relative_path_cn": "/leetcode/0500-0599/0571.Find%20Median%20Given%20Frequency%20of%20Numbers/README.md", "relative_path_en": "/leetcode/0500-0599/0571.Find%20Median%20Given%20Frequency%20of%20Numbers/README_EN.md", "title_cn": "\u7ed9\u5b9a\u6570\u5b57\u7684\u9891\u7387\u67e5\u8be2\u4e2d\u4f4d\u6570", "title_en": "Find Median Given Frequency of Numbers", "question_title_slug": "find-median-given-frequency-of-numbers", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0572", "frontend_question_id": "0572", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/subtree-of-another-tree", "url_en": "https://leetcode.com/problems/subtree-of-another-tree", "relative_path_cn": "/leetcode/0500-0599/0572.Subtree%20of%20Another%20Tree/README.md", "relative_path_en": "/leetcode/0500-0599/0572.Subtree%20of%20Another%20Tree/README_EN.md", "title_cn": "\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811", "title_en": "Subtree of Another Tree", "question_title_slug": "subtree-of-another-tree", "content_en": "<p>Given two <strong>non-empty</strong> binary trees <b>s</b> and <b>t</b>, check whether tree <b>t</b> has exactly the same structure and node values with a subtree of <b>s</b>. A subtree of <b>s</b> is a tree consists of a node in <b>s</b> and all of this node&#39;s descendants. The tree <b>s</b> could also be considered as a subtree of itself.</p>\n\n<p><b>Example 1:</b><br />\nGiven tree s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\nGiven tree t:\n\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\nReturn <b>true</b>, because t has the same structure and node values with a subtree of s.\n\n<p>&nbsp;</p>\n\n<p><b>Example 2:</b><br />\nGiven tree s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\nGiven tree t:\n\n<pre>\n   4\n  / \\\n 1   2\n</pre>\nReturn <b>false</b>.\n\n<p>&nbsp;</p>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811 <strong>s</strong> \u548c <strong>t</strong>\uff0c\u68c0\u9a8c&nbsp;<strong>s</strong> \u4e2d\u662f\u5426\u5305\u542b\u548c <strong>t</strong> \u5177\u6709\u76f8\u540c\u7ed3\u6784\u548c\u8282\u70b9\u503c\u7684\u5b50\u6811\u3002<strong>s</strong> \u7684\u4e00\u4e2a\u5b50\u6811\u5305\u62ec <strong>s</strong> \u7684\u4e00\u4e2a\u8282\u70b9\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u3002<strong>s</strong> \u4e5f\u53ef\u4ee5\u770b\u505a\u5b83\u81ea\u8eab\u7684\u4e00\u68f5\u5b50\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong><br />\n\u7ed9\u5b9a\u7684\u6811 s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\n\n<p>\u7ed9\u5b9a\u7684\u6811 t\uff1a</p>\n\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\n\n<p>\u8fd4\u56de <strong>true</strong>\uff0c\u56e0\u4e3a t \u4e0e s \u7684\u4e00\u4e2a\u5b50\u6811\u62e5\u6709\u76f8\u540c\u7684\u7ed3\u6784\u548c\u8282\u70b9\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong><br />\n\u7ed9\u5b9a\u7684\u6811 s\uff1a</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\n\n<p>\u7ed9\u5b9a\u7684\u6811 t\uff1a</p>\n\n<pre>\n   4\n  / \\\n 1   2\n</pre>\n\n<p>\u8fd4\u56de <strong>false</strong>\u3002</p>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSubtree(self, s, t):\n        \"\"\"\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isSubtree(struct TreeNode* s, struct TreeNode* t){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} s\n * @param {TreeNode} t\n * @return {boolean}\n */\nvar isSubtree = function(s, t) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} s\n# @param {TreeNode} t\n# @return {Boolean}\ndef is_subtree(s, t)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isSubtree(_ s: TreeNode?, _ t: TreeNode?) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSubtree(s *TreeNode, t *TreeNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isSubtree(s: TreeNode, t: TreeNode): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isSubtree(s: TreeNode?, t: TreeNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_subtree(s: Option<Rc<RefCell<TreeNode>>>, t: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $s\n     * @param TreeNode $t\n     * @return Boolean\n     */\n    function isSubtree($s, $t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isSubtree(s: TreeNode | null, t: TreeNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0573", "frontend_question_id": "0573", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/squirrel-simulation", "url_en": "https://leetcode.com/problems/squirrel-simulation", "relative_path_cn": "/leetcode/0500-0599/0573.Squirrel%20Simulation/README.md", "relative_path_en": "/leetcode/0500-0599/0573.Squirrel%20Simulation/README_EN.md", "title_cn": "\u677e\u9f20\u6a21\u62df", "title_en": "Squirrel Simulation", "question_title_slug": "squirrel-simulation", "content_en": null, "content_cn": null, "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0574", "frontend_question_id": "0574", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/winning-candidate", "url_en": "https://leetcode.com/problems/winning-candidate", "relative_path_cn": "/leetcode/0500-0599/0574.Winning%20Candidate/README.md", "relative_path_en": "/leetcode/0500-0599/0574.Winning%20Candidate/README_EN.md", "title_cn": "\u5f53\u9009\u8005", "title_en": "Winning Candidate", "question_title_slug": "winning-candidate", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0575", "frontend_question_id": "0575", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/distribute-candies", "url_en": "https://leetcode.com/problems/distribute-candies", "relative_path_cn": "/leetcode/0500-0599/0575.Distribute%20Candies/README.md", "relative_path_en": "/leetcode/0500-0599/0575.Distribute%20Candies/README_EN.md", "title_cn": "\u5206\u7cd6\u679c", "title_en": "Distribute Candies", "question_title_slug": "distribute-candies", "content_en": "<p>Alice has <code>n</code> candies, where the <code>i<sup>th</sup></code> candy is of type <code>candyType[i]</code>. Alice noticed that she started to gain weight, so she visited a doctor.</p>\n\n<p>The doctor advised Alice to only eat <code>n / 2</code> of the candies she has (<code>n</code> is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor&#39;s advice.</p>\n\n<p>Given the integer array <code>candyType</code> of length <code>n</code>, return <em>the <strong>maximum</strong> number of different types of candies she can eat if she only eats </em><code>n / 2</code><em> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [1,1,2,2,3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [1,1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [6,6,6,6]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == candyType.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>n</code>&nbsp;is even.</li>\n\t<li><code>-10<sup>5</sup> &lt;= candyType[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u5076\u6570</strong>\u957f\u5ea6\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u4e0d\u540c\u7684\u6570\u5b57\u4ee3\u8868\u7740\u4e0d\u540c\u79cd\u7c7b\u7684\u7cd6\u679c\uff0c\u6bcf\u4e00\u4e2a\u6570\u5b57\u4ee3\u8868\u4e00\u4e2a\u7cd6\u679c\u3002\u4f60\u9700\u8981\u628a\u8fd9\u4e9b\u7cd6\u679c<strong>\u5e73\u5747</strong>\u5206\u7ed9\u4e00\u4e2a\u5f1f\u5f1f\u548c\u4e00\u4e2a\u59b9\u59b9\u3002\u8fd4\u56de\u59b9\u59b9\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7cd6\u679c\u7684\u79cd\u7c7b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> candies = [1,1,2,2,3,3]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u6790: </strong>\u4e00\u5171\u6709\u4e09\u79cd\u79cd\u7c7b\u7684\u7cd6\u679c\uff0c\u6bcf\u4e00\u79cd\u90fd\u6709\u4e24\u4e2a\u3002\n     \u6700\u4f18\u5206\u914d\u65b9\u6848\uff1a\u59b9\u59b9\u83b7\u5f97[1,2,3],\u5f1f\u5f1f\u4e5f\u83b7\u5f97[1,2,3]\u3002\u8fd9\u6837\u4f7f\u59b9\u59b9\u83b7\u5f97\u7cd6\u679c\u7684\u79cd\u7c7b\u6570\u6700\u591a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> candies = [1,1,2,3]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u6790:</strong> \u59b9\u59b9\u83b7\u5f97\u7cd6\u679c[2,3],\u5f1f\u5f1f\u83b7\u5f97\u7cd6\u679c[1,1]\uff0c\u59b9\u59b9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u7cd6\u679c\uff0c\u5f1f\u5f1f\u53ea\u6709\u4e00\u79cd\u3002\u8fd9\u6837\u4f7f\u5f97\u59b9\u59b9\u53ef\u4ee5\u83b7\u5f97\u7684\u7cd6\u679c\u79cd\u7c7b\u6570\u6700\u591a\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a[2, 10,000]\uff0c\u5e76\u4e14\u786e\u5b9a\u4e3a\u5076\u6570\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u5927\u5c0f\u5728\u8303\u56f4[-100,000, 100,000]\u5185\u3002\n\t<ol>\n\t</ol>\n\t</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int distributeCandies(vector<int>& candyType) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int distributeCandies(int[] candyType) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def distributeCandies(self, candyType):\n        \"\"\"\n        :type candyType: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint distributeCandies(int* candyType, int candyTypeSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int DistributeCandies(int[] candyType) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} candyType\n * @return {number}\n */\nvar distributeCandies = function(candyType) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} candy_type\n# @return {Integer}\ndef distribute_candies(candy_type)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func distributeCandies(_ candyType: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func distributeCandies(candyType []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def distributeCandies(candyType: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun distributeCandies(candyType: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn distribute_candies(candy_type: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $candyType\n     * @return Integer\n     */\n    function distributeCandies($candyType) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function distributeCandies(candyType: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0576", "frontend_question_id": "0576", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/out-of-boundary-paths", "url_en": "https://leetcode.com/problems/out-of-boundary-paths", "relative_path_cn": "/leetcode/0500-0599/0576.Out%20of%20Boundary%20Paths/README.md", "relative_path_en": "/leetcode/0500-0599/0576.Out%20of%20Boundary%20Paths/README_EN.md", "title_cn": "\u51fa\u754c\u7684\u8def\u5f84\u6570", "title_en": "Out of Boundary Paths", "question_title_slug": "out-of-boundary-paths", "content_en": "<p>There is an <b>m</b> by <b>n</b> grid with a ball. Given the start coordinate <b>(i,j)</b> of the ball, you can move the ball to <b>adjacent</b> cell or cross the grid boundary in four directions (up, down, left, right). However, you can <b>at most</b> move <b>N</b> times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<b>Output:</b> 6\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/13/out_of_boundary_paths_1.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<b>Output:</b> 12\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/out_of_boundary_paths_2.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Once you move the ball out of boundary, you cannot move it back.</li>\r\n\t<li>The length and height of the grid is in range [1,50].</li>\r\n\t<li>N is in range [0,50].</li>\r\n</ol>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a <strong>m &times; n </strong>\u7684\u7f51\u683c\u548c\u4e00\u4e2a\u7403\u3002\u7403\u7684\u8d77\u59cb\u5750\u6807\u4e3a&nbsp;<strong>(i,j)</strong>&nbsp;\uff0c\u4f60\u53ef\u4ee5\u5c06\u7403\u79fb\u5230<strong>\u76f8\u90bb</strong>\u7684\u5355\u5143\u683c\u5185\uff0c\u6216\u8005\u5f80\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u79fb\u52a8\u4f7f\u7403\u7a7f\u8fc7\u7f51\u683c\u8fb9\u754c\u3002\u4f46\u662f\uff0c\u4f60<strong>\u6700\u591a</strong>\u53ef\u4ee5\u79fb\u52a8&nbsp;<strong>N&nbsp;</strong>\u6b21\u3002\u627e\u51fa\u53ef\u4ee5\u5c06\u7403\u79fb\u51fa\u8fb9\u754c\u7684\u8def\u5f84\u6570\u91cf\u3002\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8fd4\u56de \u7ed3\u679c mod 10<sup>9</sup>&nbsp;+ 7 \u7684\u503c\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<strong>\u8f93\u51fa:</strong> 6\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_1.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<strong>\u8f93\u51fa:</strong> 12\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_2.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u7403\u4e00\u65e6\u51fa\u754c\uff0c\u5c31\u4e0d\u80fd\u518d\u88ab\u79fb\u52a8\u56de\u7f51\u683c\u5185\u3002</li>\r\n\t<li>\u7f51\u683c\u7684\u957f\u5ea6\u548c\u9ad8\u5ea6\u5728 [1,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n\t<li>N \u5728 [0,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n</ol>", "tags_en": ["Depth-first Search", "Dynamic Programming"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findPaths(int m, int n, int N, int i, int j) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findPaths(int m, int n, int N, int i, int j) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findPaths(self, m, n, N, i, j):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type N: int\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findPaths(int m, int n, int N, int i, int j){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindPaths(int m, int n, int N, int i, int j) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} N\n * @param {number} i\n * @param {number} j\n * @return {number}\n */\nvar findPaths = function(m, n, N, i, j) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} n\n# @param {Integer} i\n# @param {Integer} j\n# @return {Integer}\ndef find_paths(m, n, n, i, j)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findPaths(_ m: Int, _ n: Int, _ N: Int, _ i: Int, _ j: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findPaths(m int, n int, N int, i int, j int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findPaths(m: Int, n: Int, N: Int, i: Int, j: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findPaths(m: Int, n: Int, N: Int, i: Int, j: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_paths(m: i32, n: i32, n: i32, i: i32, j: i32) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $N\n     * @param Integer $i\n     * @param Integer $j\n     * @return Integer\n     */\n    function findPaths($m, $n, $N, $i, $j) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findPaths(m: number, n: number, N: number, i: number, j: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0577", "frontend_question_id": "0577", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/employee-bonus", "url_en": "https://leetcode.com/problems/employee-bonus", "relative_path_cn": "/leetcode/0500-0599/0577.Employee%20Bonus/README.md", "relative_path_en": "/leetcode/0500-0599/0577.Employee%20Bonus/README_EN.md", "title_cn": "\u5458\u5de5\u5956\u91d1", "title_en": "Employee Bonus", "question_title_slug": "employee-bonus", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0578", "frontend_question_id": "0578", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/get-highest-answer-rate-question", "url_en": "https://leetcode.com/problems/get-highest-answer-rate-question", "relative_path_cn": "/leetcode/0500-0599/0578.Get%20Highest%20Answer%20Rate%20Question/README.md", "relative_path_en": "/leetcode/0500-0599/0578.Get%20Highest%20Answer%20Rate%20Question/README_EN.md", "title_cn": "\u67e5\u8be2\u56de\u7b54\u7387\u6700\u9ad8\u7684\u95ee\u9898", "title_en": "Get Highest Answer Rate Question", "question_title_slug": "get-highest-answer-rate-question", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0579", "frontend_question_id": "0579", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-cumulative-salary-of-an-employee", "url_en": "https://leetcode.com/problems/find-cumulative-salary-of-an-employee", "relative_path_cn": "/leetcode/0500-0599/0579.Find%20Cumulative%20Salary%20of%20an%20Employee/README.md", "relative_path_en": "/leetcode/0500-0599/0579.Find%20Cumulative%20Salary%20of%20an%20Employee/README_EN.md", "title_cn": "\u67e5\u8be2\u5458\u5de5\u7684\u7d2f\u8ba1\u85aa\u6c34", "title_en": "Find Cumulative Salary of an Employee", "question_title_slug": "find-cumulative-salary-of-an-employee", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0580", "frontend_question_id": "0580", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/count-student-number-in-departments", "url_en": "https://leetcode.com/problems/count-student-number-in-departments", "relative_path_cn": "/leetcode/0500-0599/0580.Count%20Student%20Number%20in%20Departments/README.md", "relative_path_en": "/leetcode/0500-0599/0580.Count%20Student%20Number%20in%20Departments/README_EN.md", "title_cn": "\u7edf\u8ba1\u5404\u4e13\u4e1a\u5b66\u751f\u4eba\u6570", "title_en": "Count Student Number in Departments", "question_title_slug": "count-student-number-in-departments", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0581", "frontend_question_id": "0581", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray", "url_en": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray", "relative_path_cn": "/leetcode/0500-0599/0581.Shortest%20Unsorted%20Continuous%20Subarray/README.md", "relative_path_en": "/leetcode/0500-0599/0581.Shortest%20Unsorted%20Continuous%20Subarray/README_EN.md", "title_cn": "\u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4", "title_en": "Shortest Unsorted Continuous Subarray", "question_title_slug": "shortest-unsorted-continuous-subarray", "content_en": "<p>Given an integer array <code>nums</code>, you need to find one <b>continuous subarray</b> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.</p>\n\n<p>Return&nbsp;<em>the shortest such subarray and output its length</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,4,8,10,9,15]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5bfb\u627e\u4e00\u4e2a<strong>\u8fde\u7eed\u7684\u5b50\u6570\u7ec4</strong>\uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002</p>\n\n<p>\u4f60\u627e\u5230\u7684\u5b50\u6570\u7ec4\u5e94\u662f<strong>\u6700\u77ed</strong>\u7684\uff0c\u8bf7\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2, 6, 4, 8, 10, 9, 15]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u5728&nbsp;[1, 10,000]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u53ef\u80fd\u5305\u542b<strong>\u91cd\u590d</strong>\u5143\u7d20&nbsp;\uff0c\u6240\u4ee5<strong>\u5347\u5e8f</strong>\u7684\u610f\u601d\u662f<strong>&lt;=\u3002</strong></li>\n</ol>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findUnsortedSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findUnsortedSubarray(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUnsortedSubarray = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_unsorted_subarray(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findUnsortedSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findUnsortedSubarray(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findUnsortedSubarray(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findUnsortedSubarray(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_unsorted_subarray(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findUnsortedSubarray($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findUnsortedSubarray(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0582", "frontend_question_id": "0582", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/kill-process", "url_en": "https://leetcode.com/problems/kill-process", "relative_path_cn": "/leetcode/0500-0599/0582.Kill%20Process/README.md", "relative_path_en": "/leetcode/0500-0599/0582.Kill%20Process/README_EN.md", "title_cn": "\u6740\u6b7b\u8fdb\u7a0b", "title_en": "Kill Process", "question_title_slug": "kill-process", "content_en": null, "content_cn": null, "tags_en": ["Tree", "Queue"], "tags_cn": ["\u6811", "\u961f\u5217"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0583", "frontend_question_id": "0583", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-operation-for-two-strings", "url_en": "https://leetcode.com/problems/delete-operation-for-two-strings", "relative_path_cn": "/leetcode/0500-0599/0583.Delete%20Operation%20for%20Two%20Strings/README.md", "relative_path_en": "/leetcode/0500-0599/0583.Delete%20Operation%20for%20Two%20Strings/README_EN.md", "title_cn": "\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c", "title_en": "Delete Operation for Two Strings", "question_title_slug": "delete-operation-for-two-strings", "content_en": "<p>\r\nGiven two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to make <i>word1</i> and <i>word2</i> the same, where in each step you can delete one character in either string.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"sea\", \"eat\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of given words won't exceed 500.</li>\r\n<li>Characters in given words can only be lower-case letters.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd&nbsp;<em>word1&nbsp;</em>\u548c&nbsp;<em>word2</em>\uff0c\u627e\u5230\u4f7f\u5f97&nbsp;<em>word1&nbsp;</em>\u548c&nbsp;<em>word2&nbsp;</em>\u76f8\u540c\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u6bcf\u6b65\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;sea&quot;, &quot;eat&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u6b65\u5c06&quot;sea&quot;\u53d8\u4e3a&quot;ea&quot;\uff0c\u7b2c\u4e8c\u6b65\u5c06&quot;eat&quot;\u53d8\u4e3a&quot;ea&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u5355\u8bcd\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7500\u3002</li>\n\t<li>\u7ed9\u5b9a\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minDistance(String word1, String word2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minDistance(char * word1, char * word2){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinDistance(string word1, string word2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minDistance(word1 string, word2 string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minDistance(word1: string, word2: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0584", "frontend_question_id": "0584", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-customer-referee", "url_en": "https://leetcode.com/problems/find-customer-referee", "relative_path_cn": "/leetcode/0500-0599/0584.Find%20Customer%20Referee/README.md", "relative_path_en": "/leetcode/0500-0599/0584.Find%20Customer%20Referee/README_EN.md", "title_cn": "\u5bfb\u627e\u7528\u6237\u63a8\u8350\u4eba", "title_en": "Find Customer Referee", "question_title_slug": "find-customer-referee", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0585", "frontend_question_id": "0585", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/investments-in-2016", "url_en": "https://leetcode.com/problems/investments-in-2016", "relative_path_cn": "/leetcode/0500-0599/0585.Investments%20in%202016/README.md", "relative_path_en": "/leetcode/0500-0599/0585.Investments%20in%202016/README_EN.md", "title_cn": "2016\u5e74\u7684\u6295\u8d44", "title_en": "Investments in 2016", "question_title_slug": "investments-in-2016", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0586", "frontend_question_id": "0586", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/customer-placing-the-largest-number-of-orders", "url_en": "https://leetcode.com/problems/customer-placing-the-largest-number-of-orders", "relative_path_cn": "/leetcode/0500-0599/0586.Customer%20Placing%20the%20Largest%20Number%20of%20Orders/README.md", "relative_path_en": "/leetcode/0500-0599/0586.Customer%20Placing%20the%20Largest%20Number%20of%20Orders/README_EN.md", "title_cn": "\u8ba2\u5355\u6700\u591a\u7684\u5ba2\u6237", "title_en": "Customer Placing the Largest Number of Orders", "question_title_slug": "customer-placing-the-largest-number-of-orders", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0587", "frontend_question_id": "0587", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/erect-the-fence", "url_en": "https://leetcode.com/problems/erect-the-fence", "relative_path_cn": "/leetcode/0500-0599/0587.Erect%20the%20Fence/README.md", "relative_path_en": "/leetcode/0500-0599/0587.Erect%20the%20Fence/README_EN.md", "title_cn": "\u5b89\u88c5\u6805\u680f", "title_en": "Erect the Fence", "question_title_slug": "erect-the-fence", "content_en": "<p>There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the <b>minimum length</b> of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\n<b>Output:</b> [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/erect_the_fence_1.png\" style=\"width: 100%; max-width: 320px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,2],[2,2],[4,2]]\r\n<b>Output:</b> [[1,2],[2,2],[4,2]]\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/erect_the_fence_2.png\" style=\"width: 100%; max-width: 320px\" />\r\nEven you only have trees in a line, you need to use rope to enclose them. \r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.</li>\r\n\t<li>All input integers will range from 0 to 100.</li>\r\n\t<li>The garden has at least one tree.</li>\r\n\t<li>All coordinates are distinct.</li>\r\n\t<li>Input points have <b>NO</b> order. No order required for output.</li>\r\n\t<li>input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</li>\r\n</ol>\r\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u4e8c\u7ef4\u7684\u82b1\u56ed\u4e2d\uff0c\u6709\u4e00\u4e9b\u7528 (x, y) \u5750\u6807\u8868\u793a\u7684\u6811\u3002\u7531\u4e8e\u5b89\u88c5\u8d39\u7528\u5341\u5206\u6602\u8d35\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5148\u7528<strong>\u6700\u77ed</strong>\u7684\u7ef3\u5b50\u56f4\u8d77\u6240\u6709\u7684\u6811\u3002\u53ea\u6709\u5f53\u6240\u6709\u7684\u6811\u90fd\u88ab\u7ef3\u5b50\u5305\u56f4\u65f6\uff0c\u82b1\u56ed\u624d\u80fd\u56f4\u597d\u6805\u680f\u3002\u4f60\u9700\u8981\u627e\u5230\u6b63\u597d\u4f4d\u4e8e\u6805\u680f\u8fb9\u754c\u4e0a\u7684\u6811\u7684\u5750\u6807\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1:</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\n<strong>\u8f93\u51fa:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_1.png\" style=\"width: 100%; max-width: 320px\">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2:</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>\u8f93\u51fa:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_2.png\" style=\"width: 100%; max-width: 320px\">\r\n\u5373\u4f7f\u6811\u90fd\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u4f60\u4e5f\u9700\u8981\u5148\u7528\u7ef3\u5b50\u5305\u56f4\u5b83\u4eec\u3002\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u6ce8\u610f:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u6240\u6709\u7684\u6811\u5e94\u5f53\u88ab\u56f4\u5728\u4e00\u8d77\u3002\u4f60\u4e0d\u80fd\u526a\u65ad\u7ef3\u5b50\u6765\u5305\u56f4\u6811\u6216\u8005\u628a\u6811\u5206\u6210\u4e00\u7ec4\u4ee5\u4e0a\u3002</li>\r\n\t<li>\u8f93\u5165\u7684\u6574\u6570\u5728 0 \u5230 100 \u4e4b\u95f4\u3002</li>\r\n\t<li>\u82b1\u56ed\u81f3\u5c11\u6709\u4e00\u68f5\u6811\u3002</li>\r\n\t<li>\u6240\u6709\u6811\u7684\u5750\u6807\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\r\n\t<li>\u8f93\u5165\u7684\u70b9<strong>\u6ca1\u6709</strong>\u987a\u5e8f\u3002\u8f93\u51fa\u987a\u5e8f\u4e5f\u6ca1\u6709\u8981\u6c42\u3002</li>\r\n</ol>", "tags_en": ["Geometry"], "tags_cn": ["\u51e0\u4f55"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> outerTrees(vector<vector<int>>& points) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[][] outerTrees(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def outerTrees(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def outerTrees(self, points: List[List[int]]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** outerTrees(int** points, int pointsSize, int* pointsColSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[][] OuterTrees(int[][] points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} points\n * @return {number[][]}\n */\nvar outerTrees = function(points) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} points\n# @return {Integer[][]}\ndef outer_trees(points)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func outerTrees(_ points: [[Int]]) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func outerTrees(points [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def outerTrees(points: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun outerTrees(points: Array<IntArray>): Array<IntArray> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn outer_trees(points: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer[][]\n     */\n    function outerTrees($points) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function outerTrees(points: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0588", "frontend_question_id": "0588", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/design-in-memory-file-system", "url_en": "https://leetcode.com/problems/design-in-memory-file-system", "relative_path_cn": "/leetcode/0500-0599/0588.Design%20In-Memory%20File%20System/README.md", "relative_path_en": "/leetcode/0500-0599/0588.Design%20In-Memory%20File%20System/README_EN.md", "title_cn": "\u8bbe\u8ba1\u5185\u5b58\u6587\u4ef6\u7cfb\u7edf", "title_en": "Design In-Memory File System", "question_title_slug": "design-in-memory-file-system", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0775", "frontend_question_id": "0589", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal", "url_en": "https://leetcode.com/problems/n-ary-tree-preorder-traversal", "relative_path_cn": "/leetcode/0500-0599/0589.N-ary%20Tree%20Preorder%20Traversal/README.md", "relative_path_en": "/leetcode/0500-0599/0589.N-ary%20Tree%20Preorder%20Traversal/README_EN.md", "title_cn": "N\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386", "title_en": "N-ary Tree Preorder Traversal", "question_title_slug": "n-ary-tree-preorder-traversal", "content_en": "<p>Given an n-ary tree, return the <i>preorder</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Recursive solution is trivial, could you do it iteratively?</p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,3,5,6,2,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0,&nbsp;10^4]</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u524d\u5e8f\u904d\u5386</em>\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u8fd4\u56de\u5176\u524d\u5e8f\u904d\u5386: <code>[1,3,5,6,2,4]</code>\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u9012\u5f52\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5b8c\u6210\u6b64\u9898\u5417?</p>", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<int> preorder(Node* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public List<Integer> preorder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def preorder(self, root: 'Node') -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* preorder(struct Node* root, int* returnSize) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public IList<int> Preorder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {number[]}\n */\nvar preorder = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {List[int]}\ndef preorder(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func preorder(_ root: Node?) -> [Int] {\n    \t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc preorder(root *Node) []int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def preorder(root: Node): List[Int] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun preorder(root: Node?): List<Int> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer[]\n     */\n    function preorder($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}]}, {"question_id": "0776", "frontend_question_id": "0590", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal", "url_en": "https://leetcode.com/problems/n-ary-tree-postorder-traversal", "relative_path_cn": "/leetcode/0500-0599/0590.N-ary%20Tree%20Postorder%20Traversal/README.md", "relative_path_en": "/leetcode/0500-0599/0590.N-ary%20Tree%20Postorder%20Traversal/README_EN.md", "title_cn": "N\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386", "title_en": "N-ary Tree Postorder Traversal", "question_title_slug": "n-ary-tree-postorder-traversal", "content_en": "<p>Given an n-ary tree, return the <i>postorder</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Recursive solution is trivial, could you do it iteratively?</p>\r\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [5,6,3,2,4,1]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0,&nbsp;10^4]</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u540e\u5e8f\u904d\u5386</em>\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u8fd4\u56de\u5176\u540e\u5e8f\u904d\u5386: <code>[5,6,3,2,4,1]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u9012\u5f52\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5b8c\u6210\u6b64\u9898\u5417?</p>", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<int> postorder(Node* root) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public List<Integer> postorder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* postorder(struct Node* root, int* returnSize) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public IList<int> Postorder(Node root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {number[]}\n */\nvar postorder = function(root) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {List[int]}\ndef postorder(root)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func postorder(_ root: Node?) -> [Int] {\n    \t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc postorder(root *Node) []int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def postorder(root: Node): List[Int] = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun postorder(root: Node?): List<Int> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer[]\n     */\n    function postorder($root) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}]}, {"question_id": "0591", "frontend_question_id": "0591", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/tag-validator", "url_en": "https://leetcode.com/problems/tag-validator", "relative_path_cn": "/leetcode/0500-0599/0591.Tag%20Validator/README.md", "relative_path_en": "/leetcode/0500-0599/0591.Tag%20Validator/README_EN.md", "title_cn": "\u6807\u7b7e\u9a8c\u8bc1\u5668", "title_en": "Tag Validator", "question_title_slug": "tag-validator", "content_en": "<p>Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:<p>\r\n<ol>\r\n<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\r\n<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\r\n<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\r\n<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\r\n<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\r\n<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>></code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>></code> should be parsed as TAG_NAME  (not necessarily valid).</li>\r\n<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]></code>. </li>\r\n<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>. </li>\r\n</ol>\r\n\r\n<p><b>Valid Code Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> \"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;\"<br />\r\n<b>Output:</b> True<br />\r\n<b>Explanation:</b> <br>\r\nThe code is wrapped in a closed tag : &lt;DIV> and &lt;/DIV>. <br>\r\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. <br>\r\nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.<br>\r\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.<br />\r\n\r\n<b>Input:</b> \"&lt;DIV>>>  ![cdata[]] &lt;![CDATA[&lt;div>]>]]>]]>>]&lt;/DIV>\"<br />\r\n<b>Output:</b> True<br />\r\n<b>Explanation:</b><br />\r\nWe first separate the code into : start_tag|tag_content|end_tag.<br />\r\nstart_tag -> <b>\"&lt;DIV&gt;\"</b><br />\r\nend_tag -> <b>\"&lt;/DIV>\"</b><br />\r\ntag_content could also be separated into : text1|cdata|text2.<br />\r\ntext1 -> <b>\">>  ![cdata[]] \"</b><br />\r\ncdata -> <b>\"&lt;![CDATA[&lt;div>]>]]>\"</b>, where the CDATA_CONTENT is <b>\"&lt;div>]>\"</b><br />\r\ntext2 -> <b>\"]]>>]\"</b><br />\r\n\r\nThe reason why start_tag is NOT <b>\"&lt;DIV>>>\"</b> is because of the rule 6.\r\nThe reason why cdata is NOT <b>\"&lt;![CDATA[&lt;div>]>]]>]]>\"</b> is because of the rule 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Invalid Code Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> \"&lt;A>  &lt;B> &lt;/A>   &lt;/B>\"\r\n<b>Output:</b> False\r\n<b>Explanation:</b> Unbalanced. If \"&lt;A>\" is closed, then \"&lt;B>\" must be unmatched, and vice versa.\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  unmatched &lt  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt; closed tags with invalid tag name  &lt;b>123&lt;/b> &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890> and &lt;CDATA[[]]>  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  unmatched start tag &lt;B>  and unmatched end tag &lt;/C>  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>For simplicity, you could assume the input code (including the <b>any characters</b> mentioned above) only contain <code>letters</code>, <code>digits</code>, <code>'&lt;'</code>,<code>'>'</code>,<code>'/'</code>,<code>'!'</code>,<code>'['</code>,<code>']'</code> and <code>' '</code>.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u4ee3\u7801\u7247\u6bb5\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u9a8c\u8bc1\u5668\u6765\u89e3\u6790\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5b83\u662f\u5426\u5408\u6cd5\u3002\u5408\u6cd5\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u7684\u6240\u6709\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u4ee3\u7801\u5fc5\u987b\u88ab<strong>\u5408\u6cd5\u7684\u95ed\u5408\u6807\u7b7e</strong>\u5305\u56f4\u3002\u5426\u5219\uff0c\u4ee3\u7801\u662f\u65e0\u6548\u7684\u3002</li>\n\t<li><strong>\u95ed\u5408\u6807\u7b7e</strong>\uff08\u4e0d\u4e00\u5b9a\u5408\u6cd5\uff09\u8981\u4e25\u683c\u7b26\u5408\u683c\u5f0f\uff1a<code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>\u3002\u5176\u4e2d\uff0c<code>&lt;TAG_NAME&gt;</code>\u662f\u8d77\u59cb\u6807\u7b7e\uff0c<code>&lt;/TAG_NAME&gt;</code>\u662f\u7ed3\u675f\u6807\u7b7e\u3002\u8d77\u59cb\u548c\u7ed3\u675f\u6807\u7b7e\u4e2d\u7684 TAG_NAME \u5e94\u5f53\u76f8\u540c\u3002\u5f53\u4e14\u4ec5\u5f53&nbsp;TAG_NAME \u548c TAG_CONTENT \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u95ed\u5408\u6807\u7b7e\u624d\u662f<strong>\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li><strong>\u5408\u6cd5\u7684</strong>&nbsp;<code>TAG_NAME</code>&nbsp;\u4ec5\u542b\u6709<strong>\u5927\u5199\u5b57\u6bcd</strong>\uff0c\u957f\u5ea6\u5728\u8303\u56f4 [1,9] \u4e4b\u95f4\u3002\u5426\u5219\uff0c\u8be5&nbsp;<code>TAG_NAME</code>&nbsp;\u662f<strong>\u4e0d\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li><strong>\u5408\u6cd5\u7684</strong>&nbsp;<code>TAG_CONTENT</code>&nbsp;\u53ef\u4ee5\u5305\u542b\u5176\u4ed6<strong>\u5408\u6cd5\u7684\u95ed\u5408\u6807\u7b7e</strong>\uff0c<strong>cdata</strong>&nbsp;\uff08\u8bf7\u53c2\u8003\u89c4\u52197\uff09\u548c\u4efb\u610f\u5b57\u7b26\uff08\u6ce8\u610f\u53c2\u8003\u89c4\u52191\uff09<strong>\u9664\u4e86</strong>\u4e0d\u5339\u914d\u7684<code>&lt;</code>\u3001\u4e0d\u5339\u914d\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u6807\u7b7e\u3001\u4e0d\u5339\u914d\u7684\u6216\u5e26\u6709\u4e0d\u5408\u6cd5 TAG_NAME \u7684\u95ed\u5408\u6807\u7b7e\u3002\u5426\u5219\uff0c<code>TAG_CONTENT</code>&nbsp;\u662f<strong>\u4e0d\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li>\u4e00\u4e2a\u8d77\u59cb\u6807\u7b7e\uff0c\u5982\u679c\u6ca1\u6709\u5177\u6709\u76f8\u540c&nbsp;TAG_NAME \u7684\u7ed3\u675f\u6807\u7b7e\u4e0e\u4e4b\u5339\u914d\uff0c\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\u4e0d\u8fc7\uff0c\u4f60\u4e5f\u9700\u8981\u8003\u8651\u6807\u7b7e\u5d4c\u5957\u7684\u95ee\u9898\u3002</li>\n\t<li>\u4e00\u4e2a<code>&lt;</code>\uff0c\u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u540e\u7eed\u7684<code>&gt;</code>\u4e0e\u4e4b\u5339\u914d\uff0c\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5e76\u4e14\u5f53\u4f60\u627e\u5230\u4e00\u4e2a<code>&lt;</code>\u6216<code>&lt;/</code>\u65f6\uff0c\u6240\u6709\u76f4\u5230\u4e0b\u4e00\u4e2a<code>&gt;</code>\u7684\u524d\u7684\u5b57\u7b26\uff0c\u90fd\u5e94\u5f53\u88ab\u89e3\u6790\u4e3a&nbsp;TAG_NAME\uff08\u4e0d\u4e00\u5b9a\u5408\u6cd5\uff09\u3002</li>\n\t<li>cdata \u6709\u5982\u4e0b\u683c\u5f0f\uff1a<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>\u3002<code>CDATA_CONTENT</code>&nbsp;\u7684\u8303\u56f4\u88ab\u5b9a\u4e49\u6210&nbsp;<code>&lt;![CDATA[</code>&nbsp;\u548c<strong>\u540e\u7eed\u7684\u7b2c\u4e00\u4e2a</strong>&nbsp;<code>]]&gt;</code>\u4e4b\u95f4\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>CDATA_CONTENT</code>&nbsp;\u53ef\u4ee5\u5305\u542b<strong>\u4efb\u610f\u5b57\u7b26</strong>\u3002cdata \u7684\u529f\u80fd\u662f\u963b\u6b62\u9a8c\u8bc1\u5668\u89e3\u6790<code>CDATA_CONTENT</code>\uff0c\u6240\u4ee5\u5373\u4f7f\u5176\u4e2d\u6709\u4e00\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u89e3\u6790\u4e3a\u6807\u7b7e\uff08\u65e0\u8bba\u5408\u6cd5\u8fd8\u662f\u4e0d\u5408\u6cd5\uff09\uff0c\u4e5f\u5e94\u8be5\u5c06\u5b83\u4eec\u89c6\u4e3a<strong>\u5e38\u89c4\u5b57\u7b26</strong>\u3002</li>\n</ol>\n\n<p><strong>\u5408\u6cd5\u4ee3\u7801\u7684\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \n\n\u4ee3\u7801\u88ab\u5305\u542b\u5728\u4e86\u95ed\u5408\u7684\u6807\u7b7e\u5185\uff1a &lt;DIV&gt; \u548c &lt;/DIV&gt; \u3002\n\nTAG_NAME \u662f\u5408\u6cd5\u7684\uff0cTAG_CONTENT \u5305\u542b\u4e86\u4e00\u4e9b\u5b57\u7b26\u548c cdata \u3002 \n\n\u5373\u4f7f CDATA_CONTENT \u542b\u6709\u4e0d\u5339\u914d\u7684\u8d77\u59cb\u6807\u7b7e\u548c\u4e0d\u5408\u6cd5\u7684 TAG_NAME\uff0c\u5b83\u5e94\u8be5\u88ab\u89c6\u4e3a\u666e\u901a\u7684\u6587\u672c\uff0c\u800c\u4e0d\u662f\u6807\u7b7e\u3002\n\n\u6240\u4ee5 TAG_CONTENT \u662f\u5408\u6cd5\u7684\uff0c\u56e0\u6b64\u4ee3\u7801\u662f\u5408\u6cd5\u7684\u3002\u6700\u7ec8\u8fd4\u56deTrue\u3002\n\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong>\n\n\u6211\u4eec\u9996\u5148\u5c06\u4ee3\u7801\u5206\u5272\u4e3a\uff1a start_tag|tag_content|end_tag \u3002\n\nstart_tag -&gt; <strong>&quot;&lt;DIV&gt;&quot;</strong>\n\nend_tag -&gt; <strong>&quot;&lt;/DIV&gt;&quot;</strong>\n\ntag_content \u4e5f\u53ef\u88ab\u5206\u5272\u4e3a\uff1a text1|cdata|text2 \u3002\n\ntext1 -&gt; <strong>&quot;&gt;&gt;  ![cdata[]] &quot;</strong>\n\ncdata -&gt; <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</strong> \uff0c\u5176\u4e2d CDATA_CONTENT \u4e3a <strong>&quot;&lt;div&gt;]&gt;&quot;</strong>\n\ntext2 -&gt; <strong>&quot;]]&gt;&gt;]&quot;</strong>\n\n\nstart_tag <strong>\u4e0d</strong>\u662f <strong>&quot;&lt;DIV&gt;&gt;&gt;&quot;</strong> \u7684\u539f\u56e0\u53c2\u7167\u89c4\u5219 6 \u3002\ncdata <strong>\u4e0d</strong>\u662f <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</strong> \u7684\u539f\u56e0\u53c2\u7167\u89c4\u5219 7 \u3002\n</pre>\n\n<p><strong>\u4e0d\u5408\u6cd5\u4ee3\u7801\u7684\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \u4e0d\u5408\u6cd5\u3002\u5982\u679c &quot;&lt;A&gt;&quot; \u662f\u95ed\u5408\u7684\uff0c\u90a3\u4e48 &quot;&lt;B&gt;&quot; \u4e00\u5b9a\u662f\u4e0d\u5339\u914d\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4e3a\u7b80\u660e\u8d77\u89c1\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8f93\u5165\u7684\u4ee3\u7801\uff08\u5305\u62ec\u63d0\u5230\u7684<strong>\u4efb\u610f\u5b57\u7b26</strong>\uff09\u53ea\u5305\u542b<code>\u6570\u5b57</code>, <font color=\"#c7254e\" face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"background-color:#f9f2f4; font-size:12.6px\">\u5b57\u6bcd</span></font>, <code>&#39;&lt;&#39;</code>,<code>&#39;&gt;&#39;</code>,<code>&#39;/&#39;</code>,<code>&#39;!&#39;</code>,<code>&#39;[&#39;</code>,<code>&#39;]&#39;</code>\u548c<code>&#39; &#39;</code>\u3002</li>\n</ol>\n", "tags_en": ["Stack", "String"], "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isValid(string code) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isValid(String code) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isValid(self, code):\n        \"\"\"\n        :type code: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isValid(self, code: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isValid(char * code){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsValid(string code) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} code\n * @return {boolean}\n */\nvar isValid = function(code) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} code\n# @return {Boolean}\ndef is_valid(code)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isValid(_ code: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isValid(code string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isValid(code: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isValid(code: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_valid(code: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $code\n     * @return Boolean\n     */\n    function isValid($code) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isValid(code: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0592", "frontend_question_id": "0592", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/fraction-addition-and-subtraction", "url_en": "https://leetcode.com/problems/fraction-addition-and-subtraction", "relative_path_cn": "/leetcode/0500-0599/0592.Fraction%20Addition%20and%20Subtraction/README.md", "relative_path_en": "/leetcode/0500-0599/0592.Fraction%20Addition%20and%20Subtraction/README_EN.md", "title_cn": "\u5206\u6570\u52a0\u51cf\u8fd0\u7b97", "title_en": "Fraction Addition and Subtraction", "question_title_slug": "fraction-addition-and-subtraction", "content_en": "<p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href = \"https://en.wikipedia.org/wiki/Irreducible_fraction\">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2\"\r\n<b>Output:</b> \"0/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2+1/3\"\r\n<b>Output:</b> \"1/3\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>\"1/3-1/2\"\r\n<b>Output:</b> \"-1/6\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b>\"5/3+1/3\"\r\n<b>Output:</b> \"2/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li>\r\n<li>Each fraction (input and output) has format <code>\u00b1numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li>\r\n<li>The input only contains valid <b>irreducible fractions</b>, where the <b>numerator</b> and <b>denominator</b> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.</li> \r\n<li>The number of given fractions will be in the range [1,10].</li>\r\n<li>The numerator and denominator of the <b>final result</b> are guaranteed to be valid and in the range of 32-bit int.</li>\r\n</ol>\r\n</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u52a0\u51cf\u8fd0\u7b97\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u3002&nbsp;\u8fd9\u4e2a\u7ed3\u679c\u5e94\u8be5\u662f\u4e0d\u53ef\u7ea6\u5206\u7684\u5206\u6570\uff0c\u5373<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\" target=\"_blank\">\u6700\u7b80\u5206\u6570</a>\u3002&nbsp;\u5982\u679c\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4f8b\u5982&nbsp;<code>2</code>\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u6210\u5206\u6570\u5f62\u5f0f\uff0c\u5176\u5206\u6bcd\u4e3a&nbsp;<code>1</code>\u3002\u6240\u4ee5\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d, <code>2</code>&nbsp;\u5e94\u8be5\u88ab\u8f6c\u6362\u4e3a&nbsp;<code>2/1</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;-1/2+1/2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;-1/2+1/2+1/3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;1/3-1/2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;-1/6&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;5/3+1/3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;2/1&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u548c\u8f93\u51fa\u5b57\u7b26\u4e32\u53ea\u5305\u542b&nbsp;<code>&#39;0&#39;</code> \u5230&nbsp;<code>&#39;9&#39;</code>&nbsp;\u7684\u6570\u5b57\uff0c\u4ee5\u53ca&nbsp;<code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> \u548c&nbsp;<code>&#39;-&#39;</code>\u3002&nbsp;</li>\n\t<li>\u8f93\u5165\u548c\u8f93\u51fa\u5206\u6570\u683c\u5f0f\u5747\u4e3a&nbsp;<code>&plusmn;\u5206\u5b50/\u5206\u6bcd</code>\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u5206\u6570\u6216\u8005\u8f93\u51fa\u7684\u5206\u6570\u662f\u6b63\u6570\uff0c\u5219&nbsp;<code>&#39;+&#39;</code>&nbsp;\u4f1a\u88ab\u7701\u7565\u6389\u3002</li>\n\t<li>\u8f93\u5165\u53ea\u5305\u542b\u5408\u6cd5\u7684<strong>\u6700\u7b80\u5206\u6570</strong>\uff0c\u6bcf\u4e2a\u5206\u6570\u7684<strong>\u5206\u5b50</strong>\u4e0e<strong>\u5206\u6bcd</strong>\u7684\u8303\u56f4\u662f&nbsp;&nbsp;[1,10]\u3002&nbsp;\u5982\u679c\u5206\u6bcd\u662f1\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u5206\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5206\u6570\u4e2a\u6570\u8303\u56f4\u662f [1,10]\u3002</li>\n\t<li><strong>\u6700\u7ec8\u7ed3\u679c</strong>\u7684\u5206\u5b50\u4e0e\u5206\u6bcd\u4fdd\u8bc1\u662f 32 \u4f4d\u6574\u6570\u8303\u56f4\u5185\u7684\u6709\u6548\u6574\u6570\u3002</li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string fractionAddition(string expression) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String fractionAddition(String expression) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def fractionAddition(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def fractionAddition(self, expression: str) -> str:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * fractionAddition(char * expression){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string FractionAddition(string expression) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} expression\n# @return {String}\ndef fraction_addition(expression)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func fractionAddition(_ expression: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func fractionAddition(expression string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def fractionAddition(expression: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun fractionAddition(expression: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn fraction_addition(expression: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return String\n     */\n    function fractionAddition($expression) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function fractionAddition(expression: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0593", "frontend_question_id": "0593", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-square", "url_en": "https://leetcode.com/problems/valid-square", "relative_path_cn": "/leetcode/0500-0599/0593.Valid%20Square/README.md", "relative_path_en": "/leetcode/0500-0599/0593.Valid%20Square/README_EN.md", "title_cn": "\u6709\u6548\u7684\u6b63\u65b9\u5f62", "title_en": "Valid Square", "question_title_slug": "valid-square", "content_en": "<p>Given the coordinates of four points in 2D space <code>p1</code>, <code>p2</code>, <code>p3</code> and <code>p4</code>, return <code>true</code> <em>if&nbsp;the four points construct a square</em>.</p>\n\n<p>The coordinate of a point <code>p<sub>i</sub></code> is represented as <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The input is <strong>not</strong> given in any order.</p>\n\n<p>A <strong>valid square</strong> has four equal sides with positive length and four equal angles (90-degree angles).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>p1.length == p2.length == p3.length == p4.length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u56db\u70b9\u7684\u5750\u6807\uff0c\u8fd4\u56de\u56db\u70b9\u662f\u5426\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002</p>\n\n<p>\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff08x\uff0cy\uff09\u7531\u4e00\u4e2a\u6709\u4e24\u4e2a\u6574\u6570\u7684\u6574\u6570\u6570\u7ec4\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u8f93\u5165\u6574\u6570\u90fd\u5728 [-10000\uff0c10000] \u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e00\u4e2a\u6709\u6548\u7684\u6b63\u65b9\u5f62\u6709\u56db\u4e2a\u7b49\u957f\u7684\u6b63\u957f\u548c\u56db\u4e2a\u7b49\u89d2\uff0890\u5ea6\u89d2\uff09\u3002</li>\n\t<li>\u8f93\u5165\u70b9\u6ca1\u6709\u987a\u5e8f\u3002</li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def validSquare(self, p1, p2, p3, p4):\n        \"\"\"\n        :type p1: List[int]\n        :type p2: List[int]\n        :type p3: List[int]\n        :type p4: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ValidSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} p1\n * @param {number[]} p2\n * @param {number[]} p3\n * @param {number[]} p4\n * @return {boolean}\n */\nvar validSquare = function(p1, p2, p3, p4) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} p1\n# @param {Integer[]} p2\n# @param {Integer[]} p3\n# @param {Integer[]} p4\n# @return {Boolean}\ndef valid_square(p1, p2, p3, p4)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func validSquare(_ p1: [Int], _ p2: [Int], _ p3: [Int], _ p4: [Int]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func validSquare(p1 []int, p2 []int, p3 []int, p4 []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def validSquare(p1: Array[Int], p2: Array[Int], p3: Array[Int], p4: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun validSquare(p1: IntArray, p2: IntArray, p3: IntArray, p4: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn valid_square(p1: Vec<i32>, p2: Vec<i32>, p3: Vec<i32>, p4: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $p1\n     * @param Integer[] $p2\n     * @param Integer[] $p3\n     * @param Integer[] $p4\n     * @return Boolean\n     */\n    function validSquare($p1, $p2, $p3, $p4) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function validSquare(p1: number[], p2: number[], p3: number[], p4: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0594", "frontend_question_id": "0594", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/longest-harmonious-subsequence", "url_en": "https://leetcode.com/problems/longest-harmonious-subsequence", "relative_path_cn": "/leetcode/0500-0599/0594.Longest%20Harmonious%20Subsequence/README.md", "relative_path_en": "/leetcode/0500-0599/0594.Longest%20Harmonious%20Subsequence/README_EN.md", "title_cn": "\u6700\u957f\u548c\u8c10\u5b50\u5e8f\u5217", "title_en": "Longest Harmonious Subsequence", "question_title_slug": "longest-harmonious-subsequence", "content_en": "<p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is <b>exactly</b> <code>1</code>.</p>\n\n<p>Given an integer array <code>nums</code>, return <em>the length of its longest harmonious subsequence among all its possible subsequences</em>.</p>\n\n<p>A <strong>subsequence</strong> of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,2,5,2,3,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest harmonious subsequence is [3,2,2,2,3].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u548c\u8c10\u6570\u7ec4\u662f\u6307\u4e00\u4e2a\u6570\u7ec4\u91cc\u5143\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u522b\u6b63\u597d\u662f1\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u957f\u7684\u548c\u8c10\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,3,2,2,5,2,3,7]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u539f\u56e0:</strong> \u6700\u957f\u7684\u548c\u8c10\u6570\u7ec4\u662f\uff1a[3,2,2,2,3].\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong> \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u6700\u5927\u4e0d\u8d85\u8fc720,000.</p>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findLHS(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findLHS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findLHS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findLHS(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findLHS(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindLHS(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_lhs(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findLHS(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findLHS(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findLHS(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findLHS(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_lhs(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findLHS($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findLHS(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0595", "frontend_question_id": "0595", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/big-countries", "url_en": "https://leetcode.com/problems/big-countries", "relative_path_cn": "/leetcode/0500-0599/0595.Big%20Countries/README.md", "relative_path_en": "/leetcode/0500-0599/0595.Big%20Countries/README_EN.md", "title_cn": "\u5927\u7684\u56fd\u5bb6", "title_en": "Big Countries", "question_title_slug": "big-countries", "content_en": "<p>There is a table <code>World</code></p>\r\n\r\n<pre>\r\n+-----------------+------------+------------+--------------+---------------+\r\n| name            | continent  | area       | population   | gdp           |\r\n+-----------------+------------+------------+--------------+---------------+\r\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\r\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\r\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\r\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\r\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\r\n+-----------------+------------+------------+--------------+---------------+\r\n</pre>\r\n\r\n<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p>\r\n\r\n<p>Write a SQL solution to output big countries&#39; name, population and area.</p>\r\n\r\n<p>For example, according to the above table, we should output:</p>\r\n\r\n<pre>\r\n+--------------+-------------+--------------+\r\n| name         | population  | area         |\r\n+--------------+-------------+--------------+\r\n| Afghanistan  | 25500100    | 652230       |\r\n| Algeria      | 37100000    | 2381741      |\r\n+--------------+-------------+--------------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n", "content_cn": "<p>\u8fd9\u91cc\u6709\u5f20\u00a0<code>World</code> \u8868</p>\n\n<pre>\n+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n</pre>\n\n<p>\u5982\u679c\u4e00\u4e2a\u56fd\u5bb6\u7684\u9762\u79ef\u8d85\u8fc7 300 \u4e07\u5e73\u65b9\u516c\u91cc\uff0c\u6216\u8005\u4eba\u53e3\u8d85\u8fc7 2500 \u4e07\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fd\u5bb6\u5c31\u662f\u5927\u56fd\u5bb6\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8f93\u51fa\u8868\u4e2d\u6240\u6709\u5927\u56fd\u5bb6\u7684\u540d\u79f0\u3001\u4eba\u53e3\u548c\u9762\u79ef\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u6211\u4eec\u5e94\u8be5\u8f93\u51fa:</p>\n\n<pre>\n+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n</pre>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n", "__typename": "CodeSnippetNode"}]}, {"question_id": "0596", "frontend_question_id": "0596", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/classes-more-than-5-students", "url_en": "https://leetcode.com/problems/classes-more-than-5-students", "relative_path_cn": "/leetcode/0500-0599/0596.Classes%20More%20Than%205%20Students/README.md", "relative_path_en": "/leetcode/0500-0599/0596.Classes%20More%20Than%205%20Students/README_EN.md", "title_cn": "\u8d85\u8fc75\u540d\u5b66\u751f\u7684\u8bfe", "title_en": "Classes More Than 5 Students", "question_title_slug": "classes-more-than-5-students", "content_en": "<p>There is a table <code>courses</code> with columns: <b>student</b> and <b>class</b></p>\r\n\r\n<p>Please list out all classes which have more than or equal to 5 students.</p>\r\n\r\n<p>For example, the table:</p>\r\n\r\n<pre>\r\n+---------+------------+\r\n| student | class      |\r\n+---------+------------+\r\n| A       | Math       |\r\n| B       | English    |\r\n| C       | Math       |\r\n| D       | Biology    |\r\n| E       | Math       |\r\n| F       | Computer   |\r\n| G       | Math       |\r\n| H       | Math       |\r\n| I       | Math       |\r\n+---------+------------+\r\n</pre>\r\n\r\n<p>Should output:</p>\r\n\r\n<pre>\r\n+---------+\r\n| class   |\r\n+---------+\r\n| Math    |\r\n+---------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe students should not be counted duplicate in each course.</p>\r\n", "content_cn": "<p>\u6709\u4e00\u4e2a<code>courses</code> \u8868 \uff0c\u6709: <strong>student&nbsp;(\u5b66\u751f) </strong>\u548c <strong>class (\u8bfe\u7a0b)</strong>\u3002</p>\n\n<p>\u8bf7\u5217\u51fa\u6240\u6709\u8d85\u8fc7\u6216\u7b49\u4e8e5\u540d\u5b66\u751f\u7684\u8bfe\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u8868\uff1a</p>\n\n<pre>+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n</pre>\n\n<p>\u5e94\u8be5\u8f93\u51fa:</p>\n\n<pre>+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5b66\u751f\u5728\u6bcf\u4e2a\u8bfe\u4e2d\u4e0d\u5e94\u88ab\u91cd\u590d\u8ba1\u7b97\u3002</li>\n</ul>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n", "__typename": "CodeSnippetNode"}]}, {"question_id": "0597", "frontend_question_id": "0597", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/friend-requests-i-overall-acceptance-rate", "url_en": "https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate", "relative_path_cn": "/leetcode/0500-0599/0597.Friend%20Requests%20I%3A%20Overall%20Acceptance%20Rate/README.md", "relative_path_en": "/leetcode/0500-0599/0597.Friend%20Requests%20I%3A%20Overall%20Acceptance%20Rate/README_EN.md", "title_cn": "\u597d\u53cb\u7533\u8bf7 I \uff1a\u603b\u4f53\u901a\u8fc7\u7387", "title_en": "Friend Requests I: Overall Acceptance Rate", "question_title_slug": "friend-requests-i-overall-acceptance-rate", "content_en": null, "content_cn": null, "tags_en": [], "tags_cn": [], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0598", "frontend_question_id": "0598", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/range-addition-ii", "url_en": "https://leetcode.com/problems/range-addition-ii", "relative_path_cn": "/leetcode/0500-0599/0598.Range%20Addition%20II/README.md", "relative_path_en": "/leetcode/0500-0599/0598.Range%20Addition%20II/README_EN.md", "title_cn": "\u8303\u56f4\u6c42\u548c II", "title_en": "Range Addition II", "question_title_slug": "range-addition-ii", "content_en": "<p>You are given an <code>m x n</code> matrix <code>M</code> initialized with all <code>0</code>&#39;s and an array of operations <code>ops</code>, where <code>ops[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means <code>M[x][y]</code> should be incremented by one for all <code>0 &lt;= x &lt; a<sub>i</sub></code> and <code>0 &lt;= y &lt; b<sub>i</sub></code>.</p>\n\n<p>Count and return <em>the number of maximum integers in the matrix after performing all the operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg\" style=\"width: 750px; height: 176px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = [[2,2],[3,3]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The maximum integer in M is 2, and there are four of it in M. So return 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = []\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= ops.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>ops[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt;= m</code></li>\n\t<li><code>1 &lt;= b<sub>i</sub> &lt;= n</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u5143\u7d20\u5168\u90e8\u4e3a&nbsp;<strong>0</strong>\uff0c\u5927\u5c0f\u4e3a m*n \u7684\u77e9\u9635&nbsp;<strong>M&nbsp;</strong>\u4ee5\u53ca\u5728&nbsp;<strong>M&nbsp;</strong>\u4e0a\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\u64cd\u4f5c\u3002</p>\n\n<p>\u64cd\u4f5c\u7528\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u7528\u4e00\u4e2a\u542b\u6709\u4e24\u4e2a<strong>\u6b63\u6574\u6570&nbsp;a</strong> \u548c <strong>b</strong> \u7684\u6570\u7ec4\u8868\u793a\uff0c\u542b\u4e49\u662f\u5c06\u6240\u6709\u7b26\u5408&nbsp;<strong>0 &lt;= i &lt; a</strong> \u4ee5\u53ca <strong>0 &lt;= j &lt; b</strong> \u7684\u5143\u7d20&nbsp;<strong>M[i][j]&nbsp;</strong>\u7684\u503c\u90fd<strong>\u589e\u52a0 1</strong>\u3002</p>\n\n<p>\u5728\u6267\u884c\u7ed9\u5b9a\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u540e\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u77e9\u9635\u4e2d\u542b\u6709\u6700\u5927\u6574\u6570\u7684\u5143\u7d20\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \n\u521d\u59cb\u72b6\u6001, M = \n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\n\u6267\u884c\u5b8c\u64cd\u4f5c [2,2] \u540e, M = \n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\n\u6267\u884c\u5b8c\u64cd\u4f5c [3,3] \u540e, M = \n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nM \u4e2d\u6700\u5927\u7684\u6574\u6570\u662f 2, \u800c\u4e14 M \u4e2d\u67094\u4e2a\u503c\u4e3a2\u7684\u5143\u7d20\u3002\u56e0\u6b64\u8fd4\u56de 4\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>m \u548c n \u7684\u8303\u56f4\u662f&nbsp;[1,40000]\u3002</li>\n\t<li>a \u7684\u8303\u56f4\u662f [1,m]\uff0cb \u7684\u8303\u56f4\u662f [1,n]\u3002</li>\n\t<li>\u64cd\u4f5c\u6570\u76ee\u4e0d\u8d85\u8fc7 10000\u3002</li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maxCount(int m, int n, int** ops, int opsSize, int* opsColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxCount(int m, int n, int[][] ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[][]} ops\n# @return {Integer}\ndef max_count(m, n, ops)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxCount(m int, n int, ops [][]int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxCount(m: Int, n: Int, ops: Array<IntArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_count(m: i32, n: i32, ops: Vec<Vec<i32>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[][] $ops\n     * @return Integer\n     */\n    function maxCount($m, $n, $ops) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxCount(m: number, n: number, ops: number[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0599", "frontend_question_id": "0599", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists", "url_en": "https://leetcode.com/problems/minimum-index-sum-of-two-lists", "relative_path_cn": "/leetcode/0500-0599/0599.Minimum%20Index%20Sum%20of%20Two%20Lists/README.md", "relative_path_en": "/leetcode/0500-0599/0599.Minimum%20Index%20Sum%20of%20Two%20Lists/README_EN.md", "title_cn": "\u4e24\u4e2a\u5217\u8868\u7684\u6700\u5c0f\u7d22\u5f15\u603b\u548c", "title_en": "Minimum Index Sum of Two Lists", "question_title_slug": "minimum-index-sum-of-two-lists", "content_en": "<p>Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.</p>\n\n<p>You need to help them find out their <b>common interest</b> with the <b>least list index sum</b>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;Piatti&quot;,&quot;The Grill at Torrey Pines&quot;,&quot;Hungry Hunter Steakhouse&quot;,&quot;Shogun&quot;]\n<strong>Output:</strong> [&quot;Shogun&quot;]\n<strong>Explanation:</strong> The only restaurant they both like is &quot;Shogun&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;KFC&quot;,&quot;Shogun&quot;,&quot;Burger King&quot;]\n<strong>Output:</strong> [&quot;Shogun&quot;]\n<strong>Explanation:</strong> The restaurant they both like and have the least index sum is &quot;Shogun&quot; with index sum 1 (0+1).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;KFC&quot;,&quot;Burger King&quot;,&quot;Tapioca Express&quot;,&quot;Shogun&quot;]\n<strong>Output:</strong> [&quot;KFC&quot;,&quot;Burger King&quot;,&quot;Tapioca Express&quot;,&quot;Shogun&quot;]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;KNN&quot;,&quot;KFC&quot;,&quot;Burger King&quot;,&quot;Tapioca Express&quot;,&quot;Shogun&quot;]\n<strong>Output:</strong> [&quot;KFC&quot;,&quot;Burger King&quot;,&quot;Tapioca Express&quot;,&quot;Shogun&quot;]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;KFC&quot;], list2 = [&quot;KFC&quot;]\n<strong>Output:</strong> [&quot;KFC&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code></li>\n\t<li><code>list1[i]</code> and <code>list2[i]</code> consist of spaces <code>&#39; &#39;</code> and English letters.</li>\n\t<li>All the stings of <code>list1</code> are <strong>unique</strong>.</li>\n\t<li>All the stings of <code>list2</code>&nbsp;are <strong>unique</strong>.</li>\n</ul>\n", "content_cn": "<p>\u5047\u8bbeAndy\u548cDoris\u60f3\u5728\u665a\u9910\u65f6\u9009\u62e9\u4e00\u5bb6\u9910\u5385\uff0c\u5e76\u4e14\u4ed6\u4eec\u90fd\u6709\u4e00\u4e2a\u8868\u793a\u6700\u559c\u7231\u9910\u5385\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u9910\u5385\u7684\u540d\u5b57\u7528\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>\u4f60\u9700\u8981\u5e2e\u52a9\u4ed6\u4eec\u7528<strong>\u6700\u5c11\u7684\u7d22\u5f15\u548c</strong>\u627e\u51fa\u4ed6\u4eec<strong>\u5171\u540c\u559c\u7231\u7684\u9910\u5385</strong>\u3002 \u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u8f93\u51fa\u6240\u6709\u7b54\u6848\u5e76\u4e14\u4e0d\u8003\u8651\u987a\u5e8f\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u7b54\u6848\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;Shogun&quot;]\n<strong>\u89e3\u91ca:</strong> \u4ed6\u4eec\u552f\u4e00\u5171\u540c\u559c\u7231\u7684\u9910\u5385\u662f&ldquo;Shogun&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;Shogun&quot;]\n<strong>\u89e3\u91ca:</strong> \u4ed6\u4eec\u5171\u540c\u559c\u7231\u4e14\u5177\u6709\u6700\u5c0f\u7d22\u5f15\u548c\u7684\u9910\u5385\u662f&ldquo;Shogun&rdquo;\uff0c\u5b83\u6709\u6700\u5c0f\u7684\u7d22\u5f15\u548c1(0+1)\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u4e24\u4e2a\u5217\u8868\u7684\u957f\u5ea6\u8303\u56f4\u90fd\u5728&nbsp;[1, 1000]\u5185\u3002</li>\n\t<li>\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c06\u5728[1\uff0c30]\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u5230\u5217\u8868\u7684\u957f\u5ea6\u51cf1\u3002</li>\n\t<li>\u4e24\u4e2a\u5217\u8868\u90fd\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</li>\n</ol>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String[] findRestaurant(String[] list1, String[] list2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findRestaurant(self, list1, list2):\n        \"\"\"\n        :type list1: List[str]\n        :type list2: List[str]\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findRestaurant(char ** list1, int list1Size, char ** list2, int list2Size, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string[] FindRestaurant(string[] list1, string[] list2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} list1\n * @param {string[]} list2\n * @return {string[]}\n */\nvar findRestaurant = function(list1, list2) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} list1\n# @param {String[]} list2\n# @return {String[]}\ndef find_restaurant(list1, list2)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findRestaurant(_ list1: [String], _ list2: [String]) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findRestaurant(list1 []string, list2 []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findRestaurant(list1: Array[String], list2: Array[String]): Array[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findRestaurant(list1: Array<String>, list2: Array<String>): Array<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_restaurant(list1: Vec<String>, list2: Vec<String>) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $list1\n     * @param String[] $list2\n     * @return String[]\n     */\n    function findRestaurant($list1, $list2) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findRestaurant(list1: string[], list2: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}]}