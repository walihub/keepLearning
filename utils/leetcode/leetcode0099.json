{
    "leetcode": [{
        "question_id": "0001",
        "frontend_question_id": "0001",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/two-sum",
        "url_en": "https://leetcode.com/problems/two-sum",
        "relative_path_cn": "/leetcode/0000-0099/0001.Two%20Sum/README.md",
        "relative_path_en": "/leetcode/0000-0099/0001.Two%20Sum/README_EN.md",
        "title_cn": "\u4e24\u6570\u4e4b\u548c",
        "title_en": "Two Sum",
        "question_title_slug": "two-sum",
        "content_en": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3&nbsp;<strong>\u4e24\u4e2a</strong>&nbsp;\u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\u56e0\u4e3a nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9\n\u6240\u4ee5\u8fd4\u56de [<strong>0, 1</strong>]\n</pre>\n",
        "tags_en": ["Array", "Hash Table"],
        "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func twoSum(nums []int, target int) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function twoSum(nums: number[], target: number): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0002",
        "frontend_question_id": "0002",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/add-two-numbers",
        "url_en": "https://leetcode.com/problems/add-two-numbers",
        "relative_path_cn": "/leetcode/0000-0099/0002.Add%20Two%20Numbers/README.md",
        "relative_path_en": "/leetcode/0000-0099/0002.Add%20Two%20Numbers/README_EN.md",
        "title_cn": "\u4e24\u6570\u76f8\u52a0",
        "title_en": "Add Two Numbers",
        "question_title_slug": "add-two-numbers",
        "content_en": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u51fa\u4e24\u4e2a&nbsp;<strong>\u975e\u7a7a</strong> \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167&nbsp;<strong>\u9006\u5e8f</strong>&nbsp;\u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8&nbsp;<strong>\u4e00\u4f4d</strong>&nbsp;\u6570\u5b57\u3002</p>\n\n<p>\u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002</p>\n\n<p>\u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0&nbsp;\u5f00\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>\u8f93\u51fa\uff1a</strong>7 -&gt; 0 -&gt; 8\n<strong>\u539f\u56e0\uff1a</strong>342 + 465 = 807\n</pre>\n",
        "tags_en": ["Linked List", "Math"],
        "tags_cn": ["\u94fe\u8868", "\u6570\u5b66"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef add_two_numbers(l1, l2)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function addTwoNumbers($l1, $l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0003",
        "frontend_question_id": "0003",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/longest-substring-without-repeating-characters",
        "url_en": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "relative_path_cn": "/leetcode/0000-0099/0003.Longest%20Substring%20Without%20Repeating%20Characters/README.md",
        "relative_path_en": "/leetcode/0000-0099/0003.Longest%20Substring%20Without%20Repeating%20Characters/README_EN.md",
        "title_cn": "\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",
        "title_en": "Longest Substring Without Repeating Characters",
        "question_title_slug": "longest-substring-without-repeating-characters",
        "content_en": "<p>Given a string <code>s</code>, find the length of the <b>longest substring</b> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684\u00a0<strong>\u6700\u957f\u5b50\u4e32\u00a0</strong>\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s = \"abcabcbb\"\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca:</strong> \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f <code>\"abc\"\uff0c\u6240\u4ee5\u5176</code>\u957f\u5ea6\u4e3a 3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s = \"bbbbb\"\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>\u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f <code>\"b\"</code>\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s = \"pwwkew\"\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca: </strong>\u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f\u00a0<code>\"wke\"</code>\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n\u00a0    \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f <strong>\u5b50\u4e32 </strong>\u7684\u957f\u5ea6\uff0c<code>\"pwke\"</code>\u00a0\u662f\u4e00\u4e2a<em>\u5b50\u5e8f\u5217\uff0c</em>\u4e0d\u662f\u5b50\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s = \"\"\n<strong>\u8f93\u51fa: </strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code>\u00a0\u7531\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u548c\u7a7a\u683c\u7ec4\u6210</li>\n</ul>\n",
        "tags_en": ["Hash Table", "Two Pointers", "String", "Sliding Window"],
        "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32", null],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint lengthOfLongestSubstring(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func lengthOfLongestSubstring(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function lengthOfLongestSubstring(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0004",
        "frontend_question_id": "0004",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/median-of-two-sorted-arrays",
        "url_en": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "relative_path_cn": "/leetcode/0000-0099/0004.Median%20of%20Two%20Sorted%20Arrays/README.md",
        "relative_path_en": "/leetcode/0000-0099/0004.Median%20of%20Two%20Sorted%20Arrays/README_EN.md",
        "title_cn": "\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570",
        "title_en": "Median of Two Sorted Arrays",
        "question_title_slug": "median-of-two-sorted-arrays",
        "content_en": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p><strong>Follow up:</strong> The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0], nums2 = [0,0]\n<strong>Output:</strong> 0.00000\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [], nums2 = [1]\n<strong>Output:</strong> 1.00000\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2], nums2 = []\n<strong>Output:</strong> 2.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4&nbsp;<code>nums1</code> \u548c&nbsp;<code>nums2</code>\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(log (m+n))</code> \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [1,3], nums2 = [2]\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [1,2], nums2 = [3,4]\n<strong>\u8f93\u51fa\uff1a</strong>2.50000\n<strong>\u89e3\u91ca\uff1a</strong>\u5408\u5e76\u6570\u7ec4 = [1,2,3,4] \uff0c\u4e2d\u4f4d\u6570 (2 + 3) / 2 = 2.5\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [0,0], nums2 = [0,0]\n<strong>\u8f93\u51fa\uff1a</strong>0.00000\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [], nums2 = [1]\n<strong>\u8f93\u51fa\uff1a</strong>1.00000\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums1 = [2], nums2 = []\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "tags_en": ["Array", "Binary Search", "Divide and Conquer"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e", "\u5206\u6cbb\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\ndouble findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Float}\ndef find_median_sorted_arrays(nums1, nums2)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Float\n     */\n    function findMedianSortedArrays($nums1, $nums2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0005",
        "frontend_question_id": "0005",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/longest-palindromic-substring",
        "url_en": "https://leetcode.com/problems/longest-palindromic-substring",
        "relative_path_cn": "/leetcode/0000-0099/0005.Longest%20Palindromic%20Substring/README.md",
        "relative_path_en": "/leetcode/0000-0099/0005.Longest%20Palindromic%20Substring/README_EN.md",
        "title_cn": "\u6700\u957f\u56de\u6587\u5b50\u4e32",
        "title_en": "Longest Palindromic Substring",
        "question_title_slug": "longest-palindromic-substring",
        "content_en": "<p>Given a string <code>s</code>, return&nbsp;<em>the longest palindromic substring</em> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ac&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters (lower-case and/or upper-case),</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>s</code> \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;babad&quot;\n<strong>\u8f93\u51fa:</strong> &quot;bab&quot;\n<strong>\u6ce8\u610f:</strong> &quot;aba&quot; \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;cbbd&quot;\n<strong>\u8f93\u51fa:</strong> &quot;bb&quot;\n</pre>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String longestPalindrome(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * longestPalindrome(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func longestPalindrome(s string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function longestPalindrome(s: string): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0006",
        "frontend_question_id": "0006",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/zigzag-conversion",
        "url_en": "https://leetcode.com/problems/zigzag-conversion",
        "relative_path_cn": "/leetcode/0000-0099/0006.ZigZag%20Conversion/README.md",
        "relative_path_en": "/leetcode/0000-0099/0006.ZigZag%20Conversion/README_EN.md",
        "title_cn": "Z \u5b57\u5f62\u53d8\u6362",
        "title_en": "ZigZag Conversion",
        "question_title_slug": "zigzag-conversion",
        "content_en": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n",
        "content_cn": "<p>\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c&nbsp;Z \u5b57\u5f62\u6392\u5217\u3002</p>\n\n<p>\u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a <code>&quot;LEETCODEISHIRING&quot;</code>&nbsp;\u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a</p>\n\n<pre>L   C   I   R\nE T O E S I I G\nE   D   H   N\n</pre>\n\n<p>\u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a<code>&quot;LCIRETOESIIGEDHN&quot;</code>\u3002</p>\n\n<p>\u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a</p>\n\n<pre>string convert(string s, int numRows);</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows = 3\n<strong>\u8f93\u51fa:</strong> &quot;LCIRETOESIIGEDHN&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows =&nbsp;4\n<strong>\u8f93\u51fa:</strong>&nbsp;&quot;LDREOEIIECIHNTSG&quot;\n<strong>\u89e3\u91ca:</strong>\n\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G</pre>\n",
        "tags_en": ["String"],
        "tags_cn": ["\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string convert(string s, int numRows) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String convert(String s, int numRows) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * convert(char * s, int numRows){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string Convert(string s, int numRows) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func convert(s string, numRows int) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def convert(s: String, numRows: Int): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun convert(s: String, numRows: Int): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function convert(s: string, numRows: number): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0007",
        "frontend_question_id": "0007",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/reverse-integer",
        "url_en": "https://leetcode.com/problems/reverse-integer",
        "relative_path_cn": "/leetcode/0000-0099/0007.Reverse%20Integer/README.md",
        "relative_path_en": "/leetcode/0000-0099/0007.Reverse%20Integer/README_EN.md",
        "title_cn": "\u6574\u6570\u53cd\u8f6c",
        "title_en": "Reverse Integer",
        "question_title_slug": "reverse-integer",
        "content_en": "<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n\n<p><strong>Note:</strong><br />\nAssume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> x = 0\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 123\n<strong>\u8f93\u51fa:</strong> 321\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -123\n<strong>\u8f93\u51fa:</strong> -321\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 120\n<strong>\u8f93\u51fa:</strong> 21\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002</p>\n",
        "tags_en": ["Math"],
        "tags_cn": ["\u6570\u5b66"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int reverse(int x) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int reverse(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def reverse(self, x: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint reverse(int x){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int Reverse(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func reverse(x int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def reverse(x: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun reverse(x: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function reverse(x: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0008",
        "frontend_question_id": "0008",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/string-to-integer-atoi",
        "url_en": "https://leetcode.com/problems/string-to-integer-atoi",
        "relative_path_cn": "/leetcode/0000-0099/0008.String%20to%20Integer%20%28atoi%29/README.md",
        "relative_path_en": "/leetcode/0000-0099/0008.String%20to%20Integer%20%28atoi%29/README_EN.md",
        "title_cn": "\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)",
        "title_en": "String to Integer (atoi)",
        "question_title_slug": "string-to-integer-atoi",
        "content_en": "<p>Implement <code><span>atoi</span></code> which&nbsp;converts a string to an integer.</p>\n\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n\n<p>If no valid conversion could be performed, a zero value is returned.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li>\n\t<li>Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: <code>[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]</code>. If the numerical value is out of the range of representable values,&nbsp;<code>2<sup>31&nbsp;</sup>&minus; 1</code>&nbsp;or <code>&minus;2<sup>31</sup></code>&nbsp;is returned.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> str = &quot;42&quot;\n<strong>Output:</strong> 42\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> str = &quot;   -42&quot;\n<strong>Output:</strong> -42\n<strong>Explanation:</strong> The first non-whitespace character is &#39;-&#39;, which is the minus sign. Then take as many numerical digits as possible, which gets 42.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> str = &quot;4193 with words&quot;\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong> Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> str = &quot;words and 987&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The first non-whitespace character is &#39;w&#39;, which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> str = &quot;-91283472332&quot;\n<strong>Output:</strong> -2147483648\n<strong>Explanation:</strong> The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer. Thefore INT_MIN (&minus;2<sup>31</sup>) is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits, <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code> and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a&nbsp;<code>atoi</code>&nbsp;\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002</p>\n\n<p>\u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002\u63a5\u4e0b\u6765\u7684\u8f6c\u5316\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u3002</li>\n\t<li>\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>\u8be5\u5b57\u7b26\u4e32\u5728\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002</li>\n</ul>\n\n<p>\u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u5373\u65e0\u6cd5\u8fdb\u884c\u6709\u6548\u8f6c\u6362\u3002</p>\n\n<p>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0 \u3002</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 <code>&#39; &#39;</code> \u3002</li>\n\t<li>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de &nbsp;INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) \u6216&nbsp;INT_MIN (&minus;2<sup>31</sup>) \u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;42&quot;\n<strong>\u8f93\u51fa:</strong> 42\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;   -42&quot;\n<strong>\u8f93\u51fa:</strong> -42\n<strong>\u89e3\u91ca: </strong>\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a &#39;-&#39;, \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n&nbsp;    \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;4193 with words&quot;\n<strong>\u8f93\u51fa:</strong> 4193\n<strong>\u89e3\u91ca:</strong> \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 &#39;3&#39; \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;words and 987&quot;\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f &#39;w&#39;, \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;-91283472332&quot;\n<strong>\u8f93\u51fa:</strong> -2147483648\n<strong>\u89e3\u91ca:</strong> \u6570\u5b57 &quot;-91283472332&quot; \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n&nbsp;    \u56e0\u6b64\u8fd4\u56de INT_MIN (&minus;2<sup>31</sup>) \u3002\n</pre>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int myAtoi(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int myAtoi(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def myAtoi(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def myAtoi(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint myAtoi(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MyAtoi(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef my_atoi(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func myAtoi(_ s: String) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func myAtoi(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def myAtoi(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun myAtoi(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn my_atoi(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function myAtoi($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function myAtoi(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0009",
        "frontend_question_id": "0009",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/palindrome-number",
        "url_en": "https://leetcode.com/problems/palindrome-number",
        "relative_path_cn": "/leetcode/0000-0099/0009.Palindrome%20Number/README.md",
        "relative_path_en": "/leetcode/0000-0099/0009.Palindrome%20Number/README_EN.md",
        "title_cn": "\u56de\u6587\u6570",
        "title_en": "Palindrome Number",
        "question_title_slug": "palindrome-number",
        "content_en": "<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\n\n<p><strong>Follow up:</strong> Could you solve&nbsp;it without converting the integer to a string?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -101\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 121\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -121\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n",
        "tags_en": ["Math"],
        "tags_cn": ["\u6570\u5b66"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isPalindrome(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isPalindrome(int x){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isPalindrome(x int) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isPalindrome(x: number): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0010",
        "frontend_question_id": "0010",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/regular-expression-matching",
        "url_en": "https://leetcode.com/problems/regular-expression-matching",
        "relative_path_cn": "/leetcode/0000-0099/0010.Regular%20Expression%20Matching/README.md",
        "relative_path_en": "/leetcode/0000-0099/0010.Regular%20Expression%20Matching/README_EN.md",
        "title_cn": "\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d",
        "title_en": "Regular Expression Matching",
        "question_title_slug": "regular-expression-matching",
        "content_en": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:<code>&nbsp;</code></p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, p = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;mississippi&quot;, p = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>0 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s</code>\u00a0\u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b\u00a0<code>p</code>\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 <code>'.'</code>\u00a0\u548c\u00a0<code>'*'</code>\u00a0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002</p>\n\n<ul>\n\t<li><code>'.'</code> \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26</li>\n\t<li><code>'*'</code> \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20</li>\n</ul>\n\n<p>\u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6\u00a0<strong>\u6574\u4e2a\u00a0</strong>\u5b57\u7b26\u4e32\u00a0<code>s</code>\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"aa\" p = \"a\"\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"aa\" p = \"a*\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a03\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"ab\" p = \".*\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"aab\" p = \"c*a*b\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a '*' \u8868\u793a\u96f6\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd9\u91cc 'c' \u4e3a 0 \u4e2a, 'a' \u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"mississippi\" p = \"mis*is*p*.\"\n<strong>\u8f93\u51fa\uff1a</strong>false</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length\u00a0<= 20</code></li>\n\t<li><code>0 <= p.length\u00a0<= 30</code></li>\n\t<li><code>s</code>\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0<code>a-z</code>\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>p</code>\u00a0\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece\u00a0<code>a-z</code>\u00a0\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26\u00a0<code>.</code>\u00a0\u548c\u00a0<code>*</code>\u3002</li>\n\t<li>\u4fdd\u8bc1\u6bcf\u6b21\u51fa\u73b0\u5b57\u7b26\u00a0<code>*</code> \u65f6\uff0c\u524d\u9762\u90fd\u5339\u914d\u5230\u6709\u6548\u7684\u5b57\u7b26</li>\n</ul>\n",
        "tags_en": ["String", "Dynamic Programming", "Backtracking"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isMatch(char * s, char * p){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isMatch(s string, p string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isMatch(s: string, p: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0011",
        "frontend_question_id": "0011",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/container-with-most-water",
        "url_en": "https://leetcode.com/problems/container-with-most-water",
        "relative_path_cn": "/leetcode/0000-0099/0011.Container%20With%20Most%20Water/README.md",
        "relative_path_en": "/leetcode/0000-0099/0011.Container%20With%20Most%20Water/README_EN.md",
        "title_cn": "\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668",
        "title_en": "Container With Most Water",
        "question_title_slug": "container-with-most-water",
        "content_en": "<p>Given <code>n</code> non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code><sub>&nbsp;</sub>, where each represents a point at coordinate <code>(i, a<sub>i</sub>)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of the line <code>i</code> is at <code>(i, a<sub>i</sub>)</code> and <code>(i, 0)</code>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p>\n\n<p><strong>Notice</strong>&nbsp;that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,3,2,1,4]\n<strong>Output:</strong> 16\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,2,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n = height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60 <code>n</code> \u4e2a\u975e\u8d1f\u6574\u6570 <code>a<sub>1</sub>\uff0ca<sub>2\uff0c</sub>...\uff0ca</code><sub><code>n</code>\uff0c</sub>\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9\u00a0<code>(i,\u00a0a<sub>i</sub>)</code> \u3002\u5728\u5750\u6807\u5185\u753b <code>n</code> \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf <code>i</code>\u00a0\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a\u00a0<code>(i,\u00a0a<sub>i</sub>)</code> \u548c <code>(i, 0)</code> \u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e\u00a0<code>x</code>\u00a0\u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"height: 287px; width: 600px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[1,8,6,2,5,4,8,3,7]\n<strong>\u8f93\u51fa\uff1a</strong>49 \n<strong>\u89e3\u91ca\uff1a</strong>\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a\u00a049\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>height = [1,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>height = [4,3,2,1,4]\n<strong>\u8f93\u51fa\uff1a</strong>16\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>height = [1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n = height.length</code></li>\n\t<li><code>2 <= n <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 <= height[i] <= 3 * 10<sup>4</sup></code></li>\n</ul>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int maxArea(int[] height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint maxArea(int* height, int heightSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MaxArea(int[] height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maxArea(height []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maxArea(height: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0012",
        "frontend_question_id": "0012",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/integer-to-roman",
        "url_en": "https://leetcode.com/problems/integer-to-roman",
        "relative_path_cn": "/leetcode/0000-0099/0012.Integer%20to%20Roman/README.md",
        "relative_path_en": "/leetcode/0000-0099/0012.Integer%20to%20Roman/README_EN.md",
        "title_cn": "\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57",
        "title_en": "Integer to Roman",
        "question_title_slug": "integer-to-roman",
        "content_en": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given an integer, convert it to a roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 3\n<strong>Output:</strong> &quot;III&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 4\n<strong>Output:</strong> &quot;IV&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 9\n<strong>Output:</strong> &quot;IX&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 58\n<strong>Output:</strong> &quot;LVIII&quot;\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1994\n<strong>Output:</strong> &quot;MCMXCIV&quot;\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n",
        "content_cn": "<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a&nbsp;<code>I</code>\uff0c&nbsp;<code>V</code>\uff0c&nbsp;<code>X</code>\uff0c&nbsp;<code>L</code>\uff0c<code>C</code>\uff0c<code>D</code>&nbsp;\u548c&nbsp;<code>M</code>\u3002</p>\n\n<pre><strong>\u5b57\u7b26</strong>          <strong>\u6570\u503c</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a&nbsp;<code>II</code>&nbsp;\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a&nbsp;<code>XII</code>&nbsp;\uff0c\u5373\u4e3a&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002 27 \u5199\u505a&nbsp;&nbsp;<code>XXVII</code>, \u5373\u4e3a&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002</p>\n\n<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a&nbsp;<code>IIII</code>\uff0c\u800c\u662f&nbsp;<code>IV</code>\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a&nbsp;<code>IX</code>\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>V</code>&nbsp;(5) \u548c&nbsp;<code>X</code>&nbsp;(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002</li>\n\t<li><code>X</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>L</code>&nbsp;(50) \u548c&nbsp;<code>C</code>&nbsp;(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c&nbsp;90\u3002&nbsp;</li>\n\t<li><code>C</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>D</code>&nbsp;(500) \u548c&nbsp;<code>M</code>&nbsp;(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a&nbsp;400 \u548c&nbsp;900\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1&nbsp;\u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;3\n<strong>\u8f93\u51fa:</strong> &quot;III&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;4\n<strong>\u8f93\u51fa:</strong> &quot;IV&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;9\n<strong>\u8f93\u51fa:</strong> &quot;IX&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;58\n<strong>\u8f93\u51fa:</strong> &quot;LVIII&quot;\n<strong>\u89e3\u91ca:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;1994\n<strong>\u8f93\u51fa:</strong> &quot;MCMXCIV&quot;\n<strong>\u89e3\u91ca:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string intToRoman(int num) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String intToRoman(int num) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def intToRoman(self, num: int) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * intToRoman(int num){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string IntToRoman(int num) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func intToRoman(num int) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def intToRoman(num: Int): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun intToRoman(num: Int): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function intToRoman(num: number): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0013",
        "frontend_question_id": "0013",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/roman-to-integer",
        "url_en": "https://leetcode.com/problems/roman-to-integer",
        "relative_path_cn": "/leetcode/0000-0099/0013.Roman%20to%20Integer/README.md",
        "relative_path_en": "/leetcode/0000-0099/0013.Roman%20to%20Integer/README_EN.md",
        "title_cn": "\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570",
        "title_en": "Roman to Integer",
        "question_title_slug": "roman-to-integer",
        "content_en": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IV&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IX&quot;\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26:&nbsp;<code>I</code>\uff0c&nbsp;<code>V</code>\uff0c&nbsp;<code>X</code>\uff0c&nbsp;<code>L</code>\uff0c<code>C</code>\uff0c<code>D</code>&nbsp;\u548c&nbsp;<code>M</code>\u3002</p>\n\n<pre><strong>\u5b57\u7b26</strong>          <strong>\u6570\u503c</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a&nbsp;<code>II</code>&nbsp;\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a&nbsp;<code>XII</code>&nbsp;\uff0c\u5373\u4e3a&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002 27 \u5199\u505a&nbsp;&nbsp;<code>XXVII</code>, \u5373\u4e3a&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002</p>\n\n<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a&nbsp;<code>IIII</code>\uff0c\u800c\u662f&nbsp;<code>IV</code>\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a&nbsp;<code>IX</code>\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>V</code>&nbsp;(5) \u548c&nbsp;<code>X</code>&nbsp;(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002</li>\n\t<li><code>X</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>L</code>&nbsp;(50) \u548c&nbsp;<code>C</code>&nbsp;(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c&nbsp;90\u3002&nbsp;</li>\n\t<li><code>C</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>D</code>&nbsp;(500) \u548c&nbsp;<code>M</code>&nbsp;(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a&nbsp;400 \u548c&nbsp;900\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1&nbsp;\u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;III&quot;\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;IV&quot;\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;IX&quot;\n<strong>\u8f93\u51fa:</strong> 9</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;LVIII&quot;\n<strong>\u8f93\u51fa:</strong> 58\n<strong>\u89e3\u91ca:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;MCMXCIV&quot;\n<strong>\u8f93\u51fa:</strong> 1994\n<strong>\u89e3\u91ca:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u9898\u76ee\u6240\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u7686\u7b26\u5408\u7f57\u9a6c\u6570\u5b57\u4e66\u5199\u89c4\u5219\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8de8\u4f4d\u7b49\u60c5\u51b5\u3002</li>\n\t<li>IC \u548c IM \u8fd9\u6837\u7684\u4f8b\u5b50\u5e76\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c49 \u5e94\u8be5\u5199\u4f5c XLIX\uff0c999 \u5e94\u8be5\u5199\u4f5c CMXCIX \u3002</li>\n\t<li>\u5173\u4e8e\u7f57\u9a6c\u6570\u5b57\u7684\u8be6\u5c3d\u4e66\u5199\u89c4\u5219\uff0c\u53ef\u4ee5\u53c2\u8003 <a href=\"https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article\">\u7f57\u9a6c\u6570\u5b57 - Mathematics </a>\u3002</li>\n</ul>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int romanToInt(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int romanToInt(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def romanToInt(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint romanToInt(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int RomanToInt(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef roman_to_int(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func romanToInt(_ s: String) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func romanToInt(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def romanToInt(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun romanToInt(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn roman_to_int(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function romanToInt($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function romanToInt(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0014",
        "frontend_question_id": "0014",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/longest-common-prefix",
        "url_en": "https://leetcode.com/problems/longest-common-prefix",
        "relative_path_cn": "/leetcode/0000-0099/0014.Longest%20Common%20Prefix/README.md",
        "relative_path_en": "/leetcode/0000-0099/0014.Longest%20Common%20Prefix/README_EN.md",
        "title_cn": "\u6700\u957f\u516c\u5171\u524d\u7f00",
        "title_en": "Longest Common Prefix",
        "question_title_slug": "longest-common-prefix",
        "content_en": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lower-case English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32&nbsp;<code>&quot;&quot;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;&quot;\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>&nbsp;\u3002</p>\n",
        "tags_en": ["String"],
        "tags_cn": ["\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * longestCommonPrefix(char ** strs, int strsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string LongestCommonPrefix(string[] strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[]} strs\n# @return {String}\ndef longest_common_prefix(strs)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func longestCommonPrefix(_ strs: [String]) -> String {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func longestCommonPrefix(strs []string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun longestCommonPrefix(strs: Array<String>): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn longest_common_prefix(strs: Vec<String>) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String\n     */\n    function longestCommonPrefix($strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function longestCommonPrefix(strs: string[]): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0015",
        "frontend_question_id": "0015",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/3sum",
        "url_en": "https://leetcode.com/problems/3sum",
        "relative_path_cn": "/leetcode/0000-0099/0015.3Sum/README.md",
        "relative_path_en": "/leetcode/0000-0099/0015.3Sum/README_EN.md",
        "title_cn": "\u4e09\u6570\u4e4b\u548c",
        "title_en": "3Sum",
        "question_title_slug": "3sum",
        "content_en": "<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = []\n<strong>Output:</strong> []\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b <em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5224\u65ad&nbsp;<code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 <em>a\uff0cb\uff0cc \uff0c</em>\u4f7f\u5f97&nbsp;<em>a + b + c = </em>0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</pre>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func threeSum(nums []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function threeSum(nums: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0016",
        "frontend_question_id": "0016",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/3sum-closest",
        "url_en": "https://leetcode.com/problems/3sum-closest",
        "relative_path_cn": "/leetcode/0000-0099/0016.3Sum%20Closest/README.md",
        "relative_path_en": "/leetcode/0000-0099/0016.3Sum%20Closest/README_EN.md",
        "title_cn": "\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c",
        "title_en": "3Sum Closest",
        "question_title_slug": "3sum-closest",
        "content_en": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code>&nbsp;such that the sum is closest to&nbsp;<code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,1,-4], target = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10^3</code></li>\n\t<li><code>-10^3&nbsp;&lt;= nums[i]&nbsp;&lt;= 10^3</code></li>\n\t<li><code>-10^4&nbsp;&lt;= target&nbsp;&lt;= 10^4</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec&nbsp;<em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code><em>&nbsp;</em>\u548c \u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code>\u3002\u627e\u51fa&nbsp;<code>nums</code><em>&nbsp;</em>\u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e&nbsp;<code>target</code>&nbsp;\u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [-1,2,1,-4], target = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0e target \u6700\u63a5\u8fd1\u7684\u548c\u662f 2 (-1 + 2 + 1 = 2) \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10^3</code></li>\n\t<li><code>-10^3&nbsp;&lt;= nums[i]&nbsp;&lt;= 10^3</code></li>\n\t<li><code>-10^4&nbsp;&lt;= target&nbsp;&lt;= 10^4</code></li>\n</ul>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint threeSumClosest(int* nums, int numsSize, int target){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int ThreeSumClosest(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_closest(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func threeSumClosest(nums []int, target int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumClosest($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function threeSumClosest(nums: number[], target: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0017",
        "frontend_question_id": "0017",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number",
        "url_en": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "relative_path_cn": "/leetcode/0000-0099/0017.Letter%20Combinations%20of%20a%20Phone%20Number/README.md",
        "relative_path_en": "/leetcode/0000-0099/0017.Letter%20Combinations%20of%20a%20Phone%20Number/README_EN.md",
        "title_cn": "\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408",
        "title_en": "Letter Combinations of a Phone Number",
        "question_title_slug": "letter-combinations-of-a-phone-number",
        "content_en": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\r\n\r\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" style=\"width: 200px; height: 162px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> digits = &quot;23&quot;\r\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> digits = &quot;&quot;\r\n<strong>Output:</strong> []\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> digits = &quot;2&quot;\r\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\r\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\r\n</ul>",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57&nbsp;<code>2-9</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002</p>\n\n<p>\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png\" style=\"width: 200px;\"></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;23&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p>\n",
        "tags_en": ["Depth-first Search", "Recursion", "String", "Backtracking"],
        "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52", "\u5b57\u7b26\u4e32", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCombinations(char * digits, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func letterCombinations(digits string) []string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function letterCombinations(digits: string): string[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0018",
        "frontend_question_id": "0018",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/4sum",
        "url_en": "https://leetcode.com/problems/4sum",
        "relative_path_cn": "/leetcode/0000-0099/0018.4Sum/README.md",
        "relative_path_en": "/leetcode/0000-0099/0018.4Sum/README_EN.md",
        "title_cn": "\u56db\u6570\u4e4b\u548c",
        "title_en": "4Sum",
        "question_title_slug": "4sum",
        "content_en": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\n\n<p><strong>Notice</strong>&nbsp;that&nbsp;the solution set must not contain duplicate quadruplets.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,0,-1,0,-2,2], target = 0\n<strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code>\uff0c\u5224\u65ad&nbsp;<code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 <em>a\uff0c</em><em>b\uff0cc</em>&nbsp;\u548c <em>d</em>&nbsp;\uff0c\u4f7f\u5f97&nbsp;<em>a</em> + <em>b</em> + <em>c</em> + <em>d</em>&nbsp;\u7684\u503c\u4e0e&nbsp;<code>target</code>&nbsp;\u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre>\n",
        "tags_en": ["Array", "Hash Table", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> FourSum(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[][]}\ndef four_sum(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func fourSum(_ nums: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func fourSum(nums []int, target int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def fourSum(nums: Array[Int], target: Int): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun fourSum(nums: IntArray, target: Int): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn four_sum(nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function fourSum($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function fourSum(nums: number[], target: number): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0019",
        "frontend_question_id": "0019",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list",
        "url_en": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "relative_path_cn": "/leetcode/0000-0099/0019.Remove%20Nth%20Node%20From%20End%20of%20List/README.md",
        "relative_path_en": "/leetcode/0000-0099/0019.Remove%20Nth%20Node%20From%20End%20of%20List/README_EN.md",
        "title_cn": "\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9",
        "title_en": "Remove Nth Node From End of List",
        "question_title_slug": "remove-nth-node-from-end-of-list",
        "content_en": "<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>\n\n<p><strong>Follow up:</strong>&nbsp;Could you do this in one pass?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], n = 2\n<strong>Output:</strong> [1,2,3,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], n = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2], n = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 30</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c&nbsp;<em>n&nbsp;</em>\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, \u548c <strong><em>n</em> = 2</strong>.\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a <strong>1-&gt;2-&gt;3-&gt;5</strong>.\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u7ed9\u5b9a\u7684 <em>n</em>&nbsp;\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f</p>\n",
        "tags_en": ["Linked List", "Two Pointers"],
        "tags_cn": ["\u94fe\u8868", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} n\n# @return {ListNode}\ndef remove_nth_from_end(head, n)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeNthFromEnd(head: ListNode?, n: Int): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_nth_from_end(head: Option<Box<ListNode>>, n: i32) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $n\n     * @return ListNode\n     */\n    function removeNthFromEnd($head, $n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0020",
        "frontend_question_id": "0020",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/valid-parentheses",
        "url_en": "https://leetcode.com/problems/valid-parentheses",
        "relative_path_cn": "/leetcode/0000-0099/0020.Valid%20Parentheses/README.md",
        "relative_path_en": "/leetcode/0000-0099/0020.Valid%20Parentheses/README_EN.md",
        "title_cn": "\u6709\u6548\u7684\u62ec\u53f7",
        "title_en": "Valid Parentheses",
        "question_title_slug": "valid-parentheses",
        "content_en": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()[]{}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;([)]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;{[]}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec <code>&#39;(&#39;</code>\uff0c<code>&#39;)&#39;</code>\uff0c<code>&#39;{&#39;</code>\uff0c<code>&#39;}&#39;</code>\uff0c<code>&#39;[&#39;</code>\uff0c<code>&#39;]&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p>\n\n<p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p>\n\n<ol>\n\t<li>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</li>\n\t<li>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</li>\n</ol>\n\n<p>\u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()[]{}&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(]&quot;\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;([)]&quot;\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;{[]}&quot;\n<strong>\u8f93\u51fa:</strong> true</pre>\n",
        "tags_en": ["Stack", "String"],
        "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isValid(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isValid(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isValid(self, s: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isValid(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsValid(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isValid(s string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isValid(s: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isValid(s: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isValid(s: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0021",
        "frontend_question_id": "0021",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/merge-two-sorted-lists",
        "url_en": "https://leetcode.com/problems/merge-two-sorted-lists",
        "relative_path_cn": "/leetcode/0000-0099/0021.Merge%20Two%20Sorted%20Lists/README.md",
        "relative_path_en": "/leetcode/0000-0099/0021.Merge%20Two%20Sorted%20Lists/README_EN.md",
        "title_cn": "\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",
        "title_en": "Merge Two Sorted Lists",
        "question_title_slug": "merge-two-sorted-lists",
        "content_en": "<p>Merge two sorted linked lists and return it as a new <strong>sorted</strong> list. The new list should be made by splicing together the nodes of the first two lists.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" style=\"width: 662px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> l1 = [1,2,4], l2 = [1,3,4]\n<strong>Output:</strong> [1,1,2,3,4,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>Both <code>l1</code> and <code>l2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "content_cn": "<p>\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 <strong>\u5347\u5e8f</strong> \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n<strong>\u8f93\u51fa\uff1a</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</pre>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} l1\n# @param {ListNode} l2\n# @return {ListNode}\ndef merge_two_lists(l1, l2)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $l1\n     * @param ListNode $l2\n     * @return ListNode\n     */\n    function mergeTwoLists($l1, $l2) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0022",
        "frontend_question_id": "0022",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/generate-parentheses",
        "url_en": "https://leetcode.com/problems/generate-parentheses",
        "relative_path_cn": "/leetcode/0000-0099/0022.Generate%20Parentheses/README.md",
        "relative_path_en": "/leetcode/0000-0099/0022.Generate%20Parentheses/README_EN.md",
        "title_cn": "\u62ec\u53f7\u751f\u6210",
        "title_en": "Generate Parentheses",
        "question_title_slug": "generate-parentheses",
        "content_en": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "content_cn": "<p>\u6570\u5b57 <em>n</em>&nbsp;\u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 <strong>\u6709\u6548\u7684 </strong>\u62ec\u53f7\u7ec4\u5408\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>n = 3\n<strong>\u8f93\u51fa\uff1a</strong>[\n       &quot;((()))&quot;,\n       &quot;(()())&quot;,\n       &quot;(())()&quot;,\n       &quot;()(())&quot;,\n       &quot;()()()&quot;\n     ]\n</pre>\n",
        "tags_en": ["String", "Backtracking"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<String> generateParenthesis(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** generateParenthesis(int n, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func generateParenthesis(n int) []string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function generateParenthesis(n: number): string[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0023",
        "frontend_question_id": "0023",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/merge-k-sorted-lists",
        "url_en": "https://leetcode.com/problems/merge-k-sorted-lists",
        "relative_path_cn": "/leetcode/0000-0099/0023.Merge%20k%20Sorted%20Lists/README.md",
        "relative_path_en": "/leetcode/0000-0099/0023.Merge%20k%20Sorted%20Lists/README_EN.md",
        "title_cn": "\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",
        "title_en": "Merge k Sorted Lists",
        "question_title_slug": "merge-k-sorted-lists",
        "content_en": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> won&#39;t exceed <code>10^4</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>\u8f93\u51fa\uff1a</strong>[1,1,2,3,4,4,5,6]\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u6570\u7ec4\u5982\u4e0b\uff1a\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u4e2d\u5f97\u5230\u3002\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>lists = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>lists = [[]]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\n\t<li><code>lists[i]</code> \u6309 <strong>\u5347\u5e8f</strong> \u6392\u5217</li>\n\t<li><code>lists[i].length</code> \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 <code>10^4</code></li>\n</ul>\n",
        "tags_en": ["Heap", "Linked List", "Divide and Conquer"],
        "tags_cn": ["\u5806", "\u94fe\u8868", "\u5206\u6cbb\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode MergeKLists(ListNode[] lists) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode[]} lists\n# @return {ListNode}\ndef merge_k_lists(lists)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeKLists(lists []*ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode[] $lists\n     * @return ListNode\n     */\n    function mergeKLists($lists) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0024",
        "frontend_question_id": "0024",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/swap-nodes-in-pairs",
        "url_en": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "relative_path_cn": "/leetcode/0000-0099/0024.Swap%20Nodes%20in%20Pairs/README.md",
        "relative_path_en": "/leetcode/0000-0099/0024.Swap%20Nodes%20in%20Pairs/README_EN.md",
        "title_cn": "\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",
        "title_en": "Swap Nodes in Pairs",
        "question_title_slug": "swap-nodes-in-pairs",
        "content_en": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head.</p>\n\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes. Only nodes itself may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [2,1,4,3]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the&nbsp;list&nbsp;is in the range <code>[0, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002</p>\n\n<p><strong>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c</strong>\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>head = [1,2,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>[2,1,4,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>head = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>head = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 100]</code> \u5185</li>\n\t<li><code>0 <= Node.val <= 100</code></li>\n</ul>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* swapPairs(struct ListNode* head){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode SwapPairs(ListNode head) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {ListNode}\ndef swap_pairs(head)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func swapPairs(_ head: ListNode?) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def swapPairs(head: ListNode): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun swapPairs(head: ListNode?): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn swap_pairs(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function swapPairs($head) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction swapPairs(head: ListNode | null): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0025",
        "frontend_question_id": "0025",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/reverse-nodes-in-k-group",
        "url_en": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "relative_path_cn": "/leetcode/0000-0099/0025.Reverse%20Nodes%20in%20k-Group/README.md",
        "relative_path_en": "/leetcode/0000-0099/0025.Reverse%20Nodes%20in%20k-Group/README_EN.md",
        "title_cn": "K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",
        "title_en": "Reverse Nodes in k-Group",
        "question_title_slug": "reverse-nodes-in-k-group",
        "content_en": "<p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>\n\n<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes, in the end, should remain as it is.</p>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve the problem in <code>O(1)</code> extra memory space?</li>\n\t<li>You may not alter the values in the list&#39;s nodes, only nodes itself may be changed.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [2,1,4,3,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 3\n<strong>Output:</strong> [3,2,1,4,5]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 1\n<strong>Output:</strong> [1,2,3,4,5]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list&nbsp;is in the range <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 5000</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= sz</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf&nbsp;<em>k&nbsp;</em>\u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002</p>\n\n<p><em>k&nbsp;</em>\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f&nbsp;<em>k&nbsp;</em>\u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n\n<p>\u5f53&nbsp;<em>k&nbsp;</em>= 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n\n<p>\u5f53&nbsp;<em>k&nbsp;</em>= 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002</li>\n\t<li><strong>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c</strong>\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</li>\n</ul>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* reverseKGroup(struct ListNode* head, int k){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode ReverseKGroup(ListNode head, int k) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef reverse_k_group(head, k)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseKGroup(head: ListNode?, k: Int): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_k_group(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function reverseKGroup($head, $k) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseKGroup(head: ListNode | null, k: number): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0026",
        "frontend_question_id": "0026",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array",
        "url_en": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "relative_path_cn": "/leetcode/0000-0099/0026.Remove%20Duplicates%20from%20Sorted%20Array/README.md",
        "relative_path_en": "/leetcode/0000-0099/0026.Remove%20Duplicates%20from%20Sorted%20Array/README_EN.md",
        "title_cn": "\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",
        "title_en": "Remove Duplicates from Sorted Array",
        "question_title_slug": "remove-duplicates-from-sorted-array",
        "content_en": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each element appears only <em>once</em> and returns the new length.</p>\n\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Clarification:</strong></p>\n\n<p>Confused why the returned value is an integer but your answer is an array?</p>\n\n<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>\n\n<p>Internally you can think of this:</p>\n\n<pre>\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to <strong>nums</strong> in your function would be known by the caller.\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}</pre>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2]\n<strong>Explanation:</strong>&nbsp;Your function should return length = <strong><code>2</code></strong>, with the first two elements of <em><code>nums</code></em> being <strong><code>1</code></strong> and <strong><code>2</code></strong> respectively. It doesn&#39;t matter what you leave beyond the returned length.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4]\n<strong>Explanation:</strong>&nbsp;Your function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, and&nbsp;<strong><code>4</code></strong> respectively. It doesn&#39;t matter what values are set beyond&nbsp;the returned length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code>&nbsp;is sorted in ascending order.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"> \u539f\u5730</a></strong> \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730 </a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4 </strong>\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u7ed9\u5b9a\u6570\u7ec4 <em>nums</em> = <strong>[1,1,2]</strong>, \n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>2</strong>, \u5e76\u4e14\u539f\u6570\u7ec4 <em>nums </em>\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>1</code></strong>, <strong><code>2</code></strong>\u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u7ed9\u5b9a<em> nums </em>= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>5</strong>, \u5e76\u4e14\u539f\u6570\u7ec4 <em>nums </em>\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong>\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>\u300c\u5f15\u7528\u300d</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:</p>\n\n<pre>// <strong>nums</strong> \u662f\u4ee5&ldquo;\u5f15\u7528&rdquo;\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong>\u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong>\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint removeDuplicates(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func removeDuplicates(nums []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function removeDuplicates(nums: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0027",
        "frontend_question_id": "0027",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-element",
        "url_en": "https://leetcode.com/problems/remove-element",
        "relative_path_cn": "/leetcode/0000-0099/0027.Remove%20Element/README.md",
        "relative_path_en": "/leetcode/0000-0099/0027.Remove%20Element/README_EN.md",
        "title_cn": "\u79fb\u9664\u5143\u7d20",
        "title_en": "Remove Element",
        "question_title_slug": "remove-element",
        "content_en": "<p>Given an array <em>nums</em> and a value <code>val</code>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> and return the new length.</p>\n\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with <code>O(1)</code> extra memory.</p>\n\n<p>The order of elements can be changed. It doesn&#39;t matter what you leave beyond the new length.</p>\n\n<p><strong>Clarification:</strong></p>\n\n<p>Confused why the returned value is an integer but your answer is an array?</p>\n\n<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller as well.</p>\n\n<p>Internally you can think of this:</p>\n\n<pre>\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n\n// any modification to <strong>nums</strong> in your function would be known by the caller.\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}</pre>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,2,3], val = 3\n<strong>Output:</strong> 2, nums = [2,2]\n<strong>Explanation:</strong> Your function should return length = <strong>2</strong>, with the first two elements of <em>nums</em> being <strong>2</strong>.\nIt doesn&#39;t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>Output:</strong> 5, nums = [0,1,4,0,3]\n<strong>Explanation:</strong> Your function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> containing&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, and&nbsp;<strong>4</strong>. Note that the order of those five elements can be arbitrary. It doesn&#39;t matter what values are set beyond&nbsp;the returned length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <em>nums&nbsp;</em>\u548c\u4e00\u4e2a\u503c <em>val</em>\uff0c\u4f60\u9700\u8981 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong> \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e&nbsp;<em>val&nbsp;</em>\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u4ec5\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u5e76 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730 </a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u3002</p>\n\n<p>\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>2</strong>, \u5e76\u4e14 <em>nums </em>\u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a <strong>2</strong>\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong><code>5</code></strong>, \u5e76\u4e14 <em>nums </em>\u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, <strong>4</strong>\u3002\n\n\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>\u300c\u5f15\u7528\u300d</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:</p>\n\n<pre>// <strong>nums</strong> \u662f\u4ee5&ldquo;\u5f15\u7528&rdquo;\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d\nint len = removeElement(nums, val);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong> \u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong> \u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int removeElement(int[] nums, int val) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint removeElement(int* nums, int numsSize, int val){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int RemoveElement(int[] nums, int val) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} val\n * @return {number}\n */\nvar removeElement = function(nums, val) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} val\n# @return {Integer}\ndef remove_element(nums, val)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func removeElement(nums []int, val int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun removeElement(nums: IntArray, `val`: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn remove_element(nums: &mut Vec<i32>, val: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $val\n     * @return Integer\n     */\n    function removeElement(&$nums, $val) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function removeElement(nums: number[], val: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0028",
        "frontend_question_id": "0028",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/implement-strstr",
        "url_en": "https://leetcode.com/problems/implement-strstr",
        "relative_path_cn": "/leetcode/0000-0099/0028.Implement%20strStr%28%29/README.md",
        "relative_path_en": "/leetcode/0000-0099/0028.Implement%20strStr%28%29/README_EN.md",
        "title_cn": "\u5b9e\u73b0 strStr()",
        "title_en": "Implement strStr()",
        "question_title_slug": "implement-strstr",
        "content_en": "<p>Implement <a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strStr()</a>.</p>\n\n<p>Return the index of the first occurrence of needle in haystack, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p><strong>Clarification:</strong></p>\n\n<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>\n\n<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C&#39;s&nbsp;<a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strstr()</a> and Java&#39;s&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> haystack = \"hello\", needle = \"ll\"\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> haystack = \"aaaaa\", needle = \"bba\"\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> haystack = \"\", needle = \"\"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and&nbsp;<code>needle</code> consist of only lower-case English characters.</li>\n</ul>\n",
        "content_cn": "<p>\u5b9e\u73b0&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strStr()</a>&nbsp;\u51fd\u6570\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de&nbsp; <strong>-1</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> haystack = &quot;hello&quot;, needle = &quot;ll&quot;\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\n<strong>\u8f93\u51fa:</strong> -1\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5f53&nbsp;<code>needle</code>&nbsp;\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002</p>\n\n<p>\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53&nbsp;<code>needle</code>&nbsp;\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strstr()</a>&nbsp;\u4ee5\u53ca Java\u7684&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>&nbsp;\u5b9a\u4e49\u76f8\u7b26\u3002</p>\n",
        "tags_en": ["Two Pointers", "String"],
        "tags_cn": ["\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int strStr(String haystack, String needle) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint strStr(char * haystack, char * needle){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int StrStr(string haystack, string needle) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func strStr(haystack string, needle string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function strStr(haystack: string, needle: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0029",
        "frontend_question_id": "0029",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/divide-two-integers",
        "url_en": "https://leetcode.com/problems/divide-two-integers",
        "relative_path_cn": "/leetcode/0000-0099/0029.Divide%20Two%20Integers/README.md",
        "relative_path_en": "/leetcode/0000-0099/0029.Divide%20Two%20Integers/README_EN.md",
        "title_cn": "\u4e24\u6570\u76f8\u9664",
        "title_en": "Divide Two Integers",
        "question_title_slug": "divide-two-integers",
        "content_en": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p>\n\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>truncate(8.345) = 8</code> and <code>truncate(-2.7335) = -2</code>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>, &nbsp;2<sup>31</sup> &minus; 1]. For this problem, assume that your function <strong>returns 2<sup>31</sup> &minus; 1 when the division result&nbsp;overflows</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = truncate(3.33333..) = 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = truncate(-2.33333..) = -2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 0, divisor = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 1, divisor = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend,&nbsp;divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u548c\u9664\u6570&nbsp;<code>divisor</code>\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002</p>\n\n<p>\u8fd4\u56de\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u9664\u4ee5\u9664\u6570&nbsp;<code>divisor</code>&nbsp;\u5f97\u5230\u7684\u5546\u3002</p>\n\n<p>\u6574\u6570\u9664\u6cd5\u7684\u7ed3\u679c\u5e94\u5f53\u622a\u53bb\uff08<code>truncate</code>\uff09\u5176\u5c0f\u6570\u90e8\u5206\uff0c\u4f8b\u5982\uff1a<code>truncate(8.345) = 8</code> \u4ee5\u53ca <code>truncate(-2.7335) = -2</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 10, divisor = 3\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca: </strong>10/3 = truncate(3.33333..) = truncate(3) = 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 7, divisor = -3\n<strong>\u8f93\u51fa:</strong> -2\n<strong>\u89e3\u91ca:</strong> 7/-3 = truncate(-2.33333..) = -2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</li>\n\t<li>\u9664\u6570\u4e0d\u4e3a&nbsp;0\u3002</li>\n\t<li>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2<sup>31&nbsp;</sup>&minus; 1\u3002</li>\n</ul>\n",
        "tags_en": ["Math", "Binary Search"],
        "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int divide(int dividend, int divisor) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint divide(int dividend, int divisor){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int Divide(int dividend, int divisor) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func divide(dividend int, divisor int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function divide(dividend: number, divisor: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0030",
        "frontend_question_id": "0030",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words",
        "url_en": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "relative_path_cn": "/leetcode/0000-0099/0030.Substring%20with%20Concatenation%20of%20All%20Words/README.md",
        "relative_path_en": "/leetcode/0000-0099/0030.Substring%20with%20Concatenation%20of%20All%20Words/README_EN.md",
        "title_cn": "\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32",
        "title_en": "Substring with Concatenation of All Words",
        "question_title_slug": "substring-with-concatenation-of-all-words",
        "content_en": "<p>You are given a string <code>s</code> and an array of strings <code>words</code> of <strong>the same length</strong>. Return&nbsp;all starting indices of substring(s) in <code>s</code>&nbsp;that is a concatenation of each word in <code>words</code> <strong>exactly once</strong>, <strong>in any order</strong>,&nbsp;and <strong>without any intervening characters</strong>.</p>\n\n<p>You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]\n<strong>Output:</strong> [0,9]\n<strong>Explanation:</strong> Substrings starting at index 0 and 9 are &quot;barfoo&quot; and &quot;foobar&quot; respectively.\nThe output order does not matter, returning [9,0] is fine too.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]\n<strong>Output:</strong> [6,9,12]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lower-case English letters.</li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code>&nbsp;consists of lower-case English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd&nbsp;<strong>words\u3002</strong>\u627e\u51fa <strong>s </strong>\u4e2d\u6070\u597d\u53ef\u4ee5\u7531&nbsp;<strong>words </strong>\u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p>\n\n<p>\u6ce8\u610f\u5b50\u4e32\u8981\u4e0e&nbsp;<strong>words </strong>\u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651&nbsp;<strong>words&nbsp;</strong>\u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n  s =</strong> &quot;barfoothefoobarman&quot;,\n<strong>  words = </strong>[&quot;foo&quot;,&quot;bar&quot;]\n<strong>\u8f93\u51fa\uff1a</strong><code>[0,9]</code>\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f &quot;barfoo&quot; \u548c &quot;foobar&quot; \u3002\n\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n  s =</strong> &quot;wordgoodgoodgoodbestword&quot;,\n<strong>  words = </strong>[&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\n<code><strong>\u8f93\u51fa\uff1a</strong>[]</code>\n</pre>\n",
        "tags_en": ["Hash Table", "Two Pointers", "String"],
        "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<int> FindSubstring(string s, string[] words) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @param {String[]} words\n# @return {Integer[]}\ndef find_substring(s, words)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findSubstring(s string, words []string) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn find_substring(s: String, words: Vec<String>) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String[] $words\n     * @return Integer[]\n     */\n    function findSubstring($s, $words) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findSubstring(s: string, words: string[]): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0031",
        "frontend_question_id": "0031",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/next-permutation",
        "url_en": "https://leetcode.com/problems/next-permutation",
        "relative_path_cn": "/leetcode/0000-0099/0031.Next%20Permutation/README.md",
        "relative_path_en": "/leetcode/0000-0099/0031.Next%20Permutation/README_EN.md",
        "title_cn": "\u4e0b\u4e00\u4e2a\u6392\u5217",
        "title_en": "Next Permutation",
        "question_title_slug": "next-permutation",
        "content_en": "<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n\n<p>If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).</p>\n\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a></strong> and use only constant&nbsp;extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [1,2,3]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,5]\n<strong>Output:</strong> [1,5,1]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "content_cn": "<p>\u5b9e\u73b0\u83b7\u53d6 <strong>\u4e0b\u4e00\u4e2a\u6392\u5217</strong> \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002</p>\n\n<p>\u5fc5\u987b<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"> \u539f\u5730 </a></strong>\u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,3,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,1,5]\n<strong>\u8f93\u51fa\uff1a</strong>[1,5,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 100</code></li>\n\t<li><code>0 <= nums[i] <= 100</code></li>\n</ul>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void nextPermutation(vector<int>& nums) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void nextPermutation(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid nextPermutation(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void NextPermutation(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef next_permutation(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func nextPermutation(_ nums: inout [Int]) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func nextPermutation(nums []int)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun nextPermutation(nums: IntArray): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn next_permutation(nums: &mut Vec<i32>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function nextPermutation(&$nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction nextPermutation(nums: number[]): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0032",
        "frontend_question_id": "0032",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/longest-valid-parentheses",
        "url_en": "https://leetcode.com/problems/longest-valid-parentheses",
        "relative_path_cn": "/leetcode/0000-0099/0032.Longest%20Valid%20Parentheses/README.md",
        "relative_path_en": "/leetcode/0000-0099/0032.Longest%20Valid%20Parentheses/README_EN.md",
        "title_cn": "\u6700\u957f\u6709\u6548\u62ec\u53f7",
        "title_en": "Longest Valid Parentheses",
        "question_title_slug": "longest-valid-parentheses",
        "content_en": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b <code>&#39;(&#39;</code>&nbsp;\u548c <code>&#39;)&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(()&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a <code>&quot;()&quot;</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;<code>)()())</code>&quot;\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a <code>&quot;()()&quot;</code>\n</pre>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int longestValidParentheses(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint longestValidParentheses(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func longestValidParentheses(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function longestValidParentheses(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0033",
        "frontend_question_id": "0033",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/search-in-rotated-sorted-array",
        "url_en": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "relative_path_cn": "/leetcode/0000-0099/0033.Search%20in%20Rotated%20Sorted%20Array/README.md",
        "relative_path_en": "/leetcode/0000-0099/0033.Search%20in%20Rotated%20Sorted%20Array/README_EN.md",
        "title_cn": "\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4",
        "title_en": "Search in Rotated Sorted Array",
        "question_title_slug": "search-in-rotated-sorted-array",
        "content_en": "<p>You are given an integer array <code>nums</code> sorted in ascending order, and an integer <code>target</code>.</p>\n\n<p>Suppose that <code>nums</code> is rotated at some pivot unknown to you beforehand (i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>\n\n<p><em>If <code>target</code> is found in the array return its index, otherwise, return <code>-1</code>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is guranteed to be rotated at some pivot.</li>\n\t<li><code>-10^4 &lt;= target &lt;= 10^4</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u548c\u4e00\u4e2a\u6574\u6570 <code>target</code> \u3002</p>\n\n<p>\u8be5\u6574\u6570\u6570\u7ec4\u539f\u672c\u662f\u6309\u5347\u5e8f\u6392\u5217\uff0c\u4f46\u8f93\u5165\u65f6\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002\uff08\u4f8b\u5982\uff0c\u6570\u7ec4\u00a0<code>[0,1,2,4,5,6,7]</code>\u00a0\u53ef\u80fd\u53d8\u4e3a\u00a0<code>[4,5,6,7,0,1,2]</code> \uff09\u3002</p>\n\n<p>\u8bf7\u4f60\u5728\u6570\u7ec4\u4e2d\u641c\u7d22\u00a0<code>target</code> \uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de\u00a0<code>-1</code>\u00a0\u3002</p>\n\u00a0\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a02\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\n<strong>\u8f93\u51fa\uff1a</strong>-1</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1], target = 0\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 5000</code></li>\n\t<li><code>-10^4 <= nums[i] <= 10^4</code></li>\n\t<li><code>nums</code> \u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd <strong>\u72ec\u4e00\u65e0\u4e8c</strong></li>\n\t<li><code>nums</code> \u80af\u5b9a\u4f1a\u5728\u67d0\u4e2a\u70b9\u4e0a\u65cb\u8f6c</li>\n\t<li><code>-10^4 <= target <= 10^4</code></li>\n</ul>\n",
        "tags_en": ["Array", "Binary Search"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int search(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint search(int* nums, int numsSize, int target){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int Search(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func search(nums []int, target int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function search(nums: number[], target: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0034",
        "frontend_question_id": "0034",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "url_en": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "relative_path_cn": "/leetcode/0000-0099/0034.Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/README.md",
        "relative_path_en": "/leetcode/0000-0099/0034.Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/README_EN.md",
        "title_cn": "\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",
        "title_en": "Find First and Last Position of Element in Sorted Array",
        "question_title_slug": "find-first-and-last-position-of-element-in-sorted-array",
        "content_en": "<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p><strong>Follow up:</strong>&nbsp;Could you write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002</p>\n\n<p>\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c <code>target</code>\uff0c\u8fd4\u56de\u00a0<code>[-1, -1]</code>\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0<code>O(log n)</code>\u00a0\u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 8\n<strong>\u8f93\u51fa\uff1a</strong>[3,4]</pre>\n\n<p><strong>\u793a\u4f8b\u00a02\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 6\n<strong>\u8f93\u51fa\uff1a</strong>[-1,-1]</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [], target = 0\n<strong>\u8f93\u51fa\uff1a</strong>[-1,-1]</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= nums.length <= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>\u00a0<= nums[i]\u00a0<= 10<sup>9</sup></code></li>\n\t<li><code>nums</code>\u00a0\u662f\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u7ec4</li>\n\t<li><code>-10<sup>9</sup>\u00a0<= target\u00a0<= 10<sup>9</sup></code></li>\n</ul>\n",
        "tags_en": ["Array", "Binary Search"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func searchRange(nums []int, target int) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function searchRange(nums: number[], target: number): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0035",
        "frontend_question_id": "0035",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/search-insert-position",
        "url_en": "https://leetcode.com/problems/search-insert-position",
        "relative_path_cn": "/leetcode/0000-0099/0035.Search%20Insert%20Position/README.md",
        "relative_path_en": "/leetcode/0000-0099/0035.Search%20Insert%20Position/README_EN.md",
        "title_cn": "\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e",
        "title_en": "Search Insert Position",
        "question_title_slug": "search-insert-position",
        "content_en": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5,6], target = 0\n<strong>Output:</strong> 0\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 5\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 2\n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 7\n<strong>\u8f93\u51fa:</strong> 4\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 0\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n",
        "tags_en": ["Array", "Binary Search"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint searchInsert(int* nums, int numsSize, int target){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func searchInsert(nums []int, target int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function searchInsert(nums: number[], target: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0036",
        "frontend_question_id": "0036",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/valid-sudoku",
        "url_en": "https://leetcode.com/problems/valid-sudoku",
        "relative_path_cn": "/leetcode/0000-0099/0036.Valid%20Sudoku/README.md",
        "relative_path_en": "/leetcode/0000-0099/0036.Valid%20Sudoku/README_EN.md",
        "title_cn": "\u6709\u6548\u7684\u6570\u72ec",
        "title_en": "Valid Sudoku",
        "question_title_slug": "valid-sudoku",
        "content_en": "<p>Determine if a&nbsp;<code>9 x 9</code> Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p>\n\n<ol>\n\t<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li>\n\t<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n\t<li>Each of the nine&nbsp;<code>3 x 3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\n\t<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = \n[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = \n[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being modified to <strong>8</strong>. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u5224\u65ad\u4e00\u4e2a&nbsp;9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981<strong>\u6839\u636e\u4ee5\u4e0b\u89c4\u5219</strong>\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002</p>\n\n<ol>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684&nbsp;<code>3x3</code>&nbsp;\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height: 250px; width: 250px;\"></p>\n\n<p><small>\u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002</small></p>\n\n<p>\u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528&nbsp;<code>&#39;.&#39;</code>&nbsp;\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece<strong> 5</strong> \u6539\u4e3a <strong>8 </strong>\u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002\n     \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002</li>\n\t<li>\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u548c\u5b57\u7b26&nbsp;<code>&#39;.&#39;</code>&nbsp;\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f&nbsp;<code>9x9</code>&nbsp;\u5f62\u5f0f\u7684\u3002</li>\n</ul>\n",
        "tags_en": ["Hash Table"],
        "tags_cn": ["\u54c8\u5e0c\u8868"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isValidSudoku(char** board, int boardSize, int* boardColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsValidSudoku(char[][] board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Character[][]} board\n# @return {Boolean}\ndef is_valid_sudoku(board)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isValidSudoku(board [][]byte) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isValidSudoku(board: Array<CharArray>): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Boolean\n     */\n    function isValidSudoku($board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isValidSudoku(board: string[][]): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0037",
        "frontend_question_id": "0037",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/sudoku-solver",
        "url_en": "https://leetcode.com/problems/sudoku-solver",
        "relative_path_cn": "/leetcode/0000-0099/0037.Sudoku%20Solver/README.md",
        "relative_path_en": "/leetcode/0000-0099/0037.Sudoku%20Solver/README_EN.md",
        "title_cn": "\u89e3\u6570\u72ec",
        "title_en": "Sudoku Solver",
        "question_title_slug": "sudoku-solver",
        "content_en": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n\n<p>A&nbsp;sudoku solution must satisfy <strong>all of&nbsp;the following rules</strong>:</p>\n\n<ol>\n\t<li>Each of the digits&nbsp;<code>1-9</code> must occur exactly&nbsp;once in each row.</li>\n\t<li>Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur&nbsp;exactly once in each column.</li>\n\t<li>Each of the digits&nbsp;<code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\n</ol>\n\n<p>The <code>&#39;.&#39;</code> character indicates empty cells.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Explanation:</strong>&nbsp;The input board is shown above and the only valid solution is shown below:\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" />\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>\n</ul>\n",
        "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u586b\u5145\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002</p>\n\n<p>\u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700<strong>\u9075\u5faa\u5982\u4e0b\u89c4\u5219</strong>\uff1a</p>\n\n<ol>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684&nbsp;<code>3x3</code>&nbsp;\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n\n<p>\u7a7a\u767d\u683c\u7528&nbsp;<code>&#39;.&#39;</code>&nbsp;\u8868\u793a\u3002</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"></p>\n\n<p><small>\u4e00\u4e2a\u6570\u72ec\u3002</small></p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"></p>\n\n<p><small>\u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002</small></p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u548c\u5b57\u7b26&nbsp;<code>&#39;.&#39;</code>&nbsp;\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f&nbsp;<code>9x9</code>&nbsp;\u5f62\u5f0f\u7684\u3002</li>\n</ul>\n",
        "tags_en": ["Hash Table", "Backtracking"],
        "tags_cn": ["\u54c8\u5e0c\u8868", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void solveSudoku(char[][] board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid solveSudoku(char** board, int boardSize, int* boardColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve_sudoku(board)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func solveSudoku(board [][]byte)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun solveSudoku(board: Array<CharArray>): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solveSudoku(&$board) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solveSudoku(board: string[][]): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0038",
        "frontend_question_id": "0038",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/count-and-say",
        "url_en": "https://leetcode.com/problems/count-and-say",
        "relative_path_cn": "/leetcode/0000-0099/0038.Count%20and%20Say/README.md",
        "relative_path_en": "/leetcode/0000-0099/0038.Count%20and%20Say/README_EN.md",
        "title_cn": "\u5916\u89c2\u6570\u5217",
        "title_en": "Count and Say",
        "question_title_slug": "count-and-say",
        "content_en": "<p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p>\n\n<ul>\n\t<li><code>countAndSay(1) = &quot;1&quot;</code></li>\n\t<li><code>countAndSay(n)</code> is the way you would &quot;say&quot; the digit string from <code>countAndSay(n-1)</code>, which is then converted into a different digit string.</li>\n</ul>\n\n<p>To determine how you &quot;say&quot; a digit string, split it into the <strong>minimal</strong> number of groups so that each group is a contiguous section all of the <strong>same character.</strong> Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.</p>\n\n<p>For example, the saying and conversion for digit string <code>&quot;3322251&quot;</code>:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg\" style=\"width: 581px; height: 172px;\" />\n<p>Given a positive integer <code>n</code>, return <em>the </em><code>n<sup>th</sup></code><em> term of the <strong>count-and-say</strong> sequence</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> &quot;1&quot;\n<strong>Explanation:</strong> This is the base case.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> &quot;1211&quot;\n<strong>Explanation:</strong>\ncountAndSay(1) = &quot;1&quot;\ncountAndSay(2) = say &quot;1&quot; = one 1 = &quot;11&quot;\ncountAndSay(3) = say &quot;11&quot; = two 1&#39;s = &quot;21&quot;\ncountAndSay(4) = say &quot;21&quot; = one 2 + one 1 = &quot;12&quot; + &quot;11&quot; = &quot;1211&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>n</code> \uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c <code>n</code> \u9879\u3002</p>\n\n<p>\u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a</p>\n\n<ul>\n\t<li><code>countAndSay(1) = \"1\"</code></li>\n\t<li><code>countAndSay(n)</code> \u662f\u5bf9 <code>countAndSay(n-1)</code> \u7684\u63cf\u8ff0\uff0c\u7136\u540e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>\u524d\u4e94\u9879\u5982\u4e0b\uff1a</p>\n\n<pre>\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n\u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \n\u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f <code>1</code> \u5373 \u201c \u4e00 \u4e2a 1 \u201d\uff0c\u8bb0\u4f5c <code>\"11\"\n</code>\u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f <code>11</code> \u5373 \u201c \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c <code>\"21\"\n</code>\u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f <code>21</code> \u5373 \u201c \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"<code>1211\"\n</code>\u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f <code>1211</code> \u5373 \u201c \u4e00 \u4e2a 1 + \u4e00 \u4e2a 2 + \u4e8c \u4e2a 1 \u201d \uff0c\u8bb0\u4f5c \"<code>111221\"</code>\n</pre>\n\n<p>\u8981 <strong>\u63cf\u8ff0</strong> \u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u9996\u5148\u8981\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u4e3a <strong>\u6700\u5c0f</strong> \u6570\u91cf\u7684\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u7531\u8fde\u7eed\u7684\u6700\u591a <strong>\u76f8\u540c\u5b57\u7b26</strong> \u7ec4\u6210\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5148\u63cf\u8ff0\u5b57\u7b26\u7684\u6570\u91cf\uff0c\u7136\u540e\u63cf\u8ff0\u5b57\u7b26\uff0c\u5f62\u6210\u4e00\u4e2a\u63cf\u8ff0\u7ec4\u3002\u8981\u5c06\u63cf\u8ff0\u8f6c\u6362\u4e3a\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u5148\u5c06\u6bcf\u7ec4\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\u7528\u6570\u5b57\u66ff\u6362\uff0c\u518d\u5c06\u6240\u6709\u63cf\u8ff0\u7ec4\u8fde\u63a5\u8d77\u6765\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u6570\u5b57\u5b57\u7b26\u4e32 <code>\"3322251\"</code> \u7684\u63cf\u8ff0\u5982\u4e0b\u56fe\uff1a</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg\" style=\"width: 581px; height: 172px;\" />\n<ul>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa\uff1a</strong>\"1\"\n<strong>\u89e3\u91ca\uff1a</strong>\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 4\n<strong>\u8f93\u51fa\uff1a</strong>\"1211\"\n<strong>\u89e3\u91ca\uff1a</strong>\ncountAndSay(1) = \"1\"\ncountAndSay(2) = \u8bfb \"1\" = \u4e00 \u4e2a 1 = \"11\"\ncountAndSay(3) = \u8bfb \"11\" = \u4e8c \u4e2a 1 = \"21\"\ncountAndSay(4) = \u8bfb \"21\" = \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 = \"12\" + \"11\" = \"1211\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 30</code></li>\n</ul>\n",
        "tags_en": ["String"],
        "tags_cn": ["\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string countAndSay(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String countAndSay(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def countAndSay(self, n: int) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * countAndSay(int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string CountAndSay(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func countAndSay(_ n: Int) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countAndSay(n int) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def countAndSay(n: Int): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun countAndSay(n: Int): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countAndSay(n: number): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0039",
        "frontend_question_id": "0039",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/combination-sum",
        "url_en": "https://leetcode.com/problems/combination-sum",
        "relative_path_cn": "/leetcode/0000-0099/0039.Combination%20Sum/README.md",
        "relative_path_en": "/leetcode/0000-0099/0039.Combination%20Sum/README_EN.md",
        "title_cn": "\u7ec4\u5408\u603b\u548c",
        "title_en": "Combination Sum",
        "question_title_slug": "combination-sum",
        "content_en": "<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p>\n\n<p>It is <strong>guaranteed</strong> that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [1], target = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [1], target = 2\n<strong>Output:</strong> [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 200</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 500</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u65e0\u91cd\u590d\u5143\u7d20</strong>\u7684\u6570\u7ec4&nbsp;<code>candidates</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u6570&nbsp;<code>target</code>&nbsp;\uff0c\u627e\u51fa&nbsp;<code>candidates</code>&nbsp;\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a&nbsp;<code>target</code>&nbsp;\u7684\u7ec4\u5408\u3002</p>\n\n<p><code>candidates</code>&nbsp;\u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec&nbsp;<code>target</code>\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a\uff1a</strong>\n[\n  [7],\n  [2,2,3]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>candidates = [2,3,5]<code>, </code>target = 8,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a\uff1a</strong>\n[\n&nbsp; [2,2,2,2],\n&nbsp; [2,3,3],\n&nbsp; [3,5]\n]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 200</code></li>\n\t<li><code>candidate</code> \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002</li>\n\t<li><code>1 &lt;= target &lt;= 500</code></li>\n</ul>\n",
        "tags_en": ["Array", "Backtracking"],
        "tags_cn": ["\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum(candidates, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func combinationSum(candidates []int, target int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum($candidates, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function combinationSum(candidates: number[], target: number): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0040",
        "frontend_question_id": "0040",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/combination-sum-ii",
        "url_en": "https://leetcode.com/problems/combination-sum-ii",
        "relative_path_cn": "/leetcode/0000-0099/0040.Combination%20Sum%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0040.Combination%20Sum%20II/README_EN.md",
        "title_cn": "\u7ec4\u5408\u603b\u548c II",
        "title_en": "Combination Sum II",
        "question_title_slug": "combination-sum-ii",
        "content_en": "<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sum to <code>target</code>.</p>\n\n<p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p>\n\n<p><strong>Note:</strong>&nbsp;The solution set must not contain duplicate combinations.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8\n<strong>Output:</strong> \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,5,2,1,2], target = 5\n<strong>Output:</strong> \n[\n[1,2,2],\n[5]\n]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= 30</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>candidates</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u6570&nbsp;<code>target</code>&nbsp;\uff0c\u627e\u51fa&nbsp;<code>candidates</code>&nbsp;\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a&nbsp;<code>target</code>&nbsp;\u7684\u7ec4\u5408\u3002</p>\n\n<p><code>candidates</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n&nbsp; [1,2,2],\n&nbsp; [5]\n]</pre>\n",
        "tags_en": ["Array", "Backtracking"],
        "tags_cn": ["\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum2(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum2(candidates, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func combinationSum2(candidates []int, target int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun combinationSum2(candidates: IntArray, target: Int): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function combinationSum2(candidates: number[], target: number): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0041",
        "frontend_question_id": "0041",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/first-missing-positive",
        "url_en": "https://leetcode.com/problems/first-missing-positive",
        "relative_path_cn": "/leetcode/0000-0099/0041.First%20Missing%20Positive/README.md",
        "relative_path_en": "/leetcode/0000-0099/0041.First%20Missing%20Positive/README_EN.md",
        "title_cn": "\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570",
        "title_en": "First Missing Positive",
        "question_title_slug": "first-missing-positive",
        "content_en": "<p>Given an unsorted integer array <code>nums</code>, find the smallest missing&nbsp;positive integer.</p>\n\n<p><strong>Follow up:</strong>&nbsp;Could you implement an&nbsp;algorithm that runs in <code>O(n)</code> time and uses constant extra space.?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 300</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u8f93\u5165: [1,2,0]\n\u8f93\u51fa: 3\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u8f93\u5165: [3,4,-1,1]\n\u8f93\u51fa: 2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\u8f93\u5165: [7,8,9,11,12]\n\u8f93\u51fa: 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO(<em>n</em>)\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u989d\u5916\u7a7a\u95f4\u3002</p>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint firstMissingPositive(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int FirstMissingPositive(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef first_missing_positive(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func firstMissingPositive(_ nums: [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func firstMissingPositive(nums []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun firstMissingPositive(nums: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function firstMissingPositive($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function firstMissingPositive(nums: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0042",
        "frontend_question_id": "0042",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/trapping-rain-water",
        "url_en": "https://leetcode.com/problems/trapping-rain-water",
        "relative_path_cn": "/leetcode/0000-0099/0042.Trapping%20Rain%20Water/README.md",
        "relative_path_en": "/leetcode/0000-0099/0042.Trapping%20Rain%20Water/README_EN.md",
        "title_cn": "\u63a5\u96e8\u6c34",
        "title_en": "Trapping Rain Water",
        "question_title_slug": "trapping-rain-water",
        "content_en": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>0 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u00a0<em>n</em> \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\" style=\"height: 161px; width: 412px;\" /></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>height = [4,2,0,3,2,5]\n<strong>\u8f93\u51fa\uff1a</strong>9\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>0 <= n <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 <= height[i] <= 10<sup>5</sup></code></li>\n</ul>\n",
        "tags_en": ["Stack", "Array", "Two Pointers"],
        "tags_cn": ["\u6808", "\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int trap(int[] height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def trap(self, height: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint trap(int* height, int heightSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int Trap(int[] height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func trap(height []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun trap(height: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function trap(height: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0043",
        "frontend_question_id": "0043",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/multiply-strings",
        "url_en": "https://leetcode.com/problems/multiply-strings",
        "relative_path_cn": "/leetcode/0000-0099/0043.Multiply%20Strings/README.md",
        "relative_path_en": "/leetcode/0000-0099/0043.Multiply%20Strings/README_EN.md",
        "title_cn": "\u5b57\u7b26\u4e32\u76f8\u4e58",
        "title_en": "Multiply Strings",
        "question_title_slug": "multiply-strings",
        "content_en": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n\n<p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num1 = \"2\", num2 = \"3\"\n<strong>Output:</strong> \"6\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num1 = \"123\", num2 = \"456\"\n<strong>Output:</strong> \"56088\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of digits only.</li>\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&nbsp;<code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>\uff0c\u8fd4\u56de&nbsp;<code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>&nbsp;\u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;6&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\n<strong>\u8f93\u51fa:</strong> &quot;56088&quot;</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>&nbsp;\u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002</li>\n\t<li><code>num1</code> \u548c&nbsp;<code>num2</code> \u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code>\u3002</li>\n\t<li><code>num1</code> \u548c&nbsp;<code>num2</code>&nbsp;\u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002</li>\n\t<li><strong>\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09</strong>\u6216<strong>\u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406</strong>\u3002</li>\n</ol>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string multiply(string num1, string num2) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String multiply(String num1, String num2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def multiply(self, num1: str, num2: str) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * multiply(char * num1, char * num2){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string Multiply(string num1, string num2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func multiply(num1 string, num2 string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def multiply(num1: String, num2: String): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun multiply(num1: String, num2: String): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function multiply(num1: string, num2: string): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0044",
        "frontend_question_id": "0044",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/wildcard-matching",
        "url_en": "https://leetcode.com/problems/wildcard-matching",
        "relative_path_cn": "/leetcode/0000-0099/0044.Wildcard%20Matching/README.md",
        "relative_path_en": "/leetcode/0000-0099/0044.Wildcard%20Matching/README_EN.md",
        "title_cn": "\u901a\u914d\u7b26\u5339\u914d",
        "title_en": "Wildcard Matching",
        "question_title_slug": "wildcard-matching",
        "content_en": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adceb&quot;, p = &quot;*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acdcb&quot;, p = &quot;a*c?b&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;(<code>s</code>) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f&nbsp;(<code>p</code>) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301&nbsp;<code>&#39;?&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;*&#39;</code>&nbsp;\u7684\u901a\u914d\u7b26\u5339\u914d\u3002</p>\n\n<pre>&#39;?&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002\n&#39;*&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\n</pre>\n\n<p>\u4e24\u4e2a\u5b57\u7b26\u4e32<strong>\u5b8c\u5168\u5339\u914d</strong>\u624d\u7b97\u5339\u914d\u6210\u529f\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>p</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26&nbsp;<code>?</code>&nbsp;\u548c&nbsp;<code>*</code>\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> &quot;a&quot; \u65e0\u6cd5\u5339\u914d &quot;aa&quot; \u6574\u4e2a\u5b57\u7b26\u4e32\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;*&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;*&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;cb&quot;\np = &quot;?a&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;?&#39; \u53ef\u4ee5\u5339\u914d &#39;c&#39;, \u4f46\u7b2c\u4e8c\u4e2a &#39;a&#39; \u65e0\u6cd5\u5339\u914d &#39;b&#39;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;adceb&quot;\np = &quot;*a*b&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;\u7b2c\u4e00\u4e2a &#39;*&#39; \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a &#39;*&#39; \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 &quot;dce&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;acdcb&quot;\np = &quot;a*c?b&quot;\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "tags_en": ["Greedy", "String", "Dynamic Programming", "Backtracking"],
        "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isMatch(String s, String p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isMatch(char * s, char * p){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsMatch(string s, string p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @param {String} p\n# @return {Boolean}\ndef is_match(s, p)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isMatch(s string, p string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isMatch(s: String, p: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Boolean\n     */\n    function isMatch($s, $p) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isMatch(s: string, p: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0045",
        "frontend_question_id": "0045",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/jump-game-ii",
        "url_en": "https://leetcode.com/problems/jump-game-ii",
        "relative_path_cn": "/leetcode/0000-0099/0045.Jump%20Game%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0045.Jump%20Game%20II/README_EN.md",
        "title_cn": "\u8df3\u8dc3\u6e38\u620f II",
        "title_en": "Jump Game II",
        "question_title_slug": "jump-game-ii",
        "content_en": "<p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the first index of the array.</p>\n\n<p>Each element in the array represents your maximum jump length at that position.</p>\n\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\n\n<p>You can assume that you can always reach the last index.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,0,1,4]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p>\n\n<p>\u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,1,1,4]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f <code>2</code>\u3002\n&nbsp;    \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3&nbsp;<code>1</code>&nbsp;\u6b65\uff0c\u7136\u540e\u8df3&nbsp;<code>3</code>&nbsp;\u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n",
        "tags_en": ["Greedy", "Array"],
        "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u7ec4"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int jump(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int jump(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def jump(self, nums: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint jump(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int Jump(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func jump(_ nums: [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func jump(nums []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def jump(nums: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun jump(nums: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn jump(nums: Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function jump(nums: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0046",
        "frontend_question_id": "0046",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/permutations",
        "url_en": "https://leetcode.com/problems/permutations",
        "relative_path_cn": "/leetcode/0000-0099/0046.Permutations/README.md",
        "relative_path_en": "/leetcode/0000-0099/0046.Permutations/README_EN.md",
        "title_cn": "\u5168\u6392\u5217",
        "title_en": "Permutations",
        "question_title_slug": "permutations",
        "content_en": "<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong> \u6ca1\u6709\u91cd\u590d</strong> \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func permute(nums []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function permute(nums: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0047",
        "frontend_question_id": "0047",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/permutations-ii",
        "url_en": "https://leetcode.com/problems/permutations-ii",
        "relative_path_cn": "/leetcode/0000-0099/0047.Permutations%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0047.Permutations%20II/README_EN.md",
        "title_cn": "\u5168\u6392\u5217 II",
        "title_en": "Permutations II",
        "question_title_slug": "permutations-ii",
        "content_en": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 <code>nums</code> \uff0c<strong>\u6309\u4efb\u610f\u987a\u5e8f</strong> \u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 8</code></li>\n\t<li><code>-10 <= nums[i] <= 10</code></li>\n</ul>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> PermuteUnique(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute_unique(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func permuteUnique(nums []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permuteUnique($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function permuteUnique(nums: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0048",
        "frontend_question_id": "0048",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/rotate-image",
        "url_en": "https://leetcode.com/problems/rotate-image",
        "relative_path_cn": "/leetcode/0000-0099/0048.Rotate%20Image/README.md",
        "relative_path_en": "/leetcode/0000-0099/0048.Rotate%20Image/README_EN.md",
        "title_cn": "\u65cb\u8f6c\u56fe\u50cf",
        "title_en": "Rotate Image",
        "question_title_slug": "rotate-image",
        "content_en": "<p>You are given an <em>n</em> x <em>n</em> 2D <code>matrix</code> representing an image, rotate the image by 90 degrees (clockwise).</p>\n\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" style=\"width: 642px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[3,4]]\n<strong>Output:</strong> [[3,1],[4,2]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>matrix.length == n</code></li>\n\t<li><code>matrix[i].length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a <em>n&nbsp;</em>&times;&nbsp;<em>n</em> \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002</p>\n\n<p>\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u4f60\u5fc5\u987b\u5728<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002<strong>\u8bf7\u4e0d\u8981</strong>\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u7ed9\u5b9a <strong>matrix</strong> = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n<strong>\u539f\u5730</strong>\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u7ed9\u5b9a <strong>matrix</strong> =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n<strong>\u539f\u5730</strong>\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</pre>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void rotate(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid rotate(int** matrix, int matrixSize, int* matrixColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func rotate(matrix [][]int)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0049",
        "frontend_question_id": "0049",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/group-anagrams",
        "url_en": "https://leetcode.com/problems/group-anagrams",
        "relative_path_cn": "/leetcode/0000-0099/0049.Group%20Anagrams/README.md",
        "relative_path_en": "/leetcode/0000-0099/0049.Group%20Anagrams/README_EN.md",
        "title_cn": "\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4",
        "title_en": "Group Anagrams",
        "question_title_slug": "group-anagrams",
        "content_en": "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lower-case English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>\n<strong>\u8f93\u51fa:</strong>\n[\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\n  [&quot;nat&quot;,&quot;tan&quot;],\n  [&quot;bat&quot;]\n]</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ul>\n",
        "tags_en": ["Hash Table", "String"],
        "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func groupAnagrams(strs []string) [][]string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function groupAnagrams(strs: string[]): string[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0050",
        "frontend_question_id": "0050",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/powx-n",
        "url_en": "https://leetcode.com/problems/powx-n",
        "relative_path_cn": "/leetcode/0000-0099/0050.Pow%28x%2C%20n%29/README.md",
        "relative_path_en": "/leetcode/0000-0099/0050.Pow%28x%2C%20n%29/README_EN.md",
        "title_cn": "Pow(x, n)",
        "title_en": "Pow(x, n)",
        "question_title_slug": "powx-n",
        "content_en": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>, which calculates&nbsp;<em>x</em> raised to the power <em>n</em> (i.e. x<sup><span style=\"font-size:10.8333px\">n</span></sup>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u5b9e\u73b0&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>&nbsp;\uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.00000, 10\n<strong>\u8f93\u51fa:</strong> 1024.00000\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.10000, 3\n<strong>\u8f93\u51fa:</strong> 9.26100\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.00000, -2\n<strong>\u8f93\u51fa:</strong> 0.25000\n<strong>\u89e3\u91ca:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>-100.0 &lt;&nbsp;<em>x</em>&nbsp;&lt; 100.0</li>\n\t<li><em>n</em>&nbsp;\u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f&nbsp;[&minus;2<sup>31</sup>,&nbsp;2<sup>31&nbsp;</sup>&minus; 1] \u3002</li>\n</ul>\n",
        "tags_en": ["Math", "Binary Search"],
        "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public double myPow(double x, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\ndouble myPow(double x, int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public double MyPow(double x, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func myPow(x float64, n int) float64 {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function myPow(x: number, n: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0051",
        "frontend_question_id": "0051",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/n-queens",
        "url_en": "https://leetcode.com/problems/n-queens",
        "relative_path_cn": "/leetcode/0000-0099/0051.N-Queens/README.md",
        "relative_path_en": "/leetcode/0000-0099/0051.N-Queens/README_EN.md",
        "title_cn": "N \u7687\u540e",
        "title_en": "N-Queens",
        "question_title_slug": "n-queens",
        "content_en": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>.</p>\n\n<p>Each solution contains a distinct board configuration of the n-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space, respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[&quot;Q&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
        "content_cn": "<p><em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 <em>n</em>&nbsp;\u4e2a\u7687\u540e\u653e\u7f6e\u5728 <em>n</em>&times;<em>n</em> \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\"></p>\n\n<p><small>\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002</small></p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684&nbsp;<em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>\n\n<p>\u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684&nbsp;<em>n</em> \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d <code>&#39;Q&#39;</code> \u548c <code>&#39;.&#39;</code> \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>[\n [&quot;.Q..&quot;,  // \u89e3\u6cd5 1\n  &quot;...Q&quot;,\n  &quot;Q...&quot;,\n  &quot;..Q.&quot;],\n\n [&quot;..Q.&quot;,  // \u89e3\u6cd5 2\n  &quot;Q...&quot;,\n  &quot;...Q&quot;,\n  &quot;.Q..&quot;]\n]\n<strong>\u89e3\u91ca:</strong> 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7687\u540e\u5f7c\u6b64\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a\u4efb\u4f55\u4e24\u4e2a\u7687\u540e\u90fd\u4e0d\u80fd\u5904\u4e8e\u540c\u4e00\u6761\u6a2a\u884c\u3001\u7eb5\u884c\u6216\u659c\u7ebf\u4e0a\u3002</li>\n</ul>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** solveNQueens(int n, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {String[][]}\ndef solve_n_queens(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func solveNQueens(_ n: Int) -> [[String]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func solveNQueens(n int) [][]string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun solveNQueens(n: Int): List<List<String>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[][]\n     */\n    function solveNQueens($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function solveNQueens(n: number): string[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0052",
        "frontend_question_id": "0052",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/n-queens-ii",
        "url_en": "https://leetcode.com/problems/n-queens-ii",
        "relative_path_cn": "/leetcode/0000-0099/0052.N-Queens%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0052.N-Queens%20II/README_EN.md",
        "title_cn": "N\u7687\u540e II",
        "title_en": "N-Queens II",
        "question_title_slug": "n-queens-ii",
        "content_en": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the&nbsp;<strong>n-queens puzzle</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
        "content_cn": "<p><em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 <em>n</em>&nbsp;\u4e2a\u7687\u540e\u653e\u7f6e\u5728 <em>n</em>&times;<em>n</em> \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002</small></p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u8fd4\u56de <em>n</em> \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// \u89e3\u6cd5 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// \u89e3\u6cd5 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><strong>\u7687\u540e</strong>\uff0c\u662f<a href=\"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B\" target=\"_blank\">\u56fd\u9645\u8c61\u68cb</a>\u4e2d\u7684\u68cb\u5b50\uff0c\u610f\u5473\u7740<a href=\"https://baike.baidu.com/item/%E5%9B%BD%E7%8E%8B\" target=\"_blank\">\u56fd\u738b</a>\u7684\u59bb\u5b50\u3002\u7687\u540e\u53ea\u505a\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f&ldquo;<a href=\"https://baike.baidu.com/item/%E5%90%83%E5%AD%90\" target=\"_blank\">\u5403\u5b50</a>&rdquo;\u3002\u5f53\u5979\u9047\u89c1\u53ef\u4ee5\u5403\u7684\u68cb\u5b50\u65f6\uff0c\u5c31\u8fc5\u901f\u51b2\u4e0a\u53bb\u5403\u6389\u68cb\u5b50\u3002\u5f53\u7136\uff0c\u5979\u6a2a\u3001\u7ad6\u3001\u659c\u90fd\u53ef\u8d70\u4e00\u6216 N-1 \u6b65\uff0c\u53ef\u8fdb\u53ef\u9000\u3002\uff08\u5f15\u7528\u81ea <a href=\"https://baike.baidu.com/item/%E7%9A%87%E5%90%8E/15860305?fr=aladdin\">\u767e\u5ea6\u767e\u79d1 - \u7687\u540e</a> \uff09</li>\n</ul>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int totalNQueens(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int totalNQueens(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def totalNQueens(self, n: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint totalNQueens(int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int TotalNQueens(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar totalNQueens = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {Integer}\ndef total_n_queens(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func totalNQueens(_ n: Int) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func totalNQueens(n int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def totalNQueens(n: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun totalNQueens(n: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn total_n_queens(n: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function totalNQueens($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function totalNQueens(n: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0053",
        "frontend_question_id": "0053",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/maximum-subarray",
        "url_en": "https://leetcode.com/problems/maximum-subarray",
        "relative_path_cn": "/leetcode/0000-0099/0053.Maximum%20Subarray/README.md",
        "relative_path_en": "/leetcode/0000-0099/0053.Maximum%20Subarray/README_EN.md",
        "title_cn": "\u6700\u5927\u5b50\u5e8f\u548c",
        "title_en": "Maximum Subarray",
        "question_title_slug": "maximum-subarray",
        "content_en": "<p>Given an integer array <code>nums</code>, find the contiguous subarray&nbsp;(containing at least one number) which has the largest sum and return <em>its sum</em>.</p>\n\n<p><strong>Follow up:</strong>&nbsp;If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2147483647]\n<strong>Output:</strong> -2147483647\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>&nbsp;\uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [-2,1,-3,4,-1,2,1,-5,4]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong>&nbsp;\u8fde\u7eed\u5b50\u6570\u7ec4&nbsp;[4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a&nbsp;6\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O(<em>n</em>) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002</p>\n",
        "tags_en": ["Array", "Divide and Conquer", "Dynamic Programming"],
        "tags_cn": ["\u6570\u7ec4", "\u5206\u6cbb\u7b97\u6cd5", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint maxSubArray(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MaxSubArray(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sub_array(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maxSubArray(nums []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun maxSubArray(nums: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubArray($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maxSubArray(nums: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0054",
        "frontend_question_id": "0054",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/spiral-matrix",
        "url_en": "https://leetcode.com/problems/spiral-matrix",
        "relative_path_cn": "/leetcode/0000-0099/0054.Spiral%20Matrix/README.md",
        "relative_path_en": "/leetcode/0000-0099/0054.Spiral%20Matrix/README_EN.md",
        "title_cn": "\u87ba\u65cb\u77e9\u9635",
        "title_en": "Spiral Matrix",
        "question_title_slug": "spiral-matrix",
        "content_en": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>m</em> x <em>n</em>&nbsp;\u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08<em>m</em> \u884c, <em>n</em> \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n<strong>\u8f93\u51fa:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n<strong>\u8f93\u51fa:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<int> SpiralOrder(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} matrix\n# @return {Integer[]}\ndef spiral_order(matrix)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func spiralOrder(matrix [][]int) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[]\n     */\n    function spiralOrder($matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function spiralOrder(matrix: number[][]): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0055",
        "frontend_question_id": "0055",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/jump-game",
        "url_en": "https://leetcode.com/problems/jump-game",
        "relative_path_cn": "/leetcode/0000-0099/0055.Jump%20Game/README.md",
        "relative_path_en": "/leetcode/0000-0099/0055.Jump%20Game/README_EN.md",
        "title_cn": "\u8df3\u8dc3\u6e38\u620f",
        "title_en": "Jump Game",
        "question_title_slug": "jump-game",
        "content_en": "<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n\n<p>Each element in the array represents your maximum jump length at that position.</p>\n\n<p>Determine if you are able to reach the last index.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li>\n\t<li><code>0 &lt;= nums[i][j] &lt;= 10^5</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p>\n\n<p>\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,1,1,4]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ef\u4ee5\u5148\u8df3 1 \u6b65\uff0c\u4ece\u4f4d\u7f6e 0 \u5230\u8fbe \u4f4d\u7f6e 1, \u7136\u540e\u518d\u4ece\u4f4d\u7f6e 1 \u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,2,1,0,4]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n",
        "tags_en": ["Greedy", "Array"],
        "tags_cn": ["\u8d2a\u5fc3\u7b97\u6cd5", "\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean canJump(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool canJump(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool CanJump(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func canJump(nums []int) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function canJump(nums: number[]): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0056",
        "frontend_question_id": "0056",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/merge-intervals",
        "url_en": "https://leetcode.com/problems/merge-intervals",
        "relative_path_cn": "/leetcode/0000-0099/0056.Merge%20Intervals/README.md",
        "relative_path_en": "/leetcode/0000-0099/0056.Merge%20Intervals/README_EN.md",
        "title_cn": "\u5408\u5e76\u533a\u95f4",
        "title_en": "Merge Intervals",
        "question_title_slug": "merge-intervals",
        "content_en": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>\u8f93\u51fa:</strong> [[1,6],[8,10],[15,18]]\n<strong>\u89e3\u91ca:</strong> \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6].\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = [[1,4],[4,5]]\n<strong>\u8f93\u51fa:</strong> [[1,5]]\n<strong>\u89e3\u91ca:</strong> \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u8f93\u5165\u7c7b\u578b\u5df2\u4e8e2019\u5e744\u670815\u65e5\u66f4\u6539\u3002 \u8bf7\u91cd\u7f6e\u9ed8\u8ba4\u4ee3\u7801\u5b9a\u4e49\u4ee5\u83b7\u53d6\u65b0\u65b9\u6cd5\u7b7e\u540d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>intervals[i][0] &lt;= intervals[i][1]</code></li>\n</ul>\n",
        "tags_en": ["Sort", "Array"],
        "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[][] merge(int[][] intervals) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def merge(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[][] Merge(int[][] intervals) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} intervals\n# @return {Integer[][]}\ndef merge(intervals)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func merge(intervals [][]int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer[][]\n     */\n    function merge($intervals) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function merge(intervals: number[][]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0057",
        "frontend_question_id": "0057",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/insert-interval",
        "url_en": "https://leetcode.com/problems/insert-interval",
        "relative_path_cn": "/leetcode/0000-0099/0057.Insert%20Interval/README.md",
        "relative_path_en": "/leetcode/0000-0099/0057.Insert%20Interval/README_EN.md",
        "title_cn": "\u63d2\u5165\u533a\u95f4",
        "title_en": "Insert Interval",
        "question_title_slug": "insert-interval",
        "content_en": "<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>\n\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>Output:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\n<strong>Explanation:</strong> Because the new interval <code>[4,8]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [], newInterval = [5,7]\n<strong>Output:</strong> [[5,7]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,5]], newInterval = [2,3]\n<strong>Output:</strong> [[1,5]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,5]], newInterval = [2,7]\n<strong>Output:</strong> [[1,7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;=&nbsp;intervals[i][0] &lt;=&nbsp;intervals[i][1] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals</code>&nbsp;is sorted by <code>intervals[i][0]</code> in <strong>ascending</strong>&nbsp;order.</li>\n\t<li><code>newInterval.length == 2</code></li>\n\t<li><code>0 &lt;=&nbsp;newInterval[0] &lt;=&nbsp;newInterval[1] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a<em>\u65e0\u91cd\u53e0\u7684 \uff0c</em>\u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002</p>\n\n<p>\u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,5],[6,9]]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\n<strong>\u8f93\u51fa\uff1a</strong>[[1,2],[3,10],[12,16]]\n<strong>\u89e3\u91ca\uff1a</strong>\u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4 <code>[4,8]</code> \u4e0e <code>[3,5],[6,7],[8,10]</code>&nbsp;\u91cd\u53e0\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u8f93\u5165\u7c7b\u578b\u5df2\u5728 2019 \u5e74 4 \u6708 15 \u65e5\u66f4\u6539\u3002\u8bf7\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u4ee3\u7801\u5b9a\u4e49\u4ee5\u83b7\u53d6\u65b0\u7684\u65b9\u6cd5\u7b7e\u540d\u3002</p>\n",
        "tags_en": ["Sort", "Array"],
        "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[][] Insert(int[][] intervals, int[] newInterval) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} intervals\n * @param {number[]} newInterval\n * @return {number[][]}\n */\nvar insert = function(intervals, newInterval) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} intervals\n# @param {Integer[]} new_interval\n# @return {Integer[][]}\ndef insert(intervals, new_interval)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func insert(_ intervals: [[Int]], _ newInterval: [Int]) -> [[Int]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func insert(intervals [][]int, newInterval []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun insert(intervals: Array<IntArray>, newInterval: IntArray): Array<IntArray> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn insert(intervals: Vec<Vec<i32>>, new_interval: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $newInterval\n     * @return Integer[][]\n     */\n    function insert($intervals, $newInterval) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function insert(intervals: number[][], newInterval: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0058",
        "frontend_question_id": "0058",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/length-of-last-word",
        "url_en": "https://leetcode.com/problems/length-of-last-word",
        "relative_path_cn": "/leetcode/0000-0099/0058.Length%20of%20Last%20Word/README.md",
        "relative_path_en": "/leetcode/0000-0099/0058.Length%20of%20Last%20Word/README_EN.md",
        "title_cn": "\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6",
        "title_en": "Length of Last Word",
        "question_title_slug": "length-of-last-word",
        "content_en": "<p>Given a string <code>s</code> consists of some words separated by spaces, return <em>the length of the last word&nbsp;in the string. If the last word does not exist, return </em><code>0</code>.</p>\n\n<p>A <strong>word</strong> is a maximal substring consisting&nbsp;of non-space characters only.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"Hello World\"\n<strong>Output:</strong> 5\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \" \"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only English letters and spaces <code>&#39; &#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c&nbsp;<code>&#39; &#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\u5982\u679c\u5b57\u7b26\u4e32\u4ece\u5de6\u5411\u53f3\u6eda\u52a8\u663e\u793a\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u5c31\u662f\u6700\u540e\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0&nbsp;\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u4ec5\u7531\u5b57\u6bcd\u7ec4\u6210\u3001\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u5b57\u7b26\u7684 <strong>\u6700\u5927\u5b50\u5b57\u7b26\u4e32</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;Hello World&quot;\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n",
        "tags_en": ["String"],
        "tags_cn": ["\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int lengthOfLastWord(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def lengthOfLastWord(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint lengthOfLastWord(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int LengthOfLastWord(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLastWord = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef length_of_last_word(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func lengthOfLastWord(_ s: String) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func lengthOfLastWord(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def lengthOfLastWord(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun lengthOfLastWord(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn length_of_last_word(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLastWord($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function lengthOfLastWord(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0059",
        "frontend_question_id": "0059",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/spiral-matrix-ii",
        "url_en": "https://leetcode.com/problems/spiral-matrix-ii",
        "relative_path_cn": "/leetcode/0000-0099/0059.Spiral%20Matrix%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0059.Spiral%20Matrix%20II/README_EN.md",
        "title_cn": "\u87ba\u65cb\u77e9\u9635 II",
        "title_en": "Spiral Matrix II",
        "question_title_slug": "spiral-matrix-ii",
        "content_en": "<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n<sup>2</sup></code> in spiral order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230&nbsp;<em>n</em><sup>2</sup>&nbsp;\u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong>\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]</pre>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[][] generateMatrix(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[][] GenerateMatrix(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar generateMatrix = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {Integer[][]}\ndef generate_matrix(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func generateMatrix(_ n: Int) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func generateMatrix(n int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def generateMatrix(n: Int): Array[Array[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun generateMatrix(n: Int): Array<IntArray> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn generate_matrix(n: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function generateMatrix($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function generateMatrix(n: number): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0060",
        "frontend_question_id": "0060",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/permutation-sequence",
        "url_en": "https://leetcode.com/problems/permutation-sequence",
        "relative_path_cn": "/leetcode/0000-0099/0060.Permutation%20Sequence/README.md",
        "relative_path_en": "/leetcode/0000-0099/0060.Permutation%20Sequence/README_EN.md",
        "title_cn": "\u6392\u5217\u5e8f\u5217",
        "title_en": "Permutation Sequence",
        "question_title_slug": "permutation-sequence",
        "content_en": "<p>The set <code>[1, 2, 3, ...,&nbsp;n]</code> contains a total of <code>n!</code> unique permutations.</p>\n\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 3\n<strong>Output:</strong> \"213\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 4, k = 9\n<strong>Output:</strong> \"2314\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> \"123\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= n!</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u51fa\u96c6\u5408\u00a0<code>[1,2,3,...,n]</code>\uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709\u00a0<code>n!</code> \u79cd\u6392\u5217\u3002</p>\n\n<p>\u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53\u00a0<code>n = 3</code> \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li><code>\"123\"</code></li>\n\t<li><code>\"132\"</code></li>\n\t<li><code>\"213\"</code></li>\n\t<li><code>\"231\"</code></li>\n\t<li><code>\"312\"</code></li>\n\t<li><code>\"321\"</code></li>\n</ol>\n\n<p>\u7ed9\u5b9a\u00a0<code>n</code> \u548c\u00a0<code>k</code>\uff0c\u8fd4\u56de\u7b2c\u00a0<code>k</code>\u00a0\u4e2a\u6392\u5217\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 3, k = 3\n<strong>\u8f93\u51fa\uff1a</strong>\"213\"\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 4, k = 9\n<strong>\u8f93\u51fa\uff1a</strong>\"2314\"\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 3, k = 1\n<strong>\u8f93\u51fa\uff1a</strong>\"123\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 9</code></li>\n\t<li><code>1 <= k <= n!</code></li>\n</ul>\n",
        "tags_en": ["Math", "Backtracking"],
        "tags_cn": ["\u6570\u5b66", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string getPermutation(int n, int k) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String getPermutation(int n, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * getPermutation(int n, int k){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string GetPermutation(int n, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_permutation(n, k)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func getPermutation(_ n: Int, _ k: Int) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func getPermutation(n int, k int) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun getPermutation(n: Int, k: Int): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn get_permutation(n: i32, k: i32) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getPermutation($n, $k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function getPermutation(n: number, k: number): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0061",
        "frontend_question_id": "0061",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/rotate-list",
        "url_en": "https://leetcode.com/problems/rotate-list",
        "relative_path_cn": "/leetcode/0000-0099/0061.Rotate%20List/README.md",
        "relative_path_en": "/leetcode/0000-0099/0061.Rotate%20List/README_EN.md",
        "title_cn": "\u65cb\u8f6c\u94fe\u8868",
        "title_en": "Rotate List",
        "question_title_slug": "rotate-list",
        "content_en": "<p>Given the <code>head</code> of a linked&nbsp;list, rotate the list to the right by <code>k</code> places.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" style=\"width: 600px; height: 254px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [4,5,1,2,3]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" style=\"width: 472px; height: 542px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2], k = 4\n<strong>Output:</strong> [2,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8&nbsp;<em>k&nbsp;</em>\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d&nbsp;<em>k&nbsp;</em>\u662f\u975e\u8d1f\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2\n<strong>\u8f93\u51fa:</strong> 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n<strong>\u89e3\u91ca:</strong>\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 0-&gt;1-&gt;2-&gt;NULL, k = 4\n<strong>\u8f93\u51fa:</strong> <code>2-&gt;0-&gt;1-&gt;NULL</code>\n<strong>\u89e3\u91ca:</strong>\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2-&gt;0-&gt;1-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1-&gt;2-&gt;0-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 3 \u6b65:&nbsp;<code>0-&gt;1-&gt;2-&gt;NULL</code>\n\u5411\u53f3\u65cb\u8f6c 4 \u6b65:&nbsp;<code>2-&gt;0-&gt;1-&gt;NULL</code></pre>\n",
        "tags_en": ["Linked List", "Two Pointers"],
        "tags_cn": ["\u94fe\u8868", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* rotateRight(struct ListNode* head, int k){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode RotateRight(ListNode head, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @param {Integer} k\n# @return {ListNode}\ndef rotate_right(head, k)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc rotateRight(head *ListNode, k int) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def rotateRight(head: ListNode, k: Int): ListNode = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun rotateRight(head: ListNode?, k: Int): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $k\n     * @return ListNode\n     */\n    function rotateRight($head, $k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0062",
        "frontend_question_id": "0062",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/unique-paths",
        "url_en": "https://leetcode.com/problems/unique-paths",
        "relative_path_cn": "/leetcode/0000-0099/0062.Unique%20Paths/README.md",
        "relative_path_en": "/leetcode/0000-0099/0062.Unique%20Paths/README_EN.md",
        "title_cn": "\u4e0d\u540c\u8def\u5f84",
        "title_en": "Unique Paths",
        "question_title_slug": "unique-paths",
        "content_en": "<p>A robot is located at the top-left corner of a <code>m x n</code> grid (marked &#39;Start&#39; in the diagram below).</p>\n\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\n\n<p>How many possible unique paths are there?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 7\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 7, n = 3\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li>It&#39;s guaranteed that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</li>\n</ul>\n",
        "content_cn": "<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a <code>m x n</code><em>\u00a0</em>\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cStart\u201d \uff09\u3002</p>\n\n<p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cFinish\u201d \uff09\u3002</p>\n\n<p>\u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>m = 3, n = 7\n<strong>\u8f93\u51fa\uff1a</strong>28</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>m = 3, n = 2\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b\n2. \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u53f3\n3. \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>m = 7, n = 3\n<strong>\u8f93\u51fa\uff1a</strong>28\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>m = 3, n = 3\n<strong>\u8f93\u51fa\uff1a</strong>6</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= m, n <= 100</code></li>\n\t<li>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e <code>2 * 10<sup>9</sup></code></li>\n</ul>\n",
        "tags_en": ["Array", "Dynamic Programming"],
        "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int uniquePaths(int m, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint uniquePaths(int m, int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int UniquePaths(int m, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func uniquePaths(m int, n int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function uniquePaths(m: number, n: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0063",
        "frontend_question_id": "0063",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/unique-paths-ii",
        "url_en": "https://leetcode.com/problems/unique-paths-ii",
        "relative_path_cn": "/leetcode/0000-0099/0063.Unique%20Paths%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0063.Unique%20Paths%20II/README_EN.md",
        "title_cn": "\u4e0d\u540c\u8def\u5f84 II",
        "title_en": "Unique Paths II",
        "question_title_slug": "unique-paths-ii",
        "content_en": "<p>A robot is located at the top-left corner of a <code>m x n</code> grid (marked &#39;Start&#39; in the diagram below).</p>\n\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\n\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\n\n<p>An obstacle and space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,1],[0,0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;obstacleGrid.length</code></li>\n\t<li><code>n ==&nbsp;obstacleGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a <em>m x n </em>\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cStart\u201d \uff09\u3002</p>\n\n<p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a\u201cFinish\u201d\uff09\u3002</p>\n\n<p>\u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" style=\"height: 183px; width: 400px;\" /></p>\n\n<p>\u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528 <code>1</code> \u548c <code>0</code> \u6765\u8868\u793a\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002\n\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709 <code>2</code> \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a\n1. \u5411\u53f3 -> \u5411\u53f3 -> \u5411\u4e0b -> \u5411\u4e0b\n2. \u5411\u4e0b -> \u5411\u4e0b -> \u5411\u53f3 -> \u5411\u53f3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>obstacleGrid = [[0,1],[0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m ==\u00a0obstacleGrid.length</code></li>\n\t<li><code>n ==\u00a0obstacleGrid[i].length</code></li>\n\t<li><code>1 <= m, n <= 100</code></li>\n\t<li><code>obstacleGrid[i][j]</code> \u4e3a <code>0</code> \u6216 <code>1</code></li>\n</ul>\n",
        "tags_en": ["Array", "Dynamic Programming"],
        "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int UniquePathsWithObstacles(int[][] obstacleGrid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} obstacle_grid\n# @return {Integer}\ndef unique_paths_with_obstacles(obstacle_grid)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func uniquePathsWithObstacles(obstacleGrid [][]int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn unique_paths_with_obstacles(obstacle_grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $obstacleGrid\n     * @return Integer\n     */\n    function uniquePathsWithObstacles($obstacleGrid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function uniquePathsWithObstacles(obstacleGrid: number[][]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0064",
        "frontend_question_id": "0064",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/minimum-path-sum",
        "url_en": "https://leetcode.com/problems/minimum-path-sum",
        "relative_path_cn": "/leetcode/0000-0099/0064.Minimum%20Path%20Sum/README.md",
        "relative_path_en": "/leetcode/0000-0099/0064.Minimum%20Path%20Sum/README_EN.md",
        "title_cn": "\u6700\u5c0f\u8def\u5f84\u548c",
        "title_en": "Minimum Path Sum",
        "question_title_slug": "minimum-path-sum",
        "content_en": "<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>\n\n<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,2,3],[4,5,6]]\n<strong>Output:</strong> 12\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 <code><em>m</em>\u00a0x\u00a0<em>n</em></code>\u00a0\u7f51\u683c\u00a0<code>grid</code> \uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a\u8def\u5f84 1\u21923\u21921\u21921\u21921 \u7684\u603b\u548c\u6700\u5c0f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [[1,2,3],[4,5,6]]\n<strong>\u8f93\u51fa\uff1a</strong>12\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 <= m, n <= 200</code></li>\n\t<li><code>0 <= grid[i][j] <= 100</code></li>\n</ul>\n",
        "tags_en": ["Array", "Dynamic Programming"],
        "tags_cn": ["\u6570\u7ec4", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int minPathSum(int[][] grid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint minPathSum(int** grid, int gridSize, int* gridColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MinPathSum(int[][] grid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minPathSum(grid [][]int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun minPathSum(grid: Array<IntArray>): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minPathSum($grid) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minPathSum(grid: number[][]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0065",
        "frontend_question_id": "0065",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/valid-number",
        "url_en": "https://leetcode.com/problems/valid-number",
        "relative_path_cn": "/leetcode/0000-0099/0065.Valid%20Number/README.md",
        "relative_path_en": "/leetcode/0000-0099/0065.Valid%20Number/README_EN.md",
        "title_cn": "\u6709\u6548\u6570\u5b57",
        "title_en": "Valid Number",
        "question_title_slug": "valid-number",
        "content_en": "<p>Validate if a given string can be interpreted as&nbsp;a decimal number.</p>\n\n<p>Some examples:<br />\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br />\n<code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br />\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br />\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br />\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code><br />\n<code>&quot; -90e3&nbsp; &nbsp;&quot;</code> =&gt; <code>true</code><br />\n<code>&quot; 1e&quot;</code> =&gt; <code>false</code><br />\n<code>&quot;e3&quot;</code> =&gt; <code>false</code><br />\n<code>&quot; 6e-1&quot;</code> =&gt; <code>true</code><br />\n<code>&quot; 99e2.5&nbsp;&quot;</code> =&gt; <code>false</code><br />\n<code>&quot;53.5e93&quot;</code> =&gt; <code>true</code><br />\n<code>&quot; --6 &quot;</code> =&gt; <code>false</code><br />\n<code>&quot;-+3&quot;</code> =&gt; <code>false</code><br />\n<code>&quot;95a54e53&quot;</code> =&gt; <code>false</code></p>\n\n<p><strong>Note:</strong> It is intended for the problem statement to be ambiguous. It would be best if you gathered all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>\n\n<ul>\n\t<li>Numbers 0-9</li>\n\t<li>Exponent - &quot;e&quot;</li>\n\t<li>Positive/negative sign - &quot;+&quot;/&quot;-&quot;</li>\n\t<li>Decimal point - &quot;.&quot;</li>\n</ul>\n\n<p>Of course, the context of these characters also matters in the input.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"0\"\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"3\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of only English letters, digits, space <code>&#39; &#39;</code>, plus <code>&#39;+&#39;</code>, minus <code>&#39;-&#39;</code>, or dot <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u53ef\u4ee5\u89e3\u91ca\u4e3a\u5341\u8fdb\u5236\u6570\u5b57\u3002</p>\n\n<p>\u4f8b\u5982:</p>\n\n<p><code>&quot;0&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 0.1 &quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot;abc&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;1 a&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;2e10&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; -90e3&nbsp; &nbsp;&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 1e&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;e3&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot; 6e-1&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 99e2.5&nbsp;&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;53.5e93&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; --6 &quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;-+3&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;95a54e53&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code></p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4efd\u53ef\u80fd\u5b58\u5728\u4e8e\u6709\u6548\u5341\u8fdb\u5236\u6570\u5b57\u4e2d\u7684\u5b57\u7b26\u5217\u8868\uff1a</p>\n\n<ul>\n\t<li>\u6570\u5b57 0-9</li>\n\t<li>\u6307\u6570 - &quot;e&quot;</li>\n\t<li>\u6b63/\u8d1f\u53f7 - &quot;+&quot;/&quot;-&quot;</li>\n\t<li>\u5c0f\u6570\u70b9 - &quot;.&quot;</li>\n</ul>\n\n<p>\u5f53\u7136\uff0c\u5728\u8f93\u5165\u4e2d\uff0c\u8fd9\u4e9b\u5b57\u7b26\u7684\u4e0a\u4e0b\u6587\u4e5f\u5f88\u91cd\u8981\u3002</p>\n\n<p><strong>\u66f4\u65b0\u4e8e 2015-02-10:</strong><br>\n<code>C++</code>\u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536&nbsp;<code>const char *</code> \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002</p>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isNumber(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isNumber(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isNumber(self, s: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isNumber(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsNumber(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Boolean}\ndef is_number(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isNumber(_ s: String) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isNumber(s string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isNumber(s: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isNumber(s: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_number(s: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isNumber($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isNumber(s: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0066",
        "frontend_question_id": "0066",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/plus-one",
        "url_en": "https://leetcode.com/problems/plus-one",
        "relative_path_cn": "/leetcode/0000-0099/0066.Plus%20One/README.md",
        "relative_path_en": "/leetcode/0000-0099/0066.Plus%20One/README_EN.md",
        "title_cn": "\u52a0\u4e00",
        "title_en": "Plus One",
        "question_title_slug": "plus-one",
        "content_en": "<p>Given a <strong>non-empty</strong> array of decimal digits&nbsp;representing a non-negative integer, increment&nbsp;one to the integer.</p>\n\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.</p>\n\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [1,2,3]\n<strong>Output:</strong> [1,2,4]\n<strong>Explanation:</strong> The array represents the integer 123.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [4,3,2,1]\n<strong>Output:</strong> [4,3,2,2]\n<strong>Explanation:</strong> The array represents the integer 4321.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [0]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 <strong>\u6574\u6570 </strong>\u7ec4\u6210\u7684<strong> \u975e\u7a7a</strong> \u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002</p>\n\n<p>\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8<strong>\u5355\u4e2a</strong>\u6570\u5b57\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>digits = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,4]\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a02\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>digits = [4,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>[4,3,2,2]\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>digits = [0]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= digits.length <= 100</code></li>\n\t<li><code>0 <= digits[i] <= 9</code></li>\n</ul>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[] plusOne(int[] digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[] PlusOne(int[] digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func plusOne(digits []int) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function plusOne(digits: number[]): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0067",
        "frontend_question_id": "0067",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/add-binary",
        "url_en": "https://leetcode.com/problems/add-binary",
        "relative_path_cn": "/leetcode/0000-0099/0067.Add%20Binary/README.md",
        "relative_path_en": "/leetcode/0000-0099/0067.Add%20Binary/README_EN.md",
        "title_cn": "\u4e8c\u8fdb\u5236\u6c42\u548c",
        "title_en": "Add Binary",
        "question_title_slug": "add-binary",
        "content_en": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002</p>\n\n<p>\u8f93\u5165\u4e3a <strong>\u975e\u7a7a </strong>\u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1</code>&nbsp;\u548c&nbsp;<code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> a = &quot;11&quot;, b = &quot;1&quot;\n<strong>\u8f93\u51fa:</strong> &quot;100&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\n<strong>\u8f93\u51fa:</strong> &quot;10101&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ec5\u7531\u5b57\u7b26 <code>&#39;0&#39;</code> \u6216 <code>&#39;1&#39;</code> \u7ec4\u6210\u3002</li>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\n\t<li>\u5b57\u7b26\u4e32\u5982\u679c\u4e0d\u662f <code>&quot;0&quot;</code> \uff0c\u5c31\u90fd\u4e0d\u542b\u524d\u5bfc\u96f6\u3002</li>\n</ul>\n",
        "tags_en": ["Math", "String"],
        "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String addBinary(String a, String b) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * addBinary(char * a, char * b){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string AddBinary(string a, string b) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func addBinary(a string, b string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def addBinary(a: String, b: String): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun addBinary(a: String, b: String): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function addBinary(a: string, b: string): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0068",
        "frontend_question_id": "0068",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/text-justification",
        "url_en": "https://leetcode.com/problems/text-justification",
        "relative_path_cn": "/leetcode/0000-0099/0068.Text%20Justification/README.md",
        "relative_path_en": "/leetcode/0000-0099/0068.Text%20Justification/README_EN.md",
        "title_cn": "\u6587\u672c\u5de6\u53f3\u5bf9\u9f50",
        "title_en": "Text Justification",
        "question_title_slug": "text-justification",
        "content_en": "<p>Given an array of words and a width&nbsp;<em>maxWidth</em>, format the text such that each line has exactly <em>maxWidth</em> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <em>maxWidth</em> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left justified and no <strong>extra</strong> space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting&nbsp;of non-space characters only.</li>\n\t<li>Each word&#39;s length is&nbsp;guaranteed to be greater than 0 and not exceed <em>maxWidth</em>.</li>\n\t<li>The input array <code>words</code>&nbsp;contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified becase it contains only one word.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6&nbsp;<em>maxWidth</em>\uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709&nbsp;<em>maxWidth</em>&nbsp;\u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002</p>\n\n<p>\u4f60\u5e94\u8be5\u4f7f\u7528&ldquo;\u8d2a\u5fc3\u7b97\u6cd5&rdquo;\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c&nbsp;<code>&#39; &#39;</code>&nbsp;\u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709 <em>maxWidth</em>&nbsp;\u4e2a\u5b57\u7b26\u3002</p>\n\n<p>\u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002</p>\n\n<p>\u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165<strong>\u989d\u5916\u7684</strong>\u7a7a\u683c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e&nbsp;<em>maxWidth</em>\u3002</li>\n\t<li>\u8f93\u5165\u5355\u8bcd\u6570\u7ec4 <code>words</code>&nbsp;\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\nmaxWidth = 16\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]\nmaxWidth = 16\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>\u89e3\u91ca: </strong>\u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a &quot;shall be    &quot; \u800c\u4e0d\u662f &quot;shall     be&quot;,\n&nbsp;    \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002       \n     \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,\n&nbsp;        &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]\nmaxWidth = 20\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n</pre>\n",
        "tags_en": ["String"],
        "tags_cn": ["\u5b57\u7b26\u4e32"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** fullJustify(char ** words, int wordsSize, int maxWidth, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string[]} words\n * @param {number} maxWidth\n * @return {string[]}\n */\nvar fullJustify = function(words, maxWidth) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[]} words\n# @param {Integer} max_width\n# @return {String[]}\ndef full_justify(words, max_width)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func fullJustify(words []string, maxWidth int) []string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $maxWidth\n     * @return String[]\n     */\n    function fullJustify($words, $maxWidth) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function fullJustify(words: string[], maxWidth: number): string[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0069",
        "frontend_question_id": "0069",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/sqrtx",
        "url_en": "https://leetcode.com/problems/sqrtx",
        "relative_path_cn": "/leetcode/0000-0099/0069.Sqrt%28x%29/README.md",
        "relative_path_en": "/leetcode/0000-0099/0069.Sqrt%28x%29/README_EN.md",
        "title_cn": "x \u7684\u5e73\u65b9\u6839",
        "title_en": "Sqrt(x)",
        "question_title_slug": "sqrtx",
        "content_en": "<p>Given a non-negative integer <code>x</code>,&nbsp;compute and return <em>the square root of</em> <code>x</code>.</p>\n\n<p>Since the return type&nbsp;is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result&nbsp;is returned.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u5b9e\u73b0&nbsp;<code>int sqrt(int x)</code>&nbsp;\u51fd\u6570\u3002</p>\n\n<p>\u8ba1\u7b97\u5e76\u8fd4\u56de&nbsp;<em>x</em>&nbsp;\u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d&nbsp;<em>x </em>\u662f\u975e\u8d1f\u6574\u6570\u3002</p>\n\n<p>\u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 8\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \n&nbsp;    \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002\n</pre>\n",
        "tags_en": ["Math", "Binary Search"],
        "tags_cn": ["\u6570\u5b66", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int mySqrt(int x) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int mySqrt(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def mySqrt(self, x: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint mySqrt(int x){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MySqrt(int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func mySqrt(x int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def mySqrt(x: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun mySqrt(x: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function mySqrt(x: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0070",
        "frontend_question_id": "0070",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/climbing-stairs",
        "url_en": "https://leetcode.com/problems/climbing-stairs",
        "relative_path_cn": "/leetcode/0000-0099/0070.Climbing%20Stairs/README.md",
        "relative_path_en": "/leetcode/0000-0099/0070.Climbing%20Stairs/README_EN.md",
        "title_cn": "\u722c\u697c\u68af",
        "title_en": "Climbing Stairs",
        "question_title_slug": "climbing-stairs",
        "content_en": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n",
        "content_cn": "<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 <em>n</em>&nbsp;\u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u7ed9\u5b9a <em>n</em> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> 2\n<strong>\u8f93\u51fa\uff1a</strong> 2\n<strong>\u89e3\u91ca\uff1a</strong> \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636\n2.  2 \u9636</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> 3\n<strong>\u8f93\u51fa\uff1a</strong> 3\n<strong>\u89e3\u91ca\uff1a</strong> \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636 + 1 \u9636\n2.  1 \u9636 + 2 \u9636\n3.  2 \u9636 + 1 \u9636\n</pre>\n",
        "tags_en": ["Dynamic Programming"],
        "tags_cn": ["\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int climbStairs(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int climbStairs(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def climbStairs(self, n: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint climbStairs(int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int ClimbStairs(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func climbStairs(n int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def climbStairs(n: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun climbStairs(n: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function climbStairs(n: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0071",
        "frontend_question_id": "0071",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/simplify-path",
        "url_en": "https://leetcode.com/problems/simplify-path",
        "relative_path_cn": "/leetcode/0000-0099/0071.Simplify%20Path/README.md",
        "relative_path_en": "/leetcode/0000-0099/0071.Simplify%20Path/README_EN.md",
        "title_cn": "\u7b80\u5316\u8def\u5f84",
        "title_en": "Simplify Path",
        "question_title_slug": "simplify-path",
        "content_en": "<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>\n\n<p>In a UNIX-style file system, a period <code>&#39;.&#39;</code>&nbsp;refers to the current directory. Furthermore, a double period <code>&#39;..&#39;</code>&nbsp;moves the directory up a level.</p>\n\n<p>Note that the returned canonical path must always begin&nbsp;with a slash <code>&#39;/&#39;</code>, and there must be only a single slash <code>&#39;/&#39;</code>&nbsp;between two directory names.&nbsp;The last directory name (if it exists) <b>must not</b>&nbsp;end with a trailing <code>&#39;/&#39;</code>. Also, the canonical path must be the <strong>shortest</strong> string&nbsp;representing the absolute path.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home/&quot;\n<strong>Output:</strong> &quot;/home&quot;\n<strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/../&quot;\n<strong>Output:</strong> &quot;/&quot;\n<strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home//foo/&quot;\n<strong>Output:</strong> &quot;/home/foo&quot;\n<strong>Explanation: </strong>In the canonical path, multiple consecutive slashes are replaced by a single one.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/a/./b/../../c/&quot;\n<strong>Output:</strong> &quot;/c&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= path.length &lt;= 3000</code></li>\n\t<li><code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.</li>\n\t<li><code>path</code> is a valid Unix path.</li>\n</ul>\n",
        "content_cn": "<p>\u4ee5 Unix \u98ce\u683c\u7ed9\u51fa\u4e00\u4e2a\u6587\u4ef6\u7684<strong>\u7edd\u5bf9\u8def\u5f84</strong>\uff0c\u4f60\u9700\u8981\u7b80\u5316\u5b83\u3002\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u89c4\u8303\u8def\u5f84\u3002</p>\n\n<p>\u5728 Unix \u98ce\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u70b9\uff08<code>.</code>\uff09\u8868\u793a\u5f53\u524d\u76ee\u5f55\u672c\u8eab\uff1b\u6b64\u5916\uff0c\u4e24\u4e2a\u70b9 \uff08<code>..</code>\uff09&nbsp;\u8868\u793a\u5c06\u76ee\u5f55\u5207\u6362\u5230\u4e0a\u4e00\u7ea7\uff08\u6307\u5411\u7236\u76ee\u5f55\uff09\uff1b\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u590d\u6742\u76f8\u5bf9\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1a<a href=\"https://blog.csdn.net/u011327334/article/details/50355600\" target=\"_blank\">Linux / Unix\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84 vs \u76f8\u5bf9\u8def\u5f84</a></p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u59cb\u7ec8\u4ee5\u659c\u6760 <code>/</code> \u5f00\u5934\uff0c\u5e76\u4e14\u4e24\u4e2a\u76ee\u5f55\u540d\u4e4b\u95f4\u5fc5\u987b\u53ea\u6709\u4e00\u4e2a\u659c\u6760 <code>/</code>\u3002\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\uff08\u5982\u679c\u5b58\u5728\uff09<strong>\u4e0d\u80fd</strong>\u4ee5 <code>/</code> \u7ed3\u5c3e\u3002\u6b64\u5916\uff0c\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u662f\u8868\u793a\u7edd\u5bf9\u8def\u5f84\u7684<strong>\u6700\u77ed</strong>\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/home/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/home&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\u540e\u9762\u6ca1\u6709\u659c\u6760\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/../&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6839\u76ee\u5f55\u5411\u4e0a\u4e00\u7ea7\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u6839\u662f\u4f60\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u9ad8\u7ea7\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/home//foo/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/home/foo&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u89c4\u8303\u8def\u5f84\u4e2d\uff0c\u591a\u4e2a\u8fde\u7eed\u659c\u6760\u9700\u8981\u7528\u4e00\u4e2a\u659c\u6760\u66ff\u6362\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a/./b/../../c/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a/../../b/../c//.//&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 6\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a//b////c/d//././/..&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/a/b/c&quot;</pre>\n",
        "tags_en": ["Stack", "String"],
        "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string simplifyPath(string path) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String simplifyPath(String path) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def simplifyPath(self, path: str) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * simplifyPath(char * path){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string SimplifyPath(string path) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} path\n# @return {String}\ndef simplify_path(path)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func simplifyPath(_ path: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func simplifyPath(path string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def simplifyPath(path: String): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun simplifyPath(path: String): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn simplify_path(path: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $path\n     * @return String\n     */\n    function simplifyPath($path) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function simplifyPath(path: string): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0072",
        "frontend_question_id": "0072",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/edit-distance",
        "url_en": "https://leetcode.com/problems/edit-distance",
        "relative_path_cn": "/leetcode/0000-0099/0072.Edit%20Distance/README.md",
        "relative_path_en": "/leetcode/0000-0099/0072.Edit%20Distance/README_EN.md",
        "title_cn": "\u7f16\u8f91\u8ddd\u79bb",
        "title_en": "Edit Distance",
        "question_title_slug": "edit-distance",
        "content_en": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd\u00a0<code>word1</code> \u548c\u00a0<code>word2</code>\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06\u00a0<code>word1</code>\u00a0\u8f6c\u6362\u6210\u00a0<code>word2</code><em> </em>\u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u00a0\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li>\n\t<li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li>\n\t<li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>word1 = \"horse\", word2 = \"ros\"\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\nhorse -> rorse (\u5c06 'h' \u66ff\u6362\u4e3a 'r')\nrorse -> rose (\u5220\u9664 'r')\nrose -> ros (\u5220\u9664 'e')\n</pre>\n\n<p><strong>\u793a\u4f8b\u00a02\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>word1 = \"intention\", word2 = \"execution\"\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\nintention -> inention (\u5220\u9664 't')\ninention -> enention (\u5c06 'i' \u66ff\u6362\u4e3a 'e')\nenention -> exention (\u5c06 'n' \u66ff\u6362\u4e3a 'x')\nexention -> exection (\u5c06 'n' \u66ff\u6362\u4e3a 'c')\nexection -> execution (\u63d2\u5165 'u')\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= word1.length, word2.length <= 500</code></li>\n\t<li><code>word1</code> \u548c <code>word2</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int minDistance(String word1, String word2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint minDistance(char * word1, char * word2){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MinDistance(string word1, string word2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minDistance(word1 string, word2 string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun minDistance(word1: String, word2: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn min_distance(word1: String, word2: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function minDistance($word1, $word2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minDistance(word1: string, word2: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0073",
        "frontend_question_id": "0073",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/set-matrix-zeroes",
        "url_en": "https://leetcode.com/problems/set-matrix-zeroes",
        "relative_path_cn": "/leetcode/0000-0099/0073.Set%20Matrix%20Zeroes/README.md",
        "relative_path_en": "/leetcode/0000-0099/0073.Set%20Matrix%20Zeroes/README_EN.md",
        "title_cn": "\u77e9\u9635\u7f6e\u96f6",
        "title_en": "Set Matrix Zeroes",
        "question_title_slug": "set-matrix-zeroes",
        "content_en": "<p>Given an&nbsp;<code><em>m</em> x <em>n</em></code> matrix. If an element is <strong>0</strong>, set its entire row and column to <strong>0</strong>. Do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>.</p>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>A straight forward solution using O(<em>m</em><em>n</em>) space is probably a bad idea.</li>\n\t<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" style=\"width: 450px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" style=\"width: 450px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[0].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<em>m</em> x <em>n</em> \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0\u3002\u8bf7\u4f7f\u7528<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u7b97\u6cd5<strong>\u3002</strong></p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n[\n&nbsp; [1,1,1],\n&nbsp; [1,0,1],\n&nbsp; [1,1,1]\n]\n<strong>\u8f93\u51fa:</strong> \n[\n&nbsp; [1,0,1],\n&nbsp; [0,0,0],\n&nbsp; [1,0,1]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n[\n&nbsp; [0,1,2,0],\n&nbsp; [3,4,5,2],\n&nbsp; [1,3,1,5]\n]\n<strong>\u8f93\u51fa:</strong> \n[\n&nbsp; [0,0,0,0],\n&nbsp; [0,4,5,0],\n&nbsp; [0,3,1,0]\n]</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u4e00\u4e2a\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 &nbsp;O(<em>m</em><em>n</em>)&nbsp;\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</li>\n\t<li>\u4e00\u4e2a\u7b80\u5355\u7684\u6539\u8fdb\u65b9\u6848\u662f\u4f7f\u7528 O(<em>m</em>&nbsp;+&nbsp;<em>n</em>) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4ecd\u7136\u4e0d\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li>\n</ul>\n",
        "tags_en": ["Array"],
        "tags_cn": ["\u6570\u7ec4"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void setZeroes(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid setZeroes(int** matrix, int matrixSize, int* matrixColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void SetZeroes(int[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef set_zeroes(matrix)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func setZeroes(matrix [][]int)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun setZeroes(matrix: Array<IntArray>): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function setZeroes(&$matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction setZeroes(matrix: number[][]): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0074",
        "frontend_question_id": "0074",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/search-a-2d-matrix",
        "url_en": "https://leetcode.com/problems/search-a-2d-matrix",
        "relative_path_cn": "/leetcode/0000-0099/0074.Search%20a%202D%20Matrix/README.md",
        "relative_path_en": "/leetcode/0000-0099/0074.Search%20a%202D%20Matrix/README_EN.md",
        "title_cn": "\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635",
        "title_en": "Search a 2D Matrix",
        "question_title_slug": "search-a-2d-matrix",
        "content_en": "<p>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted from left to right.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [], target = 0\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad\u00a0<em>m</em> x <em>n</em>\u00a0\u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [], target = 0\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>0 <= m, n <= 100</code></li>\n\t<li><code>-10<sup>4</sup> <= matrix[i][j], target <= 10<sup>4</sup></code></li>\n</ul>\n",
        "tags_en": ["Array", "Binary Search"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func searchMatrix(matrix [][]int, target int) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0075",
        "frontend_question_id": "0075",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/sort-colors",
        "url_en": "https://leetcode.com/problems/sort-colors",
        "relative_path_cn": "/leetcode/0000-0099/0075.Sort%20Colors/README.md",
        "relative_path_en": "/leetcode/0000-0099/0075.Sort%20Colors/README_EN.md",
        "title_cn": "\u989c\u8272\u5206\u7c7b",
        "title_en": "Sort Colors",
        "question_title_slug": "sort-colors",
        "content_en": "<p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a>&nbsp;</strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p>\n\n<p>Here, we will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue respectively.</p>\n\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you&nbsp;solve this problem without using&nbsp;the library&#39;s sort function?</li>\n\t<li>Could you come up with a&nbsp;one-pass algorithm using only <code>O(1)</code> constant space?</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,0,2,1,1,0]\n<strong>Output:</strong> [0,0,1,1,2,2]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,0,1]\n<strong>Output:</strong> [0,1,2]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>nums[i]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\uff0c\u4e00\u5171\u00a0<code>n</code><em> </em>\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 <code>0</code>\u3001\u00a0<code>1</code> \u548c <code>2</code> \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4ee3\u7801\u5e93\u4e2d\u7684\u6392\u5e8f\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u5417\uff1f</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [2,0,2,1,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,2,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [2,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>[0,1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0]\n<strong>\u8f93\u51fa\uff1a</strong>[0]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 <= n <= 300</code></li>\n\t<li><code>nums[i]</code> \u4e3a <code>0</code>\u3001<code>1</code> \u6216 <code>2</code></li>\n</ul>\n",
        "tags_en": ["Sort", "Array", "Two Pointers"],
        "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void sortColors(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid sortColors(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void SortColors(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef sort_colors(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func sortColors(nums []int)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun sortColors(nums: IntArray): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn sort_colors(nums: &mut Vec<i32>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function sortColors(&$nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction sortColors(nums: number[]): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0076",
        "frontend_question_id": "0076",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/minimum-window-substring",
        "url_en": "https://leetcode.com/problems/minimum-window-substring",
        "relative_path_cn": "/leetcode/0000-0099/0076.Minimum%20Window%20Substring/README.md",
        "relative_path_en": "/leetcode/0000-0099/0076.Minimum%20Window%20Substring/README_EN.md",
        "title_cn": "\u6700\u5c0f\u8986\u76d6\u5b50\u4e32",
        "title_en": "Minimum Window Substring",
        "question_title_slug": "minimum-window-substring",
        "content_en": "<p>Given two strings <code>s</code> and <code>t</code>, return <em>the minimum window in <code>s</code> which will contain all the characters in <code>t</code></em>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return <em>the empty string <code>&quot;&quot;</code></em>.</p>\n\n<p><strong>Note</strong> that If there is such a window, it is&nbsp;guaranteed that there will always be only one unique minimum window in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"ADOBECODEBANC\", t = \"ABC\"\n<strong>Output:</strong> \"BANC\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"a\", t = \"a\"\n<strong>Output:</strong> \"a\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(n)</code> time?",
        "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>t</code> \u3002\u8fd4\u56de <code>s</code> \u4e2d\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c <code>s</code> \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 <code>t</code> \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code> \u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u5982\u679c <code>s</code> \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"ADOBECODEBANC\", t = \"ABC\"\n<strong>\u8f93\u51fa\uff1a</strong>\"BANC\"\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"a\", t = \"a\"\n<strong>\u8f93\u51fa\uff1a</strong>\"a\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length, t.length <= 10<sup>5</sup></code></li>\n\t<li><code>s</code> \u548c <code>t</code> \u7531\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n\n<p>\u00a0</p>\n<strong>\u8fdb\u9636\uff1a</strong>\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u5728 <code>o(n)</code> \u65f6\u95f4\u5185\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u7b97\u6cd5\u5417\uff1f",
        "tags_en": ["Hash Table", "Two Pointers", "String", "Sliding Window"],
        "tags_cn": ["\u54c8\u5e0c\u8868", "\u53cc\u6307\u9488", "\u5b57\u7b26\u4e32", null],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public String minWindow(String s, String t) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nchar * minWindow(char * s, char * t){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minWindow(s string, t string) string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minWindow(s: string, t: string): string {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0077",
        "frontend_question_id": "0077",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/combinations",
        "url_en": "https://leetcode.com/problems/combinations",
        "relative_path_cn": "/leetcode/0000-0099/0077.Combinations/README.md",
        "relative_path_en": "/leetcode/0000-0099/0077.Combinations/README_EN.md",
        "title_cn": "\u7ec4\u5408",
        "title_en": "Combinations",
        "question_title_slug": "combinations",
        "content_en": "<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 ... <em>n</em>.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 <em>n</em> \u548c <em>k</em>\uff0c\u8fd4\u56de 1 ... <em>n </em>\u4e2d\u6240\u6709\u53ef\u80fd\u7684 <em>k</em> \u4e2a\u6570\u7684\u7ec4\u5408\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;n = 4, k = 2\n<strong>\u8f93\u51fa:</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</pre>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> Combine(int n, int k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[][]}\ndef combine(n, k)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func combine(n int, k int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun combine(n: Int, k: Int): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn combine(n: i32, k: i32) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function combine($n, $k) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function combine(n: number, k: number): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0078",
        "frontend_question_id": "0078",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/subsets",
        "url_en": "https://leetcode.com/problems/subsets",
        "relative_path_cn": "/leetcode/0000-0099/0078.Subsets/README.md",
        "relative_path_en": "/leetcode/0000-0099/0078.Subsets/README_EN.md",
        "title_cn": "\u5b50\u96c6",
        "title_en": "Subsets",
        "question_title_slug": "subsets",
        "content_en": "<p>Given an&nbsp;integer array&nbsp;<code>nums</code>, return <em>all possible subsets (the power set)</em>.</p>\n\n<p>The solution set must not contain duplicate subsets.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong>\u4e0d\u542b\u91cd\u590d\u5143\u7d20</strong>\u7684\u6574\u6570\u6570\u7ec4&nbsp;<em>nums</em>\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3]\n<strong>\u8f93\u51fa:</strong>\n[\n  [3],\n&nbsp; [1],\n&nbsp; [2],\n&nbsp; [1,2,3],\n&nbsp; [1,3],\n&nbsp; [2,3],\n&nbsp; [1,2],\n&nbsp; []\n]</pre>\n",
        "tags_en": ["Bit Manipulation", "Array", "Backtracking"],
        "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> Subsets(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func subsets(_ nums: [Int]) -> [[Int]] {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func subsets(nums []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun subsets(nums: IntArray): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsets($nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function subsets(nums: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0079",
        "frontend_question_id": "0079",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/word-search",
        "url_en": "https://leetcode.com/problems/word-search",
        "relative_path_cn": "/leetcode/0000-0099/0079.Word%20Search/README.md",
        "relative_path_en": "/leetcode/0000-0099/0079.Word%20Search/README_EN.md",
        "title_cn": "\u5355\u8bcd\u641c\u7d22",
        "title_en": "Word Search",
        "question_title_slug": "word-search",
        "content_en": "<p>Given an&nbsp;<code>m x n</code> <code>board</code> and a <code>word</code>, find if the word exists in the grid.</p>\n\n<p>The word can be constructed from letters of sequentially adjacent cells, where &quot;adjacent&quot; cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/word3.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n = board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>board</code>&nbsp;and <code>word</code> consists only of lowercase and uppercase English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002</p>\n\n<p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d&ldquo;\u76f8\u90bb&rdquo;\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>board =\n[\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\n]\n\n\u7ed9\u5b9a word = &quot;<strong>ABCCED</strong>&quot;, \u8fd4\u56de <strong>true</strong>\n\u7ed9\u5b9a word = &quot;<strong>SEE</strong>&quot;, \u8fd4\u56de <strong>true</strong>\n\u7ed9\u5b9a word = &quot;<strong>ABCB</strong>&quot;, \u8fd4\u56de <strong>false</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>board</code> \u548c <code>word</code> \u4e2d\u53ea\u5305\u542b\u5927\u5199\u548c\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li><code>1 &lt;= board.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= board[i].length &lt;= 200</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 10^3</code></li>\n</ul>\n",
        "tags_en": ["Array", "Backtracking"],
        "tags_cn": ["\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean exist(char[][] board, String word) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool exist(char** board, int boardSize, int* boardColSize, char * word){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool Exist(char[][] board, string word) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Character[][]} board\n# @param {String} word\n# @return {Boolean}\ndef exist(board, word)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func exist(board [][]byte, word string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun exist(board: Array<CharArray>, word: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn exist(board: Vec<Vec<char>>, word: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String $word\n     * @return Boolean\n     */\n    function exist($board, $word) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function exist(board: string[][], word: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0080",
        "frontend_question_id": "0080",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii",
        "url_en": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii",
        "relative_path_cn": "/leetcode/0000-0099/0080.Remove%20Duplicates%20from%20Sorted%20Array%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0080.Remove%20Duplicates%20from%20Sorted%20Array%20II/README_EN.md",
        "title_cn": "\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II",
        "title_en": "Remove Duplicates from Sorted Array II",
        "question_title_slug": "remove-duplicates-from-sorted-array-ii",
        "content_en": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that duplicates appeared at most&nbsp;<em>twice</em> and return the new length.</p>\n\n<p>Do not allocate extra space for another array; you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Clarification:</strong></p>\n\n<p>Confused why the returned value is an integer, but your answer is an array?</p>\n\n<p>Note that the input array is passed in by <strong>reference</strong>, which means a modification to the input array will be known to the caller.</p>\n\n<p>Internally you can think of this:</p>\n\n<pre>\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to <strong>nums</strong> in your function would be known by the caller.\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,2,3]\n<strong>Output:</strong> 5, nums = [1,1,2,2,3]\n<strong>Explanation:</strong> Your function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being <strong><code>1, 1, 2, 2</code></strong> and <strong>3</strong> respectively. It doesn&#39;t matter what you leave beyond the returned length.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3]\n<strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3]\n<strong>Explanation:</strong> Your function should return length = <strong><code>7</code></strong>, with the first seven elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong> and&nbsp;<strong>3</strong> respectively. It doesn&#39;t matter what values are set beyond&nbsp;the returned length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code>&nbsp;is sorted in ascending order.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u589e\u5e8f\u6392\u5217\u6570\u7ec4 <code>nums</code> \uff0c\u4f60\u9700\u8981\u5728 <strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730 </a></strong>\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a> \u4fee\u6539\u8f93\u5165\u6570\u7ec4 </strong>\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462\uff1f</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>\u201c\u5f15\u7528\u201d</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b\uff1a</p>\n\n<pre>\n// <strong>nums</strong> \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong>\u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong>\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i < len; i++) {\n\u00a0 \u00a0 print(nums[i]);\n}</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,1,1,2,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>5, nums = [1,1,2,2,3]\n<strong>\u89e3\u91ca\uff1a</strong>\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = <strong><code>5</code></strong>, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>1, 1, 2, 2,</code></strong> <strong>3 </strong>\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0,0,1,1,1,1,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>7, nums = [0,0,1,1,2,3,3]\n<strong>\u89e3\u91ca\uff1a</strong>\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = <strong><code>7</code></strong>, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a\u00a0<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>3 \u3002</strong> \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= nums.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> \u6309\u9012\u589e\u987a\u5e8f\u6392\u5217</li>\n</ul>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint removeDuplicates(int* nums, int numsSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func removeDuplicates(nums []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function removeDuplicates(nums: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0081",
        "frontend_question_id": "0081",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii",
        "url_en": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii",
        "relative_path_cn": "/leetcode/0000-0099/0081.Search%20in%20Rotated%20Sorted%20Array%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0081.Search%20in%20Rotated%20Sorted%20Array%20II/README_EN.md",
        "title_cn": "\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II",
        "title_en": "Search in Rotated Sorted Array II",
        "question_title_slug": "search-in-rotated-sorted-array-ii",
        "content_en": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"/problems/search-in-rotated-sorted-array/description/\">Search in Rotated Sorted Array</a>, where <code>nums</code> may contain duplicates.</li>\r\n\t<li>Would this affect the run-time complexity? How and why?</li>\r\n</ul>\r\n",
        "content_cn": "<p>\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002</p>\n\n<p>( \u4f8b\u5982\uff0c\u6570\u7ec4&nbsp;<code>[0,0,1,2,2,5,6]</code>&nbsp;\u53ef\u80fd\u53d8\u4e3a&nbsp;<code>[2,5,6,0,0,1,2]</code>&nbsp;)\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>false</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u8fd9\u662f <a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/\">\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4</a>&nbsp;\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684&nbsp;<code>nums</code>&nbsp; \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002</li>\n\t<li>\u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f</li>\n</ul>\n",
        "tags_en": ["Array", "Binary Search"],
        "tags_cn": ["\u6570\u7ec4", "\u4e8c\u5206\u67e5\u627e"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean search(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def search(self, nums: List[int], target: int) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool search(int* nums, int numsSize, int target){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool Search(int[] nums, int target) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar search = function(nums, target) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Boolean}\ndef search(nums, target)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func search(nums []int, target int) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def search(nums: Array[Int], target: Int): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun search(nums: IntArray, target: Int): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Boolean\n     */\n    function search($nums, $target) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function search(nums: number[], target: number): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0082",
        "frontend_question_id": "0082",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii",
        "url_en": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",
        "relative_path_cn": "/leetcode/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/README_EN.md",
        "title_cn": "\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II",
        "title_en": "Remove Duplicates from Sorted List II",
        "question_title_slug": "remove-duplicates-from-sorted-list-ii",
        "content_en": "<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <em>distinct</em> numbers from the original list.</p>\n\n<p>Return the linked list sorted as well.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n<strong>Output:</strong> 1-&gt;2-&gt;5\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\n<strong>Output:</strong> 2-&gt;3\n</pre>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d&nbsp;<em>\u6ca1\u6709\u91cd\u590d\u51fa\u73b0&nbsp;</em>\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;5\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\n<strong>\u8f93\u51fa:</strong> 2-&gt;3</pre>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* deleteDuplicates(struct ListNode* head){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0083",
        "frontend_question_id": "0083",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list",
        "url_en": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
        "relative_path_cn": "/leetcode/0000-0099/0083.Remove%20Duplicates%20from%20Sorted%20List/README.md",
        "relative_path_en": "/leetcode/0000-0099/0083.Remove%20Duplicates%20from%20Sorted%20List/README_EN.md",
        "title_cn": "\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20",
        "title_en": "Remove Duplicates from Sorted List",
        "question_title_slug": "remove-duplicates-from-sorted-list",
        "content_en": "<p>Given a sorted linked list, delete all duplicates such that each element appear only <em>once</em>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;1-&gt;2\r\n<strong>Output:</strong> 1-&gt;2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3\r\n<strong>Output:</strong> 1-&gt;2-&gt;3\r\n</pre>\r\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;2\n<strong>\u8f93\u51fa:</strong> 1-&gt;2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3</pre>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* deleteDuplicates(struct ListNode* head){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode DeleteDuplicates(ListNode head) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef delete_duplicates(head)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun deleteDuplicates(head: ListNode?): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn delete_duplicates(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function deleteDuplicates($head) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction deleteDuplicates(head: ListNode | null): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0084",
        "frontend_question_id": "0084",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/largest-rectangle-in-histogram",
        "url_en": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "relative_path_cn": "/leetcode/0000-0099/0084.Largest%20Rectangle%20in%20Histogram/README.md",
        "relative_path_en": "/leetcode/0000-0099/0084.Largest%20Rectangle%20in%20Histogram/README_EN.md",
        "title_cn": "\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62",
        "title_en": "Largest Rectangle in Histogram",
        "question_title_slug": "largest-rectangle-in-histogram",
        "content_en": "<p>Given <em>n</em> non-negative integers representing the histogram&#39;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,1,5,6,2,3]\r\n<strong>Output:</strong> 10\r\n</pre>\r\n",
        "content_cn": "<p>\u7ed9\u5b9a <em>n</em> \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002</p>\n\n<p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png\"></p>\n\n<p><small>\u4ee5\u4e0a\u662f\u67f1\u72b6\u56fe\u7684\u793a\u4f8b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u67f1\u5b50\u7684\u5bbd\u5ea6\u4e3a 1\uff0c\u7ed9\u5b9a\u7684\u9ad8\u5ea6\u4e3a&nbsp;<code>[2,1,5,6,2,3]</code>\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png\"></p>\n\n<p><small>\u56fe\u4e2d\u9634\u5f71\u90e8\u5206\u4e3a\u6240\u80fd\u52fe\u52d2\u51fa\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\uff0c\u5176\u9762\u79ef\u4e3a&nbsp;<code>10</code>&nbsp;\u4e2a\u5355\u4f4d\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,1,5,6,2,3]\n<strong>\u8f93\u51fa:</strong> 10</pre>\n",
        "tags_en": ["Stack", "Array"],
        "tags_cn": ["\u6808", "\u6570\u7ec4"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint largestRectangleArea(int* heights, int heightsSize){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func largestRectangleArea(heights []int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function largestRectangleArea(heights: number[]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0085",
        "frontend_question_id": "0085",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/maximal-rectangle",
        "url_en": "https://leetcode.com/problems/maximal-rectangle",
        "relative_path_cn": "/leetcode/0000-0099/0085.Maximal%20Rectangle/README.md",
        "relative_path_en": "/leetcode/0000-0099/0085.Maximal%20Rectangle/README_EN.md",
        "title_cn": "\u6700\u5927\u77e9\u5f62",
        "title_en": "Maximal Rectangle",
        "question_title_slug": "maximal-rectangle",
        "content_en": "<p>Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, find the largest rectangle containing only <code>1</code>&#39;s and return <em>its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The maximal rectangle is shown in the above picture.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = []\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix.length</code></li>\n\t<li><code>0 &lt;= row, cols &lt;= 200</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u00a0<code>0</code> \u548c <code>1</code> \u3001\u5927\u5c0f\u4e3a <code>rows x cols</code> \u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u627e\u51fa\u53ea\u5305\u542b <code>1</code> \u7684\u6700\u5927\u77e9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5927\u77e9\u5f62\u5982\u4e0a\u56fe\u6240\u793a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = []\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"1\"]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"0\",\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix[0].length</code></li>\n\t<li><code>0 <= row, cols <= 200</code></li>\n\t<li><code>matrix[i][j]</code> \u4e3a <code>'0'</code> \u6216 <code>'1'</code></li>\n</ul>\n",
        "tags_en": ["Stack", "Array", "Hash Table", "Dynamic Programming"],
        "tags_cn": ["\u6808", "\u6570\u7ec4", "\u54c8\u5e0c\u8868", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint maximalRectangle(char** matrix, int matrixSize, int* matrixColSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MaximalRectangle(char[][] matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalRectangle = function(matrix) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_rectangle(matrix)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximalRectangle(matrix [][]byte) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun maximalRectangle(matrix: Array<CharArray>): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn maximal_rectangle(matrix: Vec<Vec<char>>) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalRectangle($matrix) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximalRectangle(matrix: string[][]): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0086",
        "frontend_question_id": "0086",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/partition-list",
        "url_en": "https://leetcode.com/problems/partition-list",
        "relative_path_cn": "/leetcode/0000-0099/0086.Partition%20List/README.md",
        "relative_path_en": "/leetcode/0000-0099/0086.Partition%20List/README_EN.md",
        "title_cn": "\u5206\u9694\u94fe\u8868",
        "title_en": "Partition List",
        "question_title_slug": "partition-list",
        "content_en": "<p>Given a linked list and a value <em>x</em>, partition it such that all nodes less than <em>x</em> come before nodes greater than or equal to <em>x</em>.</p>\r\n\r\n<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\r\n<strong>Output:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\r\n</pre>\r\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c<em> x</em>\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e <em>x</em> \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e <em>x</em> \u7684\u8282\u70b9\u4e4b\u524d\u3002</p>\n\n<p>\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\n</pre>\n",
        "tags_en": ["Linked List", "Two Pointers"],
        "tags_cn": ["\u94fe\u8868", "\u53cc\u6307\u9488"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def partition(self, head: ListNode, x: int) -> ListNode:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* partition(struct ListNode* head, int x){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode Partition(ListNode head, int x) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function(head, x) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer} x\n# @return {ListNode}\ndef partition(head, x)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func partition(_ head: ListNode?, _ x: Int) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc partition(head *ListNode, x int) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def partition(head: ListNode, x: Int): ListNode = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun partition(head: ListNode?, x: Int): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn partition(head: Option<Box<ListNode>>, x: i32) -> Option<Box<ListNode>> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $x\n     * @return ListNode\n     */\n    function partition($head, $x) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction partition(head: ListNode | null, x: number): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0087",
        "frontend_question_id": "0087",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/scramble-string",
        "url_en": "https://leetcode.com/problems/scramble-string",
        "relative_path_cn": "/leetcode/0000-0099/0087.Scramble%20String/README.md",
        "relative_path_en": "/leetcode/0000-0099/0087.Scramble%20String/README_EN.md",
        "title_cn": "\u6270\u4e71\u5b57\u7b26\u4e32",
        "title_en": "Scramble String",
        "question_title_slug": "scramble-string",
        "content_en": "<p>We can scramble a string s to get a string t using the following algorithm:</p>\n\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n\t\t<li><strong>Randomly</strong>&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One possible scenario applied on s1 is:\n&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.\n&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.\n&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\n&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.\n&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.\n&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.\nThe algorithm stops now and the result string is &quot;rgeat&quot; which is s2.\nAs there is one possible scenario that led s1 to be scrambled to s2, we return true.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a&quot;, s2 = &quot;a&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= s1.length &lt;= 30</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lower-case English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<em>s1</em>\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u9012\u5f52\u5730\u5206\u5272\u6210\u4e24\u4e2a\u975e\u7a7a\u5b50\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u5c06\u5176\u8868\u793a\u4e3a\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u4e0b\u56fe\u662f\u5b57\u7b26\u4e32&nbsp;<em>s1</em>&nbsp;=&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u79cd\u53ef\u80fd\u7684\u8868\u793a\u5f62\u5f0f\u3002</p>\n\n<pre>    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre>\n\n<p>\u5728\u6270\u4e71\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u9009\u4efb\u4f55\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u7136\u540e\u4ea4\u6362\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6311\u9009\u975e\u53f6\u8282\u70b9&nbsp;<code>&quot;gr&quot;</code>&nbsp;\uff0c\u4ea4\u6362\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5c06\u4f1a\u4ea7\u751f\u6270\u4e71\u5b57\u7b26\u4e32&nbsp;<code>&quot;rgeat&quot;</code>&nbsp;\u3002</p>\n\n<pre>    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre>\n\n<p>\u6211\u4eec\u5c06&nbsp;<code>&quot;rgeat&rdquo;</code>&nbsp;\u79f0\u4f5c&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u4e2a\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u540c\u6837\u5730\uff0c\u5982\u679c\u6211\u4eec\u7ee7\u7eed\u4ea4\u6362\u8282\u70b9&nbsp;<code>&quot;eat&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;at&quot;</code>&nbsp;\u7684\u5b50\u8282\u70b9\uff0c\u5c06\u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65b0\u7684\u6270\u4e71\u5b57\u7b26\u4e32&nbsp;<code>&quot;rgtae&quot;</code>&nbsp;\u3002</p>\n\n<pre>    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre>\n\n<p>\u6211\u4eec\u5c06&nbsp;<code>&quot;rgtae&rdquo;</code>&nbsp;\u79f0\u4f5c&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u4e2a\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u5b57\u7b26\u4e32 <em>s1 </em>\u548c&nbsp;<em>s2</em>\uff0c\u5224\u65ad&nbsp;<em>s2&nbsp;</em>\u662f\u5426\u662f&nbsp;<em>s1&nbsp;</em>\u7684\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isScramble(string s1, string s2) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isScramble(String s1, String s2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isScramble(char * s1, char * s2){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsScramble(string s1, string s2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar isScramble = function(s1, s2) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef is_scramble(s1, s2)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isScramble(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isScramble(s1 string, s2 string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isScramble(s1: String, s2: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isScramble(s1: String, s2: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_scramble(s1: String, s2: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function isScramble($s1, $s2) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isScramble(s1: string, s2: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0088",
        "frontend_question_id": "0088",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/merge-sorted-array",
        "url_en": "https://leetcode.com/problems/merge-sorted-array",
        "relative_path_cn": "/leetcode/0000-0099/0088.Merge%20Sorted%20Array/README.md",
        "relative_path_en": "/leetcode/0000-0099/0088.Merge%20Sorted%20Array/README_EN.md",
        "title_cn": "\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",
        "title_en": "Merge Sorted Array",
        "question_title_slug": "merge-sorted-array",
        "content_en": "<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li>\n\t<li>You may assume that <em>nums1</em> has enough space (size that is&nbsp;<strong>equal</strong> to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>Input:</strong>\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n<strong>Output:</strong>&nbsp;[1,2,2,3,5,6]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10^9 &lt;= nums1[i], nums2[i] &lt;= 10^9</code></li>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4\u00a0<em>nums1 </em>\u548c <em>nums2</em>\uff0c\u8bf7\u4f60\u5c06 <em>nums2 </em>\u5408\u5e76\u5230\u00a0<em>nums1\u00a0</em>\u4e2d<em>\uff0c</em>\u4f7f <em>nums1 </em>\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u521d\u59cb\u5316\u00a0<em>nums1</em> \u548c <em>nums2</em> \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a\u00a0<em>m</em> \u548c <em>n </em>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u00a0<em>nums1\u00a0</em>\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e\u00a0<em>m + n</em>\uff09\u6765\u4fdd\u5b58 <em>nums2</em> \u4e2d\u7684\u5143\u7d20\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,2,3,5,6]</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>-10^9 <= nums1[i], nums2[i] <= 10^9</code></li>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n</ul>\n",
        "tags_en": ["Array", "Two Pointers"],
        "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"],
        "difficulty_en": "Easy",
        "difficulty_cn": "\u7b80\u5355",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums1\n# @param {Integer} m\n# @param {Integer[]} nums2\n# @param {Integer} n\n# @return {Void} Do not return anything, modify nums1 in-place instead.\ndef merge(nums1, m, nums2, n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer $m\n     * @param Integer[] $nums2\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$nums1, $m, $nums2, $n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n Do not return anything, modify nums1 in-place instead.\n */\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0089",
        "frontend_question_id": "0089",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/gray-code",
        "url_en": "https://leetcode.com/problems/gray-code",
        "relative_path_cn": "/leetcode/0000-0099/0089.Gray%20Code/README.md",
        "relative_path_en": "/leetcode/0000-0099/0089.Gray%20Code/README_EN.md",
        "title_cn": "\u683c\u96f7\u7f16\u7801",
        "title_en": "Gray Code",
        "question_title_slug": "gray-code",
        "content_en": "<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\r\n\r\n<p>Given a non-negative integer <em>n</em> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;2\r\n<strong>Output:</strong>&nbsp;<code>[0,1,3,2]</code>\r\n<strong>Explanation:</strong>\r\n00 - 0\r\n01 - 1\r\n11 - 3\r\n10 - 2\r\n\r\nFor a given&nbsp;<em>n</em>, a gray code sequence may not be uniquely defined.\r\nFor example, [0,2,3,1] is also a valid gray code sequence.\r\n\r\n00 - 0\r\n10 - 2\r\n11 - 3\r\n01 - 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;0\r\n<strong>Output:</strong>&nbsp;<code>[0]\r\n<strong>Explanation:</strong> We define the gray code sequence to begin with 0.\r\n&nbsp;            A gray code sequence of <em>n</em> has size = 2<sup>n</sup>, which for <em>n</em> = 0 the size is 2<sup>0</sup> = 1.\r\n&nbsp;            Therefore, for <em>n</em> = 0 the gray code sequence is [0].</code>\r\n</pre>\r\n",
        "content_cn": "<p>\u683c\u96f7\u7f16\u7801\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u503c\u4ec5\u6709\u4e00\u4e2a\u4f4d\u6570\u7684\u5dee\u5f02\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u7f16\u7801\u603b\u4f4d\u6570\u7684\u975e\u8d1f\u6574\u6570<em> n</em>\uff0c\u6253\u5370\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\u5373\u4f7f\u6709\u591a\u4e2a\u4e0d\u540c\u7b54\u6848\uff0c\u4f60\u4e5f\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4e00\u79cd\u3002</p>\n\n<p>\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;2\n<strong>\u8f93\u51fa:</strong>&nbsp;<code>[0,1,3,2]</code>\n<strong>\u89e3\u91ca:</strong>\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684&nbsp;<em>n</em>\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5e76\u4e0d\u552f\u4e00\u3002\n\u4f8b\u5982\uff0c<code>[0,2,3,1]</code>&nbsp;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;0\n<strong>\u8f93\u51fa:</strong>&nbsp;<code>[0]\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5b9a\u4e49</code>\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002<code>\n&nbsp;    \u7ed9\u5b9a</code>\u7f16\u7801\u603b\u4f4d\u6570\u4e3a<code> <em>n</em> \u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\uff0c\u5176\u957f\u5ea6\u4e3a 2<sup>n</sup></code>\u3002<code>\u5f53 <em>n</em> = 0 \u65f6\uff0c\u957f\u5ea6\u4e3a 2<sup>0</sup> = 1\u3002\n&nbsp;    \u56e0\u6b64\uff0c\u5f53 <em>n</em> = 0 \u65f6\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u4e3a [0]\u3002</code>\n</pre>\n",
        "tags_en": ["Backtracking"],
        "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> grayCode(int n) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<Integer> grayCode(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def grayCode(self, n: int) -> List[int]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* grayCode(int n, int* returnSize){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<int> GrayCode(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar grayCode = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {Integer[]}\ndef gray_code(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func grayCode(_ n: Int) -> [Int] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func grayCode(n int) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def grayCode(n: Int): List[Int] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun grayCode(n: Int): List<Int> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn gray_code(n: i32) -> Vec<i32> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function grayCode($n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function grayCode(n: number): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0090",
        "frontend_question_id": "0090",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/subsets-ii",
        "url_en": "https://leetcode.com/problems/subsets-ii",
        "relative_path_cn": "/leetcode/0000-0099/0090.Subsets%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0090.Subsets%20II/README_EN.md",
        "title_cn": "\u5b50\u96c6 II",
        "title_en": "Subsets II",
        "question_title_slug": "subsets-ii",
        "content_en": "<p>Given a collection of integers that might contain duplicates, <strong><em>nums</em></strong>, return all possible subsets (the power set).</p>\r\n\r\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,2]\r\n<strong>Output:</strong>\r\n[\r\n  [2],\r\n  [1],\r\n  [1,2,2],\r\n  [2,2],\r\n  [1,2],\r\n  []\r\n]\r\n</pre>\r\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 <em><strong>nums</strong></em>\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,2]\n<strong>\u8f93\u51fa:</strong>\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]</pre>\n",
        "tags_en": ["Array", "Backtracking"],
        "tags_cn": ["\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** subsetsWithDup(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<IList<int>> SubsetsWithDup(int[] nums) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function(nums) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef subsets_with_dup(nums)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func subsetsWithDup(nums []int) [][]int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun subsetsWithDup(nums: IntArray): List<List<Int>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn subsets_with_dup(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function subsetsWithDup($nums) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function subsetsWithDup(nums: number[]): number[][] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0091",
        "frontend_question_id": "0091",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/decode-ways",
        "url_en": "https://leetcode.com/problems/decode-ways",
        "relative_path_cn": "/leetcode/0000-0099/0091.Decode%20Ways/README.md",
        "relative_path_en": "/leetcode/0000-0099/0091.Decode%20Ways/README_EN.md",
        "title_cn": "\u89e3\u7801\u65b9\u6cd5",
        "title_en": "Decode Ways",
        "question_title_slug": "decode-ways",
        "content_en": "<p>A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:</p>\n\n<pre>\n&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>Given a <strong>non-empty</strong> string containing only digits, determine the total number of ways to decode it.</p>\n\n<p>The answer is guaranteed to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;226&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no character that is mapped to a number starting with &#39;0&#39;. We cannot ignore a zero when we face it while decoding. So, each &#39;0&#39; should be part of &quot;10&quot; --&gt; &#39;J&#39; or &quot;20&quot; --&gt; &#39;T&#39;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n",
        "content_cn": "<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd\u00a0<code>A-Z</code> \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p>\n\n<pre>\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n</pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p>\n\n<p>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u80af\u5b9a\u662f\u4e00\u4e2a 32 \u4f4d\u7684\u6574\u6570\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"12\"\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"226\"\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"0\"\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"1\"\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"2\"\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= s.length <= 100</code></li>\n\t<li><code>s</code> \u53ea\u5305\u542b\u6570\u5b57\uff0c\u5e76\u4e14\u53ef\u80fd\u5305\u542b\u524d\u5bfc\u96f6\u3002</li>\n</ul>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int numDecodings(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def numDecodings(self, s: str) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint numDecodings(char * s){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int NumDecodings(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numDecodings(s string) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def numDecodings(s: String): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun numDecodings(s: String): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numDecodings(s: string): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0092",
        "frontend_question_id": "0092",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/reverse-linked-list-ii",
        "url_en": "https://leetcode.com/problems/reverse-linked-list-ii",
        "relative_path_cn": "/leetcode/0000-0099/0092.Reverse%20Linked%20List%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0092.Reverse%20Linked%20List%20II/README_EN.md",
        "title_cn": "\u53cd\u8f6c\u94fe\u8868 II",
        "title_en": "Reverse Linked List II",
        "question_title_slug": "reverse-linked-list-ii",
        "content_en": "<p>Reverse a linked list from position <em>m</em> to <em>n</em>. Do it in one-pass.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>1 &le; <em>m</em> &le; <em>n</em> &le; length of list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\r\n<strong>Output:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL\r\n</pre>\r\n",
        "content_cn": "<p>\u53cd\u8f6c\u4ece\u4f4d\u7f6e <em>m</em> \u5230 <em>n</em> \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n1 &le;&nbsp;<em>m</em>&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le; \u94fe\u8868\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\n<strong>\u8f93\u51fa:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</pre>\n",
        "tags_en": ["Linked List"],
        "tags_cn": ["\u94fe\u8868"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int m, int n) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* reverseBetween(struct ListNode* head, int m, int n){\n\n}\n\n",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode ReverseBetween(ListNode head, int m, int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} m\n * @param {number} n\n * @return {ListNode}\n */\nvar reverseBetween = function(head, m, n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer} m\n# @param {Integer} n\n# @return {ListNode}\ndef reverse_between(head, m, n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reverseBetween(_ head: ListNode?, _ m: Int, _ n: Int) -> ListNode? {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseBetween(head *ListNode, m int, n int) *ListNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseBetween(head: ListNode, m: Int, n: Int): ListNode = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseBetween(head: ListNode?, m: Int, n: Int): ListNode? {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_between(head: Option<Box<ListNode>>, m: i32, n: i32) -> Option<Box<ListNode>> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $m\n     * @param Integer $n\n     * @return ListNode\n     */\n    function reverseBetween($head, $m, $n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseBetween(head: ListNode | null, m: number, n: number): ListNode | null {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0093",
        "frontend_question_id": "0093",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/restore-ip-addresses",
        "url_en": "https://leetcode.com/problems/restore-ip-addresses",
        "relative_path_cn": "/leetcode/0000-0099/0093.Restore%20IP%20Addresses/README.md",
        "relative_path_en": "/leetcode/0000-0099/0093.Restore%20IP%20Addresses/README_EN.md",
        "title_cn": "\u590d\u539fIP\u5730\u5740",
        "title_en": "Restore IP Addresses",
        "question_title_slug": "restore-ip-addresses",
        "content_en": "<p>Given a string <code>s</code> containing only digits, return all possible valid IP addresses that can be obtained from <code>s</code>. You can return them in <strong>any</strong> order.</p>\n\n<p>A <strong>valid IP address</strong> consists of exactly four integers, each integer is between <code>0</code> and <code>255</code>, separated by single dots and cannot have leading zeros. For example, &quot;0.1.2.201&quot; and &quot;192.168.1.1&quot; are <strong>valid</strong> IP addresses and &quot;0.011.255.245&quot;, &quot;192.168.1.312&quot; and &quot;192.168@1.1&quot; are <strong>invalid</strong> IP addresses.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"25525511135\"\n<strong>Output:</strong> [\"255.255.11.135\",\"255.255.111.35\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"0000\"\n<strong>Output:</strong> [\"0.0.0.0\"]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"1111\"\n<strong>Output:</strong> [\"1.1.1.1\"]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> s = \"010010\"\n<strong>Output:</strong> [\"0.10.0.10\",\"0.100.1.0\"]\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> s = \"101023\"\n<strong>Output:</strong> [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> consists of digits only.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002</p>\n\n<p><strong>\u6709\u6548\u7684 IP \u5730\u5740</strong> \u6b63\u597d\u7531\u56db\u4e2a\u6574\u6570\uff08\u6bcf\u4e2a\u6574\u6570\u4f4d\u4e8e 0 \u5230 255 \u4e4b\u95f4\u7ec4\u6210\uff0c\u4e14\u4e0d\u80fd\u542b\u6709\u524d\u5bfc <code>0</code>\uff09\uff0c\u6574\u6570\u4e4b\u95f4\u7528 <code>&#39;.&#39; </code>\u5206\u9694\u3002</p>\n\n<p>\u4f8b\u5982\uff1a&quot;0.1.2.201&quot; \u548c &quot;192.168.1.1&quot; \u662f <strong>\u6709\u6548\u7684</strong> IP \u5730\u5740\uff0c\u4f46\u662f &quot;0.011.255.245&quot;\u3001&quot;192.168.1.312&quot; \u548c &quot;192.168@1.1&quot; \u662f <strong>\u65e0\u6548\u7684</strong> IP \u5730\u5740\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;25525511135&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;0000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;0.0.0.0&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;1111&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1.1.1.1&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;010010&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;0.10.0.10&quot;,&quot;0.100.1.0&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>s = &quot;101023&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> \u4ec5\u7531\u6570\u5b57\u7ec4\u6210</li>\n</ul>\n",
        "tags_en": ["String", "Backtracking"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u56de\u6eaf\u7b97\u6cd5"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<string> restoreIpAddresses(string s) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<String> restoreIpAddresses(String s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def restoreIpAddresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** restoreIpAddresses(char * s, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<string> RestoreIpAddresses(string s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s\n# @return {String[]}\ndef restore_ip_addresses(s)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func restoreIpAddresses(_ s: String) -> [String] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func restoreIpAddresses(s string) []string {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def restoreIpAddresses(s: String): List[String] = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun restoreIpAddresses(s: String): List<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn restore_ip_addresses(s: String) -> Vec<String> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function restoreIpAddresses($s) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function restoreIpAddresses(s: string): string[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0094",
        "frontend_question_id": "0094",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/binary-tree-inorder-traversal",
        "url_en": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "relative_path_cn": "/leetcode/0000-0099/0094.Binary%20Tree%20Inorder%20Traversal/README.md",
        "relative_path_en": "/leetcode/0000-0099/0094.Binary%20Tree%20Inorder%20Traversal/README_EN.md",
        "title_cn": "\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386",
        "title_en": "Binary Tree Inorder Traversal",
        "question_title_slug": "binary-tree-inorder-traversal",
        "content_en": "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"width: 202px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>Follow up:</strong></p>\n\n<p>Recursive solution is trivial, could you do it iteratively?</p>\n\n<p>&nbsp;</p>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5b83\u7684 <strong>\u4e2d\u5e8f</strong>\u00a0\u904d\u5386\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"width: 202px; height: 324px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,3,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,2]\n<strong>\u8f93\u51fa\uff1a</strong>[2,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,null,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 100]</code> \u5185</li>\n\t<li><code>-100 <= Node.val <= 100</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636:</strong>\u00a0\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f</p>\n",
        "tags_en": ["Stack", "Tree", "Hash Table"],
        "tags_cn": ["\u6808", "\u6811", "\u54c8\u5e0c\u8868"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<int> InorderTraversal(TreeNode root) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer[]}\ndef inorder_traversal(root)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc inorderTraversal(root *TreeNode) []int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun inorderTraversal(root: TreeNode?): List<Int> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer[]\n     */\n    function inorderTraversal($root) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction inorderTraversal(root: TreeNode | null): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0095",
        "frontend_question_id": "0095",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/unique-binary-search-trees-ii",
        "url_en": "https://leetcode.com/problems/unique-binary-search-trees-ii",
        "relative_path_cn": "/leetcode/0000-0099/0095.Unique%20Binary%20Search%20Trees%20II/README.md",
        "relative_path_en": "/leetcode/0000-0099/0095.Unique%20Binary%20Search%20Trees%20II/README_EN.md",
        "title_cn": "\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II",
        "title_en": "Unique Binary Search Trees II",
        "question_title_slug": "unique-binary-search-trees-ii",
        "content_en": "<p>Given an integer <code>n</code>, generate all structurally unique <strong>BST&#39;s</strong> (binary search trees) that store values 1 ...&nbsp;<em>n</em>.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>Input:</strong> 3\n<strong>Output:</strong>\n[\n&nbsp; [1,null,3,2],\n&nbsp; [3,2,null,1],\n&nbsp; [3,1,null,null,2],\n&nbsp; [2,1,3],\n&nbsp; [1,null,2,null,3]\n]\n<strong>Explanation:</strong>\nThe above output corresponds to the 5 unique BST&#39;s shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u751f\u6210\u6240\u6709\u7531 1 ...&nbsp;<em>n</em> \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684<strong> \u4e8c\u53c9\u641c\u7d22\u6811 </strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>\n[\n&nbsp; [1,null,3,2],\n&nbsp; [3,2,null,1],\n&nbsp; [3,1,null,null,2],\n&nbsp; [2,1,3],\n&nbsp; [1,null,2,null,3]\n]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "tags_en": ["Tree", "Dynamic Programming"],
        "tags_cn": ["\u6811", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def generateTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        ",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** generateTrees(int n, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> GenerateTrees(int n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {Integer} n\n# @return {TreeNode[]}\ndef generate_trees(n)\n    \nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc generateTrees(n int) []*TreeNode {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun generateTrees(n: Int): List<TreeNode?> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $n\n     * @return TreeNode[]\n     */\n    function generateTrees($n) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction generateTrees(n: number): Array<TreeNode | null> {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0096",
        "frontend_question_id": "0096",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/unique-binary-search-trees",
        "url_en": "https://leetcode.com/problems/unique-binary-search-trees",
        "relative_path_cn": "/leetcode/0000-0099/0096.Unique%20Binary%20Search%20Trees/README.md",
        "relative_path_en": "/leetcode/0000-0099/0096.Unique%20Binary%20Search%20Trees/README_EN.md",
        "title_cn": "\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811",
        "title_en": "Unique Binary Search Trees",
        "question_title_slug": "unique-binary-search-trees",
        "content_en": "<p>Given <em>n</em>, how many structurally unique <strong>BST&#39;s</strong> (binary search trees) that store values 1 ...&nbsp;<em>n</em>?</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:\r\n</strong>Given <em>n</em> = 3, there are a total of 5 unique BST&#39;s:\r\n\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 19</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u6c42\u4ee5&nbsp;1 ...&nbsp;<em>n</em>&nbsp;\u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:\n</strong>\u7ed9\u5b9a <em>n</em> = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3</pre>\n",
        "tags_en": ["Tree", "Dynamic Programming"],
        "tags_cn": ["\u6811", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int numTrees(int n) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int numTrees(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def numTrees(self, n: int) -> int:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nint numTrees(int n){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int NumTrees(int n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numTrees(n int) int {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def numTrees(n: Int): Int = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun numTrees(n: Int): Int {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numTrees(n: number): number {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0097",
        "frontend_question_id": "0097",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/interleaving-string",
        "url_en": "https://leetcode.com/problems/interleaving-string",
        "relative_path_cn": "/leetcode/0000-0099/0097.Interleaving%20String/README.md",
        "relative_path_en": "/leetcode/0000-0099/0097.Interleaving%20String/README_EN.md",
        "title_cn": "\u4ea4\u9519\u5b57\u7b26\u4e32",
        "title_en": "Interleaving String",
        "question_title_slug": "interleaving-string",
        "content_en": "<p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.</p>\n\n<p>An <strong>interleaving</strong> of two strings <code>s</code> and <code>t</code> is a configuration where they are divided into <strong>non-empty</strong> substrings such that:</p>\n\n<ul>\n\t<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li>\n\t<li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li>\n\t<li><code>|n - m| &lt;= 1</code></li>\n\t<li>The <strong>interleaving</strong> is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li>\n</ul>\n\n<p><strong>Note:</strong> <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" style=\"width: 561px; height: 203px;\" />\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbcbcac&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbbaccc&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;&quot;, s2 = &quot;&quot;, s3 = &quot;&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= s3.length &lt;= 200</code></li>\n\t<li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lower-case English letters.</li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e09\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s1</code>\u3001<code>s2</code>\u3001<code>s3</code>\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u9a8c\u8bc1\u00a0<code>s3</code>\u00a0\u662f\u5426\u662f\u7531\u00a0<code>s1</code>\u00a0\u548c\u00a0<code>s2</code><em> </em><strong>\u4ea4\u9519 </strong>\u7ec4\u6210\u7684\u3002</p>\n\n<p>\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> <strong>\u4ea4\u9519</strong> \u7684\u5b9a\u4e49\u4e0e\u8fc7\u7a0b\u5982\u4e0b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u4f1a\u88ab\u5206\u5272\u6210\u82e5\u5e72 <strong>\u975e\u7a7a</strong> \u5b50\u5b57\u7b26\u4e32\uff1a</p>\n\n<ul>\n\t<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li>\n\t<li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li>\n\t<li><code>|n - m| <= 1</code></li>\n\t<li><strong>\u4ea4\u9519</strong> \u662f <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> \u6216\u8005 <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li>\n</ul>\n\n<p><strong>\u63d0\u793a\uff1a</strong><code>a + b</code> \u610f\u5473\u7740\u5b57\u7b26\u4e32 <code>a</code> \u548c <code>b</code> \u8fde\u63a5\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" style=\"width: 561px; height: 203px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s1 = \"\", s2 = \"\", s3 = \"\"\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= s1.length, s2.length <= 100</code></li>\n\t<li><code>0 <= s3.length <= 200</code></li>\n\t<li><code>s1</code>\u3001<code>s2</code>\u3001\u548c <code>s3</code> \u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n",
        "tags_en": ["String", "Dynamic Programming"],
        "tags_cn": ["\u5b57\u7b26\u4e32", "\u52a8\u6001\u89c4\u5212"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "\n\nbool isInterleave(char * s1, char * s2, char * s3){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public bool IsInterleave(string s1, string s2, string s3) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Boolean}\ndef is_interleave(s1, s2, s3)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isInterleave(s1 string, s2 string, s3 string) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun isInterleave(s1: String, s2: String, s3: String): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Boolean\n     */\n    function isInterleave($s1, $s2, $s3) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isInterleave(s1: string, s2: string, s3: string): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0098",
        "frontend_question_id": "0098",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/validate-binary-search-tree",
        "url_en": "https://leetcode.com/problems/validate-binary-search-tree",
        "relative_path_cn": "/leetcode/0000-0099/0098.Validate%20Binary%20Search%20Tree/README.md",
        "relative_path_en": "/leetcode/0000-0099/0098.Validate%20Binary%20Search%20Tree/README_EN.md",
        "title_cn": "\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",
        "title_en": "Validate Binary Search Tree",
        "question_title_slug": "validate-binary-search-tree",
        "content_en": "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\" style=\"width: 422px; height: 292px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,4,null,null,3,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p>\u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a</p>\n\n<ul>\n\t<li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b<strong>\u5c0f\u4e8e</strong>\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li>\n\t<li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b<strong>\u5927\u4e8e</strong>\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li>\n\t<li>\u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n    2\n   / \\\n  1   3\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002\n&nbsp;    \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002\n</pre>\n",
        "tags_en": ["Tree", "Depth-first Search", "Recursion"],
        "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u9012\u5f52"],
        "difficulty_en": "Medium",
        "difficulty_cn": "\u4e2d\u7b49",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nbool isValidBST(struct TreeNode* root){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public bool IsValidBST(TreeNode root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Boolean}\ndef is_valid_bst(root)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isValidBST(root *TreeNode) bool {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun isValidBST(root: TreeNode?): Boolean {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Boolean\n     */\n    function isValidBST($root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isValidBST(root: TreeNode | null): boolean {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }, {
        "question_id": "0099",
        "frontend_question_id": "0099",
        "paid_only": false,
        "paid_only_cn": false,
        "url_cn": "https://leetcode-cn.com/problems/recover-binary-search-tree",
        "url_en": "https://leetcode.com/problems/recover-binary-search-tree",
        "relative_path_cn": "/leetcode/0000-0099/0099.Recover%20Binary%20Search%20Tree/README.md",
        "relative_path_en": "/leetcode/0000-0099/0099.Recover%20Binary%20Search%20Tree/README_EN.md",
        "title_cn": "\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811",
        "title_en": "Recover Binary Search Tree",
        "question_title_slug": "recover-binary-search-tree",
        "content_en": "<p>You are given the <code>root</code> of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>\n\n<p><strong>Follow up:</strong> A solution using <code>O(n)</code> space is pretty straight forward. Could you devise a constant space solution?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,null,null,2]\n<strong>Output:</strong> [3,1,null,null,2]\n<strong>Explanation:</strong> 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,null,2]\n<strong>Output:</strong> [2,1,4,null,null,3]\n<strong>Explanation:</strong> 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "content_cn": "<p>\u7ed9\u4f60\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8be5\u6811\u4e2d\u7684\u4e24\u4e2a\u8282\u70b9\u88ab\u9519\u8bef\u5730\u4ea4\u6362\u3002\u8bf7\u5728\u4e0d\u6539\u53d8\u5176\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6062\u590d\u8fd9\u68f5\u6811\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f7f\u7528 O(<em>n</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [1,3,null,null,2]\n<strong>\u8f93\u51fa\uff1a</strong>[3,1,null,null,2]\n<strong>\u89e3\u91ca\uff1a</strong>3 \u4e0d\u80fd\u662f 1 \u5de6\u5b69\u5b50\uff0c\u56e0\u4e3a 3 > 1 \u3002\u4ea4\u6362 1 \u548c 3 \u4f7f\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u6548\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>root = [3,1,4,null,null,2]\n<strong>\u8f93\u51fa\uff1a</strong>[2,1,4,null,null,3]\n<strong>\u89e3\u91ca\uff1a</strong>2 \u4e0d\u80fd\u5728 3 \u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u56e0\u4e3a 2 < 3 \u3002\u4ea4\u6362 2 \u548c 3 \u4f7f\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u6548\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e0a\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 <code>[2, 1000]</code> \u5185</li>\n\t<li><code>-2<sup>31</sup> <= Node.val <= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "tags_en": ["Tree", "Depth-first Search"],
        "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"],
        "difficulty_en": "Hard",
        "difficulty_cn": "\u56f0\u96be",
        "code_snippets": [{
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void recoverTree(TreeNode* root) {\n\n    }\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nvoid recoverTree(struct TreeNode* root){\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void RecoverTree(TreeNode root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar recoverTree = function(root) {\n\n};",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Void} Do not return anything, modify root in-place instead.\ndef recover_tree(root)\n\nend",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc recoverTree(root *TreeNode)  {\n\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def recoverTree(root: TreeNode): Unit = {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun recoverTree(root: TreeNode?): Unit {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn recover_tree(root: &mut Option<Rc<RefCell<TreeNode>>>) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return NULL\n     */\n    function recoverTree($root) {\n\n    }\n}",
            "__typename": "CodeSnippetNode"
        }, {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify root in-place instead.\n */\nfunction recoverTree(root: TreeNode | null): void {\n\n};",
            "__typename": "CodeSnippetNode"
        }]
    }]
}