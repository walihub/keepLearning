{"leetcode": [{"question_id": "0200", "frontend_question_id": "0200", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-islands", "url_en": "https://leetcode.com/problems/number-of-islands", "relative_path_cn": "/leetcode/0200-0299/0200.Number%20of%20Islands/README.md", "relative_path_en": "/leetcode/0200-0299/0200.Number%20of%20Islands/README_EN.md", "title_cn": "\u5c9b\u5c7f\u6570\u91cf", "title_en": "Number of Islands", "question_title_slug": "number-of-islands", "content_en": "<p>Given an <code>m x n</code> 2d <code>grid</code> map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u00a0<code>'1'</code>\uff08\u9646\u5730\uff09\u548c <code>'0'</code>\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002</p>\n\n<p>\u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002</p>\n\n<p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 <= m, n <= 300</code></li>\n\t<li><code>grid[i][j]</code> \u7684\u503c\u4e3a <code>'0'</code> \u6216 <code>'1'</code></li>\n</ul>\n", "tags_en": ["Depth-first Search", "Breadth-first Search", "Union Find"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numIslands(char[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numIslands(char** grid, int gridSize, int* gridColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumIslands(char[][] grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} grid\n# @return {Integer}\ndef num_islands(grid)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numIslands(_ grid: [[Character]]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numIslands(grid [][]byte) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numIslands(grid: Array<CharArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $grid\n     * @return Integer\n     */\n    function numIslands($grid) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numIslands(grid: string[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0201", "frontend_question_id": "0201", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bitwise-and-of-numbers-range", "url_en": "https://leetcode.com/problems/bitwise-and-of-numbers-range", "relative_path_cn": "/leetcode/0200-0299/0201.Bitwise%20AND%20of%20Numbers%20Range/README.md", "relative_path_en": "/leetcode/0200-0299/0201.Bitwise%20AND%20of%20Numbers%20Range/README_EN.md", "title_cn": "\u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e", "title_en": "Bitwise AND of Numbers Range", "question_title_slug": "bitwise-and-of-numbers-range", "content_en": "<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [5,7]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1]\r\n<strong>Output:</strong> 0</pre>", "content_cn": "<p>\u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 &lt;= m &lt;= n &lt;= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:&nbsp;</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [5,7]\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1]\n<strong>\u8f93\u51fa:</strong> 0</pre>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int rangeBitwiseAnd(int m, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int rangeBitwiseAnd(int m, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rangeBitwiseAnd(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint rangeBitwiseAnd(int m, int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RangeBitwiseAnd(int m, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar rangeBitwiseAnd = function(m, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef range_bitwise_and(m, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rangeBitwiseAnd(_ m: Int, _ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rangeBitwiseAnd(m int, n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rangeBitwiseAnd(m: Int, n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rangeBitwiseAnd(m: Int, n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn range_bitwise_and(m: i32, n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function rangeBitwiseAnd($m, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rangeBitwiseAnd(m: number, n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0202", "frontend_question_id": "0202", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/happy-number", "url_en": "https://leetcode.com/problems/happy-number", "relative_path_cn": "/leetcode/0200-0299/0202.Happy%20Number/README.md", "relative_path_en": "/leetcode/0200-0299/0202.Happy%20Number/README_EN.md", "title_cn": "\u5feb\u4e50\u6570", "title_en": "Happy Number", "question_title_slug": "happy-number", "content_en": "<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n\n<p>A <strong>happy number</strong> is a number defined by the following process:</p>\n\n<ul>\n\t<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n\t<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>\n\t<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 19\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u4e00\u4e2a\u6570 <code>n</code> \u662f\u4e0d\u662f\u5feb\u4e50\u6570\u3002</p>\n\n<p>\u300c\u5feb\u4e50\u6570\u300d\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u6bcf\u4e00\u6b21\u5c06\u8be5\u6570\u66ff\u6362\u4e3a\u5b83\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u7684\u5e73\u65b9\u548c\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a 1\uff0c\u4e5f\u53ef\u80fd\u662f <strong>\u65e0\u9650\u5faa\u73af</strong> \u4f46\u59cb\u7ec8\u53d8\u4e0d\u5230 1\u3002\u5982\u679c <strong>\u53ef\u4ee5\u53d8\u4e3a</strong>&nbsp; 1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5c31\u662f\u5feb\u4e50\u6570\u3002</p>\n\n<p>\u5982\u679c <code>n</code> \u662f\u5feb\u4e50\u6570\u5c31\u8fd4\u56de <code>True</code> \uff1b\u4e0d\u662f\uff0c\u5219\u8fd4\u56de <code>False</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>19\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isHappy(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isHappy(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isHappy(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isHappy(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsHappy(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isHappy = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_happy(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isHappy(_ n: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isHappy(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isHappy(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isHappy(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_happy(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isHappy($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isHappy(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0203", "frontend_question_id": "0203", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/remove-linked-list-elements", "url_en": "https://leetcode.com/problems/remove-linked-list-elements", "relative_path_cn": "/leetcode/0200-0299/0203.Remove%20Linked%20List%20Elements/README.md", "relative_path_en": "/leetcode/0200-0299/0203.Remove%20Linked%20List%20Elements/README_EN.md", "title_cn": "\u79fb\u9664\u94fe\u8868\u5143\u7d20", "title_en": "Remove Linked List Elements", "question_title_slug": "remove-linked-list-elements", "content_en": "<p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><b>val</b></em> = 6\r\n<b>Output:</b> 1-&gt;2-&gt;3-&gt;4-&gt;5\r\n</pre>\r\n", "content_cn": "<p>\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c&nbsp;<strong><em>val&nbsp;</em></strong>\u7684\u6240\u6709\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5\n</pre>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* removeElements(struct ListNode* head, int val){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode RemoveElements(ListNode head, int val) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer} val\n# @return {ListNode}\ndef remove_elements(head, val)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func removeElements(_ head: ListNode?, _ val: Int) -> ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeElements(head *ListNode, val int) *ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeElements(head: ListNode, `val`: Int): ListNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun removeElements(head: ListNode?, `val`: Int): ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn remove_elements(head: Option<Box<ListNode>>, val: i32) -> Option<Box<ListNode>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @param Integer $val\n     * @return ListNode\n     */\n    function removeElements($head, $val) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction removeElements(head: ListNode | null, val: number): ListNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0204", "frontend_question_id": "0204", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-primes", "url_en": "https://leetcode.com/problems/count-primes", "relative_path_cn": "/leetcode/0200-0299/0204.Count%20Primes/README.md", "relative_path_en": "/leetcode/0200-0299/0204.Count%20Primes/README_EN.md", "title_cn": "\u8ba1\u6570\u8d28\u6570", "title_en": "Count Primes", "question_title_slug": "count-primes", "content_en": "<p>Count the number of prime numbers less than a non-negative number, <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570&nbsp;<em><code>n</code>&nbsp;</em>\u7684\u8d28\u6570\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>n = 10\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>n = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa</strong>\uff1a0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li>\n</ul>\n", "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countPrimes(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countPrimes(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countPrimes(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countPrimes(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountPrimes(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countPrimes = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_primes(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countPrimes(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countPrimes(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countPrimes(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countPrimes(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_primes(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countPrimes($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countPrimes(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0205", "frontend_question_id": "0205", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/isomorphic-strings", "url_en": "https://leetcode.com/problems/isomorphic-strings", "relative_path_cn": "/leetcode/0200-0299/0205.Isomorphic%20Strings/README.md", "relative_path_en": "/leetcode/0200-0299/0205.Isomorphic%20Strings/README_EN.md", "title_cn": "\u540c\u6784\u5b57\u7b26\u4e32", "title_en": "Isomorphic Strings", "question_title_slug": "isomorphic-strings", "content_en": "<p>Given two strings <b><i>s</i></b> and <b><i>t</i></b>, determine if they are isomorphic.</p>\r\n\r\n<p>Two strings are isomorphic if the characters in <b><i>s</i></b> can be replaced to get <b><i>t</i></b>.</p>\r\n\r\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;egg&quot;, </code><b><i>t = </i></b><code>&quot;add&quot;</code>\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;foo&quot;, </code><b><i>t = </i></b><code>&quot;bar&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;paper&quot;, </code><b><i>t = </i></b><code>&quot;title&quot;</code>\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume both <b><i>s&nbsp;</i></b>and <b><i>t&nbsp;</i></b>have the same length.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32&nbsp;<em><strong>s&nbsp;</strong></em>\u548c&nbsp;<strong><em>t</em></strong>\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p>\n\n<p>\u5982\u679c&nbsp;<em><strong>s&nbsp;</strong></em>\u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230&nbsp;<strong><em>t&nbsp;</em></strong>\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p>\n\n<p>\u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;egg&quot;, </code><strong><em>t = </em></strong><code>&quot;add&quot;</code>\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;foo&quot;, </code><strong><em>t = </em></strong><code>&quot;bar&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;paper&quot;, </code><strong><em>t = </em></strong><code>&quot;title&quot;</code>\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em><strong>s&nbsp;</strong></em>\u548c <strong><em>t </em></strong>\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</p>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isIsomorphic(char * s, char * t){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsIsomorphic(string s, string t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isIsomorphic = function(s, t) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_isomorphic(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isIsomorphic(_ s: String, _ t: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isIsomorphic(s string, t string) bool {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isIsomorphic(s: String, t: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isIsomorphic(s: String, t: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_isomorphic(s: String, t: String) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isIsomorphic($s, $t) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isIsomorphic(s: string, t: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0206", "frontend_question_id": "0206", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/reverse-linked-list", "url_en": "https://leetcode.com/problems/reverse-linked-list", "relative_path_cn": "/leetcode/0200-0299/0206.Reverse%20Linked%20List/README.md", "relative_path_en": "/leetcode/0200-0299/0206.Reverse%20Linked%20List/README_EN.md", "title_cn": "\u53cd\u8f6c\u94fe\u8868", "title_en": "Reverse Linked List", "question_title_slug": "reverse-linked-list", "content_en": "<p>Reverse a singly linked list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\r\n<strong>Output:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\r\n", "content_cn": "<p>\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>\u8f93\u51fa:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f</p>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* reverseList(struct ListNode* head){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef reverse_list(head)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reverseList(_ head: ListNode?) -> ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseList(head: ListNode): ListNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseList(head: ListNode?): ListNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function reverseList($head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction reverseList(head: ListNode | null): ListNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0207", "frontend_question_id": "0207", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/course-schedule", "url_en": "https://leetcode.com/problems/course-schedule", "relative_path_cn": "/leetcode/0200-0299/0207.Course%20Schedule/README.md", "relative_path_en": "/leetcode/0200-0299/0207.Course%20Schedule/README_EN.md", "title_cn": "\u8bfe\u7a0b\u8868", "title_en": "Course Schedule", "question_title_slug": "course-schedule", "content_en": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>\n\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n\n<p>Given the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \n&nbsp;            To take course 1 you should have finished course 0. So it is possible.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \n&nbsp;            To take course 1 you should have finished course 0, and to take course 0 you should\n&nbsp;            also have finished course 1. So it is impossible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\n\t<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n\t<li><code>1 &lt;=&nbsp;numCourses &lt;= 10^5</code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee <code>numCourse</code> \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>numCourse-1</code> \u3002</p>\n\n<p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002&nbsp;\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec\uff1a<code>[0,1]</code></p>\n\n<p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0]] \n<strong>\u8f93\u51fa: </strong>true\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0],[0,1]]\n<strong>\u8f93\u51fa: </strong>false\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 <strong>\u8fb9\u7f18\u5217\u8868</strong> \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f \u90bb\u63a5\u77e9\u9635 \u3002\u8be6\u60c5\u8bf7\u53c2\u89c1<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">\u56fe\u7684\u8868\u793a\u6cd5</a>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002</li>\n\t<li><code>1 &lt;=&nbsp;numCourses &lt;= 10^5</code></li>\n</ol>\n", "tags_en": ["Depth-first Search", "Breadth-first Search", "Graph", "Topological Sort"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe", "\u62d3\u6251\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */\nvar canFinish = function(numCourses, prerequisites) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Boolean}\ndef can_finish(num_courses, prerequisites)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canFinish(numCourses int, prerequisites [][]int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Boolean\n     */\n    function canFinish($numCourses, $prerequisites) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0208", "frontend_question_id": "0208", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/implement-trie-prefix-tree", "url_en": "https://leetcode.com/problems/implement-trie-prefix-tree", "relative_path_cn": "/leetcode/0200-0299/0208.Implement%20Trie%20%28Prefix%20Tree%29/README.md", "relative_path_en": "/leetcode/0200-0299/0208.Implement%20Trie%20%28Prefix%20Tree%29/README_EN.md", "title_cn": "\u5b9e\u73b0 Trie (\u524d\u7f00\u6811)", "title_en": "Implement Trie (Prefix Tree)", "question_title_slug": "implement-trie-prefix-tree", "content_en": "<p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nTrie trie = new Trie();\r\n\r\ntrie.insert(&quot;apple&quot;);\r\ntrie.search(&quot;apple&quot;);   // returns true\r\ntrie.search(&quot;app&quot;);     // returns false\r\ntrie.startsWith(&quot;app&quot;); // returns true\r\ntrie.insert(&quot;app&quot;);   \r\ntrie.search(&quot;app&quot;);     // returns true\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li>\r\n\t<li>All inputs are guaranteed to be non-empty strings.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b&nbsp;<code>insert</code>,&nbsp;<code>search</code>, \u548c&nbsp;<code>startsWith</code>&nbsp;\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // \u8fd4\u56de true\ntrie.search(&quot;app&quot;);     // \u8fd4\u56de false\ntrie.startsWith(&quot;app&quot;); // \u8fd4\u56de true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // \u8fd4\u56de true</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>&nbsp;\u6784\u6210\u7684\u3002</li>\n\t<li>\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n", "tags_en": ["Design", "Trie"], "tags_cn": ["\u8bbe\u8ba1", "\u5b57\u5178\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Trie {\n\n    /** Initialize your data structure here. */\n    public Trie() {\n\n    }\n    \n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    public boolean search(String word) {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: None\n        \"\"\"\n\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n\n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Trie:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n\n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Trie;\n\n/** Initialize your data structure here. */\n\nTrie* trieCreate() {\n    \n}\n\n/** Inserts a word into the trie. */\nvoid trieInsert(Trie* obj, char * word) {\n  \n}\n\n/** Returns if the word is in the trie. */\nbool trieSearch(Trie* obj, char * word) {\n  \n}\n\n/** Returns if there is any word in the trie that starts with the given prefix. */\nbool trieStartsWith(Trie* obj, char * prefix) {\n  \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * Trie* obj = trieCreate();\n * trieInsert(obj, word);\n \n * bool param_2 = trieSearch(obj, word);\n \n * bool param_3 = trieStartsWith(obj, prefix);\n \n * trieFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Trie {\n\n    /** Initialize your data structure here. */\n    public Trie() {\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    public void Insert(string word) {\n        \n    }\n    \n    /** Returns if the word is in the trie. */\n    public bool Search(string word) {\n        \n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public bool StartsWith(string prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.Insert(word);\n * bool param_2 = obj.Search(word);\n * bool param_3 = obj.StartsWith(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar Trie = function() {\n\n};\n\n/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n\n};\n\n/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n\n};\n\n/**\n * Returns if there is any word in the trie that starts with the given prefix. \n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Trie\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n        \n    end\n\n\n=begin\n    Inserts a word into the trie.\n    :type word: String\n    :rtype: Void\n=end\n    def insert(word)\n        \n    end\n\n\n=begin\n    Returns if the word is in the trie.\n    :type word: String\n    :rtype: Boolean\n=end\n    def search(word)\n        \n    end\n\n\n=begin\n    Returns if there is any word in the trie that starts with the given prefix.\n    :type prefix: String\n    :rtype: Boolean\n=end\n    def starts_with(prefix)\n        \n    end\n\n\nend\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie.new()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.starts_with(prefix)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Trie {\n\n    /** Initialize your data structure here. */\n    init() {\n\n    }\n    \n    /** Inserts a word into the trie. */\n    func insert(_ word: String) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    func search(_ word: String) -> Bool {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    func startsWith(_ prefix: String) -> Bool {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie()\n * obj.insert(word)\n * let ret_2: Bool = obj.search(word)\n * let ret_3: Bool = obj.startsWith(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type Trie struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() Trie {\n\n}\n\n\n/** Inserts a word into the trie. */\nfunc (this *Trie) Insert(word string)  {\n\n}\n\n\n/** Returns if the word is in the trie. */\nfunc (this *Trie) Search(word string) bool {\n\n}\n\n\n/** Returns if there is any word in the trie that starts with the given prefix. */\nfunc (this *Trie) StartsWith(prefix string) bool {\n\n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class Trie() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a word into the trie. */\n    def insert(word: String) {\n\n    }\n\n    /** Returns if the word is in the trie. */\n    def search(word: String): Boolean = {\n\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    def startsWith(prefix: String): Boolean = {\n\n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Trie() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Inserts a word into the trie. */\n    fun insert(word: String) {\n\n    }\n\n    /** Returns if the word is in the trie. */\n    fun search(word: String): Boolean {\n\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    fun startsWith(prefix: String): Boolean {\n\n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Trie {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Trie {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Inserts a word into the trie. */\n    fn insert(&self, word: String) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    fn search(&self, word: String) -> bool {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    fn starts_with(&self, prefix: String) -> bool {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie::new();\n * obj.insert(word);\n * let ret_2: bool = obj.search(word);\n * let ret_3: bool = obj.starts_with(prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Trie {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Inserts a word into the trie.\n     * @param String $word\n     * @return NULL\n     */\n    function insert($word) {\n\n    }\n\n    /**\n     * Returns if the word is in the trie.\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n\n    }\n\n    /**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     * @param String $prefix\n     * @return Boolean\n     */\n    function startsWith($prefix) {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * $obj = Trie();\n * $obj->insert($word);\n * $ret_2 = $obj->search($word);\n * $ret_3 = $obj->startsWith($prefix);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Trie {\n    constructor() {\n\n    }\n\n    insert(word: string): void {\n\n    }\n\n    search(word: string): boolean {\n\n    }\n\n    startsWith(prefix: string): boolean {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0209", "frontend_question_id": "0209", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/minimum-size-subarray-sum", "url_en": "https://leetcode.com/problems/minimum-size-subarray-sum", "relative_path_cn": "/leetcode/0200-0299/0209.Minimum%20Size%20Subarray%20Sum/README.md", "relative_path_en": "/leetcode/0200-0299/0209.Minimum%20Size%20Subarray%20Sum/README_EN.md", "title_cn": "\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4", "title_en": "Minimum Size Subarray Sum", "question_title_slug": "minimum-size-subarray-sum", "content_en": "<p>Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a <b>contiguous</b> subarray of which the sum &ge; <strong>s</strong>. If there isn&#39;t one, return 0 instead.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>s = 7, nums = [2,3,1,2,4,3]</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>the subarray <code>[4,3]</code> has the minimal length under the problem constraint.</pre>\r\n\r\n<div class=\"spoilers\"><b>Follow up:</b></div>\r\n\r\n<div class=\"spoilers\">If you have figured out the <i>O</i>(<i>n</i>) solution, try coding another solution of which the time complexity is <i>O</i>(<i>n</i> log <i>n</i>).&nbsp;</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709&nbsp;<strong>n&nbsp;</strong>\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<strong>s \uff0c</strong>\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c<strong> &ge; s </strong>\u7684\u957f\u5ea6\u6700\u5c0f\u7684 <strong>\u8fde\u7eed</strong> \u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6<strong>\u3002</strong>\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>s = 7, nums = [2,3,1,2,4,3]</code>\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5b50\u6570\u7ec4&nbsp;<code>[4,3]</code>&nbsp;\u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86<em> O</em>(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5 <em>O</em>(<em>n</em> log <em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002</li>\n</ul>\n", "tags_en": ["Array", "Two Pointers", "Binary Search"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint minSubArrayLen(int s, int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MinSubArrayLen(int s, int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} s\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(s, nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} s\n# @param {Integer[]} nums\n# @return {Integer}\ndef min_sub_array_len(s, nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func minSubArrayLen(_ s: Int, _ nums: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func minSubArrayLen(s int, nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def minSubArrayLen(s: Int, nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun minSubArrayLen(s: Int, nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn min_sub_array_len(s: i32, nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $s\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSubArrayLen($s, $nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function minSubArrayLen(s: number, nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0210", "frontend_question_id": "0210", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/course-schedule-ii", "url_en": "https://leetcode.com/problems/course-schedule-ii", "relative_path_cn": "/leetcode/0200-0299/0210.Course%20Schedule%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0210.Course%20Schedule%20II/README_EN.md", "title_cn": "\u8bfe\u7a0b\u8868 II", "title_en": "Course Schedule II", "question_title_slug": "course-schedule-ii", "content_en": "<p>There are a total of <code>n</code> courses you have to take labelled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>Some courses may have <code>prerequisites</code>, for example, if&nbsp;<code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;this means you must take the course <code>b<sub>i</sub></code> before the course <code>a<sub>i</sub></code>.</p>\n\n<p>Given the total number of courses&nbsp;<code>numCourses</code> and a list of the <code>prerequisite</code> pairs, return the ordering of courses you should take to finish all courses.</p>\n\n<p>If there are many valid answers, return <strong>any</strong> of them.&nbsp;If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n<strong>Output:</strong> [0,2,1,3]\n<strong>Explanation:</strong> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 1, prerequisites = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;=&nbsp;prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;&nbsp;numCourses</code></li>\n\t<li><code>a<sub>i</sub>&nbsp;!=&nbsp;b<sub>i</sub></code></li>\n\t<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li>\n</ul>\n", "content_cn": "<p>\u73b0\u5728\u4f60\u603b\u5171\u6709 <em>n</em> \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n-1</code>\u3002</p>\n\n<p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002&nbsp;\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b&nbsp;1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: <code>[0,1]</code></p>\n\n<p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002</p>\n\n<p>\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0]] \n<strong>\u8f93\u51fa: </strong><code>[0,1]</code>\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a <code>[0,1] \u3002</code></pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\n<strong>\u8f93\u51fa: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002\n&nbsp;    \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f&nbsp;<code>[0,1,2,3]</code> \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f&nbsp;<code>[0,2,1,3]</code> \u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531<strong>\u8fb9\u7f18\u5217\u8868</strong>\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">\u56fe\u7684\u8868\u793a\u6cd5</a>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002</li>\n</ol>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f</a> - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002</li>\n\t<li>\n\t<p>\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;\u5b8c\u6210\u3002</p>\n\t</li>\n</ol>\n", "tags_en": ["Depth-first Search", "Breadth-first Search", "Graph", "Topological Sort"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u56fe", "\u62d3\u6251\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num_courses\n# @param {Integer[][]} prerequisites\n# @return {Integer[]}\ndef find_order(num_courses, prerequisites)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findOrder(numCourses int, prerequisites [][]int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_order(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $numCourses\n     * @param Integer[][] $prerequisites\n     * @return Integer[]\n     */\n    function findOrder($numCourses, $prerequisites) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findOrder(numCourses: number, prerequisites: number[][]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0211", "frontend_question_id": "0211", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/design-add-and-search-words-data-structure", "url_en": "https://leetcode.com/problems/design-add-and-search-words-data-structure", "relative_path_cn": "/leetcode/0200-0299/0211.Design%20Add%20and%20Search%20Words%20Data%20Structure/README.md", "relative_path_en": "/leetcode/0200-0299/0211.Design%20Add%20and%20Search%20Words%20Data%20Structure/README_EN.md", "title_cn": "\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1", "title_en": "Design Add and Search Words Data Structure", "question_title_slug": "design-add-and-search-words-data-structure", "content_en": "<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>\n\n<p>Implement the <code>WordDictionary</code> class:</p>\n\n<ul>\n\t<li><code>WordDictionary()</code>&nbsp;Initializes the object.</li>\n\t<li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li>\n\t<li><code>bool search(word)</code>&nbsp;Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>&nbsp;or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;]\n[[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]\n<strong>Output</strong>\n[null,null,null,null,false,true,true,true]\n\n<strong>Explanation</strong>\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(&quot;bad&quot;);\nwordDictionary.addWord(&quot;dad&quot;);\nwordDictionary.addWord(&quot;mad&quot;);\nwordDictionary.search(&quot;pad&quot;); // return False\nwordDictionary.search(&quot;bad&quot;); // return True\nwordDictionary.search(&quot;.ad&quot;); // return True\nwordDictionary.search(&quot;b..&quot;); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 500</code></li>\n\t<li><code>word</code> in <code>addWord</code> consists lower-case English letters.</li>\n\t<li><code>word</code> in <code>search</code> consist of&nbsp; <code>&#39;.&#39;</code> or lower-case English letters.</li>\n\t<li>At most <code>50000</code>&nbsp;calls will be made to <code>addWord</code>&nbsp;and <code>search</code>.</li>\n</ul>\n", "content_cn": "<p>\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 \u6dfb\u52a0\u65b0\u5355\u8bcd \u548c \u67e5\u627e\u5b57\u7b26\u4e32\u662f\u5426\u4e0e\u4efb\u4f55\u5148\u524d\u6dfb\u52a0\u7684\u5b57\u7b26\u4e32\u5339\u914d \u3002</p>\n\n<p>\u5b9e\u73b0\u8bcd\u5178\u7c7b <code>WordDictionary</code> \uff1a</p>\n\n<ul>\n\t<li><code>WordDictionary()</code> \u521d\u59cb\u5316\u8bcd\u5178\u5bf9\u8c61</li>\n\t<li><code>void addWord(word)</code> \u5c06 <code>word</code> \u6dfb\u52a0\u5230\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u4e4b\u540e\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u5339\u914d</li>\n\t<li><code>bool search(word)</code> \u5982\u679c\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u5728\u5b57\u7b26\u4e32\u4e0e\u00a0<code>word</code> \u5339\u914d\uff0c\u5219\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de\u00a0 <code>false</code> \u3002<code>word</code> \u4e2d\u53ef\u80fd\u5305\u542b\u4e00\u4e9b <code>'.'</code> \uff0c\u6bcf\u4e2a\u00a0<code>.</code> \u90fd\u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null,null,null,null,false,true,true,true]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= word.length <= 500</code></li>\n\t<li><code>addWord</code> \u4e2d\u7684 <code>word</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>search</code> \u4e2d\u7684 <code>word</code> \u7531 '.' \u6216\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li>\u6700\u8c03\u7528\u591a <code>50000</code> \u6b21 <code>addWord</code> \u548c <code>search</code></li>\n</ul>\n", "tags_en": ["Design", "Trie", "Backtracking"], "tags_cn": ["\u8bbe\u8ba1", "\u5b57\u5178\u6811", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class WordDictionary {\npublic:\n    /** Initialize your data structure here. */\n    WordDictionary() {\n\n    }\n    \n    /** Adds a word into the data structure. */\n    void addWord(string word) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    bool search(string word) {\n\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class WordDictionary {\n\n    /** Initialize your data structure here. */\n    public WordDictionary() {\n\n    }\n    \n    /** Adds a word into the data structure. */\n    public void addWord(String word) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    public boolean search(String word) {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class WordDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: None\n        \"\"\"\n\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class WordDictionary:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def addWord(self, word: str) -> None:\n        \"\"\"\n        Adds a word into the data structure.\n        \"\"\"\n\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        \"\"\"\n\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} WordDictionary;\n\n/** Initialize your data structure here. */\n\nWordDictionary* wordDictionaryCreate() {\n    \n}\n\n/** Adds a word into the data structure. */\nvoid wordDictionaryAddWord(WordDictionary* obj, char * word) {\n  \n}\n\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\nbool wordDictionarySearch(WordDictionary* obj, char * word) {\n  \n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    \n}\n\n/**\n * Your WordDictionary struct will be instantiated and called as such:\n * WordDictionary* obj = wordDictionaryCreate();\n * wordDictionaryAddWord(obj, word);\n \n * bool param_2 = wordDictionarySearch(obj, word);\n \n * wordDictionaryFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class WordDictionary {\n\n    /** Initialize your data structure here. */\n    public WordDictionary() {\n\n    }\n    \n    /** Adds a word into the data structure. */\n    public void AddWord(string word) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    public bool Search(string word) {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.AddWord(word);\n * bool param_2 = obj.Search(word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar WordDictionary = function() {\n\n};\n\n/**\n * Adds a word into the data structure. \n * @param {string} word\n * @return {void}\n */\nWordDictionary.prototype.addWord = function(word) {\n\n};\n\n/**\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. \n * @param {string} word\n * @return {boolean}\n */\nWordDictionary.prototype.search = function(word) {\n\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class WordDictionary\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Adds a word into the data structure.\n    :type word: String\n    :rtype: Void\n=end\n    def add_word(word)\n\n    end\n\n\n=begin\n    Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n    :type word: String\n    :rtype: Boolean\n=end\n    def search(word)\n\n    end\n\n\nend\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary.new()\n# obj.add_word(word)\n# param_2 = obj.search(word)", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass WordDictionary {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Adds a word into the data structure. */\n    func addWord(_ word: String) {\n        \n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    func search(_ word: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * let obj = WordDictionary()\n * obj.addWord(word)\n * let ret_2: Bool = obj.search(word)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type WordDictionary struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() WordDictionary {\n\n}\n\n\n/** Adds a word into the data structure. */\nfunc (this *WordDictionary) AddWord(word string)  {\n\n}\n\n\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\nfunc (this *WordDictionary) Search(word string) bool {\n\n}\n\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddWord(word);\n * param_2 := obj.Search(word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class WordDictionary() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Adds a word into the data structure. */\n    def addWord(word: String) {\n\n    }\n\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    def search(word: String): Boolean = {\n\n    }\n\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class WordDictionary() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Adds a word into the data structure. */\n    fun addWord(word: String) {\n\n    }\n\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    fun search(word: String): Boolean {\n\n    }\n\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct WordDictionary {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl WordDictionary {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Adds a word into the data structure. */\n    fn add_word(&self, word: String) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    fn search(&self, word: String) -> bool {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * let obj = WordDictionary::new();\n * obj.add_word(word);\n * let ret_2: bool = obj.search(word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class WordDictionary {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Adds a word into the data structure.\n     * @param String $word\n     * @return NULL\n     */\n    function addWord($word) {\n\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * $obj = WordDictionary();\n * $obj->addWord($word);\n * $ret_2 = $obj->search($word);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class WordDictionary {\n    constructor() {\n\n    }\n\n    addWord(word: string): void {\n\n    }\n\n    search(word: string): boolean {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0212", "frontend_question_id": "0212", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/word-search-ii", "url_en": "https://leetcode.com/problems/word-search-ii", "relative_path_cn": "/leetcode/0200-0299/0212.Word%20Search%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0212.Word%20Search%20II/README_EN.md", "title_cn": "\u5355\u8bcd\u641c\u7d22 II", "title_en": "Word Search II", "question_title_slug": "word-search-ii", "content_en": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]\n<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u00a0<code>m x n</code> \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c\u00a0<code>board</code><strong>\u00a0</strong>\u548c\u4e00\u4e2a\u5355\u8bcd\uff08\u5b57\u7b26\u4e32\uff09\u5217\u8868 <code>words</code>\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7 <strong>\u76f8\u90bb\u7684\u5355\u5143\u683c</strong> \u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n<strong>\u8f93\u51fa\uff1a</strong>[\"eat\",\"oath\"]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 <= m, n <= 12</code></li>\n\t<li><code>board[i][j]</code> \u662f\u4e00\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd</li>\n\t<li><code>1 <= words.length <= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 <= words[i].length <= 10</code></li>\n\t<li><code>words[i]</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n\t<li><code>words</code> \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u4e92\u4e0d\u76f8\u540c</li>\n</ul>\n", "tags_en": ["Trie", "Backtracking"], "tags_cn": ["\u5b57\u5178\u6811", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> findWords(char[][] board, String[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findWords(char** board, int boardSize, int* boardColSize, char ** words, int wordsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> FindWords(char[][] board, string[] words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} board\n# @param {String[]} words\n# @return {String[]}\ndef find_words(board, words)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findWords(board [][]byte, words []string) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_words(board: Vec<Vec<char>>, words: Vec<String>) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param String[] $words\n     * @return String[]\n     */\n    function findWords($board, $words) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findWords(board: string[][], words: string[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0213", "frontend_question_id": "0213", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/house-robber-ii", "url_en": "https://leetcode.com/problems/house-robber-ii", "relative_path_cn": "/leetcode/0200-0299/0213.House%20Robber%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0213.House%20Robber%20II/README_EN.md", "title_cn": "\u6253\u5bb6\u52ab\u820d II", "title_en": "House Robber II", "question_title_slug": "house-robber-ii", "content_en": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and&nbsp;<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given a list of non-negative integers <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd <strong>\u56f4\u6210\u4e00\u5708</strong> \uff0c\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c<strong>\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66</strong> \u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 <strong>\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b</strong> \uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [2,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4f60\u4e0d\u80fd\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09, \u56e0\u4e3a\u4ed6\u4eec\u662f\u76f8\u90bb\u7684\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1,2,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4f60\u53ef\u4ee5\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 1\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 3\uff09\u3002\n\u00a0    \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 100</code></li>\n\t<li><code>0 <= nums[i] <= 1000</code></li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int rob(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int rob(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def rob(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint rob(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Rob(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef rob(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func rob(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def rob(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun rob(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn rob(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function rob($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function rob(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0214", "frontend_question_id": "0214", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/shortest-palindrome", "url_en": "https://leetcode.com/problems/shortest-palindrome", "relative_path_cn": "/leetcode/0200-0299/0214.Shortest%20Palindrome/README.md", "relative_path_en": "/leetcode/0200-0299/0214.Shortest%20Palindrome/README_EN.md", "title_cn": "\u6700\u77ed\u56de\u6587\u4e32", "title_en": "Shortest Palindrome", "question_title_slug": "shortest-palindrome", "content_en": "<p>Given a string <em><b>s</b></em>, you can convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aacecaaa\"\n<strong>Output:</strong> \"aaacecaaa\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"dcbabcd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <em><strong>s</strong></em>\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u7b26\u4e32\u524d\u9762\u6dfb\u52a0\u5b57\u7b26\u5c06\u5176\u8f6c\u6362\u4e3a\u56de\u6587\u4e32\u3002\u627e\u5230\u5e76\u8fd4\u56de\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8f6c\u6362\u7684\u6700\u77ed\u56de\u6587\u4e32\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"aacecaaa\"\n<strong>\u8f93\u51fa\uff1a</strong>\"aaacecaaa\"\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>s = \"abcd\"\n<strong>\u8f93\u51fa\uff1a</strong>\"dcbabcd\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= s.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li>\n</ul>\n", "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string shortestPalindrome(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String shortestPalindrome(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * shortestPalindrome(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string ShortestPalindrome(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef shortest_palindrome(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func shortestPalindrome(_ s: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func shortestPalindrome(s string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def shortestPalindrome(s: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun shortestPalindrome(s: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn shortest_palindrome(s: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function shortestPalindrome($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function shortestPalindrome(s: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0215", "frontend_question_id": "0215", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/kth-largest-element-in-an-array", "url_en": "https://leetcode.com/problems/kth-largest-element-in-an-array", "relative_path_cn": "/leetcode/0200-0299/0215.Kth%20Largest%20Element%20in%20an%20Array/README.md", "relative_path_en": "/leetcode/0200-0299/0215.Kth%20Largest%20Element%20in%20an%20Array/README_EN.md", "title_cn": "\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20", "title_en": "Kth Largest Element in an Array", "question_title_slug": "kth-largest-element-in-an-array", "content_en": "<p>Find the <strong>k</strong>th largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[3,2,1,5,6,4] </code>and k = 2\r\n<strong>Output:</strong> 5\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[3,2,3,1,2,4,5,5,6] </code>and k = 4\r\n<strong>Output:</strong> 4</pre>\r\n\r\n<p><strong>Note: </strong><br />\r\nYou may assume k is always valid, 1 &le; k &le; array&#39;s length.</p>\r\n", "content_cn": "<p>\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c <strong>k</strong> \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,2,1,5,6,4] \u548c</code> k = 2\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,2,3,1,2,4,5,5,6] \u548c</code> k = 4\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 &le; k &le; \u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>\n", "tags_en": ["Heap", "Divide and Conquer"], "tags_cn": ["\u5806", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findKthLargest(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findKthLargest(nums []int, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findKthLargest(nums: number[], k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0216", "frontend_question_id": "0216", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/combination-sum-iii", "url_en": "https://leetcode.com/problems/combination-sum-iii", "relative_path_cn": "/leetcode/0200-0299/0216.Combination%20Sum%20III/README.md", "relative_path_en": "/leetcode/0200-0299/0216.Combination%20Sum%20III/README_EN.md", "title_cn": "\u7ec4\u5408\u603b\u548c III", "title_en": "Combination Sum III", "question_title_slug": "combination-sum-iii", "content_en": "<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n\n<ul>\n\t<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n\t<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 7\n<strong>Output:</strong> [[1,2,4]]\n<strong>Explanation:</strong>\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 9\n<strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]\n<strong>Explanation:</strong>\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4, n = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations. [1,2,1] is not valid because 1 is used twice.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 2\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 9, n = 45\n<strong>Output:</strong> [[1,2,3,4,5,6,7,8,9]]\n<strong>Explanation:</strong>\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bThere are no other valid combinations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n", "content_cn": "<p>\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a&nbsp;<em><strong>n</strong> </em>\u7684&nbsp;<strong><em>k&nbsp;</em></strong>\u4e2a\u6570\u7684\u7ec4\u5408<strong><em>\u3002</em></strong>\u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u6709 1 -&nbsp;9 \u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 7\n<strong>\u8f93\u51fa:</strong> [[1,2,4]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 9\n<strong>\u8f93\u51fa:</strong> [[1,2,6], [1,3,5], [2,3,4]]\n</pre>\n", "tags_en": ["Array", "Backtracking"], "tags_cn": ["\u6570\u7ec4", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> combinationSum3(int k, int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum3(int k, int n, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> CombinationSum3(int k, int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} k\n# @param {Integer} n\n# @return {Integer[][]}\ndef combination_sum3(k, n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func combinationSum3(k int, n int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun combinationSum3(k: Int, n: Int): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn combination_sum3(k: i32, n: i32) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer[][]\n     */\n    function combinationSum3($k, $n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function combinationSum3(k: number, n: number): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0217", "frontend_question_id": "0217", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/contains-duplicate", "url_en": "https://leetcode.com/problems/contains-duplicate", "relative_path_cn": "/leetcode/0200-0299/0217.Contains%20Duplicate/README.md", "relative_path_en": "/leetcode/0200-0299/0217.Contains%20Duplicate/README_EN.md", "title_cn": "\u5b58\u5728\u91cd\u590d\u5143\u7d20", "title_en": "Contains Duplicate", "question_title_slug": "contains-duplicate", "content_en": "<p>Given an array of integers, find if the array contains any duplicates.</p>\r\n\r\n<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4]\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,1,3,3,4,3,2,4,2]\r\n<strong>Output:</strong> true</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002</p>\n\n<p>\u5982\u679c\u4efb\u610f\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de <code>true</code> \u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,1]\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4]\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,1,1,3,3,4,3,2,4,2]\n<strong>\u8f93\u51fa:</strong> true</pre>\n", "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool containsDuplicate(int* nums, int numsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ContainsDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef contains_duplicate(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func containsDuplicate(_ nums: [Int]) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func containsDuplicate(nums []int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def containsDuplicate(nums: Array[Int]): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun containsDuplicate(nums: IntArray): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn contains_duplicate(nums: Vec<i32>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function containsDuplicate($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function containsDuplicate(nums: number[]): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0218", "frontend_question_id": "0218", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/the-skyline-problem", "url_en": "https://leetcode.com/problems/the-skyline-problem", "relative_path_cn": "/leetcode/0200-0299/0218.The%20Skyline%20Problem/README.md", "relative_path_en": "/leetcode/0200-0299/0218.The%20Skyline%20Problem/README_EN.md", "title_cn": "\u5929\u9645\u7ebf\u95ee\u9898", "title_en": "The Skyline Problem", "question_title_slug": "the-skyline-problem", "content_en": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n", "content_cn": "<p>\u57ce\u5e02\u7684\u5929\u9645\u7ebf\u662f\u4ece\u8fdc\u5904\u89c2\u770b\u8be5\u57ce\u5e02\u4e2d\u6240\u6709\u5efa\u7b51\u7269\u5f62\u6210\u7684\u8f6e\u5ed3\u7684\u5916\u90e8\u8f6e\u5ed3\u3002\u7ed9\u4f60\u6240\u6709\u5efa\u7b51\u7269\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6\uff0c\u8bf7\u8fd4\u56de\u7531\u8fd9\u4e9b\u5efa\u7b51\u7269\u5f62\u6210\u7684<strong> \u5929\u9645\u7ebf</strong> \u3002</p>\n\n<p>\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684\u51e0\u4f55\u4fe1\u606f\u7531\u6570\u7ec4 <code>buildings</code> \u8868\u793a\uff0c\u5176\u4e2d\u4e09\u5143\u7ec4 <code>buildings[i] = [lefti, righti, heighti]</code> \u8868\u793a\uff1a</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> \u662f\u7b2c <code>i</code> \u5ea7\u5efa\u7b51\u7269\u5de6\u8fb9\u7f18\u7684 <code>x</code> \u5750\u6807\u3002</li>\n\t<li><code>right<sub>i</sub></code> \u662f\u7b2c <code>i</code> \u5ea7\u5efa\u7b51\u7269\u53f3\u8fb9\u7f18\u7684 <code>x</code> \u5750\u6807\u3002</li>\n\t<li><code>height<sub>i</sub></code> \u662f\u7b2c <code>i</code> \u5ea7\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002</li>\n</ul>\n\n<p><strong>\u5929\u9645\u7ebf</strong> \u5e94\u8be5\u8868\u793a\u4e3a\u7531 \u201c\u5173\u952e\u70b9\u201d \u7ec4\u6210\u7684\u5217\u8868\uff0c\u683c\u5f0f <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code> \uff0c\u5e76\u6309 <strong>x \u5750\u6807 </strong>\u8fdb\u884c <strong>\u6392\u5e8f</strong> \u3002<strong>\u5173\u952e\u70b9\u662f\u6c34\u5e73\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9</strong>\u3002\u5217\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u6700\u53f3\u4fa7\u5efa\u7b51\u7269\u7684\u7ec8\u70b9\uff0c<code>y</code> \u5750\u6807\u59cb\u7ec8\u4e3a <code>0</code> \uff0c\u4ec5\u7528\u4e8e\u6807\u8bb0\u5929\u9645\u7ebf\u7684\u7ec8\u70b9\u3002\u6b64\u5916\uff0c\u4efb\u4f55\u4e24\u4e2a\u76f8\u90bb\u5efa\u7b51\u7269\u4e4b\u95f4\u7684\u5730\u9762\u90fd\u5e94\u88ab\u89c6\u4e3a\u5929\u9645\u7ebf\u8f6e\u5ed3\u7684\u4e00\u90e8\u5206\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u8f93\u51fa\u5929\u9645\u7ebf\u4e2d\u4e0d\u5f97\u6709\u8fde\u7eed\u7684\u76f8\u540c\u9ad8\u5ea6\u7684\u6c34\u5e73\u7ebf\u3002\u4f8b\u5982 <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> \u662f\u4e0d\u6b63\u786e\u7684\u7b54\u6848\uff1b\u4e09\u6761\u9ad8\u5ea6\u4e3a 5 \u7684\u7ebf\u5e94\u8be5\u5728\u6700\u7ec8\u8f93\u51fa\u4e2d\u5408\u5e76\u4e3a\u4e00\u4e2a\uff1a<code>[...[2 3], [4 5], [12 7], ...]</code></p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>\u8f93\u51fa\uff1a</strong>[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u56fe A<strong> </strong>\u663e\u793a\u8f93\u5165\u7684\u6240\u6709\u5efa\u7b51\u7269\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6\uff0c\n\u56fe B \u663e\u793a\u7531\u8fd9\u4e9b\u5efa\u7b51\u7269\u5f62\u6210\u7684\u5929\u9645\u7ebf\u3002\u56fe B \u4e2d\u7684\u7ea2\u70b9\u8868\u793a\u8f93\u51fa\u5217\u8868\u4e2d\u7684\u5173\u952e\u70b9\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>buildings = [[0,2,3],[2,5,3]]\n<strong>\u8f93\u51fa\uff1a</strong>[[0,3],[5,0]]\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= buildings.length <= 10<sup>4</sup></code></li>\n\t<li><code>0 <= left<sub>i</sub> < right<sub>i</sub> <= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 <= height<sub>i</sub> <= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> \u6309 <code>left<sub>i</sub></code> \u975e\u9012\u51cf\u6392\u5e8f</li>\n</ul>\n", "tags_en": ["Heap", "Binary Indexed Tree", "Segment Tree", "Divide and Conquer", "Line Sweep"], "tags_cn": ["\u5806", "\u6811\u72b6\u6570\u7ec4", "\u7ebf\u6bb5\u6811", "\u5206\u6cbb\u7b97\u6cd5", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} buildings\n# @return {Integer[][]}\ndef get_skyline(buildings)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func getSkyline(buildings [][]int) [][]int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $buildings\n     * @return Integer[][]\n     */\n    function getSkyline($buildings) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getSkyline(buildings: number[][]): number[][] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0219", "frontend_question_id": "0219", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/contains-duplicate-ii", "url_en": "https://leetcode.com/problems/contains-duplicate-ii", "relative_path_cn": "/leetcode/0200-0299/0219.Contains%20Duplicate%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0219.Contains%20Duplicate%20II/README_EN.md", "title_cn": "\u5b58\u5728\u91cd\u590d\u5143\u7d20 II", "title_en": "Contains Duplicate II", "question_title_slug": "contains-duplicate-ii", "content_en": "<p>Given an array of integers and an integer <i>k</i>, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that <b>nums[i] = nums[j]</b> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,2,3,1]</span>, k = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1,0,1,1]</span>, k = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-3-1\">[1,2,3,1,2,3]</span>, k = <span id=\"example-input-3-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<em>k</em>\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15<em>&nbsp;i</em>&nbsp;\u548c<em>&nbsp;j</em>\uff0c\u4f7f\u5f97&nbsp;<strong>nums [i] = nums [j]</strong>\uff0c\u5e76\u4e14 <em>i</em> \u548c <em>j</em>&nbsp;\u7684\u5dee\u7684 <strong>\u7edd\u5bf9\u503c</strong> \u81f3\u591a\u4e3a <em>k</em>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3,1], k<em> </em>= 3\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,2,3,1,2,3], k<em> </em>=<em> </em>2\n<strong>\u8f93\u51fa:</strong> false</pre>\n", "tags_en": ["Array", "Hash Table"], "tags_cn": ["\u6570\u7ec4", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool containsNearbyDuplicate(int* nums, int numsSize, int k){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func containsNearbyDuplicate(nums []int, k int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec<i32>, k: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function containsNearbyDuplicate(nums: number[], k: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0220", "frontend_question_id": "0220", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/contains-duplicate-iii", "url_en": "https://leetcode.com/problems/contains-duplicate-iii", "relative_path_cn": "/leetcode/0200-0299/0220.Contains%20Duplicate%20III/README.md", "relative_path_en": "/leetcode/0200-0299/0220.Contains%20Duplicate%20III/README_EN.md", "title_cn": "\u5b58\u5728\u91cd\u590d\u5143\u7d20 III", "title_en": "Contains Duplicate III", "question_title_slug": "contains-duplicate-iii", "content_en": "<p>Given an array of integers, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that the <b>absolute</b> difference between <b>nums[i]</b> and <b>nums[j]</b> is at most <i>t</i> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,1], k = 3, t = 0\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,0,1,1], k = 1, t = 2\n<strong>Output:</strong> true\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i]&nbsp;&lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= t &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u5728\u6574\u6570\u6570\u7ec4 <code>nums</code> \u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0b\u6807 <strong><em>i</em></strong> \u548c <strong><em>j</em></strong>\uff0c\u4f7f\u5f97&nbsp;<strong>nums [i]</strong> \u548c&nbsp;<strong>nums [j]</strong>&nbsp;\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e <em><strong>t</strong> </em>\uff0c\u4e14\u6ee1\u8db3 <strong><em>i</em></strong> \u548c <strong><em>j</em></strong> \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e5f\u5c0f\u4e8e\u7b49\u4e8e <em><strong>\u0137</strong> </em>\u3002</p>\n\n<p>\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de <code>true</code>\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3,1], k<em> </em>= 3, t = 0\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>\u8f93\u51fa:</strong> false</pre>\n", "tags_en": ["Sort", "Ordered Map"], "tags_cn": ["\u6392\u5e8f", null], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, k, t):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type t: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool containsNearbyAlmostDuplicate(int* nums, int numsSize, int k, int t){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool ContainsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} t\n * @return {boolean}\n */\nvar containsNearbyAlmostDuplicate = function(nums, k, t) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} t\n# @return {Boolean}\ndef contains_nearby_almost_duplicate(nums, k, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func containsNearbyAlmostDuplicate(_ nums: [Int], _ k: Int, _ t: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func containsNearbyAlmostDuplicate(nums []int, k int, t int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def containsNearbyAlmostDuplicate(nums: Array[Int], k: Int, t: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun containsNearbyAlmostDuplicate(nums: IntArray, k: Int, t: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn contains_nearby_almost_duplicate(nums: Vec<i32>, k: i32, t: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $t\n     * @return Boolean\n     */\n    function containsNearbyAlmostDuplicate($nums, $k, $t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function containsNearbyAlmostDuplicate(nums: number[], k: number, t: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0221", "frontend_question_id": "0221", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/maximal-square", "url_en": "https://leetcode.com/problems/maximal-square", "relative_path_cn": "/leetcode/0200-0299/0221.Maximal%20Square/README.md", "relative_path_en": "/leetcode/0200-0299/0221.Maximal%20Square/README_EN.md", "title_cn": "\u6700\u5927\u6b63\u65b9\u5f62", "title_en": "Maximal Square", "question_title_slug": "maximal-square", "content_en": "<p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, <em>find the largest square containing only</em> <code>1</code>&#39;s <em>and return its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n", "content_cn": "<p>\u5728\u4e00\u4e2a\u7531 <code>'0'</code> \u548c <code>'1'</code> \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b <code>'1'</code> \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>matrix = [[\"0\"]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 <= m, n <= 300</code></li>\n\t<li><code>matrix[i][j]</code> \u4e3a <code>'0'</code> \u6216 <code>'1'</code></li>\n</ul>\n", "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maximalSquare(char[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint maximalSquare(char** matrix, int matrixSize, int* matrixColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaximalSquare(char[][] matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_square(matrix)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maximalSquare(matrix [][]byte) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maximalSquare(matrix: Array<CharArray>): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn maximal_square(matrix: Vec<Vec<char>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalSquare($matrix) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maximalSquare(matrix: string[][]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0222", "frontend_question_id": "0222", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/count-complete-tree-nodes", "url_en": "https://leetcode.com/problems/count-complete-tree-nodes", "relative_path_cn": "/leetcode/0200-0299/0222.Count%20Complete%20Tree%20Nodes/README.md", "relative_path_en": "/leetcode/0200-0299/0222.Count%20Complete%20Tree%20Nodes/README_EN.md", "title_cn": "\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570", "title_en": "Count Complete Tree Nodes", "question_title_slug": "count-complete-tree-nodes", "content_en": "<p>Given a <b>complete</b> binary tree, count the number of nodes.</p>\r\n\r\n<p><b>Note: </b></p>\r\n\r\n<p><b><u>Definition of a complete binary tree from <a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a>:</u></b><br />\r\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n    1\r\n   / \\\r\n  2   3\r\n / \\  /\r\n4  5 6\r\n\r\n<strong>Output:</strong> 6</pre>\r\n", "content_cn": "<p>\u7ed9\u51fa\u4e00\u4e2a<strong>\u5b8c\u5168\u4e8c\u53c9\u6811</strong>\uff0c\u6c42\u51fa\u8be5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p><a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">\u5b8c\u5168\u4e8c\u53c9\u6811</a>\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u6700\u5e95\u5c42\u8282\u70b9\u53ef\u80fd\u6ca1\u586b\u6ee1\u5916\uff0c\u5176\u4f59\u6bcf\u5c42\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u3002\u82e5\u6700\u5e95\u5c42\u4e3a\u7b2c h \u5c42\uff0c\u5219\u8be5\u5c42\u5305\u542b 1~&nbsp;2<sup>h</sup>&nbsp;\u4e2a\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\n<strong>\u8f93\u51fa:</strong> 6</pre>\n", "tags_en": ["Tree", "Binary Search"], "tags_cn": ["\u6811", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int countNodes(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint countNodes(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int CountNodes(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar countNodes = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef count_nodes(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func countNodes(_ root: TreeNode?) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc countNodes(root *TreeNode) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def countNodes(root: TreeNode): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun countNodes(root: TreeNode?): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn count_nodes(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function countNodes($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction countNodes(root: TreeNode | null): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0223", "frontend_question_id": "0223", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/rectangle-area", "url_en": "https://leetcode.com/problems/rectangle-area", "relative_path_cn": "/leetcode/0200-0299/0223.Rectangle%20Area/README.md", "relative_path_en": "/leetcode/0200-0299/0223.Rectangle%20Area/README_EN.md", "title_cn": "\u77e9\u5f62\u9762\u79ef", "title_en": "Rectangle Area", "question_title_slug": "rectangle-area", "content_en": "<p>Find the total area covered by two <strong>rectilinear</strong> rectangles in a <strong>2D</strong> plane.</p>\r\n\r\n<p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p>\r\n\r\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_area.png\" style=\"width: 542px; height: 304px;\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">-3</span>, B = <span id=\"example-input-1-2\">0</span>, C = <span id=\"example-input-1-3\">3</span>, D = <span id=\"example-input-1-4\">4</span>, E = <span id=\"example-input-1-5\">0</span>, F = <span id=\"example-input-1-6\">-1</span>, G = <span id=\"example-input-1-7\">9</span>, H = <span id=\"example-input-1-8\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">45</span></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Assume that the total area is never beyond the maximum possible value of <strong>int</strong>.</p>\r\n", "content_cn": "<p>\u5728<strong>\u4e8c\u7ef4</strong>\u5e73\u9762\u4e0a\u8ba1\u7b97\u51fa\u4e24\u4e2a<strong>\u7531\u76f4\u7ebf\u6784\u6210\u7684</strong>\u77e9\u5f62\u91cd\u53e0\u540e\u5f62\u6210\u7684\u603b\u9762\u79ef\u3002</p>\n\n<p>\u6bcf\u4e2a\u77e9\u5f62\u7531\u5176\u5de6\u4e0b\u9876\u70b9\u548c\u53f3\u4e0a\u9876\u70b9\u5750\u6807\u8868\u793a\uff0c\u5982\u56fe\u6240\u793a\u3002</p>\n\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_area.png\"></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -3, 0, 3, 4, 0, -1, 9, 2\n<strong>\u8f93\u51fa:</strong> 45</pre>\n\n<p><strong>\u8bf4\u660e:</strong> \u5047\u8bbe\u77e9\u5f62\u9762\u79ef\u4e0d\u4f1a\u8d85\u51fa&nbsp;<strong>int&nbsp;</strong>\u7684\u8303\u56f4\u3002</p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def computeArea(self, A, B, C, D, E, F, G, H):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :type C: int\n        :type D: int\n        :type E: int\n        :type F: int\n        :type G: int\n        :type H: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def computeArea(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint computeArea(int A, int B, int C, int D, int E, int F, int G, int H){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} A\n * @param {number} B\n * @param {number} C\n * @param {number} D\n * @param {number} E\n * @param {number} F\n * @param {number} G\n * @param {number} H\n * @return {number}\n */\nvar computeArea = function(A, B, C, D, E, F, G, H) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @param {Integer} d\n# @param {Integer} e\n# @param {Integer} f\n# @param {Integer} g\n# @param {Integer} h\n# @return {Integer}\ndef compute_area(a, b, c, d, e, f, g, h)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, _ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func computeArea(A int, B int, C int, D int, E int, F int, G int, H int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn compute_area(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $A\n     * @param Integer $B\n     * @param Integer $C\n     * @param Integer $D\n     * @param Integer $E\n     * @param Integer $F\n     * @param Integer $G\n     * @param Integer $H\n     * @return Integer\n     */\n    function computeArea($A, $B, $C, $D, $E, $F, $G, $H) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function computeArea(A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0224", "frontend_question_id": "0224", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/basic-calculator", "url_en": "https://leetcode.com/problems/basic-calculator", "relative_path_cn": "/leetcode/0200-0299/0224.Basic%20Calculator/README.md", "relative_path_en": "/leetcode/0200-0299/0224.Basic%20Calculator/README_EN.md", "title_cn": "\u57fa\u672c\u8ba1\u7b97\u5668", "title_en": "Basic Calculator", "question_title_slug": "basic-calculator", "content_en": "<p>Implement a basic calculator to evaluate a simple expression string.</p>\r\n\r\n<p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <b>non-negative</b> integers and empty spaces <code> </code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;1 + 1&quot;\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; 2-1 + 2 &quot;\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(1+(4+5+2)-3)+(6+8)&quot;\r\n<strong>Output:</strong> 23</pre>\r\n<b>Note:</b>\r\n\r\n<ul>\r\n\t<li>You may assume that the given expression is always valid.</li>\r\n\t<li><b>Do not</b> use the <code>eval</code> built-in library function.</li>\r\n</ul>\r\n", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7&nbsp;<code>(</code>&nbsp;\uff0c\u53f3\u62ec\u53f7&nbsp;<code>)</code>\uff0c\u52a0\u53f7&nbsp;<code>+</code>&nbsp;\uff0c\u51cf\u53f7&nbsp;<code>-</code>\uff0c<strong>\u975e\u8d1f</strong>\u6574\u6570\u548c\u7a7a\u683c&nbsp;<code>&nbsp;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;1 + 1&quot;\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 2-1 + 2 &quot;\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>\u8f93\u51fa:</strong> 23</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002</li>\n\t<li>\u8bf7<strong>\u4e0d\u8981</strong>\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 <code>eval</code>\u3002</li>\n</ul>\n", "tags_en": ["Stack", "Math"], "tags_cn": ["\u6808", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int calculate(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int calculate(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def calculate(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint calculate(char * s){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Calculate(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef calculate(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func calculate(_ s: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func calculate(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def calculate(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun calculate(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn calculate(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function calculate(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0225", "frontend_question_id": "0225", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/implement-stack-using-queues", "url_en": "https://leetcode.com/problems/implement-stack-using-queues", "relative_path_cn": "/leetcode/0200-0299/0225.Implement%20Stack%20using%20Queues/README.md", "relative_path_en": "/leetcode/0200-0299/0225.Implement%20Stack%20using%20Queues/README_EN.md", "title_cn": "\u7528\u961f\u5217\u5b9e\u73b0\u6808", "title_en": "Implement Stack using Queues", "question_title_slug": "implement-stack-using-queues", "content_en": "<p>Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyStack</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>\n\t<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>\n\t<li><code>int top()</code> Returns the element on the top of the stack.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><b>Notes:</b></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a queue, which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 2, 2, false]\n\n<strong>Explanation</strong>\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>top</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:</strong> Can you implement the stack such that each operation is <strong><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.", "content_cn": "<p>\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>push(x) -- \u5143\u7d20 x \u5165\u6808</li>\n\t<li>pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20</li>\n\t<li>top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20</li>\n\t<li>empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a</li>\n</ul>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f&nbsp;<code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, \u548c&nbsp;<code>is empty</code>&nbsp;\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002&nbsp;\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217&nbsp;, \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002</li>\n</ul>\n", "tags_en": ["Stack", "Design"], "tags_cn": ["\u6808", "\u8bbe\u8ba1"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyStack {\npublic:\n    /** Initialize your data structure here. */\n    MyStack() {\n\n    }\n    \n    /** Push element x onto stack. */\n    void push(int x) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n\n    }\n    \n    /** Get the top element. */\n    int top() {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    bool empty() {\n\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyStack {\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n\n    }\n    \n    /** Push element x onto stack. */\n    public void push(int x) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n\n    }\n    \n    /** Get the top element. */\n    public int top() {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyStack(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: None\n        \"\"\"\n\n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n\n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n\n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} MyStack;\n\n/** Initialize your data structure here. */\n\nMyStack* myStackCreate() {\n\n}\n\n/** Push element x onto stack. */\nvoid myStackPush(MyStack* obj, int x) {\n\n}\n\n/** Removes the element on top of the stack and returns that element. */\nint myStackPop(MyStack* obj) {\n\n}\n\n/** Get the top element. */\nint myStackTop(MyStack* obj) {\n\n}\n\n/** Returns whether the stack is empty. */\nbool myStackEmpty(MyStack* obj) {\n\n}\n\nvoid myStackFree(MyStack* obj) {\n\n}\n\n/**\n * Your MyStack struct will be instantiated and called as such:\n * MyStack* obj = myStackCreate();\n * myStackPush(obj, x);\n \n * int param_2 = myStackPop(obj);\n \n * int param_3 = myStackTop(obj);\n \n * bool param_4 = myStackEmpty(obj);\n \n * myStackFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyStack {\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n\n    }\n    \n    /** Push element x onto stack. */\n    public void Push(int x) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int Pop() {\n\n    }\n    \n    /** Get the top element. */\n    public int Top() {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    public bool Empty() {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Top();\n * bool param_4 = obj.Empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MyStack = function() {\n\n};\n\n/**\n * Push element x onto stack. \n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n\n};\n\n/**\n * Removes the element on top of the stack and returns that element.\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n\n};\n\n/**\n * Get the top element.\n * @return {number}\n */\nMyStack.prototype.top = function() {\n\n};\n\n/**\n * Returns whether the stack is empty.\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyStack\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Push element x onto stack.\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n\n    end\n\n\n=begin\n    Removes the element on top of the stack and returns that element.\n    :rtype: Integer\n=end\n    def pop()\n\n    end\n\n\n=begin\n    Get the top element.\n    :rtype: Integer\n=end\n    def top()\n\n    end\n\n\n=begin\n    Returns whether the stack is empty.\n    :rtype: Boolean\n=end\n    def empty()\n\n    end\n\n\nend\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyStack {\n\n    /** Initialize your data structure here. */\n    init() {\n\n    }\n    \n    /** Push element x onto stack. */\n    func push(_ x: Int) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    func pop() -> Int {\n\n    }\n    \n    /** Get the top element. */\n    func top() -> Int {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    func empty() -> Bool {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Bool = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyStack struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyStack {\n\n}\n\n\n/** Push element x onto stack. */\nfunc (this *MyStack) Push(x int)  {\n\n}\n\n\n/** Removes the element on top of the stack and returns that element. */\nfunc (this *MyStack) Pop() int {\n\n}\n\n\n/** Get the top element. */\nfunc (this *MyStack) Top() int {\n\n}\n\n\n/** Returns whether the stack is empty. */\nfunc (this *MyStack) Empty() bool {\n\n}\n\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Top();\n * param_4 := obj.Empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyStack() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Push element x onto stack. */\n    def push(x: Int) {\n\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    def pop(): Int = {\n\n    }\n\n    /** Get the top element. */\n    def top(): Int = {\n\n    }\n\n    /** Returns whether the stack is empty. */\n    def empty(): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyStack() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Push element x onto stack. */\n    fun push(x: Int) {\n\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    fun pop(): Int {\n\n    }\n\n    /** Get the top element. */\n    fun top(): Int {\n\n    }\n\n    /** Returns whether the stack is empty. */\n    fun empty(): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyStack {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyStack {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Push element x onto stack. */\n    fn push(&self, x: i32) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    fn pop(&self) -> i32 {\n\n    }\n    \n    /** Get the top element. */\n    fn top(&self) -> i32 {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    fn empty(&self) -> bool {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * let obj = MyStack::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.top();\n * let ret_4: bool = obj.empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyStack {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Push element x onto stack.\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n\n    }\n\n    /**\n     * Removes the element on top of the stack and returns that element.\n     * @return Integer\n     */\n    function pop() {\n\n    }\n\n    /**\n     * Get the top element.\n     * @return Integer\n     */\n    function top() {\n\n    }\n\n    /**\n     * Returns whether the stack is empty.\n     * @return Boolean\n     */\n    function empty() {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * $obj = MyStack();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->top();\n * $ret_4 = $obj->empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyStack {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    top(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0226", "frontend_question_id": "0226", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/invert-binary-tree", "url_en": "https://leetcode.com/problems/invert-binary-tree", "relative_path_cn": "/leetcode/0200-0299/0226.Invert%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0226.Invert%20Binary%20Tree/README_EN.md", "title_cn": "\u7ffb\u8f6c\u4e8c\u53c9\u6811", "title_en": "Invert Binary Tree", "question_title_slug": "invert-binary-tree", "content_en": "<p>Invert a binary tree.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Input:</p>\r\n\r\n<pre>\r\n     4\r\n   /   \\\r\n  2     7\r\n / \\   / \\\r\n1   3 6   9</pre>\r\n\r\n<p>Output:</p>\r\n\r\n<pre>\r\n     4\r\n   /   \\\r\n  7     2\r\n / \\   / \\\r\n9   6 3   1</pre>\r\n\r\n<p><strong>Trivia:</strong><br />\r\nThis problem was inspired by <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">this original tweet</a> by <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell</a>:</p>\r\n\r\n<blockquote>Google: 90% of our engineers use the software you wrote (Homebrew), but you can&rsquo;t invert a binary tree on a whiteboard so f*** off.</blockquote>\r\n", "content_cn": "<p>\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n<p><strong>\u5907\u6ce8:</strong><br>\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell </a>\u7684 <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">\u539f\u95ee\u9898</a> \u542f\u53d1\u7684 \uff1a</p>\n\n<blockquote>\u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002</blockquote>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nstruct TreeNode* invertTree(struct TreeNode* root){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode InvertTree(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {TreeNode}\ndef invert_tree(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func invertTree(_ root: TreeNode?) -> TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc invertTree(root *TreeNode) *TreeNode {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def invertTree(root: TreeNode): TreeNode = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun invertTree(root: TreeNode?): TreeNode? {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn invert_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return TreeNode\n     */\n    function invertTree($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction invertTree(root: TreeNode | null): TreeNode | null {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0227", "frontend_question_id": "0227", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/basic-calculator-ii", "url_en": "https://leetcode.com/problems/basic-calculator-ii", "relative_path_cn": "/leetcode/0200-0299/0227.Basic%20Calculator%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0227.Basic%20Calculator%20II/README_EN.md", "title_cn": "\u57fa\u672c\u8ba1\u7b97\u5668 II", "title_en": "Basic Calculator II", "question_title_slug": "basic-calculator-ii", "content_en": "<p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.&nbsp;</p>\n\n<p>The integer division should truncate toward zero.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3+2*2\"\n<strong>Output:</strong> 7\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \" 3/2 \"\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \" 3+5 / 2 \"\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of integers and operators <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> separated by some number of spaces.</li>\n\t<li><code>s</code> represents <strong>a valid expression</strong>.</li>\n\t<li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li>\n</ul>\n", "content_cn": "<p>\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u4ec5\u5305\u542b\u975e\u8d1f\u6574\u6570\uff0c<code>+</code>\uff0c <code>-</code> \uff0c<code>*</code>\uff0c<code>/</code> \u56db\u79cd\u8fd0\u7b97\u7b26\u548c\u7a7a\u683c&nbsp;<code>&nbsp;</code>\u3002 \u6574\u6570\u9664\u6cd5\u4ec5\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;3+2*2&quot;\n<strong>\u8f93\u51fa:</strong> 7\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 3/2 &quot;\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 3+5 / 2 &quot;\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002</li>\n\t<li>\u8bf7<strong>\u4e0d\u8981</strong>\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 <code>eval</code>\u3002</li>\n</ul>\n", "tags_en": ["Stack", "String"], "tags_cn": ["\u6808", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int calculate(string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int calculate(String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def calculate(self, s: str) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint calculate(char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int Calculate(string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef calculate(s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func calculate(_ s: String) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func calculate(s string) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def calculate(s: String): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun calculate(s: String): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn calculate(s: String) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function calculate(s: string): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0228", "frontend_question_id": "0228", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/summary-ranges", "url_en": "https://leetcode.com/problems/summary-ranges", "relative_path_cn": "/leetcode/0200-0299/0228.Summary%20Ranges/README.md", "relative_path_en": "/leetcode/0200-0299/0228.Summary%20Ranges/README_EN.md", "title_cn": "\u6c47\u603b\u533a\u95f4", "title_en": "Summary Ranges", "question_title_slug": "summary-ranges", "content_en": "<p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p>\n\n<p>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover all the numbers in the array exactly</strong></em>. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p>\n\n<p>Each range <code>[a,b]</code> in the list should be output as:</p>\n\n<ul>\n\t<li><code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></li>\n\t<li><code>&quot;a&quot;</code> if <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,4,5,7]\n<strong>Output:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,2] --&gt; &quot;0-&gt;2&quot;\n[4,5] --&gt; &quot;4-&gt;5&quot;\n[7,7] --&gt; &quot;7&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,2,3,4,6,8,9]\n<strong>Output:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,0] --&gt; &quot;0&quot;\n[2,4] --&gt; &quot;2-&gt;4&quot;\n[6,6] --&gt; &quot;6&quot;\n[8,9] --&gt; &quot;8-&gt;9&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> [&quot;-1&quot;]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [&quot;0&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6709\u5e8f\u6574\u6570\u6570\u7ec4 <code>nums</code> \u3002</p>\n\n<p>\u8fd4\u56de <strong>\u6070\u597d\u8986\u76d6\u6570\u7ec4\u4e2d\u6240\u6709\u6570\u5b57</strong> \u7684 <strong>\u6700\u5c0f\u6709\u5e8f</strong> \u533a\u95f4\u8303\u56f4\u5217\u8868\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>nums</code> \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u6070\u597d\u88ab\u67d0\u4e2a\u533a\u95f4\u8303\u56f4\u6240\u8986\u76d6\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u5c5e\u4e8e\u67d0\u4e2a\u8303\u56f4\u4f46\u4e0d\u5c5e\u4e8e <code>nums</code> \u7684\u6570\u5b57 <code>x</code> \u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u533a\u95f4\u8303\u56f4 <code>[a,b]</code> \u5e94\u8be5\u6309\u5982\u4e0b\u683c\u5f0f\u8f93\u51fa\uff1a</p>\n\n<ul>\n\t<li><code>&quot;a-&gt;b&quot;</code> \uff0c\u5982\u679c <code>a != b</code></li>\n\t<li><code>&quot;a&quot;</code> \uff0c\u5982\u679c <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [0,1,2,4,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>\u89e3\u91ca\uff1a</strong>\u533a\u95f4\u8303\u56f4\u662f\uff1a\n[0,2] --&gt; &quot;0-&gt;2&quot;\n[4,5] --&gt; &quot;4-&gt;5&quot;\n[7,7] --&gt; &quot;7&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [0,2,3,4,6,8,9]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>\u89e3\u91ca\uff1a</strong>\u533a\u95f4\u8303\u56f4\u662f\uff1a\n[0,0] --&gt; &quot;0&quot;\n[2,4] --&gt; &quot;2-&gt;4&quot;\n[6,6] --&gt; &quot;6&quot;\n[8,9] --&gt; &quot;8-&gt;9&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [-1]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>nums = [0]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;0&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums</code> \u4e2d\u7684\u6240\u6709\u503c\u90fd <strong>\u4e92\u4e0d\u76f8\u540c</strong></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> summaryRanges(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** summaryRanges(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> SummaryRanges(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar summaryRanges = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {String[]}\ndef summary_ranges(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func summaryRanges(_ nums: [Int]) -> [String] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func summaryRanges(nums []int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def summaryRanges(nums: Array[Int]): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun summaryRanges(nums: IntArray): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn summary_ranges(nums: Vec<i32>) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String[]\n     */\n    function summaryRanges($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function summaryRanges(nums: number[]): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0229", "frontend_question_id": "0229", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/majority-element-ii", "url_en": "https://leetcode.com/problems/majority-element-ii", "relative_path_cn": "/leetcode/0200-0299/0229.Majority%20Element%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0229.Majority%20Element%20II/README_EN.md", "title_cn": "\u6c42\u4f17\u6570 II", "title_en": "Majority Element II", "question_title_slug": "majority-element-ii", "content_en": "<p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>&lfloor; n/3 &rfloor;</code> times.</p>\n\n<p><strong>Follow-up: </strong>Could you solve the problem&nbsp;in linear time and in O(1) space?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> [3]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a\u00a0<em>n\u00a0</em>\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7\u00a0<code>\u230a n/3 \u230b</code>\u00a0\u6b21\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u5c1d\u8bd5\u8bbe\u8ba1\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\u00a01\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[3,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[3]</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>[1,1,1,3,3,2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> majorityElement(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* majorityElement(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> MajorityElement(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef majority_element(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func majorityElement(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func majorityElement(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def majorityElement(nums: Array[Int]): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun majorityElement(nums: IntArray): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function majorityElement($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function majorityElement(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0230", "frontend_question_id": "0230", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst", "url_en": "https://leetcode.com/problems/kth-smallest-element-in-a-bst", "relative_path_cn": "/leetcode/0200-0299/0230.Kth%20Smallest%20Element%20in%20a%20BST/README.md", "relative_path_en": "/leetcode/0200-0299/0230.Kth%20Smallest%20Element%20in%20a%20BST/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20", "title_en": "Kth Smallest Element in a BST", "question_title_slug": "kth-smallest-element-in-a-bst", "content_en": "<p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>Output:</strong> 1</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>Output:</strong> 3\n</pre>\n\n<p><b>Follow up:</b><br />\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of elements of the BST is between <code>1</code> to <code>10^4</code>.</li>\n\t<li>You may assume <code>k</code> is always valid, <code>1 &le; k &le; BST&#39;s total elements</code>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570&nbsp;<code>kthSmallest</code>&nbsp;\u6765\u67e5\u627e\u5176\u4e2d\u7b2c&nbsp;<strong>k&nbsp;</strong>\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c1 &le; k &le; \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u5982\u679c\u4e8c\u53c9\u641c\u7d22\u6811\u7ecf\u5e38\u88ab\u4fee\u6539\uff08\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\uff09\u5e76\u4e14\u4f60\u9700\u8981\u9891\u7e41\u5730\u67e5\u627e\u7b2c k \u5c0f\u7684\u503c\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316&nbsp;<code>kthSmallest</code>&nbsp;\u51fd\u6570\uff1f</p>\n", "tags_en": ["Tree", "Binary Search"], "tags_cn": ["\u6811", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\nint kthSmallest(struct TreeNode* root, int k){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int KthSmallest(TreeNode root, int k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(root, k) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @param {Integer} k\n# @return {Integer}\ndef kth_smallest(root, k)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func kthSmallest(_ root: TreeNode?, _ k: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc kthSmallest(root *TreeNode, k int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def kthSmallest(root: TreeNode, k: Int): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun kthSmallest(root: TreeNode?, k: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n//\n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn kth_smallest(root: Option<Rc<RefCell<TreeNode>>>, k: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthSmallest($root, $k) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction kthSmallest(root: TreeNode | null, k: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0231", "frontend_question_id": "0231", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/power-of-two", "url_en": "https://leetcode.com/problems/power-of-two", "relative_path_cn": "/leetcode/0200-0299/0231.Power%20of%20Two/README.md", "relative_path_en": "/leetcode/0200-0299/0231.Power%20of%20Two/README_EN.md", "title_cn": "2\u7684\u5e42", "title_en": "Power of Two", "question_title_slug": "power-of-two", "content_en": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of two. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>0</sup> = 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>4</sup> = 16\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>2<sup>0</sup>&nbsp;= 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 16\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>2<sup>4</sup>&nbsp;= 16</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 218\n<strong>\u8f93\u51fa:</strong> false</pre>\n", "tags_en": ["Bit Manipulation", "Math"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isPowerOfTwo(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isPowerOfTwo(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsPowerOfTwo(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfTwo = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef is_power_of_two(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isPowerOfTwo(_ n: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isPowerOfTwo(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isPowerOfTwo(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isPowerOfTwo(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_power_of_two(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isPowerOfTwo($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isPowerOfTwo(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0232", "frontend_question_id": "0232", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/implement-queue-using-stacks", "url_en": "https://leetcode.com/problems/implement-queue-using-stacks", "relative_path_cn": "/leetcode/0200-0299/0232.Implement%20Queue%20using%20Stacks/README.md", "relative_path_en": "/leetcode/0200-0299/0232.Implement%20Queue%20using%20Stacks/README_EN.md", "title_cn": "\u7528\u6808\u5b9e\u73b0\u961f\u5217", "title_en": "Implement Queue using Stacks", "question_title_slug": "implement-queue-using-stacks", "content_en": "<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyQueue</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>\n\t<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>\n\t<li><code>int peek()</code> Returns the element at the front of the queue.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><b>Notes:</b></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations.</li>\n</ul>\n\n<p><strong>Follow-up:</strong> Can you implement the queue such that each operation is <strong><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 1, 1, false]\n\n<strong>Explanation</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>\n</ul>\n", "content_cn": "<p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u5148\u5165\u5148\u51fa\u961f\u5217\u3002\u961f\u5217\u5e94\u5f53\u652f\u6301\u4e00\u822c\u961f\u5217\u7684\u652f\u6301\u7684\u6240\u6709\u64cd\u4f5c\uff08<code>push</code>\u3001<code>pop</code>\u3001<code>peek</code>\u3001<code>empty</code>\uff09\uff1a</p>\n\n<p>\u5b9e\u73b0 <code>MyQueue</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>void push(int x)</code> \u5c06\u5143\u7d20 x \u63a8\u5230\u961f\u5217\u7684\u672b\u5c3e</li>\n\t<li><code>int pop()</code> \u4ece\u961f\u5217\u7684\u5f00\u5934\u79fb\u9664\u5e76\u8fd4\u56de\u5143\u7d20</li>\n\t<li><code>int peek()</code> \u8fd4\u56de\u961f\u5217\u5f00\u5934\u7684\u5143\u7d20</li>\n\t<li><code>boolean empty()</code> \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code></li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c \u2014\u2014 \u4e5f\u5c31\u662f\u53ea\u6709\u00a0<code>push to top</code>,\u00a0<code>peek/pop from top</code>,\u00a0<code>size</code>, \u548c\u00a0<code>is empty</code>\u00a0\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u80fd\u5426\u5b9e\u73b0\u6bcf\u4e2a\u64cd\u4f5c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(1)</code> \u7684\u961f\u5217\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u6267\u884c <code>n</code> \u4e2a\u64cd\u4f5c\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code> \uff0c\u5373\u4f7f\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u53ef\u80fd\u82b1\u8d39\u8f83\u957f\u65f6\u95f4\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n<strong>\u8f93\u51fa\uff1a</strong>\n[null, null, null, 1, 1, false]\n\n<strong>\u89e3\u91ca\uff1a</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<ul>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= x <= 9</code></li>\n\t<li>\u6700\u591a\u8c03\u7528 <code>100</code> \u6b21 <code>push</code>\u3001<code>pop</code>\u3001<code>peek</code> \u548c <code>empty</code></li>\n\t<li>\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 <code>pop</code> \u6216\u8005 <code>peek</code> \u64cd\u4f5c\uff09</li>\n</ul>\n", "tags_en": ["Stack", "Design"], "tags_cn": ["\u6808", "\u8bbe\u8ba1"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n\n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n\n    }\n    \n    /** Get the front element. */\n    int peek() {\n\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MyQueue {\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n    \n    /** Push element x to the back of queue. */\n    public void push(int x) {\n\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n\n    }\n    \n    /** Get the front element. */\n    public int peek() {\n\n    }\n    \n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MyQueue(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: None\n        \"\"\"\n\n\n    def pop(self):\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        :rtype: int\n        \"\"\"\n\n\n    def peek(self):\n        \"\"\"\n        Get the front element.\n        :rtype: int\n        \"\"\"\n\n\n    def empty(self):\n        \"\"\"\n        Returns whether the queue is empty.\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n\n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n\n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n\n} MyQueue;\n\n/** Initialize your data structure here. */\n\nMyQueue* myQueueCreate() {\n\n}\n\n/** Push element x to the back of queue. */\nvoid myQueuePush(MyQueue* obj, int x) {\n\n}\n\n/** Removes the element from in front of queue and returns that element. */\nint myQueuePop(MyQueue* obj) {\n\n}\n\n/** Get the front element. */\nint myQueuePeek(MyQueue* obj) {\n\n}\n\n/** Returns whether the queue is empty. */\nbool myQueueEmpty(MyQueue* obj) {\n\n}\n\nvoid myQueueFree(MyQueue* obj) {\n\n}\n\n/**\n * Your MyQueue struct will be instantiated and called as such:\n * MyQueue* obj = myQueueCreate();\n * myQueuePush(obj, x);\n \n * int param_2 = myQueuePop(obj);\n \n * int param_3 = myQueuePeek(obj);\n \n * bool param_4 = myQueueEmpty(obj);\n \n * myQueueFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MyQueue {\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n    \n    /** Push element x to the back of queue. */\n    public void Push(int x) {\n\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int Pop() {\n\n    }\n    \n    /** Get the front element. */\n    public int Peek() {\n\n    }\n    \n    /** Returns whether the queue is empty. */\n    public bool Empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n * int param_3 = obj.Peek();\n * bool param_4 = obj.Empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Initialize your data structure here.\n */\nvar MyQueue = function() {\n\n};\n\n/**\n * Push element x to the back of queue. \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MyQueue\n\n=begin\n    Initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    Push element x to the back of queue.\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n\n    end\n\n\n=begin\n    Removes the element from in front of queue and returns that element.\n    :rtype: Integer\n=end\n    def pop()\n\n    end\n\n\n=begin\n    Get the front element.\n    :rtype: Integer\n=end\n    def peek()\n\n    end\n\n\n=begin\n    Returns whether the queue is empty.\n    :rtype: Boolean\n=end\n    def empty()\n\n    end\n\n\nend\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue.new()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass MyQueue {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    func push(_ x: Int) {\n        \n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    func pop() -> Int {\n        \n    }\n    \n    /** Get the front element. */\n    func peek() -> Int {\n        \n    }\n    \n    /** Returns whether the queue is empty. */\n    func empty() -> Bool {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.peek()\n * let ret_4: Bool = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MyQueue struct {\n\n}\n\n\n/** Initialize your data structure here. */\nfunc Constructor() MyQueue {\n\n}\n\n\n/** Push element x to the back of queue. */\nfunc (this *MyQueue) Push(x int)  {\n\n}\n\n\n/** Removes the element from in front of queue and returns that element. */\nfunc (this *MyQueue) Pop() int {\n\n}\n\n\n/** Get the front element. */\nfunc (this *MyQueue) Peek() int {\n\n}\n\n\n/** Returns whether the queue is empty. */\nfunc (this *MyQueue) Empty() bool {\n\n}\n\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n * param_3 := obj.Peek();\n * param_4 := obj.Empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MyQueue() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Push element x to the back of queue. */\n    def push(x: Int) {\n\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    def pop(): Int = {\n\n    }\n\n    /** Get the front element. */\n    def peek(): Int = {\n\n    }\n\n    /** Returns whether the queue is empty. */\n    def empty(): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MyQueue() {\n\n    /** Initialize your data structure here. */\n\n\n    /** Push element x to the back of queue. */\n    fun push(x: Int) {\n\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    fun pop(): Int {\n\n    }\n\n    /** Get the front element. */\n    fun peek(): Int {\n\n    }\n\n    /** Returns whether the queue is empty. */\n    fun empty(): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MyQueue {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyQueue {\n\n    /** Initialize your data structure here. */\n    fn new() -> Self {\n\n    }\n    \n    /** Push element x to the back of queue. */\n    fn push(&self, x: i32) {\n\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    fn pop(&self) -> i32 {\n\n    }\n    \n    /** Get the front element. */\n    fn peek(&self) -> i32 {\n\n    }\n    \n    /** Returns whether the queue is empty. */\n    fn empty(&self) -> bool {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue::new();\n * obj.push(x);\n * let ret_2: i32 = obj.pop();\n * let ret_3: i32 = obj.peek();\n * let ret_4: bool = obj.empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MyQueue {\n    /**\n     * Initialize your data structure here.\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * Push element x to the back of queue.\n     * @param Integer $x\n     * @return NULL\n     */\n    function push($x) {\n\n    }\n\n    /**\n     * Removes the element from in front of queue and returns that element.\n     * @return Integer\n     */\n    function pop() {\n\n    }\n\n    /**\n     * Get the front element.\n     * @return Integer\n     */\n    function peek() {\n\n    }\n\n    /**\n     * Returns whether the queue is empty.\n     * @return Boolean\n     */\n    function empty() {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * $obj = MyQueue();\n * $obj->push($x);\n * $ret_2 = $obj->pop();\n * $ret_3 = $obj->peek();\n * $ret_4 = $obj->empty();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MyQueue {\n    constructor() {\n\n    }\n\n    push(x: number): void {\n\n    }\n\n    pop(): number {\n\n    }\n\n    peek(): number {\n\n    }\n\n    empty(): boolean {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0233", "frontend_question_id": "0233", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/number-of-digit-one", "url_en": "https://leetcode.com/problems/number-of-digit-one", "relative_path_cn": "/leetcode/0200-0299/0233.Number%20of%20Digit%20One/README.md", "relative_path_en": "/leetcode/0200-0299/0233.Number%20of%20Digit%20One/README_EN.md", "title_cn": "\u6570\u5b57 1 \u7684\u4e2a\u6570", "title_en": "Number of Digit One", "question_title_slug": "number-of-digit-one", "content_en": "<p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 13\r\n<strong>Output:</strong> 6 \r\n<strong>Explanation: </strong>Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.\r\n</pre>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8ba1\u7b97\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e n \u7684\u975e\u8d1f\u6574\u6570\u4e2d\u6570\u5b57 1 \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 13\n<strong>\u8f93\u51fa:</strong> 6 \n<strong>\u89e3\u91ca: </strong>\u6570\u5b57 1 \u51fa\u73b0\u5728\u4ee5\u4e0b\u6570\u5b57\u4e2d: 1, 10, 11, 12, 13 \u3002</pre>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int countDigitOne(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int countDigitOne(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def countDigitOne(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint countDigitOne(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int CountDigitOne(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar countDigitOne = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef count_digit_one(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func countDigitOne(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func countDigitOne(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def countDigitOne(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun countDigitOne(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn count_digit_one(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countDigitOne($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function countDigitOne(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0234", "frontend_question_id": "0234", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/palindrome-linked-list", "url_en": "https://leetcode.com/problems/palindrome-linked-list", "relative_path_cn": "/leetcode/0200-0299/0234.Palindrome%20Linked%20List/README.md", "relative_path_en": "/leetcode/0200-0299/0234.Palindrome%20Linked%20List/README_EN.md", "title_cn": "\u56de\u6587\u94fe\u8868", "title_en": "Palindrome Linked List", "question_title_slug": "palindrome-linked-list", "content_en": "<p>Given a singly linked list, determine if it is a palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;2-&gt;1\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it in O(n) time and O(1) space?</p>\r\n", "content_cn": "<p>\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;2-&gt;1\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u80fd\u5426\u7528&nbsp;O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f</p>\n", "tags_en": ["Linked List", "Two Pointers"], "tags_cn": ["\u94fe\u8868", "\u53cc\u6307\u9488"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nbool isPalindrome(struct ListNode* head){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsPalindrome(ListNode head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function(head) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {Boolean}\ndef is_palindrome(head)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func isPalindrome(_ head: ListNode?) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc isPalindrome(head *ListNode) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def isPalindrome(head: ListNode): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun isPalindrome(head: ListNode?): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn is_palindrome(head: Option<Box<ListNode>>) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return Boolean\n     */\n    function isPalindrome($head) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction isPalindrome(head: ListNode | null): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0235", "frontend_question_id": "0235", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree", "url_en": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree", "relative_path_cn": "/leetcode/0200-0299/0235.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0235.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148", "title_en": "Lowest Common Ancestor of a Binary Search Tree", "question_title_slug": "lowest-common-ancestor-of-a-binary-search-tree", "content_en": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p and q&nbsp;as the lowest node in T that has both p and q&nbsp;as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1], p = 2, q = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will&nbsp;exist in the BST.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a&ldquo;\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08<strong>\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148</strong>\uff09\u3002&rdquo;</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>\u8f93\u51fa:</strong> 6 \n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>2 </code>\u548c\u8282\u70b9 <code>8 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f <code>6\u3002</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>2</code> \u548c\u8282\u70b9 <code>4</code> \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f <code>2</code>, \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\n\npublic class Solution {\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {TreeNode}\ndef lowest_common_ancestor(root, p, q)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Solution {\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val   int\n *     Left  *TreeNode\n *     Right *TreeNode\n * }\n */\n\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n\t\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nobject Solution {\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Solution {\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param TreeNode $root\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return TreeNode\n     */\n    function lowestCommonAncestor($root, $p, $q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\n\t\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0236", "frontend_question_id": "0236", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree", "url_en": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree", "relative_path_cn": "/leetcode/0200-0299/0236.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0236.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148", "title_en": "Lowest Common Ancestor of a Binary Tree", "question_title_slug": "lowest-common-ancestor-of-a-binary-tree", "content_en": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p&nbsp;and q&nbsp;as the lowest node in T that has both p&nbsp;and q&nbsp;as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will&nbsp;exist in the tree.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a&ldquo;\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08<strong>\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148</strong>\uff09\u3002&rdquo;</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>5 </code>\u548c\u8282\u70b9 <code>1 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 <code>3\u3002</code>\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>5 </code>\u548c\u8282\u70b9 <code>4 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 <code>5\u3002</code>\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002</li>\n</ul>\n", "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {TreeNode} p\n# @param {TreeNode} q\n# @return {TreeNode}\ndef lowest_common_ancestor(root, p, q)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Solution {\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for TreeNode.\n * type TreeNode struct {\n *     Val int\n *     Left *ListNode\n *     Right *ListNode\n * }\n */\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n  \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nobject Solution {\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Solution {\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param TreeNode $root\n     * @param TreeNode $p\n     * @param TreeNode $q\n     * @return TreeNode\n     */\n    function lowestCommonAncestor($root, $p, $q) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\n\t\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0237", "frontend_question_id": "0237", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/delete-node-in-a-linked-list", "url_en": "https://leetcode.com/problems/delete-node-in-a-linked-list", "relative_path_cn": "/leetcode/0200-0299/0237.Delete%20Node%20in%20a%20Linked%20List/README.md", "relative_path_en": "/leetcode/0200-0299/0237.Delete%20Node%20in%20a%20Linked%20List/README_EN.md", "title_cn": "\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9", "title_en": "Delete Node in a Linked List", "question_title_slug": "delete-node-in-a-linked-list", "content_en": "<p>Write a function to <strong>delete a node</strong> in a singly-linked list. You will <strong>not</strong> be given access to the <code>head</code> of the list, instead you will be given access to <strong>the node to be deleted</strong> directly.</p>\n\n<p>It is <strong>guaranteed</strong> that the node to be deleted is <strong>not a tail node</strong> in the list.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node1.jpg\" style=\"width: 450px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 5\n<strong>Output:</strong> [4,1,9]\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node2.jpg\" style=\"width: 450px; height: 354px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 1\n<strong>Output:</strong> [4,5,9]\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2,3,4], node = 3\n<strong>Output:</strong> [1,2,4]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [0,1], node = 0\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [-3,5,-99], node = -3\n<strong>Output:</strong> [5,-99]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The value of each node in the list is <strong>unique</strong>.</li>\n\t<li>The <code>node</code> to be deleted is <strong>in the list</strong> and is <strong>not a tail</strong> node</li>\n</ul>\n", "content_cn": "<p>\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\u3002\u4f20\u5165\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u4e3a <strong>\u8981\u88ab\u5220\u9664\u7684\u8282\u70b9</strong> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u73b0\u6709\u4e00\u4e2a\u94fe\u8868 --&nbsp;head =&nbsp;[4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png\" style=\"height: 49px; width: 300px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [4,5,1,9], node = 5\n<strong>\u8f93\u51fa\uff1a</strong>[4,1,9]\n<strong>\u89e3\u91ca\uff1a</strong>\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a&nbsp;5&nbsp;\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 1 -&gt; 9.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [4,5,1,9], node = 1\n<strong>\u8f93\u51fa\uff1a</strong>[4,5,9]\n<strong>\u89e3\u91ca\uff1a</strong>\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a&nbsp;1&nbsp;\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 5 -&gt; 9.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002</li>\n\t<li>\u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002</li>\n</ul>\n", "tags_en": ["Linked List"], "tags_cn": ["\u94fe\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void deleteNode(ListNode node) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nvoid deleteNode(struct ListNode* node) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public void DeleteNode(ListNode node) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} node\n# @return {Void} Do not return anything, modify node in-place instead.\ndef delete_node(node)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n    func deleteNode(_ node: ListNode?) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteNode(node *ListNode) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\n\nobject Solution {\n    def deleteNode(node: ListNode): Unit = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\n\nclass Solution {\n    fun deleteNode(node: ListNode?) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\n\nclass Solution {\n    /**\n     * @param ListNode $node\n     * @return \n     */\n    function deleteNode($node) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\n/**\n Do not return anything, modify it in-place instead.\n */\nfunction deleteNode(root: ListNode | null): void {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0238", "frontend_question_id": "0238", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/product-of-array-except-self", "url_en": "https://leetcode.com/problems/product-of-array-except-self", "relative_path_cn": "/leetcode/0200-0299/0238.Product%20of%20Array%20Except%20Self/README.md", "relative_path_en": "/leetcode/0200-0299/0238.Product%20of%20Array%20Except%20Self/README_EN.md", "title_cn": "\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef", "title_en": "Product of Array Except Self", "question_title_slug": "product-of-array-except-self", "content_en": "<p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, &nbsp;return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>\n\n<p><b>Example:</b></p>\n\n<pre>\n<b>Input:</b>  <code>[1,2,3,4]</code>\n<b>Output:</b> <code>[24,12,8,6]</code>\n</pre>\n\n<p><strong>Constraint:</strong>&nbsp;It&#39;s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p>\n\n<p><strong>Note: </strong>Please solve it <strong>without division</strong> and in O(<em>n</em>).</p>\n\n<p><strong>Follow up:</strong><br />\nCould you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p>\n", "content_cn": "<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a&nbsp;<em>n</em>&nbsp;\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5176\u4e2d&nbsp;<em>n</em> &gt; 1\uff0c\u8fd4\u56de\u8f93\u51fa\u6570\u7ec4&nbsp;<code>output</code>&nbsp;\uff0c\u5176\u4e2d <code>output[i]</code>&nbsp;\u7b49\u4e8e&nbsp;<code>nums</code>&nbsp;\u4e2d\u9664&nbsp;<code>nums[i]</code>&nbsp;\u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,2,3,4]</code>\n<strong>\u8f93\u51fa:</strong> <code>[24,12,8,6]</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u6570\u7ec4\u4e4b\u4e2d\u4efb\u610f\u5143\u7d20\u7684\u5168\u90e8\u524d\u7f00\u5143\u7d20\u548c\u540e\u7f00\uff08\u751a\u81f3\u662f\u6574\u4e2a\u6570\u7ec4\uff09\u7684\u4e58\u79ef\u90fd\u5728 32 \u4f4d\u6574\u6570\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u8bf4\u660e: </strong>\u8bf7<strong>\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c</strong>\u4e14\u5728&nbsp;O(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u53ef\u4ee5\u5728\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e2a\u9898\u76ee\u5417\uff1f\uff08 \u51fa\u4e8e\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u76ee\u7684\uff0c\u8f93\u51fa\u6570\u7ec4<strong>\u4e0d\u88ab\u89c6\u4e3a</strong>\u989d\u5916\u7a7a\u95f4\u3002\uff09</p>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* productExceptSelf(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] ProductExceptSelf(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef product_except_self(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func productExceptSelf(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun productExceptSelf(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function productExceptSelf($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function productExceptSelf(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0239", "frontend_question_id": "0239", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/sliding-window-maximum", "url_en": "https://leetcode.com/problems/sliding-window-maximum", "relative_path_cn": "/leetcode/0200-0299/0239.Sliding%20Window%20Maximum/README.md", "relative_path_en": "/leetcode/0200-0299/0239.Sliding%20Window%20Maximum/README_EN.md", "title_cn": "\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c", "title_en": "Sliding Window Maximum", "question_title_slug": "sliding-window-maximum", "content_en": "<p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the max sliding window</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [3,3,5,5,6,7]\n<strong>Explanation:</strong> \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-1], k = 1\n<strong>Output:</strong> [1,-1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,11], k = 2\n<strong>Output:</strong> [11]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,-2], k = 2\n<strong>Output:</strong> [4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <em>nums</em>\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a&nbsp;<em>k&nbsp;</em>\u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 <em>k</em>&nbsp;\u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002</p>\n\n<p>\u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, \u548c <em>k</em> = 3\n<strong>\u8f93\u51fa: </strong><code>[3,3,5,5,6,7] \n<strong>\u89e3\u91ca: \n</strong></code>\n  \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e                \u6700\u5927\u503c\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7       <strong>5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\n\t<li><code>-10^4&nbsp;&lt;= nums[i]&nbsp;&lt;= 10^4</code></li>\n\t<li><code>1 &lt;= k&nbsp;&lt;= nums.length</code></li>\n</ul>\n", "tags_en": ["Heap", "Sliding Window"], "tags_cn": ["\u5806", null], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] MaxSlidingWindow(int[] nums, int k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sliding_window(nums, k)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func maxSlidingWindow(nums []int, k int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxSlidingWindow(nums: IntArray, k: Int): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_sliding_window(nums: Vec<i32>, k: i32) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSlidingWindow($nums, $k) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxSlidingWindow(nums: number[], k: number): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0240", "frontend_question_id": "0240", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/search-a-2d-matrix-ii", "url_en": "https://leetcode.com/problems/search-a-2d-matrix-ii", "relative_path_cn": "/leetcode/0200-0299/0240.Search%20a%202D%20Matrix%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0240.Search%20a%202D%20Matrix%20II/README_EN.md", "title_cn": "\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II", "title_en": "Search a 2D Matrix II", "question_title_slug": "search-a-2d-matrix-ii", "content_en": "<p>Write an efficient algorithm that searches for a <code>target</code> value in an <code>m x n</code>&nbsp;integer <code>matrix</code>. The <code>matrix</code> has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the integers in each row are <strong>sorted</strong> in ascending order.</li>\n\t<li>All the integers in each column are <strong>sorted</strong> in ascending order.</li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22\u00a0<code><em>m</em>\u00a0x\u00a0<em>n</em></code>\u00a0\u77e9\u9635 <code>matrix</code> \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code> \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><b>\u793a\u4f8b 1\uff1a</b></p>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg\" />\n<pre>\n<b>\u8f93\u5165\uff1a</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<b>\u8f93\u51fa\uff1a</b>true\n</pre>\n\n<p><b>\u793a\u4f8b 2\uff1a</b></p>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid.jpg\" />\n<pre>\n<b>\u8f93\u5165\uff1a</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<b>\u8f93\u51fa\uff1a</b>false\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 <= n, m <= 300</code></li>\n\t<li><code>-10<sup>9</sup>\u00a0<= matix[i][j] <= 10<sup>9</sup></code></li>\n\t<li>\u6bcf\u884c\u7684\u6240\u6709\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217</li>\n\t<li>\u6bcf\u5217\u7684\u6240\u6709\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217</li>\n\t<li><code>-10<sup>9</sup>\u00a0<= target <= 10<sup>9</sup></code></li>\n</ul>\n", "tags_en": ["Binary Search", "Divide and Conquer"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e", "\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func searchMatrix(matrix [][]int, target int) bool {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0241", "frontend_question_id": "0241", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/different-ways-to-add-parentheses", "url_en": "https://leetcode.com/problems/different-ways-to-add-parentheses", "relative_path_cn": "/leetcode/0200-0299/0241.Different%20Ways%20to%20Add%20Parentheses/README.md", "relative_path_en": "/leetcode/0200-0299/0241.Different%20Ways%20to%20Add%20Parentheses/README_EN.md", "title_cn": "\u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7", "title_en": "Different Ways to Add Parentheses", "question_title_slug": "different-ways-to-add-parentheses", "content_en": "<p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;2-1-1&quot;</code>\r\n<b>Output:</b> <code>[0, 2]</code>\r\n<strong>Explanation: </strong>\r\n((2-1)-1) = 0 \r\n(2-(1-1)) = 2</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b><code>&quot;2*3-4*5&quot;</code>\r\n<b>Output:</b> <code>[-34, -14, -10, -10, 10]</code>\r\n<strong>Explanation: \r\n</strong>(2*(3-(4*5))) = -34 \r\n((2*3)-(4*5)) = -14 \r\n((2*(3-4))*5) = -10 \r\n(2*((3-4)*5)) = -10 \r\n(((2*3)-4)*5) = 10<strong>\r\n</strong></pre>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e3a\u8868\u8fbe\u5f0f\u6dfb\u52a0\u62ec\u53f7\uff0c\u6539\u53d8\u5176\u8fd0\u7b97\u4f18\u5148\u7ea7\u4ee5\u6c42\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u542b <code>+</code>,&nbsp;<code>-</code>&nbsp;\u4ee5\u53ca&nbsp;<code>*</code>&nbsp;\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;2-1-1&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>[0, 2]</code>\n<strong>\u89e3\u91ca: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;2*3-4*5&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>\u89e3\u91ca: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>\n", "tags_en": ["Divide and Conquer"], "tags_cn": ["\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> diffWaysToCompute(string input) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<Integer> diffWaysToCompute(String input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def diffWaysToCompute(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def diffWaysToCompute(self, input: str) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diffWaysToCompute(char * input, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<int> DiffWaysToCompute(string input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} input\n * @return {number[]}\n */\nvar diffWaysToCompute = function(input) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} input\n# @return {Integer[]}\ndef diff_ways_to_compute(input)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func diffWaysToCompute(_ input: String) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func diffWaysToCompute(input string) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def diffWaysToCompute(input: String): List[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun diffWaysToCompute(input: String): List<Int> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn diff_ways_to_compute(input: String) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $input\n     * @return Integer[]\n     */\n    function diffWaysToCompute($input) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function diffWaysToCompute(input: string): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0242", "frontend_question_id": "0242", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/valid-anagram", "url_en": "https://leetcode.com/problems/valid-anagram", "relative_path_cn": "/leetcode/0200-0299/0242.Valid%20Anagram/README.md", "relative_path_en": "/leetcode/0200-0299/0242.Valid%20Anagram/README_EN.md", "title_cn": "\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd", "title_en": "Valid Anagram", "question_title_slug": "valid-anagram", "content_en": "<p>Given two strings <em>s</em> and <em>t&nbsp;</em>, write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\r\n<b>Output:</b> true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\r\n<b>Output: </b>false\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume the string contains only lowercase alphabets.</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <em>s</em> \u548c <em>t</em> \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad <em>t</em> \u662f\u5426\u662f <em>s</em> \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\n<strong>\u8f93\u51fa: </strong>false</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f</p>\n", "tags_en": ["Sort", "Hash Table"], "tags_cn": ["\u6392\u5e8f", "\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isAnagram(String s, String t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isAnagram(char * s, char * t){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsAnagram(string s, string t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_anagram(s, t)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isAnagram(_ s: String, _ t: String) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isAnagram(s string, t string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isAnagram(s: String, t: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isAnagram(s: String, t: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_anagram(s: String, t: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isAnagram($s, $t) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isAnagram(s: string, t: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0243", "frontend_question_id": "0243", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-word-distance", "url_en": "https://leetcode.com/problems/shortest-word-distance", "relative_path_cn": "/leetcode/0200-0299/0243.Shortest%20Word%20Distance/README.md", "relative_path_en": "/leetcode/0200-0299/0243.Shortest%20Word%20Distance/README_EN.md", "title_cn": "\u6700\u77ed\u5355\u8bcd\u8ddd\u79bb", "title_en": "Shortest Word Distance", "question_title_slug": "shortest-word-distance", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0244", "frontend_question_id": "0244", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-word-distance-ii", "url_en": "https://leetcode.com/problems/shortest-word-distance-ii", "relative_path_cn": "/leetcode/0200-0299/0244.Shortest%20Word%20Distance%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0244.Shortest%20Word%20Distance%20II/README_EN.md", "title_cn": "\u6700\u77ed\u5355\u8bcd\u8ddd\u79bb II", "title_en": "Shortest Word Distance II", "question_title_slug": "shortest-word-distance-ii", "content_en": null, "content_cn": null, "tags_en": ["Design", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0245", "frontend_question_id": "0245", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/shortest-word-distance-iii", "url_en": "https://leetcode.com/problems/shortest-word-distance-iii", "relative_path_cn": "/leetcode/0200-0299/0245.Shortest%20Word%20Distance%20III/README.md", "relative_path_en": "/leetcode/0200-0299/0245.Shortest%20Word%20Distance%20III/README_EN.md", "title_cn": "\u6700\u77ed\u5355\u8bcd\u8ddd\u79bb III", "title_en": "Shortest Word Distance III", "question_title_slug": "shortest-word-distance-iii", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0246", "frontend_question_id": "0246", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/strobogrammatic-number", "url_en": "https://leetcode.com/problems/strobogrammatic-number", "relative_path_cn": "/leetcode/0200-0299/0246.Strobogrammatic%20Number/README.md", "relative_path_en": "/leetcode/0200-0299/0246.Strobogrammatic%20Number/README_EN.md", "title_cn": "\u4e2d\u5fc3\u5bf9\u79f0\u6570", "title_en": "Strobogrammatic Number", "question_title_slug": "strobogrammatic-number", "content_en": null, "content_cn": null, "tags_en": ["Hash Table", "Math"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0247", "frontend_question_id": "0247", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/strobogrammatic-number-ii", "url_en": "https://leetcode.com/problems/strobogrammatic-number-ii", "relative_path_cn": "/leetcode/0200-0299/0247.Strobogrammatic%20Number%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0247.Strobogrammatic%20Number%20II/README_EN.md", "title_cn": "\u4e2d\u5fc3\u5bf9\u79f0\u6570 II", "title_en": "Strobogrammatic Number II", "question_title_slug": "strobogrammatic-number-ii", "content_en": null, "content_cn": null, "tags_en": ["Recursion", "Math"], "tags_cn": ["\u9012\u5f52", "\u6570\u5b66"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0248", "frontend_question_id": "0248", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/strobogrammatic-number-iii", "url_en": "https://leetcode.com/problems/strobogrammatic-number-iii", "relative_path_cn": "/leetcode/0200-0299/0248.Strobogrammatic%20Number%20III/README.md", "relative_path_en": "/leetcode/0200-0299/0248.Strobogrammatic%20Number%20III/README_EN.md", "title_cn": "\u4e2d\u5fc3\u5bf9\u79f0\u6570 III", "title_en": "Strobogrammatic Number III", "question_title_slug": "strobogrammatic-number-iii", "content_en": null, "content_cn": null, "tags_en": ["Recursion", "Math"], "tags_cn": ["\u9012\u5f52", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0249", "frontend_question_id": "0249", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/group-shifted-strings", "url_en": "https://leetcode.com/problems/group-shifted-strings", "relative_path_cn": "/leetcode/0200-0299/0249.Group%20Shifted%20Strings/README.md", "relative_path_en": "/leetcode/0200-0299/0249.Group%20Shifted%20Strings/README_EN.md", "title_cn": "\u79fb\u4f4d\u5b57\u7b26\u4e32\u5206\u7ec4", "title_en": "Group Shifted Strings", "question_title_slug": "group-shifted-strings", "content_en": null, "content_cn": null, "tags_en": ["Hash Table", "String"], "tags_cn": ["\u54c8\u5e0c\u8868", "\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0250", "frontend_question_id": "0250", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/count-univalue-subtrees", "url_en": "https://leetcode.com/problems/count-univalue-subtrees", "relative_path_cn": "/leetcode/0200-0299/0250.Count%20Univalue%20Subtrees/README.md", "relative_path_en": "/leetcode/0200-0299/0250.Count%20Univalue%20Subtrees/README_EN.md", "title_cn": "\u7edf\u8ba1\u540c\u503c\u5b50\u6811", "title_en": "Count Univalue Subtrees", "question_title_slug": "count-univalue-subtrees", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0251", "frontend_question_id": "0251", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/flatten-2d-vector", "url_en": "https://leetcode.com/problems/flatten-2d-vector", "relative_path_cn": "/leetcode/0200-0299/0251.Flatten%202D%20Vector/README.md", "relative_path_en": "/leetcode/0200-0299/0251.Flatten%202D%20Vector/README_EN.md", "title_cn": "\u5c55\u5f00\u4e8c\u7ef4\u5411\u91cf", "title_en": "Flatten 2D Vector", "question_title_slug": "flatten-2d-vector", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0252", "frontend_question_id": "0252", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/meeting-rooms", "url_en": "https://leetcode.com/problems/meeting-rooms", "relative_path_cn": "/leetcode/0200-0299/0252.Meeting%20Rooms/README.md", "relative_path_en": "/leetcode/0200-0299/0252.Meeting%20Rooms/README_EN.md", "title_cn": "\u4f1a\u8bae\u5ba4", "title_en": "Meeting Rooms", "question_title_slug": "meeting-rooms", "content_en": null, "content_cn": null, "tags_en": ["Sort"], "tags_cn": ["\u6392\u5e8f"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0253", "frontend_question_id": "0253", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/meeting-rooms-ii", "url_en": "https://leetcode.com/problems/meeting-rooms-ii", "relative_path_cn": "/leetcode/0200-0299/0253.Meeting%20Rooms%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0253.Meeting%20Rooms%20II/README_EN.md", "title_cn": "\u4f1a\u8bae\u5ba4 II", "title_en": "Meeting Rooms II", "question_title_slug": "meeting-rooms-ii", "content_en": null, "content_cn": null, "tags_en": ["Heap", "Greedy", "Sort"], "tags_cn": ["\u5806", "\u8d2a\u5fc3\u7b97\u6cd5", "\u6392\u5e8f"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0254", "frontend_question_id": "0254", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/factor-combinations", "url_en": "https://leetcode.com/problems/factor-combinations", "relative_path_cn": "/leetcode/0200-0299/0254.Factor%20Combinations/README.md", "relative_path_en": "/leetcode/0200-0299/0254.Factor%20Combinations/README_EN.md", "title_cn": "\u56e0\u5b50\u7684\u7ec4\u5408", "title_en": "Factor Combinations", "question_title_slug": "factor-combinations", "content_en": null, "content_cn": null, "tags_en": ["Backtracking"], "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0255", "frontend_question_id": "0255", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/verify-preorder-sequence-in-binary-search-tree", "url_en": "https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree", "relative_path_cn": "/leetcode/0200-0299/0255.Verify%20Preorder%20Sequence%20in%20Binary%20Search%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0255.Verify%20Preorder%20Sequence%20in%20Binary%20Search%20Tree/README_EN.md", "title_cn": "\u9a8c\u8bc1\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e8c\u53c9\u641c\u7d22\u6811", "title_en": "Verify Preorder Sequence in Binary Search Tree", "question_title_slug": "verify-preorder-sequence-in-binary-search-tree", "content_en": null, "content_cn": null, "tags_en": ["Stack", "Tree"], "tags_cn": ["\u6808", "\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0256", "frontend_question_id": "0256", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/paint-house", "url_en": "https://leetcode.com/problems/paint-house", "relative_path_cn": "/leetcode/0200-0299/0256.Paint%20House/README.md", "relative_path_en": "/leetcode/0200-0299/0256.Paint%20House/README_EN.md", "title_cn": "\u7c89\u5237\u623f\u5b50", "title_en": "Paint House", "question_title_slug": "paint-house", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0257", "frontend_question_id": "0257", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/binary-tree-paths", "url_en": "https://leetcode.com/problems/binary-tree-paths", "relative_path_cn": "/leetcode/0200-0299/0257.Binary%20Tree%20Paths/README.md", "relative_path_en": "/leetcode/0200-0299/0257.Binary%20Tree%20Paths/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84", "title_en": "Binary Tree Paths", "question_title_slug": "binary-tree-paths", "content_en": "<p>Given a binary tree, return all root-to-leaf paths.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\r\n\r\n<strong>Explanation:</strong> All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3\r\n</pre>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n\n   1\n /   \\\n2     3\n \\\n  5\n\n<strong>\u8f93\u51fa:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\n\n<strong>\u89e3\u91ca:</strong> \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1-&gt;2-&gt;5, 1-&gt;3</pre>\n", "tags_en": ["Tree", "Depth-first Search"], "tags_cn": ["\u6811", "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** binaryTreePaths(struct TreeNode* root, int* returnSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<string> BinaryTreePaths(TreeNode root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[]}\n */\nvar binaryTreePaths = function(root) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {String[]}\ndef binary_tree_paths(root)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc binaryTreePaths(root *TreeNode) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def binaryTreePaths(root: TreeNode): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun binaryTreePaths(root: TreeNode?): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn binary_tree_paths(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return String[]\n     */\n    function binaryTreePaths($root) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction binaryTreePaths(root: TreeNode | null): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0258", "frontend_question_id": "0258", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/add-digits", "url_en": "https://leetcode.com/problems/add-digits", "relative_path_cn": "/leetcode/0200-0299/0258.Add%20Digits/README.md", "relative_path_en": "/leetcode/0200-0299/0258.Add%20Digits/README_EN.md", "title_cn": "\u5404\u4f4d\u76f8\u52a0", "title_en": "Add Digits", "question_title_slug": "add-digits", "content_en": "<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>38</code>\r\n<strong>Output:</strong> 2 \r\n<strong>Explanation: </strong>The process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. \r\n&nbsp;            Since <code>2</code> has only one digit, return it.\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without any loop/recursion in O(1) runtime?</p>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <code>num</code>\uff0c\u53cd\u590d\u5c06\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a\u4e00\u4f4d\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>38</code>\n<strong>\u8f93\u51fa:</strong> 2 \n<strong>\u89e3\u91ca: </strong>\u5404\u4f4d\u76f8\u52a0\u7684\u8fc7\u7a0b\u4e3a<strong>\uff1a</strong><code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>\u3002 \u7531\u4e8e&nbsp;<code>2</code> \u662f\u4e00\u4f4d\u6570\uff0c\u6240\u4ee5\u8fd4\u56de 2\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\uff0c\u4e14\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int addDigits(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int addDigits(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def addDigits(self, num: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint addDigits(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int AddDigits(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Integer}\ndef add_digits(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func addDigits(_ num: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func addDigits(num int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def addDigits(num: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun addDigits(num: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn add_digits(num: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function addDigits($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function addDigits(num: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0259", "frontend_question_id": "0259", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/3sum-smaller", "url_en": "https://leetcode.com/problems/3sum-smaller", "relative_path_cn": "/leetcode/0200-0299/0259.3Sum%20Smaller/README.md", "relative_path_en": "/leetcode/0200-0299/0259.3Sum%20Smaller/README_EN.md", "title_cn": "\u8f83\u5c0f\u7684\u4e09\u6570\u4e4b\u548c", "title_en": "3Sum Smaller", "question_title_slug": "3sum-smaller", "content_en": null, "content_cn": null, "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0260", "frontend_question_id": "0260", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/single-number-iii", "url_en": "https://leetcode.com/problems/single-number-iii", "relative_path_cn": "/leetcode/0200-0299/0260.Single%20Number%20III/README.md", "relative_path_en": "/leetcode/0200-0299/0260.Single%20Number%20III/README_EN.md", "title_cn": "\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III", "title_en": "Single Number III", "question_title_slug": "single-number-iii", "content_en": "<p>Given an integer array <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in <strong>any order</strong>.</p>\n\n<p><strong>Follow up:&nbsp;</strong>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,2,5]\n<strong>Output:</strong> [3,5]\n<strong>Explanation: </strong> [5, 3] is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0]\n<strong>Output:</strong> [-1,0]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Each integer in <code>nums</code> will appear twice, only two integers will appear once.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,2,1,3,2,5]</code>\n<strong>\u8f93\u51fa:</strong> <code>[3,5]</code></pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c&nbsp;<code>[5, 3]</code>&nbsp;\u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002</li>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f</li>\n</ol>\n", "tags_en": ["Bit Manipulation"], "tags_cn": ["\u4f4d\u8fd0\u7b97"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> singleNumber(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] singleNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* singleNumber(int* nums, int numsSize, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] SingleNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar singleNumber = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef single_number(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func singleNumber(_ nums: [Int]) -> [Int] {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func singleNumber(nums []int) []int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def singleNumber(nums: Array[Int]): Array[Int] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun singleNumber(nums: IntArray): IntArray {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function singleNumber($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function singleNumber(nums: number[]): number[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0261", "frontend_question_id": "0261", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/graph-valid-tree", "url_en": "https://leetcode.com/problems/graph-valid-tree", "relative_path_cn": "/leetcode/0200-0299/0261.Graph%20Valid%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0261.Graph%20Valid%20Tree/README_EN.md", "title_cn": "\u4ee5\u56fe\u5224\u6811", "title_en": "Graph Valid Tree", "question_title_slug": "graph-valid-tree", "content_en": null, "content_cn": null, "tags_en": ["Depth-first Search", "Breadth-first Search", "Union Find", "Graph"], "tags_cn": ["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u5e76\u67e5\u96c6", "\u56fe"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0262", "frontend_question_id": "0262", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/trips-and-users", "url_en": "https://leetcode.com/problems/trips-and-users", "relative_path_cn": "/leetcode/0200-0299/0262.Trips%20and%20Users/README.md", "relative_path_en": "/leetcode/0200-0299/0262.Trips%20and%20Users/README_EN.md", "title_cn": "\u884c\u7a0b\u548c\u7528\u6237", "title_en": "Trips and Users", "question_title_slug": "trips-and-users", "content_en": "<p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the <code>Users</code> table. Status is an ENUM type of (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;).</p>\n\n<pre>\n+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre>\n\n<p>The <code>Users</code> table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;).</p>\n\n<pre>\n+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre>\n\n<p>Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned)&nbsp;between <strong>Oct 1, 2013</strong> and <strong>Oct 3, 2013</strong>. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests&nbsp;made by unbanned users by the total number of requests&nbsp;made by unbanned users.</p>\n\n<p>For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to <em>two</em> decimal places.</p>\n\n<pre>\n+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre>\n\n<p><strong>Credits:</strong><br />\nSpecial thanks to <a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a> for contributing this question, writing the problem description and adding part of the test cases.</p>\n", "content_cn": "<p><code>Trips</code>&nbsp;\u8868\u4e2d\u5b58\u6240\u6709\u51fa\u79df\u8f66\u7684\u884c\u7a0b\u4fe1\u606f\u3002\u6bcf\u6bb5\u884c\u7a0b\u6709\u552f\u4e00\u952e Id\uff0cClient_Id \u548c&nbsp;Driver_Id \u662f&nbsp;<code>Users</code>&nbsp;\u8868\u4e2d Users_Id \u7684\u5916\u952e\u3002Status \u662f\u679a\u4e3e\u7c7b\u578b\uff0c\u679a\u4e3e\u6210\u5458\u4e3a (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;)\u3002</p>\n\n<pre>+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre>\n\n<p><code>Users</code>&nbsp;\u8868\u5b58\u6240\u6709\u7528\u6237\u3002\u6bcf\u4e2a\u7528\u6237\u6709\u552f\u4e00\u952e Users_Id\u3002Banned \u8868\u793a\u8fd9\u4e2a\u7528\u6237\u662f\u5426\u88ab\u7981\u6b62\uff0cRole \u5219\u662f\u4e00\u4e2a\u8868\u793a\uff08&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;\uff09\u7684\u679a\u4e3e\u7c7b\u578b\u3002</p>\n\n<pre>+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre>\n\n<p>\u5199\u4e00\u6bb5 SQL \u8bed\u53e5\u67e5\u51fa&nbsp;<strong>2013\u5e7410\u67081\u65e5&nbsp;</strong>\u81f3&nbsp;<strong>2013\u5e7410\u67083\u65e5&nbsp;</strong>\u671f\u95f4\u975e\u7981\u6b62\u7528\u6237\u7684\u53d6\u6d88\u7387\u3002\u57fa\u4e8e\u4e0a\u8868\uff0c\u4f60\u7684 SQL \u8bed\u53e5\u5e94\u8fd4\u56de\u5982\u4e0b\u7ed3\u679c\uff0c\u53d6\u6d88\u7387\uff08Cancellation Rate\uff09\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002</p>\n\n<p>\u53d6\u6d88\u7387\u7684\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b\uff1a(\u88ab\u53f8\u673a\u6216\u4e58\u5ba2\u53d6\u6d88\u7684\u975e\u7981\u6b62\u7528\u6237\u751f\u6210\u7684\u8ba2\u5355\u6570\u91cf) / (\u975e\u7981\u6b62\u7528\u6237\u751f\u6210\u7684\u8ba2\u5355\u603b\u6570)</p>\n\n<pre>+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre>\n\n<p><strong>\u81f4\u8c22:</strong><br>\n\u975e\u5e38\u611f\u8c22&nbsp;<a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a>&nbsp;\u8be6\u7ec6\u7684\u63d0\u4f9b\u4e86\u8fd9\u9053\u9898\u548c\u76f8\u5e94\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n", "tags_en": [], "tags_cn": [], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "MySQL", "langSlug": "mysql", "code": "# Write your MySQL query statement below\n", "__typename": "CodeSnippetNode"}, {"lang": "MS SQL Server", "langSlug": "mssql", "code": "/* Write your T-SQL query statement below */\n", "__typename": "CodeSnippetNode"}, {"lang": "Oracle", "langSlug": "oraclesql", "code": "/* Write your PL/SQL query statement below */\n", "__typename": "CodeSnippetNode"}]}, {"question_id": "0263", "frontend_question_id": "0263", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ugly-number", "url_en": "https://leetcode.com/problems/ugly-number", "relative_path_cn": "/leetcode/0200-0299/0263.Ugly%20Number/README.md", "relative_path_en": "/leetcode/0200-0299/0263.Ugly%20Number/README_EN.md", "title_cn": "\u4e11\u6570", "title_en": "Ugly Number", "question_title_slug": "ugly-number", "content_en": "<p>Write a program to check whether a given number is an ugly number.</p>\r\n\r\n<p>Ugly numbers are <strong>positive numbers</strong> whose prime factors only include <code>2, 3, 5</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 6\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>6 = 2 &times;&nbsp;3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 8\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>8 = 2 &times; 2 &times;&nbsp;2\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 14\r\n<strong>Output:</strong> false \r\n<strong>Explanation: </strong><code>14</code> is not ugly since it includes another prime factor <code>7</code>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1</code> is typically treated as an ugly number.</li>\r\n\t<li>Input is within the 32-bit signed integer range:&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1].</li>\r\n</ol>", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002</p>\n\n<p>\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570&nbsp;<code>2, 3, 5</code>&nbsp;\u7684<strong>\u6b63\u6574\u6570</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 6\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>6 = 2 &times;&nbsp;3</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 8\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>8 = 2 &times; 2 &times;&nbsp;2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 14\n<strong>\u8f93\u51fa:</strong> false \n<strong>\u89e3\u91ca: </strong><code>14</code> \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570&nbsp;<code>7</code>\u3002</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><code>1</code>&nbsp;\u662f\u4e11\u6570\u3002</li>\n\t<li>\u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4:&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002</li>\n</ol>\n", "tags_en": ["Math"], "tags_cn": ["\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isUgly(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean isUgly(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def isUgly(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def isUgly(self, num: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool isUgly(int num){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool IsUgly(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isUgly = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {Boolean}\ndef is_ugly(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func isUgly(_ num: Int) -> Bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func isUgly(num int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def isUgly(num: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun isUgly(num: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn is_ugly(num: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Boolean\n     */\n    function isUgly($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function isUgly(num: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0264", "frontend_question_id": "0264", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/ugly-number-ii", "url_en": "https://leetcode.com/problems/ugly-number-ii", "relative_path_cn": "/leetcode/0200-0299/0264.Ugly%20Number%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0264.Ugly%20Number%20II/README_EN.md", "title_cn": "\u4e11\u6570 II", "title_en": "Ugly Number II", "question_title_slug": "ugly-number-ii", "content_en": "<p>Write a program to find the <code>n</code>-th ugly number.</p>\r\n\r\n<p>Ugly numbers are<strong> positive numbers</strong> whose prime factors only include <code>2, 3, 5</code>.&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 10\r\n<strong>Output:</strong> 12\r\n<strong>Explanation: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> is the sequence of the first <code>10</code> ugly numbers.</pre>\r\n\r\n<p><strong>Note: </strong>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><code>1</code> is typically treated as an ugly number.</li>\r\n\t<li><code>n</code> <b>does not exceed 1690</b>.</li>\r\n</ol>", "content_cn": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c <code>n</code> \u4e2a\u4e11\u6570\u3002</p>\n\n<p>\u4e11\u6570\u5c31\u662f\u8d28\u56e0\u6570\u53ea\u5305\u542b&nbsp;<code>2, 3, 5</code> \u7684<strong>\u6b63\u6574\u6570</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 10\n<strong>\u8f93\u51fa:</strong> 12\n<strong>\u89e3\u91ca: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1</code>&nbsp;\u662f\u4e11\u6570\u3002</li>\n\t<li><code>n</code>&nbsp;<strong>\u4e0d\u8d85\u8fc7</strong>1690\u3002</li>\n</ol>\n", "tags_en": ["Heap", "Math", "Dynamic Programming"], "tags_cn": ["\u5806", "\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int nthUglyNumber(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int nthUglyNumber(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint nthUglyNumber(int n){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NthUglyNumber(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef nth_ugly_number(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func nthUglyNumber(_ n: Int) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func nthUglyNumber(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def nthUglyNumber(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun nthUglyNumber(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn nth_ugly_number(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function nthUglyNumber($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function nthUglyNumber(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0265", "frontend_question_id": "0265", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/paint-house-ii", "url_en": "https://leetcode.com/problems/paint-house-ii", "relative_path_cn": "/leetcode/0200-0299/0265.Paint%20House%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0265.Paint%20House%20II/README_EN.md", "title_cn": "\u7c89\u5237\u623f\u5b50 II", "title_en": "Paint House II", "question_title_slug": "paint-house-ii", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0266", "frontend_question_id": "0266", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/palindrome-permutation", "url_en": "https://leetcode.com/problems/palindrome-permutation", "relative_path_cn": "/leetcode/0200-0299/0266.Palindrome%20Permutation/README.md", "relative_path_en": "/leetcode/0200-0299/0266.Palindrome%20Permutation/README_EN.md", "title_cn": "\u56de\u6587\u6392\u5217", "title_en": "Palindrome Permutation", "question_title_slug": "palindrome-permutation", "content_en": null, "content_cn": null, "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0267", "frontend_question_id": "0267", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/palindrome-permutation-ii", "url_en": "https://leetcode.com/problems/palindrome-permutation-ii", "relative_path_cn": "/leetcode/0200-0299/0267.Palindrome%20Permutation%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0267.Palindrome%20Permutation%20II/README_EN.md", "title_cn": "\u56de\u6587\u6392\u5217 II", "title_en": "Palindrome Permutation II", "question_title_slug": "palindrome-permutation-ii", "content_en": null, "content_cn": null, "tags_en": ["Backtracking"], "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0268", "frontend_question_id": "0268", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/missing-number", "url_en": "https://leetcode.com/problems/missing-number", "relative_path_cn": "/leetcode/0200-0299/0268.Missing%20Number/README.md", "relative_path_en": "/leetcode/0200-0299/0268.Missing%20Number/README_EN.md", "title_cn": "\u4e22\u5931\u7684\u6570\u5b57", "title_en": "Missing Number", "question_title_slug": "missing-number", "content_en": "<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p>\n\n<p><b>Follow up:</b> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,0,1]\n<strong>Output:</strong> 2\n<b>Explanation</b><strong>:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> 2\n<b>Explanation</b><strong>:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1]\n<strong>Output:</strong> 8\n<b>Explanation</b><strong>:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> 1\n<b>Explanation</b><strong>:</strong> n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <code>[0, n]</code>\u00a0\u4e2d\u00a0<code>n</code>\u00a0\u4e2a\u6570\u7684\u6570\u7ec4 <code>nums</code> \uff0c\u627e\u51fa <code>[0, n]</code> \u8fd9\u4e2a\u8303\u56f4\u5185\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u90a3\u4e2a\u6570\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u80fd\u5426\u5b9e\u73b0\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898?</li>\n</ul>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [3,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<b>\u89e3\u91ca\uff1a</b>n = 3\uff0c\u56e0\u4e3a\u6709 3 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728\u8303\u56f4 [0,3] \u5185\u30022 \u662f\u4e22\u5931\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u51fa\u73b0\u5728 nums \u4e2d\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<b>\u89e3\u91ca\uff1a</b>n = 2\uff0c\u56e0\u4e3a\u6709 2 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728\u8303\u56f4 [0,2] \u5185\u30022 \u662f\u4e22\u5931\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u51fa\u73b0\u5728 nums \u4e2d\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [9,6,4,2,3,5,7,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>8\n<b>\u89e3\u91ca\uff1a</b>n = 9\uff0c\u56e0\u4e3a\u6709 9 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728\u8303\u56f4 [0,9] \u5185\u30028 \u662f\u4e22\u5931\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u51fa\u73b0\u5728 nums \u4e2d\u3002</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>nums = [0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<b>\u89e3\u91ca\uff1a</b>n = 1\uff0c\u56e0\u4e3a\u6709 1 \u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u6240\u6709\u7684\u6570\u5b57\u90fd\u5728\u8303\u56f4 [0,1] \u5185\u30021 \u662f\u4e22\u5931\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u51fa\u73b0\u5728 nums \u4e2d\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 <= n <= 10<sup>4</sup></code></li>\n\t<li><code>0 <= nums[i] <= n</code></li>\n\t<li><code>nums</code> \u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd <strong>\u72ec\u4e00\u65e0\u4e8c</strong></li>\n</ul>\n", "tags_en": ["Bit Manipulation", "Array", "Math"], "tags_cn": ["\u4f4d\u8fd0\u7b97", "\u6570\u7ec4", "\u6570\u5b66"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int missingNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint missingNumber(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MissingNumber(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef missing_number(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func missingNumber(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func missingNumber(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def missingNumber(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun missingNumber(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn missing_number(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function missingNumber($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function missingNumber(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0269", "frontend_question_id": "0269", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/alien-dictionary", "url_en": "https://leetcode.com/problems/alien-dictionary", "relative_path_cn": "/leetcode/0200-0299/0269.Alien%20Dictionary/README.md", "relative_path_en": "/leetcode/0200-0299/0269.Alien%20Dictionary/README_EN.md", "title_cn": "\u706b\u661f\u8bcd\u5178", "title_en": "Alien Dictionary", "question_title_slug": "alien-dictionary", "content_en": null, "content_cn": null, "tags_en": ["Graph", "Topological Sort"], "tags_cn": ["\u56fe", "\u62d3\u6251\u6392\u5e8f"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0270", "frontend_question_id": "0270", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/closest-binary-search-tree-value", "url_en": "https://leetcode.com/problems/closest-binary-search-tree-value", "relative_path_cn": "/leetcode/0200-0299/0270.Closest%20Binary%20Search%20Tree%20Value/README.md", "relative_path_en": "/leetcode/0200-0299/0270.Closest%20Binary%20Search%20Tree%20Value/README_EN.md", "title_cn": "\u6700\u63a5\u8fd1\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u503c", "title_en": "Closest Binary Search Tree Value", "question_title_slug": "closest-binary-search-tree-value", "content_en": null, "content_cn": null, "tags_en": ["Tree", "Binary Search"], "tags_cn": ["\u6811", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0271", "frontend_question_id": "0271", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/encode-and-decode-strings", "url_en": "https://leetcode.com/problems/encode-and-decode-strings", "relative_path_cn": "/leetcode/0200-0299/0271.Encode%20and%20Decode%20Strings/README.md", "relative_path_en": "/leetcode/0200-0299/0271.Encode%20and%20Decode%20Strings/README_EN.md", "title_cn": "\u5b57\u7b26\u4e32\u7684\u7f16\u7801\u4e0e\u89e3\u7801", "title_en": "Encode and Decode Strings", "question_title_slug": "encode-and-decode-strings", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0272", "frontend_question_id": "0272", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/closest-binary-search-tree-value-ii", "url_en": "https://leetcode.com/problems/closest-binary-search-tree-value-ii", "relative_path_cn": "/leetcode/0200-0299/0272.Closest%20Binary%20Search%20Tree%20Value%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0272.Closest%20Binary%20Search%20Tree%20Value%20II/README_EN.md", "title_cn": "\u6700\u63a5\u8fd1\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u503c II", "title_en": "Closest Binary Search Tree Value II", "question_title_slug": "closest-binary-search-tree-value-ii", "content_en": null, "content_cn": null, "tags_en": ["Stack", "Tree"], "tags_cn": ["\u6808", "\u6811"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0273", "frontend_question_id": "0273", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/integer-to-english-words", "url_en": "https://leetcode.com/problems/integer-to-english-words", "relative_path_cn": "/leetcode/0200-0299/0273.Integer%20to%20English%20Words/README.md", "relative_path_en": "/leetcode/0200-0299/0273.Integer%20to%20English%20Words/README_EN.md", "title_cn": "\u6574\u6570\u8f6c\u6362\u82f1\u6587\u8868\u793a", "title_en": "Integer to English Words", "question_title_slug": "integer-to-english-words", "content_en": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 123\n<strong>Output:</strong> \"One Hundred Twenty Three\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = 12345\n<strong>Output:</strong> \"Twelve Thousand Three Hundred Forty Five\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> num = 1234567\n<strong>Output:</strong> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> num = 1234567891\n<strong>Output:</strong> \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u5c06\u975e\u8d1f\u6574\u6570 <code>num</code> \u8f6c\u6362\u4e3a\u5176\u5bf9\u5e94\u7684\u82f1\u6587\u8868\u793a\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>num = 123\n<strong>\u8f93\u51fa\uff1a</strong>\"One Hundred Twenty Three\"\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>num = 12345\n<strong>\u8f93\u51fa\uff1a</strong>\"Twelve Thousand Three Hundred Forty Five\"\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>num = 1234567\n<strong>\u8f93\u51fa\uff1a</strong>\"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>num = 1234567891\n<strong>\u8f93\u51fa\uff1a</strong>\"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 <= num <= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Math", "String"], "tags_cn": ["\u6570\u5b66", "\u5b57\u7b26\u4e32"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string numberToWords(int num) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String numberToWords(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numberToWords(self, num: int) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * numberToWords(int num){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string NumberToWords(int num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} num\n * @return {string}\n */\nvar numberToWords = function(num) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} num\n# @return {String}\ndef number_to_words(num)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numberToWords(_ num: Int) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numberToWords(num int) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numberToWords(num: Int): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numberToWords(num: Int): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn number_to_words(num: i32) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function numberToWords($num) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numberToWords(num: number): string {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0274", "frontend_question_id": "0274", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/h-index", "url_en": "https://leetcode.com/problems/h-index", "relative_path_cn": "/leetcode/0200-0299/0274.H-Index/README.md", "relative_path_en": "/leetcode/0200-0299/0274.H-Index/README_EN.md", "title_cn": "H \u6307\u6570", "title_en": "H-Index", "question_title_slug": "h-index", "content_en": "<p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\r\n\r\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index <i>h</i> if <i>h</i> of his/her <i>N</i> papers have <b>at least</b> <i>h</i> citations each, and the other <i>N &minus; h</i> papers have <b>no more than</b> <i>h</i> citations each.&quot;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>citations = [3,0,6,1,5]</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>[3,0,6,1,5] </code>means the researcher has <code>5</code> papers in total and each of them had \r\n             received <code>3, 0, 6, 1, 5</code> citations respectively. \r\n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \r\n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\r\n\r\n<p><strong>Note:&nbsp;</strong>If there are several possible values for <em>h</em>, the maximum one is taken as the h-index.</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 <em>h\u00a0</em>\u6307\u6570\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\" target=\"_blank\">h \u6307\u6570\u7684\u5b9a\u4e49</a>\uff1ah \u4ee3\u8868\u201c\u9ad8\u5f15\u7528\u6b21\u6570\u201d\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\uff08\u5979\uff09\u7684 \uff08N \u7bc7\u8bba\u6587\u4e2d\uff09<strong>\u603b\u5171</strong>\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86<strong>\u81f3\u5c11</strong> h \u6b21\u3002\u4e14\u5176\u4f59\u7684\u00a0<em>N - h\u00a0</em>\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570\u00a0<strong>\u4e0d\u8d85\u8fc7 </strong><em>h </em>\u6b21\u3002</p>\n\n<p>\u4f8b\u5982\uff1a\u67d0\u4eba\u7684 h \u6307\u6570\u662f 20\uff0c\u8fd9\u8868\u793a\u4ed6\u5df2\u53d1\u8868\u7684\u8bba\u6587\u4e2d\uff0c\u6bcf\u7bc7\u88ab\u5f15\u7528\u4e86\u81f3\u5c11 20 \u6b21\u7684\u8bba\u6587\u603b\u5171\u6709 20 \u7bc7\u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong><code>citations = [3,0,6,1,5]</code>\n<strong>\u8f93\u51fa\uff1a</strong>3 \n<strong>\u89e3\u91ca\uff1a</strong>\u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 <code>5</code> \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 <code>3, 0, 6, 1, 5</code> \u6b21\u3002\n\u00a0    \u7531\u4e8e\u7814\u7a76\u8005\u6709 <code>3 </code>\u7bc7\u8bba\u6587\u6bcf\u7bc7 <strong>\u81f3\u5c11 </strong>\u88ab\u5f15\u7528\u4e86 <code>3</code> \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528 <strong>\u4e0d\u591a\u4e8e</strong> <code>3</code> \u6b21\uff0c\u6240\u4ee5\u5979\u7684 <em>h </em>\u6307\u6570\u662f <code>3</code>\u3002</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u5982\u679c <em>h </em>\u6709\u591a\u79cd\u53ef\u80fd\u7684\u503c\uff0c<em>h</em> \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002</p>\n", "tags_en": ["Sort", "Hash Table"], "tags_cn": ["\u6392\u5e8f", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int hIndex(int[] citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint hIndex(int* citations, int citationsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HIndex(int[] citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} citations\n# @return {Integer}\ndef h_index(citations)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hIndex(_ citations: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hIndex(citations []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hIndex(citations: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn h_index(citations: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $citations\n     * @return Integer\n     */\n    function hIndex($citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hIndex(citations: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0275", "frontend_question_id": "0275", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/h-index-ii", "url_en": "https://leetcode.com/problems/h-index-ii", "relative_path_cn": "/leetcode/0200-0299/0275.H-Index%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0275.H-Index%20II/README_EN.md", "title_cn": "H \u6307\u6570 II", "title_en": "H-Index II", "question_title_slug": "h-index-ii", "content_en": "<p>Given an array of citations <strong>sorted&nbsp;in ascending order </strong>(each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\r\n\r\n<p>According to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index&nbsp;<i>h</i>&nbsp;if&nbsp;<i>h</i>&nbsp;of his/her&nbsp;<i>N</i>&nbsp;papers have&nbsp;<b>at least</b>&nbsp;<i>h</i>&nbsp;citations each, and the other&nbsp;<i>N &minus; h</i>&nbsp;papers have&nbsp;<b>no more than</b>&nbsp;<i>h&nbsp;</i>citations each.&quot;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>citations = [0,1,3,5,6]</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>[0,1,3,5,6] </code>means the researcher has <code>5</code> papers in total and each of them had \r\n             received 0<code>, 1, 3, 5, 6</code> citations respectively. \r\n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \r\n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>If there are several possible values for&nbsp;<em>h</em>, the maximum one is taken as the h-index.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"/problems/h-index/description/\">H-Index</a>, where <code>citations</code> is now guaranteed to be sorted in ascending order.</li>\r\n\t<li>Could you solve it in logarithmic time complexity?</li>\r\n</ul>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\uff0c\u6570\u7ec4\u5df2\u7ecf\u6309\u7167&nbsp;<strong>\u5347\u5e8f\u6392\u5217&nbsp;</strong>\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 <em>h</em> \u6307\u6570\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\">h \u6307\u6570\u7684\u5b9a\u4e49</a>: &ldquo;h \u4ee3\u8868&ldquo;\u9ad8\u5f15\u7528\u6b21\u6570&rdquo;\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\uff08\u5979\uff09\u7684 \uff08N \u7bc7\u8bba\u6587\u4e2d\uff09<strong>\u603b\u5171</strong>\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86<strong>\u81f3\u5c11</strong> h \u6b21\u3002\uff08\u5176\u4f59\u7684&nbsp;<em>N - h&nbsp;</em>\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570<strong>\u4e0d\u591a\u4e8e </strong><em>h </em>\u6b21\u3002\uff09&quot;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>citations = [0,1,3,5,6]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 <code>5</code> \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 0<code>, 1, 3, 5, 6</code> \u6b21\u3002\n&nbsp;    \u7531\u4e8e\u7814\u7a76\u8005\u6709 <code>3 </code>\u7bc7\u8bba\u6587\u6bcf\u7bc7<strong>\u81f3\u5c11</strong>\u88ab\u5f15\u7528\u4e86 <code>3</code> \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528<strong>\u4e0d\u591a\u4e8e</strong> <code>3</code> \u6b21\uff0c\u6240\u4ee5\u5979\u7684<em> h </em>\u6307\u6570\u662f <code>3</code>\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5982\u679c <em>h </em>\u6709\u591a\u6709\u79cd\u53ef\u80fd\u7684\u503c \uff0c<em>h</em> \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u8fd9\u662f&nbsp;<a href=\"/problems/h-index/description/\">H \u6307\u6570</a>&nbsp;\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684&nbsp;<code>citations</code>&nbsp;\u6570\u7ec4\u662f\u4fdd\u8bc1\u6709\u5e8f\u7684\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230\u5bf9\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f</li>\n</ul>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int hIndex(int[] citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint hIndex(int* citations, int citationsSize){\n\n}\n\n", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int HIndex(int[] citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} citations\n# @return {Integer}\ndef h_index(citations)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func hIndex(_ citations: [Int]) -> Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func hIndex(citations []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun hIndex(citations: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn h_index(citations: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $citations\n     * @return Integer\n     */\n    function hIndex($citations) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function hIndex(citations: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0276", "frontend_question_id": "0276", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/paint-fence", "url_en": "https://leetcode.com/problems/paint-fence", "relative_path_cn": "/leetcode/0200-0299/0276.Paint%20Fence/README.md", "relative_path_en": "/leetcode/0200-0299/0276.Paint%20Fence/README_EN.md", "title_cn": "\u6805\u680f\u6d82\u8272", "title_en": "Paint Fence", "question_title_slug": "paint-fence", "content_en": null, "content_cn": null, "tags_en": ["Dynamic Programming"], "tags_cn": ["\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0277", "frontend_question_id": "0277", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/find-the-celebrity", "url_en": "https://leetcode.com/problems/find-the-celebrity", "relative_path_cn": "/leetcode/0200-0299/0277.Find%20the%20Celebrity/README.md", "relative_path_en": "/leetcode/0200-0299/0277.Find%20the%20Celebrity/README_EN.md", "title_cn": "\u641c\u5bfb\u540d\u4eba", "title_en": "Find the Celebrity", "question_title_slug": "find-the-celebrity", "content_en": null, "content_cn": null, "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0278", "frontend_question_id": "0278", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/first-bad-version", "url_en": "https://leetcode.com/problems/first-bad-version", "relative_path_cn": "/leetcode/0200-0299/0278.First%20Bad%20Version/README.md", "relative_path_en": "/leetcode/0200-0299/0278.First%20Bad%20Version/README_EN.md", "title_cn": "\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c", "title_en": "First Bad Version", "question_title_slug": "first-bad-version", "content_en": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u662f\u4ea7\u54c1\u7ecf\u7406\uff0c\u76ee\u524d\u6b63\u5728\u5e26\u9886\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\u65b0\u7684\u4ea7\u54c1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u6700\u65b0\u7248\u672c\u6ca1\u6709\u901a\u8fc7\u8d28\u91cf\u68c0\u6d4b\u3002\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u7248\u672c\u5f00\u53d1\u7684\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u7248\u672c\u4e4b\u540e\u7684\u6240\u6709\u7248\u672c\u90fd\u662f\u9519\u7684\u3002</p>\n\n<p>\u5047\u8bbe\u4f60\u6709 <code>n</code> \u4e2a\u7248\u672c <code>[1, 2, ..., n]</code>\uff0c\u4f60\u60f3\u627e\u51fa\u5bfc\u81f4\u4e4b\u540e\u6240\u6709\u7248\u672c\u51fa\u9519\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528&nbsp;<code>bool isBadVersion(version)</code>&nbsp;\u63a5\u53e3\u6765\u5224\u65ad\u7248\u672c\u53f7 <code>version</code> \u662f\u5426\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u51fa\u9519\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\u4f60\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c03\u7528 API \u7684\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a n = 5\uff0c\u5e76\u4e14 version = 4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\n\n<code>\u8c03\u7528 isBadVersion(3) -&gt; false\n\u8c03\u7528 isBadVersion(5)&nbsp;-&gt; true\n\u8c03\u7528 isBadVersion(4)&nbsp;-&gt; true\n\n\u6240\u4ee5\uff0c4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002&nbsp;</code></pre>\n", "tags_en": ["Binary Search"], "tags_cn": ["\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      boolean isBadVersion(int version); */\n\npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n\nclass Solution(object):\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return an integer\n# def isBadVersion(version):\n\nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nint firstBadVersion(int n) {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      bool IsBadVersion(int version); */\n\npublic class Solution : VersionControl {\n    public int FirstBadVersion(int n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        \n    };\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# The is_bad_version API is already defined for you.\n# @param {Integer} version\n# @return {boolean} whether the version is bad\n# def is_bad_version(version):\n\n# @param {Integer} n\n# @return {Integer}\ndef first_bad_version(n)\n    \nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * The knows API is defined in the parent class VersionControl.\n *     func isBadVersion(_ version: Int) -> Bool{}\n */\n\nclass Solution : VersionControl {\n    func firstBadVersion(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/** \n * Forward declaration of isBadVersion API.\n * @param   version   your guess about first bad version\n * @return \t \t      true if current version is bad \n *\t\t\t          false if current version is good\n * func isBadVersion(version int) bool;\n */\n\nfunc firstBadVersion(n int) int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      def isBadVersion(version: Int): Boolean = {} */\n\nclass Solution extends VersionControl {\n    def firstBadVersion(n: Int): Int = {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      def isBadVersion(version: Int): Boolean = {} */\n\nclass Solution: VersionControl() {\n    override fun firstBadVersion(n: Int) : Int {\n        \n\t}\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// The API isBadVersion is defined for you.\n// isBadVersion(versions:i32)-> bool;\n// to call it use self.isBadVersion(versions)\n\nimpl Solution {\n    pub fn first_bad_version(&self, n: i32) -> i32 {\n\t\t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/* The isBadVersion API is defined in the parent class VersionControl.\n      public function isBadVersion($version){} */\n\nclass Solution extends VersionControl {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function firstBadVersion($n) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * The knows API is defined in the parent class Relation.\n * isBadVersion(version: number): boolean {\n *     ...\n * };\n */\n\nvar solution = function(isBadVersion: any) {\n\n    return function(n: number): number {\n        \n    };\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0279", "frontend_question_id": "0279", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/perfect-squares", "url_en": "https://leetcode.com/problems/perfect-squares", "relative_path_cn": "/leetcode/0200-0299/0279.Perfect%20Squares/README.md", "relative_path_en": "/leetcode/0200-0299/0279.Perfect%20Squares/README_EN.md", "title_cn": "\u5b8c\u5168\u5e73\u65b9\u6570", "title_en": "Perfect Squares", "question_title_slug": "perfect-squares", "content_en": "<p>Given a positive integer <i>n</i>, find the least number of perfect square numbers (for example, <code>1, 4, 9, 16, ...</code>) which sum to <i>n</i>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <i>n</i> = <code>12</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>12 = 4 + 4 + 4.</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <i>n</i> = <code>13</code>\r\n<b>Output:</b> 2\r\n<strong>Explanation: </strong><code>13 = 4 + 9.</code></pre>", "content_cn": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982&nbsp;<code>1, 4, 9, 16, ...</code>\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e<em> n</em>\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>n</em> = <code>12</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca: </strong><code>12 = 4 + 4 + 4.</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>n</em> = <code>13</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong><code>13 = 4 + 9.</code></pre>\n", "tags_en": ["Breadth-first Search", "Math", "Dynamic Programming"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22", "\u6570\u5b66", "\u52a8\u6001\u89c4\u5212"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int numSquares(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int numSquares(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def numSquares(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def numSquares(self, n: int) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint numSquares(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int NumSquares(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef num_squares(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func numSquares(_ n: Int) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func numSquares(n int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def numSquares(n: Int): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun numSquares(n: Int): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn num_squares(n: i32) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numSquares($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function numSquares(n: number): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0280", "frontend_question_id": "0280", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/wiggle-sort", "url_en": "https://leetcode.com/problems/wiggle-sort", "relative_path_cn": "/leetcode/0200-0299/0280.Wiggle%20Sort/README.md", "relative_path_en": "/leetcode/0200-0299/0280.Wiggle%20Sort/README_EN.md", "title_cn": "\u6446\u52a8\u6392\u5e8f", "title_en": "Wiggle Sort", "question_title_slug": "wiggle-sort", "content_en": null, "content_cn": null, "tags_en": ["Sort", "Array"], "tags_cn": ["\u6392\u5e8f", "\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0281", "frontend_question_id": "0281", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/zigzag-iterator", "url_en": "https://leetcode.com/problems/zigzag-iterator", "relative_path_cn": "/leetcode/0200-0299/0281.Zigzag%20Iterator/README.md", "relative_path_en": "/leetcode/0200-0299/0281.Zigzag%20Iterator/README_EN.md", "title_cn": "\u952f\u9f7f\u8fed\u4ee3\u5668", "title_en": "Zigzag Iterator", "question_title_slug": "zigzag-iterator", "content_en": null, "content_cn": null, "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0282", "frontend_question_id": "0282", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/expression-add-operators", "url_en": "https://leetcode.com/problems/expression-add-operators", "relative_path_cn": "/leetcode/0200-0299/0282.Expression%20Add%20Operators/README.md", "relative_path_en": "/leetcode/0200-0299/0282.Expression%20Add%20Operators/README_EN.md", "title_cn": "\u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26", "title_en": "Expression Add Operators", "question_title_slug": "expression-add-operators", "content_en": "<p>Given a string that contains only digits <code>0-9</code> and a target value, return all possibilities to add <b>binary</b> operators (not unary) <code>+</code>, <code>-</code>, or <code>*</code> between the digits so they evaluate to the target value.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\r\n<b>Output: </b>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\r\n<b>Output: </b>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\r\n<b>Output: </b>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\r\n<b>Output: </b>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\r\n</pre>\r\n\r\n<p><b>Example 5:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\r\n<b>Output: </b>[]\r\n</pre>\r\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num.length &lt;= 10</code></li>\n\t<li><code>num</code> only contain&nbsp;digits.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code>&nbsp;\u7684\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u5b57\u4e4b\u95f4\u6dfb\u52a0<strong>\u4e8c\u5143</strong>\u8fd0\u7b97\u7b26\uff08\u4e0d\u662f\u4e00\u5143\uff09<code>+</code>\u3001<code>-</code>&nbsp;\u6216&nbsp;<code>*</code>&nbsp;\uff0c\u8fd4\u56de\u6240\u6709\u80fd\u591f\u5f97\u5230\u76ee\u6807\u503c\u7684\u8868\u8fbe\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\n<strong>\u8f93\u51fa: </strong>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\n<strong>\u8f93\u51fa: </strong>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\n<strong>\u8f93\u51fa: </strong>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\n<strong>\u8f93\u51fa: </strong>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\n<strong>\u8f93\u51fa: </strong>[]\n</pre>\n", "tags_en": ["Divide and Conquer"], "tags_cn": ["\u5206\u6cbb\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> addOperators(string num, int target) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> addOperators(String num, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** addOperators(char * num, int target, int* returnSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> AddOperators(string num, int target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} num\n * @param {number} target\n * @return {string[]}\n */\nvar addOperators = function(num, target) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} num\n# @param {Integer} target\n# @return {String[]}\ndef add_operators(num, target)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func addOperators(_ num: String, _ target: Int) -> [String] {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func addOperators(num string, target int) []string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def addOperators(num: String, target: Int): List[String] = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun addOperators(num: String, target: Int): List<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn add_operators(num: String, target: i32) -> Vec<String> {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @param Integer $target\n     * @return String[]\n     */\n    function addOperators($num, $target) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function addOperators(num: string, target: number): string[] {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0283", "frontend_question_id": "0283", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/move-zeroes", "url_en": "https://leetcode.com/problems/move-zeroes", "relative_path_cn": "/leetcode/0200-0299/0283.Move%20Zeroes/README.md", "relative_path_en": "/leetcode/0200-0299/0283.Move%20Zeroes/README_EN.md", "title_cn": "\u79fb\u52a8\u96f6", "title_en": "Move Zeroes", "question_title_slug": "move-zeroes", "content_en": "<p>Given an array <code>nums</code>, write a function to move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[0,1,0,3,12]</code>\r\n<b>Output:</b> <code>[1,3,12,0,0]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ol>\r\n\t<li>You must do this <b>in-place</b> without making a copy of the array.</li>\r\n\t<li>Minimize the total number of operations.</li>\r\n</ol>", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 <code>0</code> \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[0,1,0,3,12]</code>\n<strong>\u8f93\u51fa:</strong> <code>[1,3,12,0,0]</code></pre>\n\n<p><strong>\u8bf4\u660e</strong>:</p>\n\n<ol>\n\t<li>\u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002</li>\n\t<li>\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</li>\n</ol>\n", "tags_en": ["Array", "Two Pointers"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public void moveZeroes(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nvoid moveZeroes(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public void MoveZeroes(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef move_zeroes(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func moveZeroes(_ nums: inout [Int]) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func moveZeroes(nums []int)  {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def moveZeroes(nums: Array[Int]): Unit = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun moveZeroes(nums: IntArray): Unit {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function moveZeroes(&$nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction moveZeroes(nums: number[]): void {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0284", "frontend_question_id": "0284", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/peeking-iterator", "url_en": "https://leetcode.com/problems/peeking-iterator", "relative_path_cn": "/leetcode/0200-0299/0284.Peeking%20Iterator/README.md", "relative_path_en": "/leetcode/0200-0299/0284.Peeking%20Iterator/README_EN.md", "title_cn": "\u9876\u7aef\u8fed\u4ee3\u5668", "title_en": "Peeking Iterator", "question_title_slug": "peeking-iterator", "content_en": "<p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nAssume that the iterator is initialized to the beginning of the list: <strong><code>[1,2,3]</code></strong>.\r\n\r\nCall <strong><code>next()</code></strong> gets you <strong>1</strong>, the first element in the list.\r\nNow you call <strong><code>peek()</code></strong> and it returns <strong>2</strong>, the next element. Calling <strong><code>next()</code></strong> after that <i><b>still</b></i> return <strong>2</strong>. \r\nYou call <strong><code>next()</code></strong> the final time and it returns <strong>3</strong>, the last element. \r\nCalling <strong><code>hasNext()</code></strong> after that should return <strong>false</strong>.\r\n</pre>\r\n\r\n<p><b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p>\r\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a&nbsp;<code>next()</code>&nbsp;\u548c&nbsp;<code>hasNext()</code>\u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301&nbsp;<code>peek()</code>&nbsp;\u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531&nbsp;<code>next()</code>&nbsp;\u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20&nbsp;<code>peek()</code>&nbsp;\u51fa\u6765\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868&nbsp;<strong><code>[1,2,3]</code></strong>\u3002\n\n\u8c03\u7528&nbsp;<strong><code>next() </code></strong>\u8fd4\u56de <strong>1</strong>\uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\u73b0\u5728\u8c03\u7528&nbsp;<strong><code>peek()</code></strong>&nbsp;\u8fd4\u56de <strong>2</strong>\uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528&nbsp;<strong><code>next() </code></strong>\u4ecd\u7136\u8fd4\u56de <strong>2</strong>\u3002\n\u6700\u540e\u4e00\u6b21\u8c03\u7528&nbsp;<strong><code>next()</code></strong>&nbsp;\u8fd4\u56de <strong>3</strong>\uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528&nbsp;<strong><code>hasNext()</code></strong>&nbsp;\u5e94\u8be5\u8fd4\u56de <strong>false</strong>\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f</p>\n", "tags_en": ["Design"], "tags_cn": ["\u8bbe\u8ba1"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/*\n * Below is the interface for Iterator, which is already defined for you.\n * **DO NOT** modify the interface for Iterator.\n *\n *  class Iterator {\n *\t\tstruct Data;\n * \t\tData* data;\n *\t\tIterator(const vector<int>& nums);\n * \t\tIterator(const Iterator& iter);\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint next();\n *\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool hasNext() const;\n *\t};\n */\n\nclass PeekingIterator : public Iterator {\npublic:\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\n\t    // Initialize any member here.\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\n\t    // You should only use the Iterator interface methods.\n\t    \n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tint peek() {\n        \n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\tint next() {\n\t    \n\t}\n\t\n\tbool hasNext() const {\n\t    \n\t}\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n\tpublic PeekingIterator(Iterator<Integer> iterator) {\n\t    // initialize any member here.\n\t    \n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tpublic Integer peek() {\n        \n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\t@Override\n\tpublic Integer next() {\n\t    \n\t}\n\t\n\t@Override\n\tpublic boolean hasNext() {\n\t    \n\t}\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator(object):\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator(object):\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/*\n *\tstruct Iterator {\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool (*hasNext)();\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint (*next)();\n *\t};\n */\n\nstruct PeekingIterator {\n    \n};\n\nstruct PeekingIterator* Constructor(struct Iterator* iter) {\n    struct PeekingIterator* piter = malloc(sizeof(struct PeekingIterator));\n    piter->iterator = iter;\n    piter->hasPeeked = false;\n    return piter;\n}\n\nint peek(struct PeekingIterator* obj) {\n    \n}\n\nint next(struct PeekingIterator* obj) {\n    \n}\n\nbool hasNext(struct PeekingIterator* obj) {\n    \n}\n\n/**\n * Your PeekingIterator struct will be instantiated and called as such:\n * PeekingIterator* obj = peekingIteratorCreate(arr, arrSize);\n * int param_1 = peek(obj);\n * int param_2 = next(obj);\n * bool param_3 = hasNext(obj);\n * peekingIteratorFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "// C# IEnumerator interface reference:\n// https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=netframework-4.8\n\nclass PeekingIterator {\n    // iterators refers to the first element of the array.\n    public PeekingIterator(IEnumerator<int> iterator) {\n        // initialize any member here.\n    }\n    \n    // Returns the next element in the iteration without advancing the iterator.\n    public int Peek() {\n        \n    }\n    \n    // Returns the next element in the iteration and advances the iterator.\n    public int Next() {\n        \n    }\n    \n    // Returns false if the iterator is refering to the end of the array of true otherwise.\n    public bool HasNext() {\n\t\t\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * // This is the Iterator's API interface.\n * // You should not implement it, or speculate about its implementation.\n * function Iterator() {\n *    @ return {number}\n *    this.next = function() { // return the next number of the iterator\n *       ...\n *    }; \n *\n *    @return {boolean}\n *    this.hasNext = function() { // return true if it still has numbers\n *       ...\n *    };\n * };\n */\n\n/**\n * @param {Iterator} iterator\n */\nvar PeekingIterator = function(iterator) {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.peek = function() {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nPeekingIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(arr)\n * var param_1 = obj.peek()\n * var param_2 = obj.next()\n * var param_3 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator\n# \tdef initialize(v)\n#   \n#   end\n#\n#   def hasNext()\n#\t\tReturns true if the iteration has more elements.\n#   end\n#\n#   def next()\n#   \tReturns the next element in the iteration.\n#   end\n# end\n\nclass PeekingIterator\n    # @param {Iterator} iter\n    def initialize(iter)\n    \t\n    end\n    \n    # Returns true if the iteration has more elements.\n    # @return {boolean}\n    def hasNext()\n    \t\n    end\n    \n    # Returns the next element in the iteration.\n    # @return {integer}\n    def next()\n    \t\n    end\n    \n    # Returns the next element in the iteration without advancing the iterator.\n    # @return {integer}\n    def peek()\n    \t\n    end\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "// Swift IndexingIterator refernence:\n// https://developer.apple.com/documentation/swift/indexingiterator\n\nclass PeekingIterator {\n    init(_ arr: IndexingIterator<Array<Int>>) {\n        \n    }\n    \n    func next() -> Int {\n        \n    }\n    \n    func peek() -> Int {\n        \n    }\n    \n    func hasNext() -> Bool {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * let obj = PeekingIterator(arr)\n * let ret_1: Int = obj.next()\n * let ret_2: Int = obj.peek()\n * let ret_3: Bool = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/*   Below is the interface for Iterator, which is already defined for you.\n *\n *   type Iterator struct {\n *       \n *   }\n *\n *   func (this *Iterator) hasNext() bool {\n *\t\t// Returns true if the iteration has more elements.\n *   }\n *\n *   func (this *Iterator) next() int {\n *\t\t// Returns the next element in the iteration.\n *   }\n */\n\ntype PeekingIterator struct {\n    \n}\n\nfunc Constructor(iter *Iterator) *PeekingIterator {\n    \n}\n\nfunc (this *PeekingIterator) hasNext() bool {\n    \n}\n\nfunc (this *PeekingIterator) next() int {\n    \n}\n\nfunc (this *PeekingIterator) peek() int {\n    \n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "// Scala Iterator reference:\n// https://www.scala-lang.org/api/2.12.2/scala/collection/Iterator.html\n\nclass PeekingIterator(private val iterator: Iterator[Integer]) extends Iterator[Integer] {\n    def peek(): Int = {\n        \n    }\n    \n    override def next(): Int = {\n        \n    }\n    \n    override def hasNext(): Boolean = {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(arr)\n * var param_1 = obj.next()\n * var param_2 = obj.peek()\n * var param_3 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "// Kotlin Iterator reference:\n// https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterator/\n\nclass PeekingIterator(iterator:Iterator<Int>):Iterator<Int> {\n    fun peek(): Int {\n    \t\n    }\n    \n    override fun next(): Int {\n        \n    }\n    \n    override fun hasNext(): Boolean {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = PeekingIterator(arr)\n * var param_1 = obj.next()\n * var param_2 = obj.peek()\n * var param_3 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "// PHP ArrayIterator reference:\n// https://www.php.net/arrayiterator\n\nclass PeekingIterator {\n    /**\n     * @param ArrayIterator $arr\n     */\n    function __construct($arr) {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function next() {\n        \n    }\n    \n    /**\n     * @return Integer\n     */\n    function peek() {\n        \n    }\n    \n    /**\n     * @return Boolean\n     */\n    function hasNext() {\n        \n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * $obj = PeekingIterator($arr);\n * $ret_1 = $obj->next();\n * $ret_2 = $obj->peek();\n * $ret_3 = $obj->hasNext();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * // This is the Iterator's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Iterator {\n *      hasNext(): boolean {}\n *\n *      next(): number {}\n * }\n */\n\nclass PeekingIterator {\n    constructor(iterator: Iterator) {\n\n    }\n\n    peek(): number {\n\n    }\n\n    next(): number {\n\n    }\n\n    hasNext(): boolean {\n\n    }\n}\n\n/**\n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(iterator)\n * var param_1 = obj.peek()\n * var param_2 = obj.next()\n * var param_3 = obj.hasNext()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0285", "frontend_question_id": "0285", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/inorder-successor-in-bst", "url_en": "https://leetcode.com/problems/inorder-successor-in-bst", "relative_path_cn": "/leetcode/0200-0299/0285.Inorder%20Successor%20in%20BST/README.md", "relative_path_en": "/leetcode/0200-0299/0285.Inorder%20Successor%20in%20BST/README_EN.md", "title_cn": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u987a\u5e8f\u540e\u7ee7", "title_en": "Inorder Successor in BST", "question_title_slug": "inorder-successor-in-bst", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0286", "frontend_question_id": "0286", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/walls-and-gates", "url_en": "https://leetcode.com/problems/walls-and-gates", "relative_path_cn": "/leetcode/0200-0299/0286.Walls%20and%20Gates/README.md", "relative_path_en": "/leetcode/0200-0299/0286.Walls%20and%20Gates/README_EN.md", "title_cn": "\u5899\u4e0e\u95e8", "title_en": "Walls and Gates", "question_title_slug": "walls-and-gates", "content_en": null, "content_cn": null, "tags_en": ["Breadth-first Search"], "tags_cn": ["\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0287", "frontend_question_id": "0287", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-the-duplicate-number", "url_en": "https://leetcode.com/problems/find-the-duplicate-number", "relative_path_cn": "/leetcode/0200-0299/0287.Find%20the%20Duplicate%20Number/README.md", "relative_path_en": "/leetcode/0200-0299/0287.Find%20the%20Duplicate%20Number/README_EN.md", "title_cn": "\u5bfb\u627e\u91cd\u590d\u6570", "title_en": "Find the Duplicate Number", "question_title_slug": "find-the-duplicate-number", "content_en": "<p>Given an array of integers <code>nums</code> containing&nbsp;<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p>\n\n<p>There is only <strong>one duplicate number</strong> in <code>nums</code>, return <em>this&nbsp;duplicate number</em>.</p>\n\n<p><b>Follow-ups:</b></p>\n\n<ol>\n\t<li>How can we prove that at least one duplicate number must exist in <code>nums</code>?&nbsp;</li>\n\t<li>Can you solve the problem <strong>without</strong>&nbsp;modifying&nbsp;the array <code>nums</code>?</li>\n\t<li>Can you solve the problem using&nbsp;only constant, <code>O(1)</code> extra space?</li>\n\t<li>Can you solve the problem with runtime complexity less than <code>O(n<sup>2</sup>)</code>?</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,4,2,2]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,1,3,4,2]\n<strong>Output:</strong> 3\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>nums.length == n + 1</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>n</em> + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<em>nums</em>\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 <em>n&nbsp;</em>\u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c <em>n</em>\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,3,4,2,2]</code>\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,1,3,4,2]\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><strong>\u4e0d\u80fd</strong>\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002</li>\n\t<li>\u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 <em>O</em>(1) \u7684\u7a7a\u95f4\u3002</li>\n\t<li>\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e <em>O</em>(<em>n</em><sup>2</sup>) \u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n", "tags_en": ["Array", "Two Pointers", "Binary Search"], "tags_cn": ["\u6570\u7ec4", "\u53cc\u6307\u9488", "\u4e8c\u5206\u67e5\u627e"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int findDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nint findDuplicate(int* nums, int numsSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int FindDuplicate(int[] nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDuplicate = function(nums) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_duplicate(nums)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func findDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func findDuplicate(nums []int) int {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def findDuplicate(nums: Array[Int]): Int = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun findDuplicate(nums: IntArray): Int {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn find_duplicate(nums: Vec<i32>) -> i32 {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findDuplicate($nums) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function findDuplicate(nums: number[]): number {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0288", "frontend_question_id": "0288", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/unique-word-abbreviation", "url_en": "https://leetcode.com/problems/unique-word-abbreviation", "relative_path_cn": "/leetcode/0200-0299/0288.Unique%20Word%20Abbreviation/README.md", "relative_path_en": "/leetcode/0200-0299/0288.Unique%20Word%20Abbreviation/README_EN.md", "title_cn": "\u5355\u8bcd\u7684\u552f\u4e00\u7f29\u5199", "title_en": "Unique Word Abbreviation", "question_title_slug": "unique-word-abbreviation", "content_en": null, "content_cn": null, "tags_en": ["Design", "Hash Table"], "tags_cn": ["\u8bbe\u8ba1", "\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0289", "frontend_question_id": "0289", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/game-of-life", "url_en": "https://leetcode.com/problems/game-of-life", "relative_path_cn": "/leetcode/0200-0299/0289.Game%20of%20Life/README.md", "relative_path_en": "/leetcode/0200-0299/0289.Game%20of%20Life/README_EN.md", "title_cn": "\u751f\u547d\u6e38\u620f", "title_en": "Game of Life", "question_title_slug": "game-of-life", "content_en": "<p>According to the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia&#39;s article</a>: &quot;The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>\r\n\r\n<p>Given a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\r\n\r\n<ol>\r\n\t<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\r\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\r\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n</ol>\r\n\r\n<p>Write a function to compute the next state (after one update) of the board given its current state.&nbsp;<span>The next state is created by applying the above rules simultaneously to every cell in the current state, where&nbsp;births and deaths occur simultaneously.</span></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[\r\n&nbsp; [0,1,0],\r\n&nbsp; [0,0,1],\r\n&nbsp; [1,1,1],\r\n&nbsp; [0,0,0]\r\n]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-1\">[\r\n&nbsp; [0,0,0],\r\n&nbsp; [1,0,1],\r\n&nbsp; [0,1,1],\r\n&nbsp; [0,1,0]\r\n]</span>\r\n</pre>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<ol>\r\n\t<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>\r\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>\r\n</ol>\r\n", "content_cn": "<p>\u6839\u636e&nbsp;<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>&nbsp;\uff0c\u751f\u547d\u6e38\u620f\uff0c\u7b80\u79f0\u4e3a\u751f\u547d\uff0c\u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0&middot;\u4f55\u987f&middot;\u5eb7\u5a01\u5728 1970 \u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m &times; n \u4e2a\u683c\u5b50\u7684\u9762\u677f\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u90fd\u5177\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\uff1a1 \u5373\u4e3a\u6d3b\u7ec6\u80de\uff08live\uff09\uff0c\u6216 0 \u5373\u4e3a\u6b7b\u7ec6\u80de\uff08dead\uff09\u3002\u6bcf\u4e2a\u7ec6\u80de\u4e0e\u5176\u516b\u4e2a\u76f8\u90bb\u4f4d\u7f6e\uff08\u6c34\u5e73\uff0c\u5782\u76f4\uff0c\u5bf9\u89d2\u7ebf\uff09\u7684\u7ec6\u80de\u90fd\u9075\u5faa\u4ee5\u4e0b\u56db\u6761\u751f\u5b58\u5b9a\u5f8b\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u7684\u6d3b\u7ec6\u80de\u6570\u5c11\u4e8e\u4e24\u4e2a\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b</li>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6216\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u4ecd\u7136\u5b58\u6d3b\uff1b</li>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u8d85\u8fc7\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b</li>\n\t<li>\u5982\u679c\u6b7b\u7ec6\u80de\u5468\u56f4\u6b63\u597d\u6709\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6b7b\u7ec6\u80de\u590d\u6d3b\uff1b</li>\n</ol>\n\n<p>\u6839\u636e\u5f53\u524d\u72b6\u6001\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u9762\u677f\u4e0a\u6240\u6709\u7ec6\u80de\u7684\u4e0b\u4e00\u4e2a\uff08\u4e00\u6b21\u66f4\u65b0\u540e\u7684\uff09\u72b6\u6001\u3002\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u901a\u8fc7\u5c06\u4e0a\u8ff0\u89c4\u5219\u540c\u65f6\u5e94\u7528\u4e8e\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6bcf\u4e2a\u7ec6\u80de\u6240\u5f62\u6210\u7684\uff0c\u5176\u4e2d\u7ec6\u80de\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u662f\u540c\u65f6\u53d1\u751f\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>\u8f93\u51fa\uff1a\n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u89e3\u51b3\u672c\u9898\u5417\uff1f\u8bf7\u6ce8\u610f\uff0c\u9762\u677f\u4e0a\u6240\u6709\u683c\u5b50\u9700\u8981\u540c\u65f6\u88ab\u66f4\u65b0\uff1a\u4f60\u4e0d\u80fd\u5148\u66f4\u65b0\u67d0\u4e9b\u683c\u5b50\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u7684\u66f4\u65b0\u540e\u7684\u503c\u518d\u66f4\u65b0\u5176\u4ed6\u683c\u5b50\u3002</li>\n\t<li>\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u8868\u793a\u9762\u677f\u3002\u539f\u5219\u4e0a\uff0c\u9762\u677f\u662f\u65e0\u9650\u7684\uff0c\u4f46\u5f53\u6d3b\u7ec6\u80de\u4fb5\u5360\u4e86\u9762\u677f\u8fb9\u754c\u65f6\u4f1a\u9020\u6210\u95ee\u9898\u3002\u4f60\u5c06\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff1f</li>\n</ul>\n", "tags_en": ["Array"], "tags_cn": ["\u6570\u7ec4"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    void gameOfLife(vector<vector<int>>& board) {\n        \n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public void gameOfLife(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def gameOfLife(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nvoid gameOfLife(int** board, int boardSize, int* boardColSize){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public void GameOfLife(int[][] board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar gameOfLife = function(board) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef game_of_life(board)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func gameOfLife(_ board: inout [[Int]]) {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func gameOfLife(board [][]int)  {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def gameOfLife(board: Array[Array[Int]]): Unit = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun gameOfLife(board: Array<IntArray>): Unit {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn game_of_life(board: &mut Vec<Vec<i32>>) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return NULL\n     */\n    function gameOfLife(&$board) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction gameOfLife(board: number[][]): void {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0290", "frontend_question_id": "0290", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/word-pattern", "url_en": "https://leetcode.com/problems/word-pattern", "relative_path_cn": "/leetcode/0200-0299/0290.Word%20Pattern/README.md", "relative_path_en": "/leetcode/0200-0299/0290.Word%20Pattern/README_EN.md", "title_cn": "\u5355\u8bcd\u89c4\u5f8b", "title_en": "Word Pattern", "question_title_slug": "word-pattern", "content_en": "<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog dog dog dog&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lower-case English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n", "content_cn": "<p>\u7ed9\u5b9a\u4e00\u79cd\u89c4\u5f8b <code>pattern</code>&nbsp;\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>str</code>&nbsp;\uff0c\u5224\u65ad <code>str</code> \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u89c4\u5f8b\u3002</p>\n\n<p>\u8fd9\u91cc\u7684&nbsp;<strong>\u9075\u5faa&nbsp;</strong>\u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c&nbsp;<code>pattern</code>&nbsp;\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32&nbsp;<code>str</code><strong>&nbsp;</strong>\u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u89c4\u5f8b\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>pattern</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c&nbsp;<code>str</code>&nbsp;\u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002&nbsp; &nbsp;&nbsp;</p>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean wordPattern(String pattern, String s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool wordPattern(char * pattern, char * s){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool WordPattern(string pattern, string s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func wordPattern(pattern string, s string) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function wordPattern(pattern: string, s: string): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0291", "frontend_question_id": "0291", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/word-pattern-ii", "url_en": "https://leetcode.com/problems/word-pattern-ii", "relative_path_cn": "/leetcode/0200-0299/0291.Word%20Pattern%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0291.Word%20Pattern%20II/README_EN.md", "title_cn": "\u5355\u8bcd\u89c4\u5f8b II", "title_en": "Word Pattern II", "question_title_slug": "word-pattern-ii", "content_en": null, "content_cn": null, "tags_en": ["Backtracking"], "tags_cn": ["\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0292", "frontend_question_id": "0292", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/nim-game", "url_en": "https://leetcode.com/problems/nim-game", "relative_path_cn": "/leetcode/0200-0299/0292.Nim%20Game/README.md", "relative_path_en": "/leetcode/0200-0299/0292.Nim%20Game/README_EN.md", "title_cn": "Nim \u6e38\u620f", "title_en": "Nim Game", "question_title_slug": "nim-game", "content_en": "<p>You are playing the following Nim Game with your friend:</p>\n\n<ul>\n\t<li>Initially, there is a heap of stones on the table.</li>\n\t<li>You and your friend will alternate taking turns, and <strong>you go first</strong>.</li>\n\t<li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li>\n\t<li>The one who removes the last stone is the winner.</li>\n</ul>\n\n<p>Given <code>n</code>, the number of stones in the heap, return <code>true</code><em> if you can win the game assuming both you and your friend play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "content_cn": "<p>\u4f60\u548c\u4f60\u7684\u670b\u53cb\uff0c\u4e24\u4e2a\u4eba\u4e00\u8d77\u73a9\u00a0<a href=\"https://baike.baidu.com/item/Nim\u6e38\u620f/6737105\" target=\"_blank\">Nim \u6e38\u620f</a>\uff1a</p>\n\n<ul>\n\t<li>\u684c\u5b50\u4e0a\u6709\u4e00\u5806\u77f3\u5934\u3002</li>\n\t<li>\u4f60\u4eec\u8f6e\u6d41\u8fdb\u884c\u81ea\u5df1\u7684\u56de\u5408\uff0c\u4f60\u4f5c\u4e3a\u5148\u624b\u3002</li>\n\t<li>\u6bcf\u4e00\u56de\u5408\uff0c\u8f6e\u5230\u7684\u4eba\u62ff\u6389\u00a01 - 3 \u5757\u77f3\u5934\u3002</li>\n\t<li>\u62ff\u6389\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u4eba\u5c31\u662f\u83b7\u80dc\u8005\u3002</li>\n</ul>\n\n<p>\u5047\u8bbe\u4f60\u4eec\u6bcf\u4e00\u6b65\u90fd\u662f\u6700\u4f18\u89e3\u3002\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6765\u5224\u65ad\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u7ed9\u5b9a\u77f3\u5934\u6570\u91cf\u4e3a <code>n</code> \u7684\u60c5\u51b5\u4e0b\u8d62\u5f97\u6e38\u620f\u3002\u5982\u679c\u53ef\u4ee5\u8d62\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>\u00a0</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong><code>n = 4</code>\n<strong>\u8f93\u51fa\uff1a</strong>false \n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u679c\u5806\u4e2d\u6709 4 \u5757\u77f3\u5934\uff0c\u90a3\u4e48\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u8d62\u5f97\u6bd4\u8d5b\uff1b\n\u00a0    \u56e0\u4e3a\u65e0\u8bba\u4f60\u62ff\u8d70 1 \u5757\u30012 \u5757 \u8fd8\u662f 3 \u5757\u77f3\u5934\uff0c\u6700\u540e\u4e00\u5757\u77f3\u5934\u603b\u662f\u4f1a\u88ab\u4f60\u7684\u670b\u53cb\u62ff\u8d70\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 1\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>n = 2\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>\u00a0</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "tags_en": ["Brainteaser", "Minimax"], "tags_cn": ["\u8111\u7b4b\u6025\u8f6c\u5f2f", "\u6781\u5c0f\u5316\u6781\u5927"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canWinNim(int n) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public boolean canWinNim(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def canWinNim(self, n: int) -> bool:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nbool canWinNim(int n){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public bool CanWinNim(int n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar canWinNim = function(n) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Boolean}\ndef can_win_nim(n)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func canWinNim(_ n: Int) -> Bool {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func canWinNim(n int) bool {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def canWinNim(n: Int): Boolean = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun canWinNim(n: Int): Boolean {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn can_win_nim(n: i32) -> bool {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canWinNim($n) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function canWinNim(n: number): boolean {\n\n};", "__typename": "CodeSnippetNode"}]}, {"question_id": "0293", "frontend_question_id": "0293", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/flip-game", "url_en": "https://leetcode.com/problems/flip-game", "relative_path_cn": "/leetcode/0200-0299/0293.Flip%20Game/README.md", "relative_path_en": "/leetcode/0200-0299/0293.Flip%20Game/README_EN.md", "title_cn": "\u7ffb\u8f6c\u6e38\u620f", "title_en": "Flip Game", "question_title_slug": "flip-game", "content_en": null, "content_cn": null, "tags_en": ["String"], "tags_cn": ["\u5b57\u7b26\u4e32"], "difficulty_en": "Easy", "difficulty_cn": "\u7b80\u5355", "code_snippets": null}, {"question_id": "0294", "frontend_question_id": "0294", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/flip-game-ii", "url_en": "https://leetcode.com/problems/flip-game-ii", "relative_path_cn": "/leetcode/0200-0299/0294.Flip%20Game%20II/README.md", "relative_path_en": "/leetcode/0200-0299/0294.Flip%20Game%20II/README_EN.md", "title_cn": "\u7ffb\u8f6c\u6e38\u620f II", "title_en": "Flip Game II", "question_title_slug": "flip-game-ii", "content_en": null, "content_cn": null, "tags_en": ["Minimax", "Backtracking"], "tags_cn": ["\u6781\u5c0f\u5316\u6781\u5927", "\u56de\u6eaf\u7b97\u6cd5"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0295", "frontend_question_id": "0295", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/find-median-from-data-stream", "url_en": "https://leetcode.com/problems/find-median-from-data-stream", "relative_path_cn": "/leetcode/0200-0299/0295.Find%20Median%20from%20Data%20Stream/README.md", "relative_path_en": "/leetcode/0200-0299/0295.Find%20Median%20from%20Data%20Stream/README_EN.md", "title_cn": "\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570", "title_en": "Find Median from Data Stream", "question_title_slug": "find-median-from-data-stream", "content_en": "<p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\r\nFor example,\r\n\r\n<p><code>[2,3,4]</code>, the median is <code>3</code></p>\r\n\r\n<p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code></p>\r\n\r\n<p>Design a data structure that supports the following two operations:</p>\r\n\r\n<ul>\r\n\t<li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li>\r\n\t<li>double findMedian() - Return the median of all elements so far.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\naddNum(1)\r\naddNum(2)\r\nfindMedian() -&gt; 1.5\r\naddNum(3) \r\nfindMedian() -&gt; 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ol>\r\n\t<li>If all integer numbers from the stream are between 0&nbsp;and 100, how would you optimize it?</li>\r\n\t<li>If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?</li>\r\n</ol>\r\n", "content_cn": "<p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<p>[2,3,4]&nbsp;\u7684\u4e2d\u4f4d\u6570\u662f 3</p>\n\n<p>[2,3] \u7684\u4e2d\u4f4d\u6570\u662f (2 + 3) / 2 = 2.5</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p>\n\n<ul>\n\t<li>void addNum(int num) - \u4ece\u6570\u636e\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li>\n\t<li>double findMedian() - \u8fd4\u56de\u76ee\u524d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d\u6240\u6709\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d 99% \u7684\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n</ol>\n", "tags_en": ["Heap", "Design"], "tags_cn": ["\u5806", "\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    MedianFinder() {\n\n    }\n    \n    void addNum(int num) {\n\n    }\n    \n    double findMedian() {\n\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class MedianFinder {\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n\n    }\n    \n    public void addNum(int num) {\n\n    }\n    \n    public double findMedian() {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class MedianFinder(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def findMedian(self):\n        \"\"\"\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class MedianFinder:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} MedianFinder;\n\n/** initialize your data structure here. */\n\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n  \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n  \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n \n * double param_2 = medianFinderFindMedian(obj);\n \n * medianFinderFree(obj);\n*/", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class MedianFinder {\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n\n    }\n    \n    public void AddNum(int num) {\n\n    }\n    \n    public double FindMedian() {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.AddNum(num);\n * double param_2 = obj.FindMedian();\n */", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class MedianFinder\n\n=begin\n    initialize your data structure here.\n=end\n    def initialize()\n\n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_num(num)\n\n    end\n\n\n=begin\n    :rtype: Float\n=end\n    def find_median()\n\n    end\n\n\nend\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder.new()\n# obj.add_num(num)\n# param_2 = obj.find_median()", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "\r\nclass MedianFinder {\r\n\r\n    /** initialize your data structure here. */\r\n    init() {\r\n        \r\n    }\r\n    \r\n    func addNum(_ num: Int) {\r\n        \r\n    }\r\n    \r\n    func findMedian() -> Double {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * let obj = MedianFinder()\r\n * obj.addNum(num)\r\n * let ret_2: Double = obj.findMedian()\r\n */", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "type MedianFinder struct {\n\n}\n\n\n/** initialize your data structure here. */\nfunc Constructor() MedianFinder {\n\n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n\n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n\n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "class MedianFinder() {\n\n    /** initialize your data structure here. */\n\n\n    def addNum(num: Int) {\n\n    }\n\n    def findMedian(): Double = {\n\n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class MedianFinder() {\n\n    /** initialize your data structure here. */\n\n\n    fun addNum(num: Int) {\n\n    }\n\n    fun findMedian(): Double {\n\n    }\n\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "struct MedianFinder {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MedianFinder {\n\n    /** initialize your data structure here. */\n    fn new() -> Self {\n        \n    }\n    \n    fn add_num(&self, num: i32) {\n        \n    }\n    \n    fn find_median(&self) -> f64 {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder::new();\n * obj.add_num(num);\n * let ret_2: f64 = obj.find_median();\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class MedianFinder {\n    /**\n     * initialize your data structure here.\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addNum($num) {\n        \n    }\n  \n    /**\n     * @return Float\n     */\n    function findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * $obj = MedianFinder();\n * $obj->addNum($num);\n * $ret_2 = $obj->findMedian();\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class MedianFinder {\n    constructor() {\n\n    }\n\n    addNum(num: number): void {\n\n    }\n\n    findMedian(): number {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0296", "frontend_question_id": "0296", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/best-meeting-point", "url_en": "https://leetcode.com/problems/best-meeting-point", "relative_path_cn": "/leetcode/0200-0299/0296.Best%20Meeting%20Point/README.md", "relative_path_en": "/leetcode/0200-0299/0296.Best%20Meeting%20Point/README_EN.md", "title_cn": "\u6700\u4f73\u7684\u78b0\u5934\u5730\u70b9", "title_en": "Best Meeting Point", "question_title_slug": "best-meeting-point", "content_en": null, "content_cn": null, "tags_en": ["Sort", "Math"], "tags_cn": ["\u6392\u5e8f", "\u6570\u5b66"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": null}, {"question_id": "0297", "frontend_question_id": "0297", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree", "url_en": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree", "relative_path_cn": "/leetcode/0200-0299/0297.Serialize%20and%20Deserialize%20Binary%20Tree/README.md", "relative_path_en": "/leetcode/0200-0299/0297.Serialize%20and%20Deserialize%20Binary%20Tree/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316", "title_en": "Serialize and Deserialize Binary Tree", "question_title_slug": "serialize-and-deserialize-binary-tree", "content_en": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n", "content_cn": "<p>\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002</p>\n\n<p>\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002</p>\n\n<p><strong>\u793a\u4f8b:&nbsp;</strong></p>\n\n<pre>\u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n\u5e8f\u5217\u5316\u4e3a <code>&quot;[1,2,3,null,null,4,5]&quot;</code></pre>\n\n<p><strong>\u63d0\u793a:&nbsp;</strong>\u8fd9\u4e0e LeetCode \u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605&nbsp;<a href=\"/faq/#binary-tree\">LeetCode \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u683c\u5f0f</a>\u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u91c7\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458 / \u5168\u5c40 / \u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n", "tags_en": ["Tree", "Design"], "tags_cn": ["\u6811", "\u8bbe\u8ba1"], "difficulty_en": "Hard", "difficulty_cn": "\u56f0\u96be", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/** Encodes a tree to a single string. */\nchar* serialize(struct TreeNode* root) {\n    \n}\n\n/** Decodes your encoded data to tree. */\nstruct TreeNode* deserialize(char* data) {\n    \n}\n\n// Your functions will be called as such:\n// char* data = serialize(root);\n// deserialize(data);", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public string serialize(TreeNode root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(string data) {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# Encodes a tree to a single string.\n#\n# @param {TreeNode} root\n# @return {string}\ndef serialize(root)\n    \nend\n\n# Decodes your encoded data to tree.\n#\n# @param {string} data\n# @return {TreeNode}\ndef deserialize(data)\n    \nend\n\n\n# Your functions will be called as such:\n# deserialize(serialize(data))", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\n\nclass Codec {\n    func serialize(_ root: TreeNode?) -> String {\n        \n    }\n    \n    func deserialize(_ data: String) -> TreeNode? {\n        \n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// var ser = Codec()\n// var deser = Codec()\n// deser.deserialize(ser.serialize(root))", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\ntype Codec struct {\n    \n}\n\nfunc Constructor() Codec {\n    \n}\n\n// Serializes a tree to a single string.\nfunc (this *Codec) serialize(root *TreeNode) string {\n    \n}\n\n// Deserializes your encoded data to tree.\nfunc (this *Codec) deserialize(data string) *TreeNode {    \n    \n}\n\n\n/**\n * Your Codec object will be instantiated and called as such:\n * ser := Constructor();\n * deser := Constructor();\n * data := ser.serialize(root);\n * ans := deser.deserialize(data);\n */", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\n\nclass Codec {\n    // Encodes a list of strings to a single string.\n    def serialize(root: TreeNode): String = {\n        \n    }\n    \n    // Decodes a single string to a list of strings.\n    def deserialize(data: String): TreeNode = {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = new Codec()\n * var deser = new Codec()\n * val s = ser.serialize(root)\n * val ans = deser.deserialize(s)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\n\nclass Codec() {\n\t// Encodes a URL to a shortened URL.\n    fun serialize(root: TreeNode?): String {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    fun deserialize(data: String): TreeNode? {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * var ser = Codec()\n * var deser = Codec()\n * var data = ser.serialize(longUrl)\n * var ans = deser.deserialize(data)\n */", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nstruct Codec {\n\t\n}\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Codec {\n    fn new() -> Self {\n        \n    }\n\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\n        \n    }\n\t\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * let obj = Codec::new();\n * let data: String = obj.serialize(strs);\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\n */", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($value) { $this->val = $value; }\n * }\n */\n\nclass Codec {\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param TreeNode $root\n     * @return String\n     */\n    function serialize($root) {\n        \n    }\n  \n    /**\n     * @param String $data\n     * @return TreeNode\n     */\n    function deserialize($data) {\n        \n    }\n}\n\n/**\n * Your Codec object will be instantiated and called as such:\n * $ser = Codec();\n * $deser = Codec();\n * $data = $ser->serialize($root);\n * $ans = $deser->deserialize($data);\n */", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\n/*\n * Encodes a tree to a single string.\n */\nfunction serialize(root: TreeNode | null): string {\n\n};\n\n/*\n * Decodes your encoded data to tree.\n */\nfunction deserialize(data: string): TreeNode | null {\n\n};\n\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */", "__typename": "CodeSnippetNode"}]}, {"question_id": "0298", "frontend_question_id": "0298", "paid_only": true, "paid_only_cn": true, "url_cn": "https://leetcode-cn.com/problems/binary-tree-longest-consecutive-sequence", "url_en": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence", "relative_path_cn": "/leetcode/0200-0299/0298.Binary%20Tree%20Longest%20Consecutive%20Sequence/README.md", "relative_path_en": "/leetcode/0200-0299/0298.Binary%20Tree%20Longest%20Consecutive%20Sequence/README_EN.md", "title_cn": "\u4e8c\u53c9\u6811\u6700\u957f\u8fde\u7eed\u5e8f\u5217", "title_en": "Binary Tree Longest Consecutive Sequence", "question_title_slug": "binary-tree-longest-consecutive-sequence", "content_en": null, "content_cn": null, "tags_en": ["Tree"], "tags_cn": ["\u6811"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": null}, {"question_id": "0299", "frontend_question_id": "0299", "paid_only": false, "paid_only_cn": false, "url_cn": "https://leetcode-cn.com/problems/bulls-and-cows", "url_en": "https://leetcode.com/problems/bulls-and-cows", "relative_path_cn": "/leetcode/0200-0299/0299.Bulls%20and%20Cows/README.md", "relative_path_en": "/leetcode/0200-0299/0299.Bulls%20and%20Cows/README_EN.md", "title_cn": "\u731c\u6570\u5b57\u6e38\u620f", "title_en": "Bulls and Cows", "question_title_slug": "bulls-and-cows", "content_en": "<p>You are playing the <strong><a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\">Bulls and Cows</a></strong> game with your friend.</p>\n\n<p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p>\n\n<ul>\n\t<li>The number of &quot;bulls&quot;, which are digits in the guess that are in the correct position.</li>\n\t<li>The number of &quot;cows&quot;, which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li>\n</ul>\n\n<p>Given the secret number <code>secret</code> and your friend&#39;s guess <code>guess</code>, return <em>the hint for your friend&#39;s guess</em>.</p>\n\n<p>The hint should be formatted as <code>&quot;xAyB&quot;</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\n<strong>Output:</strong> &quot;1A3B&quot;\n<strong>Explanation:</strong> Bulls are connected with a &#39;|&#39; and cows are underlined:\n&quot;1807&quot;\n  |\n&quot;<u>7</u>8<u>10</u>&quot;</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\n<strong>Output:</strong> &quot;1A1B&quot;\n<strong>Explanation:</strong> Bulls are connected with a &#39;|&#39; and cows are underlined:\n&quot;1123&quot;        &quot;1123&quot;\n  |      or     |\n&quot;01<u>1</u>1&quot;        &quot;011<u>1</u>&quot;\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1&quot;, guess = &quot;0&quot;\n<strong>Output:</strong> &quot;0A0B&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1&quot;, guess = &quot;1&quot;\n<strong>Output:</strong> &quot;1A0B&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li>\n\t<li><code>secret.length == guess.length</code></li>\n\t<li><code>secret</code> and <code>guess</code> consist of digits only.</li>\n</ul>\n", "content_cn": "<p>\u4f60\u5728\u548c\u670b\u53cb\u4e00\u8d77\u73a9 <a href=\"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&amp;fromid=12003488&amp;fr=aladdin\" target=\"_blank\">\u731c\u6570\u5b57\uff08Bulls and Cows\uff09</a>\u6e38\u620f\uff0c\u8be5\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u4f60\u5199\u51fa\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57\uff0c\u5e76\u8bf7\u670b\u53cb\u731c\u8fd9\u4e2a\u6570\u5b57\u662f\u591a\u5c11\u3002</li>\n\t<li>\u670b\u53cb\u6bcf\u731c\u6d4b\u4e00\u6b21\uff0c\u4f60\u5c31\u4f1a\u7ed9\u4ed6\u4e00\u4e2a\u63d0\u793a\uff0c\u544a\u8bc9\u4ed6\u7684\u731c\u6d4b\u6570\u5b57\u4e2d\u6709\u591a\u5c11\u4f4d\u5c5e\u4e8e\u6570\u5b57\u548c\u786e\u5207\u4f4d\u7f6e\u90fd\u731c\u5bf9\u4e86\uff08\u79f0\u4e3a&ldquo;Bulls&rdquo;, \u516c\u725b\uff09\uff0c\u6709\u591a\u5c11\u4f4d\u5c5e\u4e8e\u6570\u5b57\u731c\u5bf9\u4e86\u4f46\u662f\u4f4d\u7f6e\u4e0d\u5bf9\uff08\u79f0\u4e3a&ldquo;Cows&rdquo;, \u5976\u725b\uff09\u3002</li>\n\t<li>\u670b\u53cb\u6839\u636e\u63d0\u793a\u7ee7\u7eed\u731c\uff0c\u76f4\u5230\u731c\u51fa\u79d8\u5bc6\u6570\u5b57\u3002</li>\n</ol>\n\n<p>\u8bf7\u5199\u51fa\u4e00\u4e2a\u6839\u636e\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u8fd4\u56de\u63d0\u793a\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u4e3a <code>xAyB</code> \uff0c<code>x</code> \u548c <code>y</code> \u90fd\u662f\u6570\u5b57\uff0c<code>A</code> \u8868\u793a\u516c\u725b\uff0c\u7528&nbsp;<code>B</code>&nbsp;\u8868\u793a\u5976\u725b\u3002</p>\n\n<ul>\n\t<li><code>xA</code> \u8868\u793a\u6709 <code>x</code> \u4f4d\u6570\u5b57\u51fa\u73b0\u5728\u79d8\u5bc6\u6570\u5b57\u4e2d\uff0c\u4e14\u4f4d\u7f6e\u90fd\u4e0e\u79d8\u5bc6\u6570\u5b57\u4e00\u81f4\u3002</li>\n\t<li><code>yB</code> \u8868\u793a\u6709 <code>y</code> \u4f4d\u6570\u5b57\u51fa\u73b0\u5728\u79d8\u5bc6\u6570\u5b57\u4e2d\uff0c\u4f46\u4f4d\u7f6e\u4e0e\u79d8\u5bc6\u6570\u5b57\u4e0d\u4e00\u81f4\u3002</li>\n</ul>\n\n<p>\u8bf7\u6ce8\u610f\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u90fd\u53ef\u80fd\u542b\u6709\u91cd\u590d\u6570\u5b57\uff0c\u6bcf\u4f4d\u6570\u5b57\u53ea\u80fd\u7edf\u8ba1\u4e00\u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\n<strong>\u8f93\u51fa:</strong> &quot;1A3B&quot;\n<strong>\u89e3\u91ca:</strong> <code>1</code>&nbsp;\u516c\u725b\u548c&nbsp;<code>3</code>&nbsp;\u5976\u725b\u3002\u516c\u725b\u662f <code>8</code>\uff0c\u5976\u725b\u662f <code>0</code>, <code>1</code>&nbsp;\u548c <code>7</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\n<strong>\u8f93\u51fa:</strong> &quot;1A1B&quot;\n<strong>\u89e3\u91ca: </strong>\u670b\u53cb\u731c\u6d4b\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a <code>1</code>&nbsp;\u662f\u516c\u725b\uff0c\u7b2c\u4e8c\u4e2a\u6216\u7b2c\u4e09\u4e2a <code>1</code>&nbsp;\u53ef\u88ab\u89c6\u4e3a\u5976\u725b\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e: </strong>\u4f60\u53ef\u4ee5\u5047\u8bbe\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u90fd\u53ea\u5305\u542b\u6570\u5b57\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u957f\u5ea6\u6c38\u8fdc\u76f8\u7b49\u3002</p>\n", "tags_en": ["Hash Table"], "tags_cn": ["\u54c8\u5e0c\u8868"], "difficulty_en": "Medium", "difficulty_cn": "\u4e2d\u7b49", "code_snippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    string getHint(string secret, string guess) {\n\n    }\n};", "__typename": "CodeSnippetNode"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public String getHint(String secret, String guess) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def getHint(self, secret, guess):\n        \"\"\"\n        :type secret: str\n        :type guess: str\n        :rtype: str\n        \"\"\"", "__typename": "CodeSnippetNode"}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:", "__typename": "CodeSnippetNode"}, {"lang": "C", "langSlug": "c", "code": "\n\nchar * getHint(char * secret, char * guess){\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public string GetHint(string secret, string guess) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} secret\n * @param {string} guess\n * @return {string}\n */\nvar getHint = function(secret, guess) {\n\n};", "__typename": "CodeSnippetNode"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} secret\n# @param {String} guess\n# @return {String}\ndef get_hint(secret, guess)\n\nend", "__typename": "CodeSnippetNode"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func getHint(_ secret: String, _ guess: String) -> String {\n        \n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Go", "langSlug": "golang", "code": "func getHint(secret string, guess string) string {\n\n}", "__typename": "CodeSnippetNode"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def getHint(secret: String, guess: String): String = {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun getHint(secret: String, guess: String): String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn get_hint(secret: String, guess: String) -> String {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $secret\n     * @param String $guess\n     * @return String\n     */\n    function getHint($secret, $guess) {\n\n    }\n}", "__typename": "CodeSnippetNode"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function getHint(secret: string, guess: string): string {\n\n};", "__typename": "CodeSnippetNode"}]}]}